
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008800  08008800  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08008800  08008800  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008800  08008800  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08008808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e90  20000040  08008848  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ed0  08008848  00022ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019623  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fd9  00000000  00000000  00039693  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003c670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003dac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002abb9  00000000  00000000  0003ed88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d04  00000000  00000000  00069941  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001065ad  00000000  00000000  0007c645  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182bf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b8  00000000  00000000  00182c70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e28 	.word	0x08007e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08007e28 	.word	0x08007e28

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001e6:	f003 fff1 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80001ea:	200a      	movs	r0, #10
 80001ec:	f002 fb3a 	bl	8002864 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001fa:	f003 ffe7 	bl	80041cc <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 80001fe:	4b65      	ldr	r3, [pc, #404]	; (8000394 <ILI9488_Init+0x1bc>)
 8000200:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000204:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000206:	4b64      	ldr	r3, [pc, #400]	; (8000398 <ILI9488_Init+0x1c0>)
 8000208:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800020c:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 800020e:	20e0      	movs	r0, #224	; 0xe0
 8000210:	f000 fe94 	bl	8000f3c <writecommand>
	writedata(0x00);
 8000214:	2000      	movs	r0, #0
 8000216:	f000 ff15 	bl	8001044 <writedata>
	writedata(0x03);
 800021a:	2003      	movs	r0, #3
 800021c:	f000 ff12 	bl	8001044 <writedata>
	writedata(0x09);
 8000220:	2009      	movs	r0, #9
 8000222:	f000 ff0f 	bl	8001044 <writedata>
	writedata(0x08);
 8000226:	2008      	movs	r0, #8
 8000228:	f000 ff0c 	bl	8001044 <writedata>
	writedata(0x16);
 800022c:	2016      	movs	r0, #22
 800022e:	f000 ff09 	bl	8001044 <writedata>
	writedata(0x0A);
 8000232:	200a      	movs	r0, #10
 8000234:	f000 ff06 	bl	8001044 <writedata>
	writedata(0x3F);
 8000238:	203f      	movs	r0, #63	; 0x3f
 800023a:	f000 ff03 	bl	8001044 <writedata>
	writedata(0x78);
 800023e:	2078      	movs	r0, #120	; 0x78
 8000240:	f000 ff00 	bl	8001044 <writedata>
	writedata(0x4C);
 8000244:	204c      	movs	r0, #76	; 0x4c
 8000246:	f000 fefd 	bl	8001044 <writedata>
	writedata(0x09);
 800024a:	2009      	movs	r0, #9
 800024c:	f000 fefa 	bl	8001044 <writedata>
	writedata(0x0A);
 8000250:	200a      	movs	r0, #10
 8000252:	f000 fef7 	bl	8001044 <writedata>
	writedata(0x08);
 8000256:	2008      	movs	r0, #8
 8000258:	f000 fef4 	bl	8001044 <writedata>
	writedata(0x16);
 800025c:	2016      	movs	r0, #22
 800025e:	f000 fef1 	bl	8001044 <writedata>
	writedata(0x1A);
 8000262:	201a      	movs	r0, #26
 8000264:	f000 feee 	bl	8001044 <writedata>
	writedata(0x0F);
 8000268:	200f      	movs	r0, #15
 800026a:	f000 feeb 	bl	8001044 <writedata>

	writecommand(0XE1);
 800026e:	20e1      	movs	r0, #225	; 0xe1
 8000270:	f000 fe64 	bl	8000f3c <writecommand>
	writedata(0x00);
 8000274:	2000      	movs	r0, #0
 8000276:	f000 fee5 	bl	8001044 <writedata>
	writedata(0x16);
 800027a:	2016      	movs	r0, #22
 800027c:	f000 fee2 	bl	8001044 <writedata>
	writedata(0x19);
 8000280:	2019      	movs	r0, #25
 8000282:	f000 fedf 	bl	8001044 <writedata>
	writedata(0x03);
 8000286:	2003      	movs	r0, #3
 8000288:	f000 fedc 	bl	8001044 <writedata>
	writedata(0x0F);
 800028c:	200f      	movs	r0, #15
 800028e:	f000 fed9 	bl	8001044 <writedata>
	writedata(0x05);
 8000292:	2005      	movs	r0, #5
 8000294:	f000 fed6 	bl	8001044 <writedata>
	writedata(0x32);
 8000298:	2032      	movs	r0, #50	; 0x32
 800029a:	f000 fed3 	bl	8001044 <writedata>
	writedata(0x45);
 800029e:	2045      	movs	r0, #69	; 0x45
 80002a0:	f000 fed0 	bl	8001044 <writedata>
	writedata(0x46);
 80002a4:	2046      	movs	r0, #70	; 0x46
 80002a6:	f000 fecd 	bl	8001044 <writedata>
	writedata(0x04);
 80002aa:	2004      	movs	r0, #4
 80002ac:	f000 feca 	bl	8001044 <writedata>
	writedata(0x0E);
 80002b0:	200e      	movs	r0, #14
 80002b2:	f000 fec7 	bl	8001044 <writedata>
	writedata(0x0D);
 80002b6:	200d      	movs	r0, #13
 80002b8:	f000 fec4 	bl	8001044 <writedata>
	writedata(0x35);
 80002bc:	2035      	movs	r0, #53	; 0x35
 80002be:	f000 fec1 	bl	8001044 <writedata>
	writedata(0x37);
 80002c2:	2037      	movs	r0, #55	; 0x37
 80002c4:	f000 febe 	bl	8001044 <writedata>
	writedata(0x0F);
 80002c8:	200f      	movs	r0, #15
 80002ca:	f000 febb 	bl	8001044 <writedata>

	writecommand(0XC0);      //Power Control 1
 80002ce:	20c0      	movs	r0, #192	; 0xc0
 80002d0:	f000 fe34 	bl	8000f3c <writecommand>
	writedata(0x17);    //Vreg1out
 80002d4:	2017      	movs	r0, #23
 80002d6:	f000 feb5 	bl	8001044 <writedata>
	writedata(0x15);    //Verg2out
 80002da:	2015      	movs	r0, #21
 80002dc:	f000 feb2 	bl	8001044 <writedata>

	writecommand(0xC1);      //Power Control 2
 80002e0:	20c1      	movs	r0, #193	; 0xc1
 80002e2:	f000 fe2b 	bl	8000f3c <writecommand>
	writedata(0x41);    //VGH,VGL
 80002e6:	2041      	movs	r0, #65	; 0x41
 80002e8:	f000 feac 	bl	8001044 <writedata>

	writecommand(0xC5);      //Power Control 3
 80002ec:	20c5      	movs	r0, #197	; 0xc5
 80002ee:	f000 fe25 	bl	8000f3c <writecommand>
	writedata(0x00);
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 fea6 	bl	8001044 <writedata>
	writedata(0x12);    //Vcom
 80002f8:	2012      	movs	r0, #18
 80002fa:	f000 fea3 	bl	8001044 <writedata>
	writedata(0x80);
 80002fe:	2080      	movs	r0, #128	; 0x80
 8000300:	f000 fea0 	bl	8001044 <writedata>

	writecommand(0x36);      //Memory Access
 8000304:	2036      	movs	r0, #54	; 0x36
 8000306:	f000 fe19 	bl	8000f3c <writecommand>
	writedata(0x48);
 800030a:	2048      	movs	r0, #72	; 0x48
 800030c:	f000 fe9a 	bl	8001044 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 8000310:	2036      	movs	r0, #54	; 0x36
 8000312:	f000 fe13 	bl	8000f3c <writecommand>
	writedata(0x66); 	  //18 bit
 8000316:	2066      	movs	r0, #102	; 0x66
 8000318:	f000 fe94 	bl	8001044 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 800031c:	20b0      	movs	r0, #176	; 0xb0
 800031e:	f000 fe0d 	bl	8000f3c <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000322:	2080      	movs	r0, #128	; 0x80
 8000324:	f000 fe8e 	bl	8001044 <writedata>

	writecommand(0xB1);      //Frame rate
 8000328:	20b1      	movs	r0, #177	; 0xb1
 800032a:	f000 fe07 	bl	8000f3c <writecommand>
	writedata(0xA0);    //60Hz
 800032e:	20a0      	movs	r0, #160	; 0xa0
 8000330:	f000 fe88 	bl	8001044 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 8000334:	20b4      	movs	r0, #180	; 0xb4
 8000336:	f000 fe01 	bl	8000f3c <writecommand>
	writedata(0x02);    //2-dot
 800033a:	2002      	movs	r0, #2
 800033c:	f000 fe82 	bl	8001044 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000340:	20b6      	movs	r0, #182	; 0xb6
 8000342:	f000 fdfb 	bl	8000f3c <writecommand>

	writedata(0x02);    //MCU
 8000346:	2002      	movs	r0, #2
 8000348:	f000 fe7c 	bl	8001044 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 800034c:	2002      	movs	r0, #2
 800034e:	f000 fe79 	bl	8001044 <writedata>

	writecommand(0XE9);      // Set Image Functio
 8000352:	20e9      	movs	r0, #233	; 0xe9
 8000354:	f000 fdf2 	bl	8000f3c <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000358:	2000      	movs	r0, #0
 800035a:	f000 fe73 	bl	8001044 <writedata>

	writecommand(0xF7);      // Adjust Control
 800035e:	20f7      	movs	r0, #247	; 0xf7
 8000360:	f000 fdec 	bl	8000f3c <writecommand>
	writedata(0xA9);
 8000364:	20a9      	movs	r0, #169	; 0xa9
 8000366:	f000 fe6d 	bl	8001044 <writedata>
	writedata(0x51);
 800036a:	2051      	movs	r0, #81	; 0x51
 800036c:	f000 fe6a 	bl	8001044 <writedata>
	writedata(0x2C);
 8000370:	202c      	movs	r0, #44	; 0x2c
 8000372:	f000 fe67 	bl	8001044 <writedata>
	writedata(0x82);    // D7 stream, loose
 8000376:	2082      	movs	r0, #130	; 0x82
 8000378:	f000 fe64 	bl	8001044 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 800037c:	2011      	movs	r0, #17
 800037e:	f000 fddd 	bl	8000f3c <writecommand>

	HAL_Delay(120);
 8000382:	2078      	movs	r0, #120	; 0x78
 8000384:	f002 fa6e 	bl	8002864 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000388:	2029      	movs	r0, #41	; 0x29
 800038a:	f000 fdd7 	bl	8000f3c <writecommand>


}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20012c6a 	.word	0x20012c6a
 8000398:	20012c6e 	.word	0x20012c6e

0800039c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4604      	mov	r4, r0
 80003a4:	4608      	mov	r0, r1
 80003a6:	4611      	mov	r1, r2
 80003a8:	461a      	mov	r2, r3
 80003aa:	4623      	mov	r3, r4
 80003ac:	80fb      	strh	r3, [r7, #6]
 80003ae:	4603      	mov	r3, r0
 80003b0:	80bb      	strh	r3, [r7, #4]
 80003b2:	460b      	mov	r3, r1
 80003b4:	807b      	strh	r3, [r7, #2]
 80003b6:	4613      	mov	r3, r2
 80003b8:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 80003ba:	202a      	movs	r0, #42	; 0x2a
 80003bc:	f000 fdbe 	bl	8000f3c <writecommand>
	writedata(x0 >> 8);
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	0a1b      	lsrs	r3, r3, #8
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 fe3b 	bl	8001044 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fe36 	bl	8001044 <writedata>
	writedata(x1 >> 8);
 80003d8:	887b      	ldrh	r3, [r7, #2]
 80003da:	0a1b      	lsrs	r3, r3, #8
 80003dc:	b29b      	uxth	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fe2f 	bl	8001044 <writedata>
	writedata(x1 & 0xFF);     // XEND
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f000 fe2a 	bl	8001044 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 80003f0:	202b      	movs	r0, #43	; 0x2b
 80003f2:	f000 fda3 	bl	8000f3c <writecommand>
	writedata(y0 >> 8);
 80003f6:	88bb      	ldrh	r3, [r7, #4]
 80003f8:	0a1b      	lsrs	r3, r3, #8
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f000 fe20 	bl	8001044 <writedata>
	writedata(y0 & 0xff);     // YSTART
 8000404:	88bb      	ldrh	r3, [r7, #4]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fe1b 	bl	8001044 <writedata>
	writedata(y1 >> 8);
 800040e:	883b      	ldrh	r3, [r7, #0]
 8000410:	0a1b      	lsrs	r3, r3, #8
 8000412:	b29b      	uxth	r3, r3
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 fe14 	bl	8001044 <writedata>
	writedata(y1 & 0xff);     // YEND
 800041c:	883b      	ldrh	r3, [r7, #0]
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	f000 fe0f 	bl	8001044 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000426:	202c      	movs	r0, #44	; 0x2c
 8000428:	f000 fd88 	bl	8000f3c <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <setAddrWindow+0xb0>)
 8000434:	f003 feca 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2110      	movs	r1, #16
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <setAddrWindow+0xb0>)
 800043e:	f003 fec5 	bl	80041cc <HAL_GPIO_WritePin>
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	bd90      	pop	{r4, r7, pc}
 800044a:	bf00      	nop
 800044c:	48000800 	.word	0x48000800

08000450 <clearScreen>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}

void clearScreen(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	memset(image_buffer, 0, sizeof(image_buffer));
 8000454:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8000458:	2100      	movs	r1, #0
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <clearScreen+0x14>)
 800045c:	f006 ff8f 	bl	800737e <memset>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000005c 	.word	0x2000005c

08000468 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000468:	b490      	push	{r4, r7}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
 8000472:	460b      	mov	r3, r1
 8000474:	80bb      	strh	r3, [r7, #4]
 8000476:	4613      	mov	r3, r2
 8000478:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800047a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800047e:	2b00      	cmp	r3, #0
 8000480:	f2c0 809f 	blt.w	80005c2 <drawPixel+0x15a>
 8000484:	4b51      	ldr	r3, [pc, #324]	; (80005cc <drawPixel+0x164>)
 8000486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800048a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800048e:	429a      	cmp	r2, r3
 8000490:	f280 8097 	bge.w	80005c2 <drawPixel+0x15a>
 8000494:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000498:	2b00      	cmp	r3, #0
 800049a:	f2c0 8092 	blt.w	80005c2 <drawPixel+0x15a>
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <drawPixel+0x168>)
 80004a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	f280 808a 	bge.w	80005c2 <drawPixel+0x15a>
		return;
	IMG_BUF_SET(x, y, color);
 80004ae:	88fb      	ldrh	r3, [r7, #6]
 80004b0:	f003 0301 	and.w	r3, r3, #1
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d142      	bne.n	8000540 <drawPixel+0xd8>
 80004ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004be:	4613      	mov	r3, r2
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	011b      	lsls	r3, r3, #4
 80004c6:	4619      	mov	r1, r3
 80004c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004cc:	0fda      	lsrs	r2, r3, #31
 80004ce:	4413      	add	r3, r2
 80004d0:	105b      	asrs	r3, r3, #1
 80004d2:	b218      	sxth	r0, r3
 80004d4:	4603      	mov	r3, r0
 80004d6:	440b      	add	r3, r1
 80004d8:	4a3e      	ldr	r2, [pc, #248]	; (80005d4 <drawPixel+0x16c>)
 80004da:	5cd1      	ldrb	r1, [r2, r3]
 80004dc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004e0:	4613      	mov	r3, r2
 80004e2:	011b      	lsls	r3, r3, #4
 80004e4:	1a9b      	subs	r3, r3, r2
 80004e6:	011b      	lsls	r3, r3, #4
 80004e8:	461a      	mov	r2, r3
 80004ea:	4603      	mov	r3, r0
 80004ec:	4413      	add	r3, r2
 80004ee:	f001 020f 	and.w	r2, r1, #15
 80004f2:	b2d1      	uxtb	r1, r2
 80004f4:	4a37      	ldr	r2, [pc, #220]	; (80005d4 <drawPixel+0x16c>)
 80004f6:	54d1      	strb	r1, [r2, r3]
 80004f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80004fc:	4613      	mov	r3, r2
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	1a9b      	subs	r3, r3, r2
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	4618      	mov	r0, r3
 8000506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050a:	0fda      	lsrs	r2, r3, #31
 800050c:	4413      	add	r3, r2
 800050e:	105b      	asrs	r3, r3, #1
 8000510:	b219      	sxth	r1, r3
 8000512:	460b      	mov	r3, r1
 8000514:	4403      	add	r3, r0
 8000516:	4a2f      	ldr	r2, [pc, #188]	; (80005d4 <drawPixel+0x16c>)
 8000518:	5cd3      	ldrb	r3, [r2, r3]
 800051a:	b25a      	sxtb	r2, r3
 800051c:	887b      	ldrh	r3, [r7, #2]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b258      	sxtb	r0, r3
 8000526:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800052a:	4613      	mov	r3, r2
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	011b      	lsls	r3, r3, #4
 8000532:	461a      	mov	r2, r3
 8000534:	460b      	mov	r3, r1
 8000536:	4413      	add	r3, r2
 8000538:	b2c1      	uxtb	r1, r0
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <drawPixel+0x16c>)
 800053c:	54d1      	strb	r1, [r2, r3]
 800053e:	e041      	b.n	80005c4 <drawPixel+0x15c>
 8000540:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000544:	4613      	mov	r3, r2
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4619      	mov	r1, r3
 800054e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000552:	0fda      	lsrs	r2, r3, #31
 8000554:	4413      	add	r3, r2
 8000556:	105b      	asrs	r3, r3, #1
 8000558:	b218      	sxth	r0, r3
 800055a:	4603      	mov	r3, r0
 800055c:	440b      	add	r3, r1
 800055e:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <drawPixel+0x16c>)
 8000560:	5cd1      	ldrb	r1, [r2, r3]
 8000562:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000566:	4613      	mov	r3, r2
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	461a      	mov	r2, r3
 8000570:	4603      	mov	r3, r0
 8000572:	4413      	add	r3, r2
 8000574:	f021 020f 	bic.w	r2, r1, #15
 8000578:	b2d1      	uxtb	r1, r2
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <drawPixel+0x16c>)
 800057c:	54d1      	strb	r1, [r2, r3]
 800057e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000582:	4613      	mov	r3, r2
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	4619      	mov	r1, r3
 800058c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000590:	0fda      	lsrs	r2, r3, #31
 8000592:	4413      	add	r3, r2
 8000594:	105b      	asrs	r3, r3, #1
 8000596:	b21c      	sxth	r4, r3
 8000598:	4623      	mov	r3, r4
 800059a:	440b      	add	r3, r1
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <drawPixel+0x16c>)
 800059e:	5cd0      	ldrb	r0, [r2, r3]
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	b2d9      	uxtb	r1, r3
 80005a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005a8:	4613      	mov	r3, r2
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	461a      	mov	r2, r3
 80005b2:	4623      	mov	r3, r4
 80005b4:	4413      	add	r3, r2
 80005b6:	ea40 0201 	orr.w	r2, r0, r1
 80005ba:	b2d1      	uxtb	r1, r2
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <drawPixel+0x16c>)
 80005be:	54d1      	strb	r1, [r2, r3]
 80005c0:	e000      	b.n	80005c4 <drawPixel+0x15c>
		return;
 80005c2:	bf00      	nop

}
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc90      	pop	{r4, r7}
 80005ca:	4770      	bx	lr
 80005cc:	20012c6a 	.word	0x20012c6a
 80005d0:	20012c6e 	.word	0x20012c6e
 80005d4:	2000005c 	.word	0x2000005c

080005d8 <drawFastVLine>:
void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80005d8:	b490      	push	{r4, r7}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4604      	mov	r4, r0
 80005e0:	4608      	mov	r0, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	4623      	mov	r3, r4
 80005e8:	80fb      	strh	r3, [r7, #6]
 80005ea:	4603      	mov	r3, r0
 80005ec:	80bb      	strh	r3, [r7, #4]
 80005ee:	460b      	mov	r3, r1
 80005f0:	807b      	strh	r3, [r7, #2]
 80005f2:	4613      	mov	r3, r2
 80005f4:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) || (y >= _height))
 80005f6:	4b67      	ldr	r3, [pc, #412]	; (8000794 <drawFastVLine+0x1bc>)
 80005f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000600:	429a      	cmp	r2, r3
 8000602:	f280 80c1 	bge.w	8000788 <drawFastVLine+0x1b0>
 8000606:	4b64      	ldr	r3, [pc, #400]	; (8000798 <drawFastVLine+0x1c0>)
 8000608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	f280 80b9 	bge.w	8000788 <drawFastVLine+0x1b0>
		return;

	if ((y + h - 1) >= _height)
 8000616:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800061a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800061e:	4413      	add	r3, r2
 8000620:	3b01      	subs	r3, #1
 8000622:	4a5d      	ldr	r2, [pc, #372]	; (8000798 <drawFastVLine+0x1c0>)
 8000624:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000628:	4293      	cmp	r3, r2
 800062a:	db07      	blt.n	800063c <drawFastVLine+0x64>
		h = _height - y;
 800062c:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <drawFastVLine+0x1c0>)
 800062e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000632:	b29a      	uxth	r2, r3
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	b29b      	uxth	r3, r3
 800063a:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < h; ++i){
 800063c:	2300      	movs	r3, #0
 800063e:	81fb      	strh	r3, [r7, #14]
 8000640:	e09b      	b.n	800077a <drawFastVLine+0x1a2>
		IMG_BUF_SET(x, y+i, color);
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	b29b      	uxth	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d14a      	bne.n	80006e4 <drawFastVLine+0x10c>
 800064e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	441a      	add	r2, r3
 8000656:	4613      	mov	r3, r2
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	011b      	lsls	r3, r3, #4
 800065e:	4619      	mov	r1, r3
 8000660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000664:	0fda      	lsrs	r2, r3, #31
 8000666:	4413      	add	r3, r2
 8000668:	105b      	asrs	r3, r3, #1
 800066a:	b218      	sxth	r0, r3
 800066c:	4603      	mov	r3, r0
 800066e:	440b      	add	r3, r1
 8000670:	4a4a      	ldr	r2, [pc, #296]	; (800079c <drawFastVLine+0x1c4>)
 8000672:	5cd1      	ldrb	r1, [r2, r3]
 8000674:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	441a      	add	r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	011b      	lsls	r3, r3, #4
 8000684:	461a      	mov	r2, r3
 8000686:	4603      	mov	r3, r0
 8000688:	4413      	add	r3, r2
 800068a:	f001 020f 	and.w	r2, r1, #15
 800068e:	b2d1      	uxtb	r1, r2
 8000690:	4a42      	ldr	r2, [pc, #264]	; (800079c <drawFastVLine+0x1c4>)
 8000692:	54d1      	strb	r1, [r2, r3]
 8000694:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	441a      	add	r2, r3
 800069c:	4613      	mov	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	4618      	mov	r0, r3
 80006a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006aa:	0fda      	lsrs	r2, r3, #31
 80006ac:	4413      	add	r3, r2
 80006ae:	105b      	asrs	r3, r3, #1
 80006b0:	b219      	sxth	r1, r3
 80006b2:	460b      	mov	r3, r1
 80006b4:	4403      	add	r3, r0
 80006b6:	4a39      	ldr	r2, [pc, #228]	; (800079c <drawFastVLine+0x1c4>)
 80006b8:	5cd3      	ldrb	r3, [r2, r3]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	883b      	ldrh	r3, [r7, #0]
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b258      	sxtb	r0, r3
 80006c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	441a      	add	r2, r3
 80006ce:	4613      	mov	r3, r2
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	461a      	mov	r2, r3
 80006d8:	460b      	mov	r3, r1
 80006da:	4413      	add	r3, r2
 80006dc:	b2c1      	uxtb	r1, r0
 80006de:	4a2f      	ldr	r2, [pc, #188]	; (800079c <drawFastVLine+0x1c4>)
 80006e0:	54d1      	strb	r1, [r2, r3]
 80006e2:	e047      	b.n	8000774 <drawFastVLine+0x19c>
 80006e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	441a      	add	r2, r3
 80006ec:	4613      	mov	r3, r2
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	0fda      	lsrs	r2, r3, #31
 80006fc:	4413      	add	r3, r2
 80006fe:	105b      	asrs	r3, r3, #1
 8000700:	b218      	sxth	r0, r3
 8000702:	4603      	mov	r3, r0
 8000704:	440b      	add	r3, r1
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <drawFastVLine+0x1c4>)
 8000708:	5cd1      	ldrb	r1, [r2, r3]
 800070a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	441a      	add	r2, r3
 8000712:	4613      	mov	r3, r2
 8000714:	011b      	lsls	r3, r3, #4
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	461a      	mov	r2, r3
 800071c:	4603      	mov	r3, r0
 800071e:	4413      	add	r3, r2
 8000720:	f021 020f 	bic.w	r2, r1, #15
 8000724:	b2d1      	uxtb	r1, r2
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <drawFastVLine+0x1c4>)
 8000728:	54d1      	strb	r1, [r2, r3]
 800072a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	441a      	add	r2, r3
 8000732:	4613      	mov	r3, r2
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	4619      	mov	r1, r3
 800073c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000740:	0fda      	lsrs	r2, r3, #31
 8000742:	4413      	add	r3, r2
 8000744:	105b      	asrs	r3, r3, #1
 8000746:	b21c      	sxth	r4, r3
 8000748:	4623      	mov	r3, r4
 800074a:	440b      	add	r3, r1
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <drawFastVLine+0x1c4>)
 800074e:	5cd0      	ldrb	r0, [r2, r3]
 8000750:	883b      	ldrh	r3, [r7, #0]
 8000752:	b2d9      	uxtb	r1, r3
 8000754:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	441a      	add	r2, r3
 800075c:	4613      	mov	r3, r2
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	1a9b      	subs	r3, r3, r2
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	461a      	mov	r2, r3
 8000766:	4623      	mov	r3, r4
 8000768:	4413      	add	r3, r2
 800076a:	ea40 0201 	orr.w	r2, r0, r1
 800076e:	b2d1      	uxtb	r1, r2
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <drawFastVLine+0x1c4>)
 8000772:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < h; ++i){
 8000774:	89fb      	ldrh	r3, [r7, #14]
 8000776:	3301      	adds	r3, #1
 8000778:	81fb      	strh	r3, [r7, #14]
 800077a:	89fa      	ldrh	r2, [r7, #14]
 800077c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000780:	429a      	cmp	r2, r3
 8000782:	f6ff af5e 	blt.w	8000642 <drawFastVLine+0x6a>
 8000786:	e000      	b.n	800078a <drawFastVLine+0x1b2>
		return;
 8000788:	bf00      	nop
	//while (h--) {
	//	write16BitColor(color);
	//}
	//HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bc90      	pop	{r4, r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20012c6a 	.word	0x20012c6a
 8000798:	20012c6e 	.word	0x20012c6e
 800079c:	2000005c 	.word	0x2000005c

080007a0 <drawFastHLine>:
void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80007a0:	b490      	push	{r4, r7}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4604      	mov	r4, r0
 80007a8:	4608      	mov	r0, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	461a      	mov	r2, r3
 80007ae:	4623      	mov	r3, r4
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	4603      	mov	r3, r0
 80007b4:	80bb      	strh	r3, [r7, #4]
 80007b6:	460b      	mov	r3, r1
 80007b8:	807b      	strh	r3, [r7, #2]
 80007ba:	4613      	mov	r3, r2
 80007bc:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) || (y >= _height))
 80007be:	4b5e      	ldr	r3, [pc, #376]	; (8000938 <drawFastHLine+0x198>)
 80007c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	f280 80af 	bge.w	800092c <drawFastHLine+0x18c>
 80007ce:	4b5b      	ldr	r3, [pc, #364]	; (800093c <drawFastHLine+0x19c>)
 80007d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	f280 80a7 	bge.w	800092c <drawFastHLine+0x18c>
		return;
	if ((x + w - 1) >= _width)
 80007de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007e6:	4413      	add	r3, r2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4a53      	ldr	r2, [pc, #332]	; (8000938 <drawFastHLine+0x198>)
 80007ec:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007f0:	4293      	cmp	r3, r2
 80007f2:	db07      	blt.n	8000804 <drawFastHLine+0x64>
		w = _width - x;
 80007f4:	4b50      	ldr	r3, [pc, #320]	; (8000938 <drawFastHLine+0x198>)
 80007f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	b29b      	uxth	r3, r3
 8000802:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < w; ++i){
 8000804:	2300      	movs	r3, #0
 8000806:	81fb      	strh	r3, [r7, #14]
 8000808:	e089      	b.n	800091e <drawFastHLine+0x17e>
			IMG_BUF_SET(x+i, y, color);
 800080a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	4413      	add	r3, r2
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	2b00      	cmp	r3, #0
 8000818:	d140      	bne.n	800089c <drawFastHLine+0xfc>
 800081a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	4619      	mov	r1, r3
 8000828:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	4413      	add	r3, r2
 8000830:	0fda      	lsrs	r2, r3, #31
 8000832:	4413      	add	r3, r2
 8000834:	105b      	asrs	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	1853      	adds	r3, r2, r1
 800083a:	4941      	ldr	r1, [pc, #260]	; (8000940 <drawFastHLine+0x1a0>)
 800083c:	5cc8      	ldrb	r0, [r1, r3]
 800083e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	1a5b      	subs	r3, r3, r1
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	4413      	add	r3, r2
 800084c:	f000 020f 	and.w	r2, r0, #15
 8000850:	b2d1      	uxtb	r1, r2
 8000852:	4a3b      	ldr	r2, [pc, #236]	; (8000940 <drawFastHLine+0x1a0>)
 8000854:	54d1      	strb	r1, [r2, r3]
 8000856:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	1a9b      	subs	r3, r3, r2
 8000860:	011b      	lsls	r3, r3, #4
 8000862:	4619      	mov	r1, r3
 8000864:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000868:	89fb      	ldrh	r3, [r7, #14]
 800086a:	4413      	add	r3, r2
 800086c:	0fda      	lsrs	r2, r3, #31
 800086e:	4413      	add	r3, r2
 8000870:	105b      	asrs	r3, r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	1853      	adds	r3, r2, r1
 8000876:	4932      	ldr	r1, [pc, #200]	; (8000940 <drawFastHLine+0x1a0>)
 8000878:	5ccb      	ldrb	r3, [r1, r3]
 800087a:	b259      	sxtb	r1, r3
 800087c:	883b      	ldrh	r3, [r7, #0]
 800087e:	011b      	lsls	r3, r3, #4
 8000880:	b25b      	sxtb	r3, r3
 8000882:	430b      	orrs	r3, r1
 8000884:	b258      	sxtb	r0, r3
 8000886:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	1a5b      	subs	r3, r3, r1
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	4413      	add	r3, r2
 8000894:	b2c1      	uxtb	r1, r0
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <drawFastHLine+0x1a0>)
 8000898:	54d1      	strb	r1, [r2, r3]
 800089a:	e03d      	b.n	8000918 <drawFastHLine+0x178>
 800089c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008a0:	4613      	mov	r3, r2
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	4413      	add	r3, r2
 80008b2:	0fda      	lsrs	r2, r3, #31
 80008b4:	4413      	add	r3, r2
 80008b6:	105b      	asrs	r3, r3, #1
 80008b8:	461a      	mov	r2, r3
 80008ba:	1853      	adds	r3, r2, r1
 80008bc:	4920      	ldr	r1, [pc, #128]	; (8000940 <drawFastHLine+0x1a0>)
 80008be:	5cc8      	ldrb	r0, [r1, r3]
 80008c0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4413      	add	r3, r2
 80008ce:	f020 020f 	bic.w	r2, r0, #15
 80008d2:	b2d1      	uxtb	r1, r2
 80008d4:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <drawFastHLine+0x1a0>)
 80008d6:	54d1      	strb	r1, [r2, r3]
 80008d8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008dc:	4613      	mov	r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008ea:	89fb      	ldrh	r3, [r7, #14]
 80008ec:	4413      	add	r3, r2
 80008ee:	0fda      	lsrs	r2, r3, #31
 80008f0:	4413      	add	r3, r2
 80008f2:	105b      	asrs	r3, r3, #1
 80008f4:	461a      	mov	r2, r3
 80008f6:	1853      	adds	r3, r2, r1
 80008f8:	4911      	ldr	r1, [pc, #68]	; (8000940 <drawFastHLine+0x1a0>)
 80008fa:	5ccc      	ldrb	r4, [r1, r3]
 80008fc:	883b      	ldrh	r3, [r7, #0]
 80008fe:	b2d8      	uxtb	r0, r3
 8000900:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	1a5b      	subs	r3, r3, r1
 800090a:	011b      	lsls	r3, r3, #4
 800090c:	4413      	add	r3, r2
 800090e:	ea44 0200 	orr.w	r2, r4, r0
 8000912:	b2d1      	uxtb	r1, r2
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <drawFastHLine+0x1a0>)
 8000916:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < w; ++i){
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	3301      	adds	r3, #1
 800091c:	81fb      	strh	r3, [r7, #14]
 800091e:	89fa      	ldrh	r2, [r7, #14]
 8000920:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000924:	429a      	cmp	r2, r3
 8000926:	f6ff af70 	blt.w	800080a <drawFastHLine+0x6a>
 800092a:	e000      	b.n	800092e <drawFastHLine+0x18e>
		return;
 800092c:	bf00      	nop
		}


}
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bc90      	pop	{r4, r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20012c6a 	.word	0x20012c6a
 800093c:	20012c6e 	.word	0x20012c6e
 8000940:	2000005c 	.word	0x2000005c

08000944 <drawLine>:
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b087      	sub	sp, #28
 8000948:	af02      	add	r7, sp, #8
 800094a:	4604      	mov	r4, r0
 800094c:	4608      	mov	r0, r1
 800094e:	4611      	mov	r1, r2
 8000950:	461a      	mov	r2, r3
 8000952:	4623      	mov	r3, r4
 8000954:	80fb      	strh	r3, [r7, #6]
 8000956:	4603      	mov	r3, r0
 8000958:	80bb      	strh	r3, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
 800095e:	4613      	mov	r3, r2
 8000960:	803b      	strh	r3, [r7, #0]
	 if (x0 == x1) {
 8000962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000966:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800096a:	429a      	cmp	r2, r3
 800096c:	d11a      	bne.n	80009a4 <drawLine+0x60>
	    if (y0 > y1)
 800096e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000972:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000976:	429a      	cmp	r2, r3
 8000978:	dd05      	ble.n	8000986 <drawLine+0x42>
	      _swap_int16_t(y0, y1);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	81bb      	strh	r3, [r7, #12]
 800097e:	883b      	ldrh	r3, [r7, #0]
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	89bb      	ldrh	r3, [r7, #12]
 8000984:	803b      	strh	r3, [r7, #0]
	    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8000986:	883a      	ldrh	r2, [r7, #0]
 8000988:	88bb      	ldrh	r3, [r7, #4]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	b29b      	uxth	r3, r3
 8000992:	b21a      	sxth	r2, r3
 8000994:	8c3b      	ldrh	r3, [r7, #32]
 8000996:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800099a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800099e:	f7ff fe1b 	bl	80005d8 <drawFastVLine>

	    writeLine(x0, y0, x1, y1, color);

	  }

}
 80009a2:	e02d      	b.n	8000a00 <drawLine+0xbc>
	  } else if (y0 == y1) {
 80009a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80009a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d11a      	bne.n	80009e6 <drawLine+0xa2>
	    if (x0 > x1)
 80009b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dd05      	ble.n	80009c8 <drawLine+0x84>
	      _swap_int16_t(x0, x1);
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	81fb      	strh	r3, [r7, #14]
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	80fb      	strh	r3, [r7, #6]
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	807b      	strh	r3, [r7, #2]
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	3301      	adds	r3, #1
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	b21a      	sxth	r2, r3
 80009d6:	8c3b      	ldrh	r3, [r7, #32]
 80009d8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009e0:	f7ff fede 	bl	80007a0 <drawFastHLine>
}
 80009e4:	e00c      	b.n	8000a00 <drawLine+0xbc>
	    writeLine(x0, y0, x1, y1, color);
 80009e6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80009ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80009ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009f6:	8c3b      	ldrh	r3, [r7, #32]
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	4623      	mov	r3, r4
 80009fc:	f000 f804 	bl	8000a08 <writeLine>
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}

08000a08 <writeLine>:
void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color) {
 8000a08:	b490      	push	{r4, r7}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4604      	mov	r4, r0
 8000a10:	4608      	mov	r0, r1
 8000a12:	4611      	mov	r1, r2
 8000a14:	461a      	mov	r2, r3
 8000a16:	4623      	mov	r3, r4
 8000a18:	80fb      	strh	r3, [r7, #6]
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80bb      	strh	r3, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	807b      	strh	r3, [r7, #2]
 8000a22:	4613      	mov	r3, r2
 8000a24:	803b      	strh	r3, [r7, #0]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000a26:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a38:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000a3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a40:	1acb      	subs	r3, r1, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bfb8      	it	lt
 8000a46:	425b      	neglt	r3, r3
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	bfcc      	ite	gt
 8000a4c:	2301      	movgt	r3, #1
 8000a4e:	2300      	movle	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000a54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00b      	beq.n	8000a74 <writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	833b      	strh	r3, [r7, #24]
 8000a60:	88bb      	ldrh	r3, [r7, #4]
 8000a62:	80fb      	strh	r3, [r7, #6]
 8000a64:	8b3b      	ldrh	r3, [r7, #24]
 8000a66:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	82fb      	strh	r3, [r7, #22]
 8000a6c:	883b      	ldrh	r3, [r7, #0]
 8000a6e:	807b      	strh	r3, [r7, #2]
 8000a70:	8afb      	ldrh	r3, [r7, #22]
 8000a72:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000a74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dd0b      	ble.n	8000a98 <writeLine+0x90>
    _swap_int16_t(x0, x1);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	82bb      	strh	r3, [r7, #20]
 8000a84:	887b      	ldrh	r3, [r7, #2]
 8000a86:	80fb      	strh	r3, [r7, #6]
 8000a88:	8abb      	ldrh	r3, [r7, #20]
 8000a8a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	827b      	strh	r3, [r7, #18]
 8000a90:	883b      	ldrh	r3, [r7, #0]
 8000a92:	80bb      	strh	r3, [r7, #4]
 8000a94:	8a7b      	ldrh	r3, [r7, #18]
 8000a96:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000a98:	887a      	ldrh	r2, [r7, #2]
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000aa2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bfb8      	it	lt
 8000ab0:	425b      	neglt	r3, r3
 8000ab2:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000ab4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ab8:	0fda      	lsrs	r2, r3, #31
 8000aba:	4413      	add	r3, r2
 8000abc:	105b      	asrs	r3, r3, #1
 8000abe:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000ac0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ac4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	da02      	bge.n	8000ad2 <writeLine+0xca>
    ystep = 1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	83bb      	strh	r3, [r7, #28]
 8000ad0:	e134      	b.n	8000d3c <writeLine+0x334>
  } else {
    ystep = -1;
 8000ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad6:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 8000ad8:	e130      	b.n	8000d3c <writeLine+0x334>
    if (steep) {
 8000ada:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 808a 	beq.w	8000bf8 <writeLine+0x1f0>
      //drawPixel(y0, x0, color);
    	IMG_BUF_SET(y0, x0, color)
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d142      	bne.n	8000b76 <writeLine+0x16e>
 8000af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000af4:	4613      	mov	r3, r2
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	1a9b      	subs	r3, r3, r2
 8000afa:	011b      	lsls	r3, r3, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b02:	0fda      	lsrs	r2, r3, #31
 8000b04:	4413      	add	r3, r2
 8000b06:	105b      	asrs	r3, r3, #1
 8000b08:	b218      	sxth	r0, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	440b      	add	r3, r1
 8000b0e:	4a91      	ldr	r2, [pc, #580]	; (8000d54 <writeLine+0x34c>)
 8000b10:	5cd1      	ldrb	r1, [r2, r3]
 8000b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b16:	4613      	mov	r3, r2
 8000b18:	011b      	lsls	r3, r3, #4
 8000b1a:	1a9b      	subs	r3, r3, r2
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4603      	mov	r3, r0
 8000b22:	4413      	add	r3, r2
 8000b24:	f001 020f 	and.w	r2, r1, #15
 8000b28:	b2d1      	uxtb	r1, r2
 8000b2a:	4a8a      	ldr	r2, [pc, #552]	; (8000d54 <writeLine+0x34c>)
 8000b2c:	54d1      	strb	r1, [r2, r3]
 8000b2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b32:	4613      	mov	r3, r2
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	1a9b      	subs	r3, r3, r2
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b40:	0fda      	lsrs	r2, r3, #31
 8000b42:	4413      	add	r3, r2
 8000b44:	105b      	asrs	r3, r3, #1
 8000b46:	b219      	sxth	r1, r3
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4403      	add	r3, r0
 8000b4c:	4a81      	ldr	r2, [pc, #516]	; (8000d54 <writeLine+0x34c>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000b54:	011b      	lsls	r3, r3, #4
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b258      	sxtb	r0, r3
 8000b5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	1a9b      	subs	r3, r3, r2
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	461a      	mov	r2, r3
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b2c1      	uxtb	r1, r0
 8000b70:	4a78      	ldr	r2, [pc, #480]	; (8000d54 <writeLine+0x34c>)
 8000b72:	54d1      	strb	r1, [r2, r3]
 8000b74:	e0c9      	b.n	8000d0a <writeLine+0x302>
 8000b76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	1a9b      	subs	r3, r3, r2
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b88:	0fda      	lsrs	r2, r3, #31
 8000b8a:	4413      	add	r3, r2
 8000b8c:	105b      	asrs	r3, r3, #1
 8000b8e:	b218      	sxth	r0, r3
 8000b90:	4603      	mov	r3, r0
 8000b92:	440b      	add	r3, r1
 8000b94:	4a6f      	ldr	r2, [pc, #444]	; (8000d54 <writeLine+0x34c>)
 8000b96:	5cd1      	ldrb	r1, [r2, r3]
 8000b98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4413      	add	r3, r2
 8000baa:	f021 020f 	bic.w	r2, r1, #15
 8000bae:	b2d1      	uxtb	r1, r2
 8000bb0:	4a68      	ldr	r2, [pc, #416]	; (8000d54 <writeLine+0x34c>)
 8000bb2:	54d1      	strb	r1, [r2, r3]
 8000bb4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc6:	0fda      	lsrs	r2, r3, #31
 8000bc8:	4413      	add	r3, r2
 8000bca:	105b      	asrs	r3, r3, #1
 8000bcc:	b21c      	sxth	r4, r3
 8000bce:	4623      	mov	r3, r4
 8000bd0:	440b      	add	r3, r1
 8000bd2:	4a60      	ldr	r2, [pc, #384]	; (8000d54 <writeLine+0x34c>)
 8000bd4:	5cd0      	ldrb	r0, [r2, r3]
 8000bd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bd8:	b2d9      	uxtb	r1, r3
 8000bda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bde:	4613      	mov	r3, r2
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	461a      	mov	r2, r3
 8000be8:	4623      	mov	r3, r4
 8000bea:	4413      	add	r3, r2
 8000bec:	ea40 0201 	orr.w	r2, r0, r1
 8000bf0:	b2d1      	uxtb	r1, r2
 8000bf2:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <writeLine+0x34c>)
 8000bf4:	54d1      	strb	r1, [r2, r3]
 8000bf6:	e088      	b.n	8000d0a <writeLine+0x302>
    } else {
      //drawPixel(x0, y0, color);
    	IMG_BUF_SET(x0, y0, color)
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d142      	bne.n	8000c8a <writeLine+0x282>
 8000c04:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	0fda      	lsrs	r2, r3, #31
 8000c18:	4413      	add	r3, r2
 8000c1a:	105b      	asrs	r3, r3, #1
 8000c1c:	b218      	sxth	r0, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	440b      	add	r3, r1
 8000c22:	4a4c      	ldr	r2, [pc, #304]	; (8000d54 <writeLine+0x34c>)
 8000c24:	5cd1      	ldrb	r1, [r2, r3]
 8000c26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	461a      	mov	r2, r3
 8000c34:	4603      	mov	r3, r0
 8000c36:	4413      	add	r3, r2
 8000c38:	f001 020f 	and.w	r2, r1, #15
 8000c3c:	b2d1      	uxtb	r1, r2
 8000c3e:	4a45      	ldr	r2, [pc, #276]	; (8000d54 <writeLine+0x34c>)
 8000c40:	54d1      	strb	r1, [r2, r3]
 8000c42:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	1a9b      	subs	r3, r3, r2
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	0fda      	lsrs	r2, r3, #31
 8000c56:	4413      	add	r3, r2
 8000c58:	105b      	asrs	r3, r3, #1
 8000c5a:	b219      	sxth	r1, r3
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	4403      	add	r3, r0
 8000c60:	4a3c      	ldr	r2, [pc, #240]	; (8000d54 <writeLine+0x34c>)
 8000c62:	5cd3      	ldrb	r3, [r2, r3]
 8000c64:	b25a      	sxtb	r2, r3
 8000c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c68:	011b      	lsls	r3, r3, #4
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b258      	sxtb	r0, r3
 8000c70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	011b      	lsls	r3, r3, #4
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4413      	add	r3, r2
 8000c82:	b2c1      	uxtb	r1, r0
 8000c84:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <writeLine+0x34c>)
 8000c86:	54d1      	strb	r1, [r2, r3]
 8000c88:	e03f      	b.n	8000d0a <writeLine+0x302>
 8000c8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	4619      	mov	r1, r3
 8000c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9c:	0fda      	lsrs	r2, r3, #31
 8000c9e:	4413      	add	r3, r2
 8000ca0:	105b      	asrs	r3, r3, #1
 8000ca2:	b218      	sxth	r0, r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	440b      	add	r3, r1
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <writeLine+0x34c>)
 8000caa:	5cd1      	ldrb	r1, [r2, r3]
 8000cac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f021 020f 	bic.w	r2, r1, #15
 8000cc2:	b2d1      	uxtb	r1, r2
 8000cc4:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <writeLine+0x34c>)
 8000cc6:	54d1      	strb	r1, [r2, r3]
 8000cc8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cda:	0fda      	lsrs	r2, r3, #31
 8000cdc:	4413      	add	r3, r2
 8000cde:	105b      	asrs	r3, r3, #1
 8000ce0:	b21c      	sxth	r4, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	440b      	add	r3, r1
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <writeLine+0x34c>)
 8000ce8:	5cd0      	ldrb	r0, [r2, r3]
 8000cea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cec:	b2d9      	uxtb	r1, r3
 8000cee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4623      	mov	r3, r4
 8000cfe:	4413      	add	r3, r2
 8000d00:	ea40 0201 	orr.w	r2, r0, r1
 8000d04:	b2d1      	uxtb	r1, r2
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <writeLine+0x34c>)
 8000d08:	54d1      	strb	r1, [r2, r3]
    }
    err -= dy;
 8000d0a:	8bfa      	ldrh	r2, [r7, #30]
 8000d0c:	89fb      	ldrh	r3, [r7, #14]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000d14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	da09      	bge.n	8000d30 <writeLine+0x328>
      y0 += ystep;
 8000d1c:	88ba      	ldrh	r2, [r7, #4]
 8000d1e:	8bbb      	ldrh	r3, [r7, #28]
 8000d20:	4413      	add	r3, r2
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000d26:	8bfa      	ldrh	r2, [r7, #30]
 8000d28:	8a3b      	ldrh	r3, [r7, #16]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f77f aec8 	ble.w	8000ada <writeLine+0xd2>
    }
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc90      	pop	{r4, r7}
 8000d52:	4770      	bx	lr
 8000d54:	2000005c 	.word	0x2000005c

08000d58 <fillRect>:
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	80fb      	strh	r3, [r7, #6]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80bb      	strh	r3, [r7, #4]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	807b      	strh	r3, [r7, #2]
 8000d72:	4613      	mov	r3, r2
 8000d74:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <fillRect+0x128>)
 8000d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	da78      	bge.n	8000e76 <fillRect+0x11e>
 8000d84:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <fillRect+0x12c>)
 8000d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	da71      	bge.n	8000e76 <fillRect+0x11e>
		return;
	if ((x + w - 1) >= _width)
 8000d92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	4a38      	ldr	r2, [pc, #224]	; (8000e80 <fillRect+0x128>)
 8000da0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	db07      	blt.n	8000db8 <fillRect+0x60>
		w = _width - x;
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <fillRect+0x128>)
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 8000db8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dbc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	; (8000e84 <fillRect+0x12c>)
 8000dc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	db07      	blt.n	8000dde <fillRect+0x86>
		h = _height - y;
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <fillRect+0x12c>)
 8000dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000dde:	88f8      	ldrh	r0, [r7, #6]
 8000de0:	88b9      	ldrh	r1, [r7, #4]
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	4413      	add	r3, r2
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	3b01      	subs	r3, #1
 8000dec:	b29c      	uxth	r4, r3
 8000dee:	88ba      	ldrh	r2, [r7, #4]
 8000df0:	883b      	ldrh	r3, [r7, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4622      	mov	r2, r4
 8000dfc:	f7ff face 	bl	800039c <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2110      	movs	r1, #16
 8000e04:	4820      	ldr	r0, [pc, #128]	; (8000e88 <fillRect+0x130>)
 8000e06:	f003 f9e1 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e10:	481d      	ldr	r0, [pc, #116]	; (8000e88 <fillRect+0x130>)
 8000e12:	f003 f9db 	bl	80041cc <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 8000e16:	883b      	ldrh	r3, [r7, #0]
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	e016      	b.n	8000e4a <fillRect+0xf2>
		for (x = w; x > 0; x--) {
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	80fb      	strh	r3, [r7, #6]
 8000e20:	e009      	b.n	8000e36 <fillRect+0xde>

			write16BitColor(color);
 8000e22:	8b3b      	ldrh	r3, [r7, #24]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f8ad 	bl	8000f84 <write16BitColor>
		for (x = w; x > 0; x--) {
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dcf1      	bgt.n	8000e22 <fillRect+0xca>
	for (y = h; y > 0; y--) {
 8000e3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3b01      	subs	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dce4      	bgt.n	8000e1c <fillRect+0xc4>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <fillRect+0x130>)
 8000e5a:	f003 f9b7 	bl	80041cc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2110      	movs	r1, #16
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <fillRect+0x130>)
 8000e64:	f003 f9b2 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <fillRect+0x130>)
 8000e70:	f003 f9ac 	bl	80041cc <HAL_GPIO_WritePin>
 8000e74:	e000      	b.n	8000e78 <fillRect+0x120>
		return;
 8000e76:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20012c6a 	.word	0x20012c6a
 8000e84:	20012c6e 	.word	0x20012c6e
 8000e88:	48000800 	.word	0x48000800

08000e8c <setRotation>:
void setRotation(uint8_t r)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 8000e96:	2036      	movs	r0, #54	; 0x36
 8000e98:	f000 f850 	bl	8000f3c <writecommand>
	rotation = r % 4; // can't be higher than 3
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <setRotation+0xa4>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <setRotation+0xa4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d83b      	bhi.n	8000f28 <setRotation+0x9c>
 8000eb0:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <setRotation+0x2c>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000ee1 	.word	0x08000ee1
 8000ec0:	08000ef9 	.word	0x08000ef9
 8000ec4:	08000f11 	.word	0x08000f11
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8000ec8:	2048      	movs	r0, #72	; 0x48
 8000eca:	f000 f8bb 	bl	8001044 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <setRotation+0xa8>)
 8000ed0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ed4:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <setRotation+0xac>)
 8000ed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000edc:	801a      	strh	r2, [r3, #0]
		break;
 8000ede:	e023      	b.n	8000f28 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f000 f8af 	bl	8001044 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <setRotation+0xa8>)
 8000ee8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000eec:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <setRotation+0xac>)
 8000ef0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ef4:	801a      	strh	r2, [r3, #0]
		break;
 8000ef6:	e017      	b.n	8000f28 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8000ef8:	2088      	movs	r0, #136	; 0x88
 8000efa:	f000 f8a3 	bl	8001044 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <setRotation+0xa8>)
 8000f00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f04:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <setRotation+0xac>)
 8000f08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f0c:	801a      	strh	r2, [r3, #0]
		break;
 8000f0e:	e00b      	b.n	8000f28 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000f10:	20e8      	movs	r0, #232	; 0xe8
 8000f12:	f000 f897 	bl	8001044 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <setRotation+0xa8>)
 8000f18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f1c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <setRotation+0xac>)
 8000f20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f24:	801a      	strh	r2, [r3, #0]
		break;
 8000f26:	bf00      	nop
	}

}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20012c66 	.word	0x20012c66
 8000f34:	20012c6a 	.word	0x20012c6a
 8000f38:	20012c6e 	.word	0x20012c6e

08000f3c <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2110      	movs	r1, #16
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <writecommand+0x40>)
 8000f4c:	f003 f93e 	bl	80041cc <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <writecommand+0x40>)
 8000f58:	f003 f938 	bl	80041cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 8000f5c:	1df9      	adds	r1, r7, #7
 8000f5e:	2301      	movs	r3, #1
 8000f60:	2201      	movs	r2, #1
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <writecommand+0x44>)
 8000f64:	f004 fcb3 	bl	80058ce <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <writecommand+0x40>)
 8000f70:	f003 f92c 	bl	80041cc <HAL_GPIO_WritePin>

}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	20012d88 	.word	0x20012d88

08000f84 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	0adb      	lsrs	r3, r3, #11
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	115b      	asrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	1a9b      	subs	r3, r3, r2
 8000fbc:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <write16BitColor+0xb4>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	441a      	add	r2, r3
 8000fc4:	1112      	asrs	r2, r2, #4
 8000fc6:	17db      	asrs	r3, r3, #31
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	1a9b      	subs	r3, r3, r2
 8000fd8:	4a18      	ldr	r2, [pc, #96]	; (800103c <write16BitColor+0xb8>)
 8000fda:	fb82 1203 	smull	r1, r2, r2, r3
 8000fde:	441a      	add	r2, r3
 8000fe0:	1152      	asrs	r2, r2, #5
 8000fe2:	17db      	asrs	r3, r3, #31
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4613      	mov	r3, r2
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	4a10      	ldr	r2, [pc, #64]	; (8001038 <write16BitColor+0xb4>)
 8000ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8000ffa:	441a      	add	r2, r3
 8000ffc:	1112      	asrs	r2, r2, #4
 8000ffe:	17db      	asrs	r3, r3, #31
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 8001006:	f107 010f 	add.w	r1, r7, #15
 800100a:	2301      	movs	r3, #1
 800100c:	2201      	movs	r2, #1
 800100e:	480c      	ldr	r0, [pc, #48]	; (8001040 <write16BitColor+0xbc>)
 8001010:	f004 fc5d 	bl	80058ce <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 8001014:	f107 010e 	add.w	r1, r7, #14
 8001018:	2301      	movs	r3, #1
 800101a:	2201      	movs	r2, #1
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <write16BitColor+0xbc>)
 800101e:	f004 fc56 	bl	80058ce <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 8001022:	f107 010d 	add.w	r1, r7, #13
 8001026:	2301      	movs	r3, #1
 8001028:	2201      	movs	r2, #1
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <write16BitColor+0xbc>)
 800102c:	f004 fc4f 	bl	80058ce <HAL_SPI_Transmit>


}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	84210843 	.word	0x84210843
 800103c:	82082083 	.word	0x82082083
 8001040:	20012d88 	.word	0x20012d88

08001044 <writedata>:
void writedata(uint8_t d)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2110      	movs	r1, #16
 8001052:	480c      	ldr	r0, [pc, #48]	; (8001084 <writedata+0x40>)
 8001054:	f003 f8ba 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	4809      	ldr	r0, [pc, #36]	; (8001084 <writedata+0x40>)
 8001060:	f003 f8b4 	bl	80041cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8001064:	1df9      	adds	r1, r7, #7
 8001066:	2301      	movs	r3, #1
 8001068:	2201      	movs	r2, #1
 800106a:	4807      	ldr	r0, [pc, #28]	; (8001088 <writedata+0x44>)
 800106c:	f004 fc2f 	bl	80058ce <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <writedata+0x40>)
 8001078:	f003 f8a8 	bl	80041cc <HAL_GPIO_WritePin>

}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	48000800 	.word	0x48000800
 8001088:	20012d88 	.word	0x20012d88

0800108c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	80fb      	strh	r3, [r7, #6]
 8001098:	466b      	mov	r3, sp
 800109a:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	f240 22ed 	movw	r2, #749	; 0x2ed
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d802      	bhi.n	80010b2 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
 80010b0:	e002      	b.n	80010b8 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80010b2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4867      	ldr	r0, [pc, #412]	; (800125c <ILI9341_Draw_Colour_Burst+0x1d0>)
 80010be:	f003 f885 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c8:	4864      	ldr	r0, [pc, #400]	; (800125c <ILI9341_Draw_Colour_Burst+0x1d0>)
 80010ca:	f003 f87f 	bl	80041cc <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	0adb      	lsrs	r3, r3, #11
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	115b      	asrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 80010f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010f6:	4613      	mov	r3, r2
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	4a58      	ldr	r2, [pc, #352]	; (8001260 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	441a      	add	r2, r3
 8001104:	1112      	asrs	r2, r2, #4
 8001106:	17db      	asrs	r3, r3, #31
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 800110e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001112:	4613      	mov	r3, r2
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	1a9b      	subs	r3, r3, r2
 8001118:	4a52      	ldr	r2, [pc, #328]	; (8001264 <ILI9341_Draw_Colour_Burst+0x1d8>)
 800111a:	fb82 1203 	smull	r1, r2, r2, r3
 800111e:	441a      	add	r2, r3
 8001120:	1152      	asrs	r2, r2, #5
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 800112a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800112e:	4613      	mov	r3, r2
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001136:	fb82 1203 	smull	r1, r2, r2, r3
 800113a:	441a      	add	r2, r3
 800113c:	1112      	asrs	r2, r2, #4
 800113e:	17db      	asrs	r3, r3, #31
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 8001146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001148:	4603      	mov	r3, r0
 800114a:	3b01      	subs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	4601      	mov	r1, r0
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	f04f 0400 	mov.w	r4, #0
 800115c:	00d4      	lsls	r4, r2, #3
 800115e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001162:	00cb      	lsls	r3, r1, #3
 8001164:	4601      	mov	r1, r0
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	f04f 0300 	mov.w	r3, #0
 800116e:	f04f 0400 	mov.w	r4, #0
 8001172:	00d4      	lsls	r4, r2, #3
 8001174:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001178:	00cb      	lsls	r3, r1, #3
 800117a:	1dc3      	adds	r3, r0, #7
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	ebad 0d03 	sub.w	sp, sp, r3
 8001184:	466b      	mov	r3, sp
 8001186:	3300      	adds	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
 800118e:	e014      	b.n	80011ba <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	4413      	add	r3, r2
 8001196:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800119a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	3301      	adds	r3, #1
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80011a6:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 80011a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011aa:	3302      	adds	r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80011b2:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	3303      	adds	r3, #3
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	429a      	cmp	r2, r3
 80011c0:	d3e6      	bcc.n	8001190 <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d4:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011da:	fbb3 f2f2 	udiv	r2, r3, r2
 80011de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e0:	fb01 f202 	mul.w	r2, r1, r2
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d018      	beq.n	8001220 <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	e011      	b.n	8001218 <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011fe:	b292      	uxth	r2, r2
 8001200:	4619      	mov	r1, r3
 8001202:	481a      	ldr	r0, [pc, #104]	; (800126c <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001204:	f004 fcd2 	bl	8005bac <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 8001208:	bf00      	nop
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0fb      	beq.n	800120a <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	3301      	adds	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3e9      	bcc.n	80011f4 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00e      	beq.n	8001244 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	b292      	uxth	r2, r2
 8001232:	4619      	mov	r1, r3
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001236:	f004 fcb9 	bl	8005bac <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 800123a:	bf00      	nop
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0fb      	beq.n	800123c <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <ILI9341_Draw_Colour_Burst+0x1d0>)
 800124c:	f002 ffbe 	bl	80041cc <HAL_GPIO_WritePin>
 8001250:	46ad      	mov	sp, r5
}
 8001252:	bf00      	nop
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bdb0      	pop	{r4, r5, r7, pc}
 800125a:	bf00      	nop
 800125c:	48000800 	.word	0x48000800
 8001260:	84210843 	.word	0x84210843
 8001264:	82082083 	.word	0x82082083
 8001268:	20000031 	.word	0x20000031
 800126c:	20012d88 	.word	0x20012d88

08001270 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800127a:	f240 133f 	movw	r3, #319	; 0x13f
 800127e:	f240 12df 	movw	r2, #479	; 0x1df
 8001282:	2100      	movs	r1, #0
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff f889 	bl	800039c <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fefb 	bl	800108c <ILI9341_Draw_Colour_Burst>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b08b      	sub	sp, #44	; 0x2c
 80012a2:	af02      	add	r7, sp, #8
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4603      	mov	r3, r0
 80012aa:	81fb      	strh	r3, [r7, #14]
 80012ac:	460b      	mov	r3, r1
 80012ae:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	777b      	strb	r3, [r7, #29]
 80012c0:	2300      	movs	r3, #0
 80012c2:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	763b      	strb	r3, [r7, #24]
 80012cc:	e09b      	b.n	8001406 <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	767b      	strb	r3, [r7, #25]
 80012d2:	e056      	b.n	8001382 <LCD_Char+0xe4>
		{
			if (bit == 0)
 80012d4:	7f3b      	ldrb	r3, [r7, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80012da:	8bfb      	ldrh	r3, [r7, #30]
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	83fa      	strh	r2, [r7, #30]
 80012e0:	461a      	mov	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 80012ee:	7f7a      	ldrb	r2, [r7, #29]
 80012f0:	7f3b      	ldrb	r3, [r7, #28]
 80012f2:	4013      	ands	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <LCD_Char+0x64>
 80012fa:	8b7b      	ldrh	r3, [r7, #26]
 80012fc:	3301      	adds	r3, #1
 80012fe:	837b      	strh	r3, [r7, #26]
 8001300:	e039      	b.n	8001376 <LCD_Char+0xd8>
			else if (set_pixels > 0)
 8001302:	8b7b      	ldrh	r3, [r7, #26]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d036      	beq.n	8001376 <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800130e:	461a      	mov	r2, r3
 8001310:	7e7b      	ldrb	r3, [r7, #25]
 8001312:	441a      	add	r2, r3
 8001314:	8b7b      	ldrh	r3, [r7, #26]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29a      	uxth	r2, r3
 800131a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800131e:	b29b      	uxth	r3, r3
 8001320:	fb12 f303 	smulbb	r3, r2, r3
 8001324:	b29a      	uxth	r2, r3
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4413      	add	r3, r2
 800132a:	b29b      	uxth	r3, r3
 800132c:	b218      	sxth	r0, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001334:	461a      	mov	r2, r3
 8001336:	7e3b      	ldrb	r3, [r7, #24]
 8001338:	4413      	add	r3, r2
 800133a:	b29a      	uxth	r2, r3
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001340:	b29b      	uxth	r3, r3
 8001342:	fb12 f303 	smulbb	r3, r2, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	89bb      	ldrh	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	b29b      	uxth	r3, r3
 800134e:	b219      	sxth	r1, r3
 8001350:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001354:	b29b      	uxth	r3, r3
 8001356:	8b7a      	ldrh	r2, [r7, #26]
 8001358:	fb12 f303 	smulbb	r3, r2, r3
 800135c:	b29b      	uxth	r3, r3
 800135e:	b21a      	sxth	r2, r3
 8001360:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001364:	b21c      	sxth	r4, r3
 8001366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001368:	b29b      	uxth	r3, r3
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4623      	mov	r3, r4
 800136e:	f7ff fcf3 	bl	8000d58 <fillRect>
				set_pixels = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001376:	7f3b      	ldrb	r3, [r7, #28]
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 800137c:	7e7b      	ldrb	r3, [r7, #25]
 800137e:	3301      	adds	r3, #1
 8001380:	767b      	strb	r3, [r7, #25]
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	789b      	ldrb	r3, [r3, #2]
 8001386:	7e7a      	ldrb	r2, [r7, #25]
 8001388:	429a      	cmp	r2, r3
 800138a:	d3a3      	bcc.n	80012d4 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 800138c:	8b7b      	ldrh	r3, [r7, #26]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d036      	beq.n	8001400 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001398:	461a      	mov	r2, r3
 800139a:	7e7b      	ldrb	r3, [r7, #25]
 800139c:	441a      	add	r2, r3
 800139e:	8b7b      	ldrh	r3, [r7, #26]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	fb12 f303 	smulbb	r3, r2, r3
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	89fb      	ldrh	r3, [r7, #14]
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b218      	sxth	r0, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80013be:	461a      	mov	r2, r3
 80013c0:	7e3b      	ldrb	r3, [r7, #24]
 80013c2:	4413      	add	r3, r2
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	fb12 f303 	smulbb	r3, r2, r3
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	89bb      	ldrh	r3, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	b219      	sxth	r1, r3
 80013da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013de:	b29b      	uxth	r3, r3
 80013e0:	8b7a      	ldrh	r2, [r7, #26]
 80013e2:	fb12 f303 	smulbb	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ee:	b21c      	sxth	r4, r3
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4623      	mov	r3, r4
 80013f8:	f7ff fcae 	bl	8000d58 <fillRect>
			set_pixels = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001400:	7e3b      	ldrb	r3, [r7, #24]
 8001402:	3301      	adds	r3, #1
 8001404:	763b      	strb	r3, [r7, #24]
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	78db      	ldrb	r3, [r3, #3]
 800140a:	7e3a      	ldrb	r2, [r7, #24]
 800140c:	429a      	cmp	r2, r3
 800140e:	f4ff af5e 	bcc.w	80012ce <LCD_Char+0x30>
		}
	}
}
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd90      	pop	{r4, r7, pc}

0800141a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800141a:	b590      	push	{r4, r7, lr}
 800141c:	b08f      	sub	sp, #60	; 0x3c
 800141e:	af02      	add	r7, sp, #8
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	4603      	mov	r3, r0
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	460b      	mov	r3, r1
 800142a:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	220c      	movs	r2, #12
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	f005 ff93 	bl	8007368 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001442:	2300      	movs	r3, #0
 8001444:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001446:	e056      	b.n	80014f6 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 8001454:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001458:	2b0a      	cmp	r3, #10
 800145a:	d10f      	bne.n	800147c <LCD_Font+0x62>
		{
			cursor_x = x;
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001460:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001464:	b29a      	uxth	r2, r3
 8001466:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800146a:	b29b      	uxth	r3, r3
 800146c:	fb12 f303 	smulbb	r3, r2, r3
 8001470:	b29a      	uxth	r2, r3
 8001472:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800147a:	e039      	b.n	80014f0 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 800147c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001480:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001484:	429a      	cmp	r2, r3
 8001486:	d333      	bcc.n	80014f0 <LCD_Font+0xd6>
 8001488:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800148c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001490:	429a      	cmp	r2, r3
 8001492:	d82d      	bhi.n	80014f0 <LCD_Font+0xd6>
 8001494:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001498:	2b0d      	cmp	r3, #13
 800149a:	d029      	beq.n	80014f0 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 800149c:	6a3a      	ldr	r2, [r7, #32]
 800149e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a2:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80014a6:	1a5b      	subs	r3, r3, r1
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	18d1      	adds	r1, r2, r3
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2208      	movs	r2, #8
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 ff58 	bl	8007368 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80014b8:	f107 041c 	add.w	r4, r7, #28
 80014bc:	f107 0214 	add.w	r2, r7, #20
 80014c0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80014c4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80014c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4623      	mov	r3, r4
 80014d4:	f7ff fee3 	bl	800129e <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80014d8:	7e3b      	ldrb	r3, [r7, #24]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	fb12 f303 	smulbb	r3, r2, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014ea:	4413      	add	r3, r2
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80014f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014f2:	3301      	adds	r3, #1
 80014f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80014f6:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f7fe fe65 	bl	80001c8 <strlen>
 80014fe:	4603      	mov	r3, r0
 8001500:	429c      	cmp	r4, r3
 8001502:	d3a1      	bcc.n	8001448 <LCD_Font+0x2e>
		}
	}
}
 8001504:	bf00      	nop
 8001506:	3734      	adds	r7, #52	; 0x34
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <imageRender>:
	{0xFF, 0, 0xFF},
	{0xFF, 0x55, 0xFF},
	{0xFF, 0xFF, 0xFF}
};

void imageRender(){
 800150c:	b580      	push	{r7, lr}
 800150e:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
 8001512:	af00      	add	r7, sp, #0

	setAddrWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001514:	f240 133f 	movw	r3, #319	; 0x13f
 8001518:	f240 12df 	movw	r2, #479	; 0x1df
 800151c:	2100      	movs	r1, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f7fe ff3c 	bl	800039c <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001524:	2201      	movs	r2, #1
 8001526:	2110      	movs	r1, #16
 8001528:	4873      	ldr	r0, [pc, #460]	; (80016f8 <imageRender+0x1ec>)
 800152a:	f002 fe4f 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001534:	4870      	ldr	r0, [pc, #448]	; (80016f8 <imageRender+0x1ec>)
 8001536:	f002 fe49 	bl	80041cc <HAL_GPIO_WritePin>

	uint8_t linebuff[LCD_WIDTH * 3 + 1];
	for (uint16_t i = 0; i < LCD_HEIGHT; i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	f8a7 35a6 	strh.w	r3, [r7, #1446]	; 0x5a6
 8001540:	e0c8      	b.n	80016d4 <imageRender+0x1c8>
		for (uint16_t j = 0; j < LCD_WIDTH/2; j++) {
 8001542:	2300      	movs	r3, #0
 8001544:	f8a7 35a4 	strh.w	r3, [r7, #1444]	; 0x5a4
 8001548:	e0b3      	b.n	80016b2 <imageRender+0x1a6>
			linebuff[pixcount] = (((color & 0x07E0) >> 5) * 255)
					/ 63;
			pixcount++;
			linebuff[pixcount] = ((color & 0x001F) * 255) / 31;
			pixcount++;*/
			uint8_t c1 = IMG_BUFF_GET(2*j, i);
 800154a:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 800154e:	4613      	mov	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4619      	mov	r1, r3
 8001558:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	0fda      	lsrs	r2, r3, #31
 8001560:	4413      	add	r3, r2
 8001562:	105b      	asrs	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	4a65      	ldr	r2, [pc, #404]	; (80016fc <imageRender+0x1f0>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	f887 35a3 	strb.w	r3, [r7, #1443]	; 0x5a3
			uint8_t c2 = IMG_BUFF_GET(2*j + 1, i);
 8001570:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	3301      	adds	r3, #1
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b00      	cmp	r3, #0
 800157e:	d113      	bne.n	80015a8 <imageRender+0x9c>
 8001580:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 8001584:	4613      	mov	r3, r2
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4619      	mov	r1, r3
 800158e:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	3301      	adds	r3, #1
 8001596:	0fda      	lsrs	r2, r3, #31
 8001598:	4413      	add	r3, r2
 800159a:	105b      	asrs	r3, r3, #1
 800159c:	440b      	add	r3, r1
 800159e:	4a57      	ldr	r2, [pc, #348]	; (80016fc <imageRender+0x1f0>)
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	e013      	b.n	80015d0 <imageRender+0xc4>
 80015a8:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 80015ac:	4613      	mov	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4619      	mov	r1, r3
 80015b6:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	3301      	adds	r3, #1
 80015be:	0fda      	lsrs	r2, r3, #31
 80015c0:	4413      	add	r3, r2
 80015c2:	105b      	asrs	r3, r3, #1
 80015c4:	440b      	add	r3, r1
 80015c6:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <imageRender+0x1f0>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	f887 35a2 	strb.w	r3, [r7, #1442]	; 0x5a2
			linebuff[2*3*j + 0 + 0] = colors[c1][0];
 80015d4:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 80015d8:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 80015dc:	460b      	mov	r3, r1
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	440b      	add	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4618      	mov	r0, r3
 80015e6:	4946      	ldr	r1, [pc, #280]	; (8001700 <imageRender+0x1f4>)
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	463b      	mov	r3, r7
 80015f4:	541a      	strb	r2, [r3, r0]
			linebuff[2*3*j + 0 + 1] = colors[c1][1];
 80015f6:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 80015fa:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 80015fe:	460b      	mov	r3, r1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	440b      	add	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	483d      	ldr	r0, [pc, #244]	; (8001700 <imageRender+0x1f4>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	4403      	add	r3, r0
 8001612:	3301      	adds	r3, #1
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	463b      	mov	r3, r7
 8001618:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 0 + 2] = colors[c1][2];
 800161a:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 800161e:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 8001622:	460b      	mov	r3, r1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	440b      	add	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	1c99      	adds	r1, r3, #2
 800162c:	4834      	ldr	r0, [pc, #208]	; (8001700 <imageRender+0x1f4>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	4403      	add	r3, r0
 8001636:	3302      	adds	r3, #2
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	463b      	mov	r3, r7
 800163c:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 0] = colors[c2][0];
 800163e:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 8001642:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 8001646:	460b      	mov	r3, r1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	440b      	add	r3, r1
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1cd9      	adds	r1, r3, #3
 8001650:	482b      	ldr	r0, [pc, #172]	; (8001700 <imageRender+0x1f4>)
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	4403      	add	r3, r0
 800165a:	781a      	ldrb	r2, [r3, #0]
 800165c:	463b      	mov	r3, r7
 800165e:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 1] = colors[c2][1];
 8001660:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 8001664:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 8001668:	460b      	mov	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	440b      	add	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	1d19      	adds	r1, r3, #4
 8001672:	4823      	ldr	r0, [pc, #140]	; (8001700 <imageRender+0x1f4>)
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	4403      	add	r3, r0
 800167c:	3301      	adds	r3, #1
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	463b      	mov	r3, r7
 8001682:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 2] = colors[c2][2];
 8001684:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 8001688:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 800168c:	460b      	mov	r3, r1
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	440b      	add	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	1d59      	adds	r1, r3, #5
 8001696:	481a      	ldr	r0, [pc, #104]	; (8001700 <imageRender+0x1f4>)
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	4403      	add	r3, r0
 80016a0:	3302      	adds	r3, #2
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	463b      	mov	r3, r7
 80016a6:	545a      	strb	r2, [r3, r1]
		for (uint16_t j = 0; j < LCD_WIDTH/2; j++) {
 80016a8:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 80016ac:	3301      	adds	r3, #1
 80016ae:	f8a7 35a4 	strh.w	r3, [r7, #1444]	; 0x5a4
 80016b2:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 80016b6:	2bef      	cmp	r3, #239	; 0xef
 80016b8:	f67f af47 	bls.w	800154a <imageRender+0x3e>
		}
//		HAL_SPI_Transmit(_spi->getHandler(), linebuff, w * 3, 100);
		HAL_SPI_Transmit(&hspi1, linebuff, LCD_WIDTH * 3, 100);
 80016bc:	4639      	mov	r1, r7
 80016be:	2364      	movs	r3, #100	; 0x64
 80016c0:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <imageRender+0x1f8>)
 80016c6:	f004 f902 	bl	80058ce <HAL_SPI_Transmit>
	for (uint16_t i = 0; i < LCD_HEIGHT; i++) {
 80016ca:	f8b7 35a6 	ldrh.w	r3, [r7, #1446]	; 0x5a6
 80016ce:	3301      	adds	r3, #1
 80016d0:	f8a7 35a6 	strh.w	r3, [r7, #1446]	; 0x5a6
 80016d4:	f8b7 35a6 	ldrh.w	r3, [r7, #1446]	; 0x5a6
 80016d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016dc:	f4ff af31 	bcc.w	8001542 <imageRender+0x36>

	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <imageRender+0x1ec>)
 80016e8:	f002 fd70 	bl	80041cc <HAL_GPIO_WritePin>
}
 80016ec:	bf00      	nop
 80016ee:	f507 67b5 	add.w	r7, r7, #1448	; 0x5a8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	48000800 	.word	0x48000800
 80016fc:	2000005c 	.word	0x2000005c
 8001700:	20000000 	.word	0x20000000
 8001704:	20012d88 	.word	0x20012d88

08001708 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	; 0x28
 800170c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800172a:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800172c:	4a2f      	ldr	r2, [pc, #188]	; (80017ec <MX_ADC1_Init+0xe4>)
 800172e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001748:	4b27      	ldr	r3, [pc, #156]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800174a:	2204      	movs	r2, #4
 800174c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001750:	2200      	movs	r2, #0
 8001752:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001756:	2201      	movs	r2, #1
 8001758:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800175c:	2201      	movs	r2, #1
 800175e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001760:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176e:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001774:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_ADC1_Init+0xe0>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178a:	4817      	ldr	r0, [pc, #92]	; (80017e8 <MX_ADC1_Init+0xe0>)
 800178c:	f001 fa18 	bl	8002bc0 <HAL_ADC_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001796:	f000 fb2f 	bl	8001df8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4810      	ldr	r0, [pc, #64]	; (80017e8 <MX_ADC1_Init+0xe0>)
 80017a6:	f001 ff73 	bl	8003690 <HAL_ADCEx_MultiModeConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017b0:	f000 fb22 	bl	8001df8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_ADC1_Init+0xe8>)
 80017b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b8:	2306      	movs	r3, #6
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017c0:	237f      	movs	r3, #127	; 0x7f
 80017c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017c4:	2304      	movs	r3, #4
 80017c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_ADC1_Init+0xe0>)
 80017d2:	f001 fb49 	bl	8002e68 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80017dc:	f000 fb0c 	bl	8001df8 <Error_Handler>
  }

}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20012c78 	.word	0x20012c78
 80017ec:	50040000 	.word	0x50040000
 80017f0:	08600004 	.word	0x08600004

080017f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_ADC_MspInit+0xc8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d14e      	bne.n	80018b4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 800181c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_ADC_MspInit+0xcc>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8001846:	2302      	movs	r3, #2
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800184a:	230b      	movs	r3, #11
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	481a      	ldr	r0, [pc, #104]	; (80018c4 <HAL_ADC_MspInit+0xd0>)
 800185a:	f002 fb0f 	bl	8003e7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_ADC_MspInit+0xd8>)
 8001862:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 800187e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001882:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 800188e:	2220      	movs	r2, #32
 8001890:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001898:	480b      	ldr	r0, [pc, #44]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 800189a:	f002 f8b7 	bl	8003a0c <HAL_DMA_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80018a4:	f000 faa8 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 80018ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80018ae:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_ADC_MspInit+0xd4>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	50040000 	.word	0x50040000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000800 	.word	0x48000800
 80018c8:	20012cdc 	.word	0x20012cdc
 80018cc:	40020430 	.word	0x40020430

080018d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_DMA_Init+0x60>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <MX_DMA_Init+0x60>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6493      	str	r3, [r2, #72]	; 0x48
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_DMA_Init+0x60>)
 80018e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MX_DMA_Init+0x60>)
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <MX_DMA_Init+0x60>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6493      	str	r3, [r2, #72]	; 0x48
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <MX_DMA_Init+0x60>)
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	200d      	movs	r0, #13
 800190c:	f002 f847 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001910:	200d      	movs	r0, #13
 8001912:	f002 f860 	bl	80039d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2100      	movs	r1, #0
 800191a:	203a      	movs	r0, #58	; 0x3a
 800191c:	f002 f83f 	bl	800399e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8001920:	203a      	movs	r0, #58	; 0x3a
 8001922:	f002 f858 	bl	80039d6 <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <MX_GPIO_Init+0x138>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <MX_GPIO_Init+0x138>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	4a3b      	ldr	r2, [pc, #236]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001986:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <MX_GPIO_Init+0x138>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199c:	f002 fc16 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80019a6:	4832      	ldr	r0, [pc, #200]	; (8001a70 <MX_GPIO_Init+0x13c>)
 80019a8:	f002 fc10 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b2:	4830      	ldr	r0, [pc, #192]	; (8001a74 <MX_GPIO_Init+0x140>)
 80019b4:	f002 fc0a 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <MX_GPIO_Init+0x144>)
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4828      	ldr	r0, [pc, #160]	; (8001a70 <MX_GPIO_Init+0x13c>)
 80019ce:	f002 fa55 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80019d2:	2301      	movs	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4822      	ldr	r0, [pc, #136]	; (8001a70 <MX_GPIO_Init+0x13c>)
 80019e6:	f002 fa49 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ea:	2320      	movs	r3, #32
 80019ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a04:	f002 fa3a 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001a08:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <MX_GPIO_Init+0x13c>)
 8001a22:	f002 fa2b 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480d      	ldr	r0, [pc, #52]	; (8001a74 <MX_GPIO_Init+0x140>)
 8001a40:	f002 fa1c 	bl	8003e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8001a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f002 fa0c 	bl	8003e7c <HAL_GPIO_Init>

}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400
 8001a78:	10210000 	.word	0x10210000

08001a7c <drawGrid>:
#define TFT_HEIGHT		((uint16_t)240)
uint8_t hOffset = (TFT_WIDTH - GRID_WIDTH)/2;
uint8_t vOffset = (TFT_HEIGHT - GRID_HEIGHT)/2;
uint8_t dHeight = GRID_HEIGHT/8;

void drawGrid(){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
			drawPixel(j, i, ILI9488_DARKGREY);
	}
	for(int j = 0; j < 480; j+=2)
				drawPixel(j, 319, ILI9488_DARKGREY);
				*/
	uint8_t hPacing = GRID_WIDTH / 12;
 8001a82:	2319      	movs	r3, #25
 8001a84:	71fb      	strb	r3, [r7, #7]
		uint8_t vPacing = GRID_HEIGHT / 8;
 8001a86:	231e      	movs	r3, #30
 8001a88:	71bb      	strb	r3, [r7, #6]
	for(int i = 1; i < 12; i++)
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e016      	b.n	8001abe <drawGrid+0x42>
			drawFastVLine(i * hPacing + hOffset, vOffset, GRID_HEIGHT, 1);
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	fb12 f303 	smulbb	r3, r2, r3
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <drawGrid+0x8c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b218      	sxth	r0, r3
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <drawGrid+0x90>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b219      	sxth	r1, r3
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	22f0      	movs	r2, #240	; 0xf0
 8001ab4:	f7fe fd90 	bl	80005d8 <drawFastVLine>
	for(int i = 1; i < 12; i++)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b0b      	cmp	r3, #11
 8001ac2:	dde5      	ble.n	8001a90 <drawGrid+0x14>

		for(int i = 1; i < 8; i++)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	e017      	b.n	8001afa <drawGrid+0x7e>
			drawFastHLine(hOffset, i * vPacing + vOffset, GRID_WIDTH, 1);
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <drawGrid+0x8c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b218      	sxth	r0, r3
 8001ad0:	79bb      	ldrb	r3, [r7, #6]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	fb12 f303 	smulbb	r3, r2, r3
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <drawGrid+0x90>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b219      	sxth	r1, r3
 8001aea:	2301      	movs	r3, #1
 8001aec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af0:	f7fe fe56 	bl	80007a0 <drawFastHLine>
		for(int i = 1; i < 8; i++)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	dde4      	ble.n	8001aca <drawGrid+0x4e>
		//for(int i = 1; i < 2*8; i++)
		//	drawFastHLine(hOffset + GRID_WIDTH/2 - 3, i * vPacing/2 + vOffset, 7, ILI9488_DARKGREY);

		//for(int i = 1; i < 2*12; i++)
		//	drawFastVLine(i * hPacing/2 + hOffset, vOffset + GRID_HEIGHT/2 - 4, 7, ILI9488_DARKGREY);
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000030 	.word	0x20000030
 8001b0c:	20012c5c 	.word	0x20012c5c

08001b10 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_SPI_TxCpltCallback+0x1c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000031 	.word	0x20000031

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	f5ad 6d37 	sub.w	sp, sp, #2928	; 0xb70
 8001b36:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  oscilloscope_channel CH1;
  oscilloscope_channel_init(&CH1);
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f962 	bl	8001e06 <oscilloscope_channel_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b42:	f000 fe13 	bl	800276c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b46:	f000 f8d1 	bl	8001cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b4a:	f7ff fef3 	bl	8001934 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b4e:	f7ff febf 	bl	80018d0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001b52:	f000 fa61 	bl	8002018 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001b56:	f000 fa9d 	bl	8002094 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001b5a:	f000 fcbd 	bl	80024d8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b5e:	f7ff fdd3 	bl	8001708 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b62:	f000 fc5f 	bl	8002424 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CH1.waveform , MEMORY_DEPTH);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b66:	213c      	movs	r1, #60	; 0x3c
 8001b68:	4857      	ldr	r0, [pc, #348]	; (8001cc8 <main+0x198>)
 8001b6a:	f004 fe1d 	bl	80067a8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001b6e:	210c      	movs	r1, #12
 8001b70:	4856      	ldr	r0, [pc, #344]	; (8001ccc <main+0x19c>)
 8001b72:	f004 fc6d 	bl	8006450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b76:	2108      	movs	r1, #8
 8001b78:	4854      	ldr	r0, [pc, #336]	; (8001ccc <main+0x19c>)
 8001b7a:	f004 fc69 	bl	8006450 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LCD_BRIGHTNESS); // 0-1000
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <main+0x19c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200); // 0-1000
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <main+0x19c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	22c8      	movs	r2, #200	; 0xc8
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c
  ILI9488_Init();
 8001b90:	f7fe fb22 	bl	80001d8 <ILI9488_Init>
  setRotation(1);
 8001b94:	2001      	movs	r0, #1
 8001b96:	f7ff f979 	bl	8000e8c <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fb68 	bl	8001270 <ILI9341_Fill_Screen>
  //drawGrid();

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	f240 12db 	movw	r2, #475	; 0x1db
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001bac:	f7fe fbf6 	bl	800039c <setAddrWindow>
  ILI9341_Draw_Colour_Burst(YELLOW, 35 * 18);
 8001bb0:	f240 2176 	movw	r1, #630	; 0x276
 8001bb4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001bb8:	f7ff fa68 	bl	800108c <ILI9341_Draw_Colour_Burst>
  LCD_Font(466, 15, "2", _Open_Sans_Bold_12  , 1, BLACK);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	4b42      	ldr	r3, [pc, #264]	; (8001cd0 <main+0x1a0>)
 8001bc6:	4a43      	ldr	r2, [pc, #268]	; (8001cd4 <main+0x1a4>)
 8001bc8:	210f      	movs	r1, #15
 8001bca:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001bce:	f7ff fc24 	bl	800141a <LCD_Font>

  HAL_Delay(500);
 8001bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bd6:	f000 fe45 	bl	8002864 <HAL_Delay>

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001bda:	2312      	movs	r3, #18
 8001bdc:	f240 12db 	movw	r2, #475	; 0x1db
 8001be0:	2101      	movs	r1, #1
 8001be2:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001be6:	f7fe fbd9 	bl	800039c <setAddrWindow>
  ILI9341_Draw_Colour_Burst(GREEN, 35 * 18);
 8001bea:	f240 2176 	movw	r1, #630	; 0x276
 8001bee:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001bf2:	f7ff fa4b 	bl	800108c <ILI9341_Draw_Colour_Burst>
  LCD_Font(440, 15, "Ch:", _Open_Sans_Bold_12  , 1, WHITE);
 8001bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <main+0x1a0>)
 8001c02:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <main+0x1a8>)
 8001c04:	210f      	movs	r1, #15
 8001c06:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8001c0a:	f7ff fc06 	bl	800141a <LCD_Font>
  LCD_Font(466, 15, "1", _Open_Sans_Bold_12  , 1, BLACK);
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <main+0x1a0>)
 8001c18:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <main+0x1ac>)
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001c20:	f7ff fbfb 	bl	800141a <LCD_Font>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int faza = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
	  //ILI9341_Fill_Screen(ILI9488_BLACK);
	  //drawGrid();
	  //drawLine(0, 0, 200, 300, 1);

	  //writeLine(10, 20, 400, 20, 2);
	  clearScreen();
 8001c2a:	f7fe fc11 	bl	8000450 <clearScreen>
	  drawGrid();
 8001c2e:	f7ff ff25 	bl	8001a7c <drawGrid>

	  for(int i = 0; i < 480; ++i){
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001c38:	e033      	b.n	8001ca2 <main+0x172>
	  	  	CH1.waveform[i] = 2000*sinf(0.05f*i + faza*0.1f) + 2000;
 8001c3a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ce0 <main+0x1b0>
 8001c4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4e:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001ce4 <main+0x1b4>
 8001c5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f005 fb91 	bl	8007390 <sinf>
 8001c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001c72:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001ce8 <main+0x1b8>
 8001c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ce8 <main+0x1b8>
 8001c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c86:	ee17 3a90 	vmov	r3, s15
 8001c8a:	b299      	uxth	r1, r3
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	f8d7 2b60 	ldr.w	r2, [r7, #2912]	; 0xb60
 8001c94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for(int i = 0; i < 480; ++i){
 8001c98:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001ca2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001ca6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001caa:	dbc6      	blt.n	8001c3a <main+0x10a>
	  	    }

	  draw_waveform(& CH1);
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f8bf 	bl	8001e34 <draw_waveform>
	  imageRender();
 8001cb6:	f7ff fc29 	bl	800150c <imageRender>
	    }
	  for(int i = 280; i < 480; ++i){
	  	  	//CH1.waveform[i] = 2000*sin(0.05*i + faza*0.1) + 2000;
	  	  	CH1.waveform[i] = 2000 + 2000;
	  	    }*/
	  faza++;
 8001cba:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
  {
 8001cc4:	e7b1      	b.n	8001c2a <main+0xfa>
 8001cc6:	bf00      	nop
 8001cc8:	20012e80 	.word	0x20012e80
 8001ccc:	20012e34 	.word	0x20012e34
 8001cd0:	080083e4 	.word	0x080083e4
 8001cd4:	08007e40 	.word	0x08007e40
 8001cd8:	08007e44 	.word	0x08007e44
 8001cdc:	08007e48 	.word	0x08007e48
 8001ce0:	3d4ccccd 	.word	0x3d4ccccd
 8001ce4:	3dcccccd 	.word	0x3dcccccd
 8001ce8:	44fa0000 	.word	0x44fa0000

08001cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b8      	sub	sp, #224	; 0xe0
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf6:	2244      	movs	r2, #68	; 0x44
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fb3f 	bl	800737e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d10:	463b      	mov	r3, r7
 8001d12:	2288      	movs	r2, #136	; 0x88
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 fb31 	bl	800737e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2a:	2310      	movs	r3, #16
 8001d2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d42:	230a      	movs	r3, #10
 8001d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fab0 	bl	80042c4 <HAL_RCC_OscConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d6a:	f000 f845 	bl	8001df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6e:	230f      	movs	r3, #15
 8001d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d74:	2303      	movs	r3, #3
 8001d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d90:	2104      	movs	r1, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fe7c 	bl	8004a90 <HAL_RCC_ClockConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d9e:	f000 f82b 	bl	8001df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dac:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001dae:	2302      	movs	r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001db6:	2308      	movs	r3, #8
 8001db8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dca:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dcc:	463b      	mov	r3, r7
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f82a 	bl	8004e28 <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001dda:	f000 f80d 	bl	8001df8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dde:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001de2:	f002 fa19 	bl	8004218 <HAL_PWREx_ControlVoltageScaling>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001dec:	f000 f804 	bl	8001df8 <Error_Handler>
  }
}
 8001df0:	bf00      	nop
 8001df2:	37e0      	adds	r7, #224	; 0xe0
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <oscilloscope_channel_init>:
 *      Author: Dominik
 */

#include "oscilloscope.h"

void oscilloscope_channel_init(oscilloscope_channel* ch){
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	ch->x_offset = 0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
	ch->y_offset = 0;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
	ch->y_scale = 0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <draw_waveform>:
			}
		}
	  }
}

void draw_waveform(oscilloscope_channel* ch){
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b091      	sub	sp, #68	; 0x44
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < 5; ++j){
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, BLACK);
	}
	erase_waveform(ch->waveform_display_previous, ch->x_offset);
*/
	ch->x_offset = -htim1.Instance->CNT;
 8001e3c:	4b74      	ldr	r3, [pc, #464]	; (8002010 <draw_waveform+0x1dc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	425b      	negs	r3, r3
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0

	for(int i = 0; i < 480; ++i)
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	; 0x34
 8001e54:	e00e      	b.n	8001e74 <draw_waveform+0x40>
				ch->waveform_display[i] = ch->waveform[i];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e5a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e62:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	460a      	mov	r2, r1
 8001e6c:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i < 480; ++i)
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	3301      	adds	r3, #1
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001e7a:	dbec      	blt.n	8001e56 <draw_waveform+0x22>
		for(int i = 0; i < 480-1; ++i){
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e80:	e04a      	b.n	8001f18 <draw_waveform+0xe4>
			//ch->waveform_display[i] = ch->waveform[i];
			int x0 = i;
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	61bb      	str	r3, [r7, #24]
			int x1 = i+1;
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
			int y0 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001e92:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	440b      	add	r3, r1
 8001ea2:	88db      	ldrh	r3, [r3, #6]
 8001ea4:	495b      	ldr	r1, [pc, #364]	; (8002014 <draw_waveform+0x1e0>)
 8001ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	613b      	str	r3, [r7, #16]
			int y1 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i+1]/40;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001eb8:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	440b      	add	r3, r1
 8001eca:	88db      	ldrh	r3, [r3, #6]
 8001ecc:	4951      	ldr	r1, [pc, #324]	; (8002014 <draw_waveform+0x1e0>)
 8001ece:	fba1 1303 	umull	r1, r3, r1, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	60fb      	str	r3, [r7, #12]
			drawLine(x0, y0, x1, y1, 10);
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	b218      	sxth	r0, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	b219      	sxth	r1, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	b21c      	sxth	r4, r3
 8001eea:	230a      	movs	r3, #10
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	4623      	mov	r3, r4
 8001ef0:	f7fe fd28 	bl	8000944 <drawLine>
			//drawLine(i, CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40, i+1,  CANVA_MIDDLE_V - ch->x_offset -ch->waveform_display[i+1]/40, GREEN);
			//drawPixel(i, CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40, GREEN);
			ch->waveform_display_previous[i] = ch->waveform_display[i];
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	88d9      	ldrh	r1, [r3, #6]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f06:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	460a      	mov	r2, r1
 8001f10:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < 480-1; ++i){
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	3301      	adds	r3, #1
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8001f1e:	ddb0      	ble.n	8001e82 <draw_waveform+0x4e>
		}
	// draw marker 0
	for(int j = 0; j < 5; ++j){
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	e010      	b.n	8001f48 <draw_waveform+0x114>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 2, 10);
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	b218      	sxth	r0, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f1c3 03a8 	rsb	r3, r3, #168	; 0xa8
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	220a      	movs	r2, #10
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fa93 	bl	8000468 <drawPixel>
	for(int j = 0; j < 5; ++j){
 8001f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f44:	3301      	adds	r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	ddeb      	ble.n	8001f26 <draw_waveform+0xf2>
		}
		for(int j = 0; j < 6; ++j){
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f52:	e010      	b.n	8001f76 <draw_waveform+0x142>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 1, 10);
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	b218      	sxth	r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	220a      	movs	r2, #10
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fa7c 	bl	8000468 <drawPixel>
		for(int j = 0; j < 6; ++j){
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	3301      	adds	r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	2b05      	cmp	r3, #5
 8001f7a:	ddeb      	ble.n	8001f54 <draw_waveform+0x120>
		}
		for(int j = 0; j < 7; ++j){
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e010      	b.n	8001fa4 <draw_waveform+0x170>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset, 10);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	b218      	sxth	r0, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	220a      	movs	r2, #10
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fa65 	bl	8000468 <drawPixel>
		for(int j = 0; j < 7; ++j){
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	ddeb      	ble.n	8001f82 <draw_waveform+0x14e>
		}
		for(int j = 0; j < 6; ++j){
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	e010      	b.n	8001fd2 <draw_waveform+0x19e>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 1, 10);
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	b218      	sxth	r0, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fa4e 	bl	8000468 <drawPixel>
		for(int j = 0; j < 6; ++j){
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b05      	cmp	r3, #5
 8001fd6:	ddeb      	ble.n	8001fb0 <draw_waveform+0x17c>
		}
		for(int j = 0; j < 5; ++j){
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	e010      	b.n	8002000 <draw_waveform+0x1cc>
				drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, 10);
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	b218      	sxth	r0, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	220a      	movs	r2, #10
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fa37 	bl	8000468 <drawPixel>
		for(int j = 0; j < 5; ++j){
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	2b04      	cmp	r3, #4
 8002004:	ddeb      	ble.n	8001fde <draw_waveform+0x1aa>
		}
}
 8002006:	bf00      	nop
 8002008:	373c      	adds	r7, #60	; 0x3c
 800200a:	46bd      	mov	sp, r7
 800200c:	bd90      	pop	{r4, r7, pc}
 800200e:	bf00      	nop
 8002010:	20012e80 	.word	0x20012e80
 8002014:	cccccccd 	.word	0xcccccccd

08002018 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <MX_SPI1_Init+0x74>)
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <MX_SPI1_Init+0x78>)
 8002020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <MX_SPI1_Init+0x74>)
 8002024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <MX_SPI1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002030:	4b16      	ldr	r3, [pc, #88]	; (800208c <MX_SPI1_Init+0x74>)
 8002032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002036:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_SPI1_Init+0x74>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_SPI1_Init+0x74>)
 8002040:	2200      	movs	r2, #0
 8002042:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_SPI1_Init+0x74>)
 8002046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800204a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_SPI1_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_SPI1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_SPI1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_SPI1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_SPI1_Init+0x74>)
 8002066:	2207      	movs	r2, #7
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_SPI1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_SPI1_Init+0x74>)
 8002072:	2208      	movs	r2, #8
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_SPI1_Init+0x74>)
 8002078:	f003 fb86 	bl	8005788 <HAL_SPI_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002082:	f7ff feb9 	bl	8001df8 <Error_Handler>
  }

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20012d88 	.word	0x20012d88
 8002090:	40013000 	.word	0x40013000

08002094 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_SPI2_Init+0x74>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <MX_SPI2_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_SPI2_Init+0x74>)
 80020a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_SPI2_Init+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_SPI2_Init+0x74>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <MX_SPI2_Init+0x74>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_SPI2_Init+0x74>)
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ca:	2218      	movs	r2, #24
 80020cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <MX_SPI2_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_SPI2_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <MX_SPI2_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_SPI2_Init+0x74>)
 80020e2:	2207      	movs	r2, #7
 80020e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <MX_SPI2_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <MX_SPI2_Init+0x74>)
 80020ee:	2208      	movs	r2, #8
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_SPI2_Init+0x74>)
 80020f4:	f003 fb48 	bl	8005788 <HAL_SPI_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f7ff fe7b 	bl	8001df8 <Error_Handler>
  }

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20012d24 	.word	0x20012d24
 800210c:	40003800 	.word	0x40003800

08002110 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a63      	ldr	r2, [pc, #396]	; (80022bc <HAL_SPI_MspInit+0x1ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d176      	bne.n	8002220 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002132:	4b63      	ldr	r3, [pc, #396]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002136:	4a62      	ldr	r2, [pc, #392]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800213c:	6613      	str	r3, [r2, #96]	; 0x60
 800213e:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	4a5c      	ldr	r2, [pc, #368]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002156:	4b5a      	ldr	r3, [pc, #360]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216e:	4b54      	ldr	r3, [pc, #336]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800217a:	23c0      	movs	r3, #192	; 0xc0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800218a:	2305      	movs	r3, #5
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002198:	f001 fe70 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800219c:	2308      	movs	r3, #8
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ac:	2305      	movs	r3, #5
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	4619      	mov	r1, r3
 80021b6:	4843      	ldr	r0, [pc, #268]	; (80022c4 <HAL_SPI_MspInit+0x1b4>)
 80021b8:	f001 fe60 	bl	8003e7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021be:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_SPI_MspInit+0x1bc>)
 80021c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80021c2:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021ca:	2210      	movs	r2, #16
 80021cc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80021f2:	4835      	ldr	r0, [pc, #212]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 80021f4:	f001 fc0a 	bl	8003a0c <HAL_DMA_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80021fe:	f7ff fdfb 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a30      	ldr	r2, [pc, #192]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
 8002208:	4a2f      	ldr	r2, [pc, #188]	; (80022c8 <HAL_SPI_MspInit+0x1b8>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2023      	movs	r0, #35	; 0x23
 8002214:	f001 fbc3 	bl	800399e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002218:	2023      	movs	r0, #35	; 0x23
 800221a:	f001 fbdc 	bl	80039d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800221e:	e049      	b.n	80022b4 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_SPI_MspInit+0x1c0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d144      	bne.n	80022b4 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_SPI_MspInit+0x1b0>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002272:	230c      	movs	r3, #12
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002282:	2305      	movs	r3, #5
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4811      	ldr	r0, [pc, #68]	; (80022d4 <HAL_SPI_MspInit+0x1c4>)
 800228e:	f001 fdf5 	bl	8003e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022a4:	2305      	movs	r3, #5
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <HAL_SPI_MspInit+0x1b4>)
 80022b0:	f001 fde4 	bl	8003e7c <HAL_GPIO_Init>
}
 80022b4:	bf00      	nop
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400
 80022c8:	20012dec 	.word	0x20012dec
 80022cc:	40020030 	.word	0x40020030
 80022d0:	40003800 	.word	0x40003800
 80022d4:	48000800 	.word	0x48000800

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	4b0f      	ldr	r3, [pc, #60]	; (800231c <HAL_MspInit+0x44>)
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <HAL_MspInit+0x44>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6613      	str	r3, [r2, #96]	; 0x60
 80022ea:	4b0c      	ldr	r3, [pc, #48]	; (800231c <HAL_MspInit+0x44>)
 80022ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_MspInit+0x44>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_MspInit+0x44>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6593      	str	r3, [r2, #88]	; 0x58
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_MspInit+0x44>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 fa56 	bl	8002824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel3_IRQHandler+0x10>)
 8002382:	f001 fc9c 	bl	8003cbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20012dec 	.word	0x20012dec

08002390 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <SPI1_IRQHandler+0x10>)
 8002396:	f003 fcfd 	bl	8005d94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20012d88 	.word	0x20012d88

080023a4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <DMA2_Channel3_IRQHandler+0x10>)
 80023aa:	f001 fc88 	bl	8003cbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20012cdc 	.word	0x20012cdc

080023b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <SystemInit+0x64>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a16      	ldr	r2, [pc, #88]	; (800241c <SystemInit+0x64>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <SystemInit+0x68>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a13      	ldr	r2, [pc, #76]	; (8002420 <SystemInit+0x68>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <SystemInit+0x68>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <SystemInit+0x68>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a0f      	ldr	r2, [pc, #60]	; (8002420 <SystemInit+0x68>)
 80023e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <SystemInit+0x68>)
 80023f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <SystemInit+0x68>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <SystemInit+0x68>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <SystemInit+0x68>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SystemInit+0x64>)
 800240a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240e:	609a      	str	r2, [r3, #8]
#endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00
 8002420:	40021000 	.word	0x40021000

08002424 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	2224      	movs	r2, #36	; 0x24
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f004 ffa3 	bl	800737e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	463b      	mov	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8002442:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <MX_TIM1_Init+0xac>)
 8002444:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <MX_TIM1_Init+0xb0>)
 8002446:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <MX_TIM1_Init+0xac>)
 800244a:	2200      	movs	r2, #0
 800244c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_TIM1_Init+0xac>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_TIM1_Init+0xac>)
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <MX_TIM1_Init+0xac>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_TIM1_Init+0xac>)
 8002464:	2200      	movs	r2, #0
 8002466:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <MX_TIM1_Init+0xac>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800246e:	2303      	movs	r3, #3
 8002470:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002476:	2301      	movs	r3, #1
 8002478:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002486:	2301      	movs	r3, #1
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002492:	f107 030c 	add.w	r3, r7, #12
 8002496:	4619      	mov	r1, r3
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_TIM1_Init+0xac>)
 800249a:	f004 f8df 	bl	800665c <HAL_TIM_Encoder_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80024a4:	f7ff fca8 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a8:	2300      	movs	r3, #0
 80024aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024b4:	463b      	mov	r3, r7
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_TIM1_Init+0xac>)
 80024ba:	f004 fea9 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80024c4:	f7ff fc98 	bl	8001df8 <Error_Handler>
  }

}
 80024c8:	bf00      	nop
 80024ca:	3730      	adds	r7, #48	; 0x30
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20012e80 	.word	0x20012e80
 80024d4:	40012c00 	.word	0x40012c00

080024d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]
 80024fa:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80024fc:	4b27      	ldr	r3, [pc, #156]	; (800259c <MX_TIM3_Init+0xc4>)
 80024fe:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <MX_TIM3_Init+0xc8>)
 8002500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <MX_TIM3_Init+0xc4>)
 8002504:	224f      	movs	r2, #79	; 0x4f
 8002506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	4b24      	ldr	r3, [pc, #144]	; (800259c <MX_TIM3_Init+0xc4>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <MX_TIM3_Init+0xc4>)
 8002510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002514:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <MX_TIM3_Init+0xc4>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800251c:	4b1f      	ldr	r3, [pc, #124]	; (800259c <MX_TIM3_Init+0xc4>)
 800251e:	2280      	movs	r2, #128	; 0x80
 8002520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002522:	481e      	ldr	r0, [pc, #120]	; (800259c <MX_TIM3_Init+0xc4>)
 8002524:	f003 ff3c 	bl	80063a0 <HAL_TIM_PWM_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800252e:	f7ff fc63 	bl	8001df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	4619      	mov	r1, r3
 8002540:	4816      	ldr	r0, [pc, #88]	; (800259c <MX_TIM3_Init+0xc4>)
 8002542:	f004 fe65 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800254c:	f7ff fc54 	bl	8001df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002550:	2360      	movs	r3, #96	; 0x60
 8002552:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002558:	2300      	movs	r3, #0
 800255a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	2208      	movs	r2, #8
 8002564:	4619      	mov	r1, r3
 8002566:	480d      	ldr	r0, [pc, #52]	; (800259c <MX_TIM3_Init+0xc4>)
 8002568:	f004 f9ac 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002572:	f7ff fc41 	bl	8001df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	220c      	movs	r2, #12
 800257a:	4619      	mov	r1, r3
 800257c:	4807      	ldr	r0, [pc, #28]	; (800259c <MX_TIM3_Init+0xc4>)
 800257e:	f004 f9a1 	bl	80068c4 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002588:	f7ff fc36 	bl	8001df8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <MX_TIM3_Init+0xc4>)
 800258e:	f000 f86d 	bl	800266c <HAL_TIM_MspPostInit>

}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20012e34 	.word	0x20012e34
 80025a0:	40000400 	.word	0x40000400

080025a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIM_Encoder_MspInit+0x80>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d129      	bne.n	800261a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d0:	6613      	str	r3, [r2, #96]	; 0x60
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4a11      	ldr	r2, [pc, #68]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ea:	4b0f      	ldr	r3, [pc, #60]	; (8002628 <HAL_TIM_Encoder_MspInit+0x84>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002600:	2301      	movs	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002608:	2301      	movs	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f001 fc31 	bl	8003e7c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800261a:	bf00      	nop
 800261c:	3728      	adds	r7, #40	; 0x28
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40021000 	.word	0x40021000

0800262c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_TIM_PWM_MspInit+0x38>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10b      	bne.n	8002656 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <HAL_TIM_PWM_MspInit+0x3c>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_TIM_PWM_MspInit+0x3c>)
 8002644:	f043 0302 	orr.w	r3, r3, #2
 8002648:	6593      	str	r3, [r2, #88]	; 0x58
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_TIM_PWM_MspInit+0x3c>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40000400 	.word	0x40000400
 8002668:	40021000 	.word	0x40021000

0800266c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	; 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_TIM_MspPostInit+0x9c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d138      	bne.n	8002700 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	4b1f      	ldr	r3, [pc, #124]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_TIM_MspPostInit+0xa0>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GEN_OUT_Pin;
 80026be:	2301      	movs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2300      	movs	r3, #0
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ce:	2302      	movs	r3, #2
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GEN_OUT_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	4619      	mov	r1, r3
 80026d8:	480d      	ldr	r0, [pc, #52]	; (8002710 <HAL_TIM_MspPostInit+0xa4>)
 80026da:	f001 fbcf 	bl	8003e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_LED_Pin;
 80026de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ec:	2300      	movs	r3, #0
 80026ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026f0:	2302      	movs	r3, #2
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <HAL_TIM_MspPostInit+0xa8>)
 80026fc:	f001 fbbe 	bl	8003e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002700:	bf00      	nop
 8002702:	3728      	adds	r7, #40	; 0x28
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40000400 	.word	0x40000400
 800270c:	40021000 	.word	0x40021000
 8002710:	48000400 	.word	0x48000400
 8002714:	48000800 	.word	0x48000800

08002718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff fe4c 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002720:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002722:	e003      	b.n	800272c <LoopCopyDataInit>

08002724 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002726:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002728:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800272a:	3104      	adds	r1, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <LoopForever+0xa>)
	ldr	r3, =_edata
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002730:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002732:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002734:	d3f6      	bcc.n	8002724 <CopyDataInit>
	ldr	r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002738:	e002      	b.n	8002740 <LoopFillZerobss>

0800273a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800273a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800273c:	f842 3b04 	str.w	r3, [r2], #4

08002740 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <LoopForever+0x16>)
	cmp	r2, r3
 8002742:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002744:	d3f9      	bcc.n	800273a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f004 fdeb 	bl	8007320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274a:	f7ff f9f1 	bl	8001b30 <main>

0800274e <LoopForever>:

LoopForever:
    b LoopForever
 800274e:	e7fe      	b.n	800274e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002750:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002754:	08008808 	.word	0x08008808
	ldr	r0, =_sdata
 8002758:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800275c:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 8002760:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 8002764:	20012ed0 	.word	0x20012ed0

08002768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC1_2_IRQHandler>
	...

0800276c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_Init+0x3c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <HAL_Init+0x3c>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002782:	2003      	movs	r0, #3
 8002784:	f001 f900 	bl	8003988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002788:	2000      	movs	r0, #0
 800278a:	f000 f80f 	bl	80027ac <HAL_InitTick>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	71fb      	strb	r3, [r7, #7]
 8002798:	e001      	b.n	800279e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800279a:	f7ff fd9d 	bl	80022d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800279e:	79fb      	ldrb	r3, [r7, #7]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40022000 	.word	0x40022000

080027ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027b8:	4b17      	ldr	r3, [pc, #92]	; (8002818 <HAL_InitTick+0x6c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_InitTick+0x70>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_InitTick+0x6c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 f90b 	bl	80039f2 <HAL_SYSTICK_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10f      	bne.n	8002802 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d809      	bhi.n	80027fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	f001 f8d5 	bl	800399e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_InitTick+0x74>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e007      	b.n	800280c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e004      	b.n	800280c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e001      	b.n	800280c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000003c 	.word	0x2000003c
 800281c:	20000034 	.word	0x20000034
 8002820:	20000038 	.word	0x20000038

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000003c 	.word	0x2000003c
 8002848:	20012ecc 	.word	0x20012ecc

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20012ecc 	.word	0x20012ecc

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_Delay+0x40>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffde 	bl	800284c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	2000003c 	.word	0x2000003c

080028a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3360      	adds	r3, #96	; 0x60
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <LL_ADC_SetOffset+0x44>)
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	03fff000 	.word	0x03fff000

08002958 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3360      	adds	r3, #96	; 0x60
 8002966:	461a      	mov	r2, r3
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002978:	4618      	mov	r0, r3
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3360      	adds	r3, #96	; 0x60
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3330      	adds	r3, #48	; 0x30
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	f003 030c 	and.w	r3, r3, #12
 80029d6:	4413      	add	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	211f      	movs	r1, #31
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	401a      	ands	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0e9b      	lsrs	r3, r3, #26
 80029f2:	f003 011f 	and.w	r1, r3, #31
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3314      	adds	r3, #20
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0e5b      	lsrs	r3, r3, #25
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	0d1b      	lsrs	r3, r3, #20
 8002a3a:	f003 031f 	and.w	r3, r3, #31
 8002a3e:	2107      	movs	r1, #7
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	401a      	ands	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	0d1b      	lsrs	r3, r3, #20
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	fa01 f303 	lsl.w	r3, r1, r3
 8002a56:	431a      	orrs	r2, r3
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a5c:	bf00      	nop
 8002a5e:	371c      	adds	r7, #28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	43db      	mvns	r3, r3
 8002a82:	401a      	ands	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0318 	and.w	r3, r3, #24
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a8c:	40d9      	lsrs	r1, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	400b      	ands	r3, r1
 8002a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	0007ffff 	.word	0x0007ffff

08002ab0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ac0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6093      	str	r3, [r2, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae8:	d101      	bne.n	8002aee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b38:	d101      	bne.n	8002b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <LL_ADC_IsEnabled+0x18>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <LL_ADC_IsEnabled+0x1a>
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d101      	bne.n	8002bb0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e134      	b.n	8002e44 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d109      	bne.n	8002bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe fe03 	bl	80017f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff67 	bl	8002ad4 <LL_ADC_IsDeepPowerDownEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d004      	beq.n	8002c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff4d 	bl	8002ab0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ff82 	bl	8002b24 <LL_ADC_IsInternalRegulatorEnabled>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d113      	bne.n	8002c4e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff ff66 	bl	8002afc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002c30:	4b86      	ldr	r3, [pc, #536]	; (8002e4c <HAL_ADC_Init+0x28c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	4a86      	ldr	r2, [pc, #536]	; (8002e50 <HAL_ADC_Init+0x290>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff ff66 	bl	8002b24 <LL_ADC_IsInternalRegulatorEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff77 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002c84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80cf 	bne.w	8002e32 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80cb 	bne.w	8002e32 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ca4:	f043 0202 	orr.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff4b 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d115      	bne.n	8002ce8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cbc:	4865      	ldr	r0, [pc, #404]	; (8002e54 <HAL_ADC_Init+0x294>)
 8002cbe:	f7ff ff45 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4864      	ldr	r0, [pc, #400]	; (8002e58 <HAL_ADC_Init+0x298>)
 8002cc6:	f7ff ff41 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	431c      	orrs	r4, r3
 8002cce:	4863      	ldr	r0, [pc, #396]	; (8002e5c <HAL_ADC_Init+0x29c>)
 8002cd0:	f7ff ff3c 	bl	8002b4c <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	485f      	ldr	r0, [pc, #380]	; (8002e60 <HAL_ADC_Init+0x2a0>)
 8002ce4:	f7ff fde0 	bl	80028a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	7e5b      	ldrb	r3, [r3, #25]
 8002cec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cf2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cf8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002cfe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d06:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	045b      	lsls	r3, r3, #17
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_ADC_Init+0x2a4>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff0a 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002d5e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff17 	bl	8002b98 <LL_ADC_INJ_IsConversionOngoing>
 8002d6a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d13d      	bne.n	8002dee <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d13a      	bne.n	8002dee <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d7c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d84:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d94:	f023 0302 	bic.w	r3, r3, #2
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	69b9      	ldr	r1, [r7, #24]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d118      	bne.n	8002dde <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002db6:	f023 0304 	bic.w	r3, r3, #4
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	611a      	str	r2, [r3, #16]
 8002ddc:	e007      	b.n	8002dee <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10c      	bne.n	8002e10 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f023 010f 	bic.w	r1, r3, #15
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e0e:	e007      	b.n	8002e20 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 020f 	bic.w	r2, r2, #15
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	f023 0303 	bic.w	r3, r3, #3
 8002e28:	f043 0201 	orr.w	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
 8002e30:	e007      	b.n	8002e42 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3724      	adds	r7, #36	; 0x24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000034 	.word	0x20000034
 8002e50:	053e2d63 	.word	0x053e2d63
 8002e54:	50040000 	.word	0x50040000
 8002e58:	50040100 	.word	0x50040100
 8002e5c:	50040200 	.word	0x50040200
 8002e60:	50040300 	.word	0x50040300
 8002e64:	fff0c007 	.word	0xfff0c007

08002e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b0b6      	sub	sp, #216	; 0xd8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x22>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e3c6      	b.n	8003618 <HAL_ADC_ConfigChannel+0x7b0>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fe6b 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 83a7 	bne.w	80035f2 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d824      	bhi.n	8002ef6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	3b02      	subs	r3, #2
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d81b      	bhi.n	8002eee <HAL_ADC_ConfigChannel+0x86>
 8002eb6:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <HAL_ADC_ConfigChannel+0x54>)
 8002eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002ed5 	.word	0x08002ed5
 8002ec4:	08002edd 	.word	0x08002edd
 8002ec8:	08002ee5 	.word	0x08002ee5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	220c      	movs	r2, #12
 8002ed0:	605a      	str	r2, [r3, #4]
          break;
 8002ed2:	e011      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2212      	movs	r2, #18
 8002ed8:	605a      	str	r2, [r3, #4]
          break;
 8002eda:	e00d      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2218      	movs	r2, #24
 8002ee0:	605a      	str	r2, [r3, #4]
          break;
 8002ee2:	e009      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eea:	605a      	str	r2, [r3, #4]
          break;
 8002eec:	e004      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2206      	movs	r2, #6
 8002ef2:	605a      	str	r2, [r3, #4]
          break;
 8002ef4:	e000      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002ef6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	f7ff fd58 	bl	80029ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe2f 	bl	8002b72 <LL_ADC_REG_IsConversionOngoing>
 8002f14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fe3b 	bl	8002b98 <LL_ADC_INJ_IsConversionOngoing>
 8002f22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f040 81a6 	bne.w	800327c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 81a1 	bne.w	800327c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7ff fd63 	bl	8002a12 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d00a      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f7e:	f7ff fcc7 	bl	8002910 <LL_ADC_SetOffset>
 8002f82:	e17b      	b.n	800327c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fce4 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x148>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fcd9 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	f003 021f 	and.w	r2, r3, #31
 8002fae:	e01e      	b.n	8002fee <HAL_ADC_ConfigChannel+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fcce 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e004      	b.n	8002fec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002fe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d105      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x19e>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	e018      	b.n	8003038 <HAL_ADC_ConfigChannel+0x1d0>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800301a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e004      	b.n	8003038 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800302e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003038:	429a      	cmp	r2, r3
 800303a:	d106      	bne.n	800304a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fc9d 	bl	8002984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fc81 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x20e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fc76 	bl	8002958 <LL_ADC_GetOffsetChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	e01e      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x24c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fc6b 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003082:	4603      	mov	r3, r0
 8003084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003094:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800309c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e004      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80030a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ac:	fab3 f383 	clz	r3, r3
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x264>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	0e9b      	lsrs	r3, r3, #26
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	e018      	b.n	80030fe <HAL_ADC_ConfigChannel+0x296>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	e004      	b.n	80030fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80030f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030f8:	fab3 f383 	clz	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030fe:	429a      	cmp	r2, r3
 8003100:	d106      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2200      	movs	r2, #0
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fc3a 	bl	8002984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fc1e 	bl	8002958 <LL_ADC_GetOffsetChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x2d4>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fc13 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	f003 021f 	and.w	r2, r3, #31
 800313a:	e01e      	b.n	800317a <HAL_ADC_ConfigChannel+0x312>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fc08 	bl	8002958 <LL_ADC_GetOffsetChannel>
 8003148:	4603      	mov	r3, r0
 800314a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800315a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003162:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800316a:	2320      	movs	r3, #32
 800316c:	e004      	b.n	8003178 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800316e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d105      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x32a>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0e9b      	lsrs	r3, r3, #26
 800318c:	f003 031f 	and.w	r3, r3, #31
 8003190:	e016      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x358>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80031b2:	2320      	movs	r3, #32
 80031b4:	e004      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80031b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	2102      	movs	r1, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fbd9 	bl	8002984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2103      	movs	r1, #3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fbbd 	bl	8002958 <LL_ADC_GetOffsetChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x396>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2103      	movs	r1, #3
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fbb2 	bl	8002958 <LL_ADC_GetOffsetChannel>
 80031f4:	4603      	mov	r3, r0
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	e017      	b.n	800322e <HAL_ADC_ConfigChannel+0x3c6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2103      	movs	r1, #3
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fba7 	bl	8002958 <LL_ADC_GetOffsetChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003218:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800321a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e003      	b.n	800322c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x3de>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	e011      	b.n	800326a <HAL_ADC_ConfigChannel+0x402>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003256:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800325e:	2320      	movs	r3, #32
 8003260:	e003      	b.n	800326a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003264:	fab3 f383 	clz	r3, r3
 8003268:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	2103      	movs	r1, #3
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fb84 	bl	8002984 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fc63 	bl	8002b4c <LL_ADC_IsEnabled>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 813f 	bne.w	800350c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	461a      	mov	r2, r3
 800329c:	f7ff fbe4 	bl	8002a68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a8e      	ldr	r2, [pc, #568]	; (80034e0 <HAL_ADC_ConfigChannel+0x678>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f040 8130 	bne.w	800350c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x46c>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	3301      	adds	r3, #1
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e019      	b.n	8003308 <HAL_ADC_ConfigChannel+0x4a0>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e003      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80032f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	3301      	adds	r3, #1
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2b09      	cmp	r3, #9
 8003300:	bf94      	ite	ls
 8003302:	2301      	movls	r3, #1
 8003304:	2300      	movhi	r3, #0
 8003306:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003308:	2b00      	cmp	r3, #0
 800330a:	d079      	beq.n	8003400 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x4c0>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	0e9b      	lsrs	r3, r3, #26
 800331e:	3301      	adds	r3, #1
 8003320:	069b      	lsls	r3, r3, #26
 8003322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003326:	e015      	b.n	8003354 <HAL_ADC_ConfigChannel+0x4ec>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800333a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003340:	2320      	movs	r3, #32
 8003342:	e003      	b.n	800334c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	fab3 f383 	clz	r3, r3
 800334a:	b2db      	uxtb	r3, r3
 800334c:	3301      	adds	r3, #1
 800334e:	069b      	lsls	r3, r3, #26
 8003350:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d109      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x50c>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0e9b      	lsrs	r3, r3, #26
 8003366:	3301      	adds	r3, #1
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2101      	movs	r1, #1
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	e017      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x53c>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3301      	adds	r3, #1
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	ea42 0103 	orr.w	r1, r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x562>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	0e9b      	lsrs	r3, r3, #26
 80033ba:	3301      	adds	r3, #1
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	051b      	lsls	r3, r3, #20
 80033c8:	e018      	b.n	80033fc <HAL_ADC_ConfigChannel+0x594>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80033e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4613      	mov	r3, r2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	4413      	add	r3, r2
 80033fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033fc:	430b      	orrs	r3, r1
 80033fe:	e080      	b.n	8003502 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_ADC_ConfigChannel+0x5b4>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	3301      	adds	r3, #1
 8003414:	069b      	lsls	r3, r3, #26
 8003416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800341a:	e015      	b.n	8003448 <HAL_ADC_ConfigChannel+0x5e0>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	fa93 f3a3 	rbit	r3, r3
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003434:	2320      	movs	r3, #32
 8003436:	e003      	b.n	8003440 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	069b      	lsls	r3, r3, #26
 8003444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x600>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	0e9b      	lsrs	r3, r3, #26
 800345a:	3301      	adds	r3, #1
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	e017      	b.n	8003498 <HAL_ADC_ConfigChannel+0x630>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	61fb      	str	r3, [r7, #28]
  return result;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	e003      	b.n	800348c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2101      	movs	r1, #1
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	ea42 0103 	orr.w	r1, r2, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x65c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	3301      	adds	r3, #1
 80034b0:	f003 021f 	and.w	r2, r3, #31
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	3b1e      	subs	r3, #30
 80034bc:	051b      	lsls	r3, r3, #20
 80034be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034c2:	e01d      	b.n	8003500 <HAL_ADC_ConfigChannel+0x698>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	613b      	str	r3, [r7, #16]
  return result;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e005      	b.n	80034ec <HAL_ADC_ConfigChannel+0x684>
 80034e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 021f 	and.w	r2, r3, #31
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	3b1e      	subs	r3, #30
 80034fa:	051b      	lsls	r3, r3, #20
 80034fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003500:	430b      	orrs	r3, r1
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	6892      	ldr	r2, [r2, #8]
 8003506:	4619      	mov	r1, r3
 8003508:	f7ff fa83 	bl	8002a12 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_ADC_ConfigChannel+0x7b8>)
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d079      	beq.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003518:	4842      	ldr	r0, [pc, #264]	; (8003624 <HAL_ADC_ConfigChannel+0x7bc>)
 800351a:	f7ff f9eb 	bl	80028f4 <LL_ADC_GetCommonPathInternalCh>
 800351e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a40      	ldr	r2, [pc, #256]	; (8003628 <HAL_ADC_ConfigChannel+0x7c0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d12b      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800352c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d125      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3b      	ldr	r2, [pc, #236]	; (800362c <HAL_ADC_ConfigChannel+0x7c4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d004      	beq.n	800354c <HAL_ADC_ConfigChannel+0x6e4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <HAL_ADC_ConfigChannel+0x7c8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d15c      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003550:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003554:	4619      	mov	r1, r3
 8003556:	4833      	ldr	r0, [pc, #204]	; (8003624 <HAL_ADC_ConfigChannel+0x7bc>)
 8003558:	f7ff f9b9 	bl	80028ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <HAL_ADC_ConfigChannel+0x7cc>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	4a35      	ldr	r2, [pc, #212]	; (8003638 <HAL_ADC_ConfigChannel+0x7d0>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099a      	lsrs	r2, r3, #6
 800356a:	4613      	mov	r3, r2
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b01      	subs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003582:	e040      	b.n	8003606 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2c      	ldr	r2, [pc, #176]	; (800363c <HAL_ADC_ConfigChannel+0x7d4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d118      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x758>
 800358e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d112      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a23      	ldr	r2, [pc, #140]	; (800362c <HAL_ADC_ConfigChannel+0x7c4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x746>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_ADC_ConfigChannel+0x7c8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12d      	bne.n	800360a <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035b6:	4619      	mov	r1, r3
 80035b8:	481a      	ldr	r0, [pc, #104]	; (8003624 <HAL_ADC_ConfigChannel+0x7bc>)
 80035ba:	f7ff f988 	bl	80028ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035be:	e024      	b.n	800360a <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a1e      	ldr	r2, [pc, #120]	; (8003640 <HAL_ADC_ConfigChannel+0x7d8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d120      	bne.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11a      	bne.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a14      	ldr	r2, [pc, #80]	; (800362c <HAL_ADC_ConfigChannel+0x7c4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d115      	bne.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035e8:	4619      	mov	r1, r3
 80035ea:	480e      	ldr	r0, [pc, #56]	; (8003624 <HAL_ADC_ConfigChannel+0x7bc>)
 80035ec:	f7ff f96f 	bl	80028ce <LL_ADC_SetCommonPathInternalCh>
 80035f0:	e00c      	b.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003604:	e002      	b.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003614:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003618:	4618      	mov	r0, r3
 800361a:	37d8      	adds	r7, #216	; 0xd8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	80080000 	.word	0x80080000
 8003624:	50040300 	.word	0x50040300
 8003628:	c7520000 	.word	0xc7520000
 800362c:	50040000 	.word	0x50040000
 8003630:	50040200 	.word	0x50040200
 8003634:	20000034 	.word	0x20000034
 8003638:	053e2d63 	.word	0x053e2d63
 800363c:	cb840000 	.word	0xcb840000
 8003640:	80000001 	.word	0x80000001

08003644 <LL_ADC_IsEnabled>:
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <LL_ADC_IsEnabled+0x18>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <LL_ADC_IsEnabled+0x1a>
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_ADC_REG_IsConversionOngoing>:
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d101      	bne.n	8003682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b09f      	sub	sp, #124	; 0x7c
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e08f      	b.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d102      	bne.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	e001      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e072      	b.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff ffbd 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 80036f0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff ffb7 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d154      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003704:	2b00      	cmp	r3, #0
 8003706:	d151      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02c      	beq.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003726:	035b      	lsls	r3, r3, #13
 8003728:	430b      	orrs	r3, r1
 800372a:	431a      	orrs	r2, r3
 800372c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003730:	4829      	ldr	r0, [pc, #164]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003732:	f7ff ff87 	bl	8003644 <LL_ADC_IsEnabled>
 8003736:	4604      	mov	r4, r0
 8003738:	4828      	ldr	r0, [pc, #160]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800373a:	f7ff ff83 	bl	8003644 <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	431c      	orrs	r4, r3
 8003742:	4828      	ldr	r0, [pc, #160]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003744:	f7ff ff7e 	bl	8003644 <LL_ADC_IsEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	4323      	orrs	r3, r4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d137      	bne.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003758:	f023 030f 	bic.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	6811      	ldr	r1, [r2, #0]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	430a      	orrs	r2, r1
 8003766:	431a      	orrs	r2, r3
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800376c:	e028      	b.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377a:	4817      	ldr	r0, [pc, #92]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800377c:	f7ff ff62 	bl	8003644 <LL_ADC_IsEnabled>
 8003780:	4604      	mov	r4, r0
 8003782:	4816      	ldr	r0, [pc, #88]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003784:	f7ff ff5e 	bl	8003644 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	431c      	orrs	r4, r3
 800378c:	4815      	ldr	r0, [pc, #84]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800378e:	f7ff ff59 	bl	8003644 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	4323      	orrs	r3, r4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d112      	bne.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800379a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037a2:	f023 030f 	bic.w	r3, r3, #15
 80037a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037aa:	e009      	b.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037be:	e000      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	377c      	adds	r7, #124	; 0x7c
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}
 80037d6:	bf00      	nop
 80037d8:	50040000 	.word	0x50040000
 80037dc:	50040100 	.word	0x50040100
 80037e0:	50040300 	.word	0x50040300
 80037e4:	50040200 	.word	0x50040200

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <__NVIC_SetPriorityGrouping+0x44>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db0b      	blt.n	8003876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <__NVIC_EnableIRQ+0x38>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db0a      	blt.n	80038b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <__NVIC_SetPriority+0x4c>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b0:	e00a      	b.n	80038c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4908      	ldr	r1, [pc, #32]	; (80038d8 <__NVIC_SetPriority+0x50>)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3b04      	subs	r3, #4
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	761a      	strb	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf28      	it	cs
 80038fa:	2304      	movcs	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3304      	adds	r3, #4
 8003902:	2b06      	cmp	r3, #6
 8003904:	d902      	bls.n	800390c <NVIC_EncodePriority+0x30>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3b03      	subs	r3, #3
 800390a:	e000      	b.n	800390e <NVIC_EncodePriority+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003924:	f04f 31ff 	mov.w	r1, #4294967295
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43d9      	mvns	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	4313      	orrs	r3, r2
         );
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003954:	d301      	bcc.n	800395a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003956:	2301      	movs	r3, #1
 8003958:	e00f      	b.n	800397a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395a:	4a0a      	ldr	r2, [pc, #40]	; (8003984 <SysTick_Config+0x40>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003962:	210f      	movs	r1, #15
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f7ff ff8e 	bl	8003888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SysTick_Config+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003972:	4b04      	ldr	r3, [pc, #16]	; (8003984 <SysTick_Config+0x40>)
 8003974:	2207      	movs	r2, #7
 8003976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	e000e010 	.word	0xe000e010

08003988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff29 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039b0:	f7ff ff3e 	bl	8003830 <__NVIC_GetPriorityGrouping>
 80039b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	6978      	ldr	r0, [r7, #20]
 80039bc:	f7ff ff8e 	bl	80038dc <NVIC_EncodePriority>
 80039c0:	4602      	mov	r2, r0
 80039c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff5d 	bl	8003888 <__NVIC_SetPriority>
}
 80039ce:	bf00      	nop
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	4603      	mov	r3, r0
 80039de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ff31 	bl	800384c <__NVIC_EnableIRQ>
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffa2 	bl	8003944 <SysTick_Config>
 8003a00:	4603      	mov	r3, r0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e098      	b.n	8003b50 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b4d      	ldr	r3, [pc, #308]	; (8003b5c <HAL_DMA_Init+0x150>)
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d80f      	bhi.n	8003a4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	4b4b      	ldr	r3, [pc, #300]	; (8003b60 <HAL_DMA_Init+0x154>)
 8003a32:	4413      	add	r3, r2
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_DMA_Init+0x158>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a48      	ldr	r2, [pc, #288]	; (8003b68 <HAL_DMA_Init+0x15c>)
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
 8003a48:	e00e      	b.n	8003a68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b46      	ldr	r3, [pc, #280]	; (8003b6c <HAL_DMA_Init+0x160>)
 8003a52:	4413      	add	r3, r2
 8003a54:	4a43      	ldr	r2, [pc, #268]	; (8003b64 <HAL_DMA_Init+0x158>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_DMA_Init+0x164>)
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ac2:	d039      	beq.n	8003b38 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_DMA_Init+0x15c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d11a      	bne.n	8003b04 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <HAL_DMA_Init+0x168>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f003 031c 	and.w	r3, r3, #28
 8003ada:	210f      	movs	r1, #15
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	4924      	ldr	r1, [pc, #144]	; (8003b74 <HAL_DMA_Init+0x168>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ae8:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_DMA_Init+0x168>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6859      	ldr	r1, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f003 031c 	and.w	r3, r3, #28
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	491d      	ldr	r1, [pc, #116]	; (8003b74 <HAL_DMA_Init+0x168>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
 8003b02:	e019      	b.n	8003b38 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003b04:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <HAL_DMA_Init+0x16c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f003 031c 	and.w	r3, r3, #28
 8003b10:	210f      	movs	r1, #15
 8003b12:	fa01 f303 	lsl.w	r3, r1, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	4917      	ldr	r1, [pc, #92]	; (8003b78 <HAL_DMA_Init+0x16c>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_DMA_Init+0x16c>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f003 031c 	and.w	r3, r3, #28
 8003b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b32:	4911      	ldr	r1, [pc, #68]	; (8003b78 <HAL_DMA_Init+0x16c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40020407 	.word	0x40020407
 8003b60:	bffdfff8 	.word	0xbffdfff8
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	40020000 	.word	0x40020000
 8003b6c:	bffdfbf8 	.word	0xbffdfbf8
 8003b70:	40020400 	.word	0x40020400
 8003b74:	400200a8 	.word	0x400200a8
 8003b78:	400204a8 	.word	0x400204a8

08003b7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_DMA_Start_IT+0x20>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e04b      	b.n	8003c34 <HAL_DMA_Start_IT+0xb8>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d13a      	bne.n	8003c26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0201 	bic.w	r2, r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f921 	bl	8003e1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 020e 	orr.w	r2, r2, #14
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e00f      	b.n	8003c14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0204 	bic.w	r2, r2, #4
 8003c02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 020a 	orr.w	r2, r2, #10
 8003c12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e005      	b.n	8003c32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d005      	beq.n	8003c60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2204      	movs	r2, #4
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
 8003c5e:	e029      	b.n	8003cb4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020e 	bic.w	r2, r2, #14
 8003c6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f003 021c 	and.w	r2, r3, #28
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    }
  }
  return status;
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f003 031c 	and.w	r3, r3, #28
 8003cde:	2204      	movs	r2, #4
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d026      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x7a>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d021      	beq.n	8003d38 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0204 	bic.w	r2, r2, #4
 8003d10:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f003 021c 	and.w	r2, r3, #28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	2104      	movs	r1, #4
 8003d20:	fa01 f202 	lsl.w	r2, r1, r2
 8003d24:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d071      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003d36:	e06c      	b.n	8003e12 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f003 031c 	and.w	r3, r3, #28
 8003d40:	2202      	movs	r2, #2
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02e      	beq.n	8003daa <HAL_DMA_IRQHandler+0xec>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d029      	beq.n	8003daa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 020a 	bic.w	r2, r2, #10
 8003d72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f003 021c 	and.w	r2, r3, #28
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2102      	movs	r1, #2
 8003d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d038      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003da8:	e033      	b.n	8003e12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f003 031c 	and.w	r3, r3, #28
 8003db2:	2208      	movs	r2, #8
 8003db4:	409a      	lsls	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02a      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d025      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 020e 	bic.w	r2, r2, #14
 8003dd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f003 021c 	and.w	r2, r3, #28
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
}
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	f003 021c 	and.w	r2, r3, #28
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d108      	bne.n	8003e60 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e5e:	e007      	b.n	8003e70 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8a:	e17f      	b.n	800418c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8171 	beq.w	8004186 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_GPIO_Init+0x48>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d007      	beq.n	8003ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb8:	2b11      	cmp	r3, #17
 8003eba:	d003      	beq.n	8003ec4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b12      	cmp	r3, #18
 8003ec2:	d130      	bne.n	8003f26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003efa:	2201      	movs	r2, #1
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	f003 0201 	and.w	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d118      	bne.n	8003f64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4013      	ands	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	f003 0201 	and.w	r2, r3, #1
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x128>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b12      	cmp	r3, #18
 8003fa2:	d123      	bne.n	8003fec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	6939      	ldr	r1, [r7, #16]
 8003fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80ac 	beq.w	8004186 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_GPIO_Init+0x32c>)
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	4a5d      	ldr	r2, [pc, #372]	; (80041a8 <HAL_GPIO_Init+0x32c>)
 8004034:	f043 0301 	orr.w	r3, r3, #1
 8004038:	6613      	str	r3, [r2, #96]	; 0x60
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_GPIO_Init+0x32c>)
 800403c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004046:	4a59      	ldr	r2, [pc, #356]	; (80041ac <HAL_GPIO_Init+0x330>)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	3302      	adds	r3, #2
 800404e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004052:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004070:	d025      	beq.n	80040be <HAL_GPIO_Init+0x242>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4e      	ldr	r2, [pc, #312]	; (80041b0 <HAL_GPIO_Init+0x334>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <HAL_GPIO_Init+0x23e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4d      	ldr	r2, [pc, #308]	; (80041b4 <HAL_GPIO_Init+0x338>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_Init+0x23a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4c      	ldr	r2, [pc, #304]	; (80041b8 <HAL_GPIO_Init+0x33c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_Init+0x236>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4b      	ldr	r2, [pc, #300]	; (80041bc <HAL_GPIO_Init+0x340>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_Init+0x232>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <HAL_GPIO_Init+0x344>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_Init+0x22e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a49      	ldr	r2, [pc, #292]	; (80041c4 <HAL_GPIO_Init+0x348>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_Init+0x22a>
 80040a2:	2306      	movs	r3, #6
 80040a4:	e00c      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040a6:	2307      	movs	r3, #7
 80040a8:	e00a      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040aa:	2305      	movs	r3, #5
 80040ac:	e008      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040ae:	2304      	movs	r3, #4
 80040b0:	e006      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e004      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e002      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_GPIO_Init+0x244>
 80040be:	2300      	movs	r3, #0
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	f002 0203 	and.w	r2, r2, #3
 80040c6:	0092      	lsls	r2, r2, #2
 80040c8:	4093      	lsls	r3, r2
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040d0:	4936      	ldr	r1, [pc, #216]	; (80041ac <HAL_GPIO_Init+0x330>)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80040de:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004102:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004108:	4b2f      	ldr	r3, [pc, #188]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004132:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43db      	mvns	r3, r3
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004156:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43db      	mvns	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004180:	4a11      	ldr	r2, [pc, #68]	; (80041c8 <HAL_GPIO_Init+0x34c>)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	3301      	adds	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	f47f ae78 	bne.w	8003e8c <HAL_GPIO_Init+0x10>
  }
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40010000 	.word	0x40010000
 80041b0:	48000400 	.word	0x48000400
 80041b4:	48000800 	.word	0x48000800
 80041b8:	48000c00 	.word	0x48000c00
 80041bc:	48001000 	.word	0x48001000
 80041c0:	48001400 	.word	0x48001400
 80041c4:	48001800 	.word	0x48001800
 80041c8:	40010400 	.word	0x40010400

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041e8:	e002      	b.n	80041f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_PWREx_GetVoltageRange+0x18>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40007000 	.word	0x40007000

08004218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004226:	d130      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004234:	d038      	beq.n	80042a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004236:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800423e:	4a1e      	ldr	r2, [pc, #120]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004244:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2232      	movs	r2, #50	; 0x32
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0c9b      	lsrs	r3, r3, #18
 8004258:	3301      	adds	r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800425c:	e002      	b.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b01      	subs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004270:	d102      	bne.n	8004278 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f2      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d110      	bne.n	80042a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e00f      	b.n	80042aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004296:	d007      	beq.n	80042a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a0:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40007000 	.word	0x40007000
 80042bc:	20000034 	.word	0x20000034
 80042c0:	431bde83 	.word	0x431bde83

080042c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e3d4      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4ba1      	ldr	r3, [pc, #644]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e0:	4b9e      	ldr	r3, [pc, #632]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80e4 	beq.w	80044c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <HAL_RCC_OscConfig+0x4a>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	f040 808b 	bne.w	800441c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	f040 8087 	bne.w	800441c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800430e:	4b93      	ldr	r3, [pc, #588]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_RCC_OscConfig+0x62>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e3ac      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	4b8c      	ldr	r3, [pc, #560]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <HAL_RCC_OscConfig+0x7c>
 8004336:	4b89      	ldr	r3, [pc, #548]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800433e:	e005      	b.n	800434c <HAL_RCC_OscConfig+0x88>
 8004340:	4b86      	ldr	r3, [pc, #536]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	4293      	cmp	r3, r2
 800434e:	d223      	bcs.n	8004398 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fd07 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e38d      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004364:	4b7d      	ldr	r3, [pc, #500]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7c      	ldr	r2, [pc, #496]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800436a:	f043 0308 	orr.w	r3, r3, #8
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b7a      	ldr	r3, [pc, #488]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	4977      	ldr	r1, [pc, #476]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800437e:	4313      	orrs	r3, r2
 8004380:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004382:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	4972      	ldr	r1, [pc, #456]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
 8004396:	e025      	b.n	80043e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004398:	4b70      	ldr	r3, [pc, #448]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a6f      	ldr	r2, [pc, #444]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800439e:	f043 0308 	orr.w	r3, r3, #8
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	4b6d      	ldr	r3, [pc, #436]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	496a      	ldr	r1, [pc, #424]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b6:	4b69      	ldr	r3, [pc, #420]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	4965      	ldr	r1, [pc, #404]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fcc7 	bl	8004d68 <RCC_SetFlashLatencyFromMSIRange>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e34d      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e4:	f000 fc36 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 80043e8:	4601      	mov	r1, r0
 80043ea:	4b5c      	ldr	r3, [pc, #368]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4a5a      	ldr	r2, [pc, #360]	; (8004560 <HAL_RCC_OscConfig+0x29c>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa21 f303 	lsr.w	r3, r1, r3
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_RCC_OscConfig+0x2a0>)
 8004402:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004404:	4b58      	ldr	r3, [pc, #352]	; (8004568 <HAL_RCC_OscConfig+0x2a4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f9cf 	bl	80027ac <HAL_InitTick>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d052      	beq.n	80044be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	e331      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d032      	beq.n	800448a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004424:	4b4d      	ldr	r3, [pc, #308]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a4c      	ldr	r2, [pc, #304]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004430:	f7fe fa0c 	bl	800284c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004438:	f7fe fa08 	bl	800284c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e31a      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800444a:	4b44      	ldr	r3, [pc, #272]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a40      	ldr	r2, [pc, #256]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	493b      	ldr	r1, [pc, #236]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	4936      	ldr	r1, [pc, #216]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	e01a      	b.n	80044c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800448a:	4b34      	ldr	r3, [pc, #208]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a33      	ldr	r2, [pc, #204]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004496:	f7fe f9d9 	bl	800284c <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800449e:	f7fe f9d5 	bl	800284c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e2e7      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044b0:	4b2a      	ldr	r3, [pc, #168]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x1da>
 80044bc:	e000      	b.n	80044c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d074      	beq.n	80045b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d005      	beq.n	80044de <HAL_RCC_OscConfig+0x21a>
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	d10e      	bne.n	80044f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044de:	4b1f      	ldr	r3, [pc, #124]	; (800455c <HAL_RCC_OscConfig+0x298>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d064      	beq.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d160      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e2c4      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x24a>
 8004500:	4b16      	ldr	r3, [pc, #88]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e01d      	b.n	800454a <HAL_RCC_OscConfig+0x286>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004516:	d10c      	bne.n	8004532 <HAL_RCC_OscConfig+0x26e>
 8004518:	4b10      	ldr	r3, [pc, #64]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0f      	ldr	r2, [pc, #60]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800451e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0c      	ldr	r2, [pc, #48]	; (800455c <HAL_RCC_OscConfig+0x298>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e00b      	b.n	800454a <HAL_RCC_OscConfig+0x286>
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b07      	ldr	r3, [pc, #28]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a06      	ldr	r2, [pc, #24]	; (800455c <HAL_RCC_OscConfig+0x298>)
 8004544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004548:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01c      	beq.n	800458c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fe f97b 	bl	800284c <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004558:	e011      	b.n	800457e <HAL_RCC_OscConfig+0x2ba>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	080083f0 	.word	0x080083f0
 8004564:	20000034 	.word	0x20000034
 8004568:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fe f96e 	bl	800284c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e280      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800457e:	4baf      	ldr	r3, [pc, #700]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x2a8>
 800458a:	e014      	b.n	80045b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fe f95e 	bl	800284c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fe f95a 	bl	800284c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e26c      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045a6:	4ba5      	ldr	r3, [pc, #660]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1f0      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d0>
 80045b2:	e000      	b.n	80045b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d060      	beq.n	8004684 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d005      	beq.n	80045d4 <HAL_RCC_OscConfig+0x310>
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b0c      	cmp	r3, #12
 80045cc:	d119      	bne.n	8004602 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d116      	bne.n	8004602 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d4:	4b99      	ldr	r3, [pc, #612]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <HAL_RCC_OscConfig+0x328>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e249      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b93      	ldr	r3, [pc, #588]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	4990      	ldr	r1, [pc, #576]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	e040      	b.n	8004684 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d023      	beq.n	8004652 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800460a:	4b8c      	ldr	r3, [pc, #560]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a8b      	ldr	r2, [pc, #556]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fe f919 	bl	800284c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fe f915 	bl	800284c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e227      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004630:	4b82      	ldr	r3, [pc, #520]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b7f      	ldr	r3, [pc, #508]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	497c      	ldr	r1, [pc, #496]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
 8004650:	e018      	b.n	8004684 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b7a      	ldr	r3, [pc, #488]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a79      	ldr	r2, [pc, #484]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800465c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fe f8f5 	bl	800284c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004666:	f7fe f8f1 	bl	800284c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e203      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004678:	4b70      	ldr	r3, [pc, #448]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f0      	bne.n	8004666 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d03c      	beq.n	800470a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01c      	beq.n	80046d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004698:	4b68      	ldr	r3, [pc, #416]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469e:	4a67      	ldr	r2, [pc, #412]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fe f8d0 	bl	800284c <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fe f8cc 	bl	800284c <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1de      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046c2:	4b5e      	ldr	r3, [pc, #376]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <HAL_RCC_OscConfig+0x3ec>
 80046d0:	e01b      	b.n	800470a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d2:	4b5a      	ldr	r3, [pc, #360]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80046d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d8:	4a58      	ldr	r2, [pc, #352]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fe f8b3 	bl	800284c <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ea:	f7fe f8af 	bl	800284c <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e1c1      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046fc:	4b4f      	ldr	r3, [pc, #316]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80046fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1ef      	bne.n	80046ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80a6 	beq.w	8004864 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10d      	bne.n	8004744 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004728:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	4a43      	ldr	r2, [pc, #268]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800472e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004732:	6593      	str	r3, [r2, #88]	; 0x58
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004740:	2301      	movs	r3, #1
 8004742:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <HAL_RCC_OscConfig+0x57c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d118      	bne.n	8004782 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCC_OscConfig+0x57c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <HAL_RCC_OscConfig+0x57c>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800475c:	f7fe f876 	bl	800284c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004764:	f7fe f872 	bl	800284c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e184      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004776:	4b32      	ldr	r3, [pc, #200]	; (8004840 <HAL_RCC_OscConfig+0x57c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d108      	bne.n	800479c <HAL_RCC_OscConfig+0x4d8>
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <HAL_RCC_OscConfig+0x578>)
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479a:	e024      	b.n	80047e6 <HAL_RCC_OscConfig+0x522>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d110      	bne.n	80047c6 <HAL_RCC_OscConfig+0x502>
 80047a4:	4b25      	ldr	r3, [pc, #148]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a24      	ldr	r2, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c4:	e00f      	b.n	80047e6 <HAL_RCC_OscConfig+0x522>
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047ce:	f023 0301 	bic.w	r3, r3, #1
 80047d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_RCC_OscConfig+0x578>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d016      	beq.n	800481c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fe f82d 	bl	800284c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fe f829 	bl	800284c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e139      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_OscConfig+0x578>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0ed      	beq.n	80047f6 <HAL_RCC_OscConfig+0x532>
 800481a:	e01a      	b.n	8004852 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fe f816 	bl	800284c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004822:	e00f      	b.n	8004844 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fe f812 	bl	800284c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d906      	bls.n	8004844 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e122      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004844:	4b90      	ldr	r3, [pc, #576]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e8      	bne.n	8004824 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004852:	7ffb      	ldrb	r3, [r7, #31]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004858:	4b8b      	ldr	r3, [pc, #556]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485c:	4a8a      	ldr	r2, [pc, #552]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800485e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8108 	beq.w	8004a7e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	2b02      	cmp	r3, #2
 8004874:	f040 80d0 	bne.w	8004a18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004878:	4b83      	ldr	r3, [pc, #524]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004888:	429a      	cmp	r2, r3
 800488a:	d130      	bne.n	80048ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	3b01      	subs	r3, #1
 8004898:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d127      	bne.n	80048ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d11f      	bne.n	80048ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048b8:	2a07      	cmp	r2, #7
 80048ba:	bf14      	ite	ne
 80048bc:	2201      	movne	r2, #1
 80048be:	2200      	moveq	r2, #0
 80048c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d113      	bne.n	80048ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	3b01      	subs	r3, #1
 80048d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	3b01      	subs	r3, #1
 80048e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d06e      	beq.n	80049cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d069      	beq.n	80049c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048f4:	4b64      	ldr	r3, [pc, #400]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d105      	bne.n	800490c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e0b7      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004910:	4b5d      	ldr	r3, [pc, #372]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5c      	ldr	r2, [pc, #368]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800491a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800491c:	f7fd ff96 	bl	800284c <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004924:	f7fd ff92 	bl	800284c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e0a4      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004936:	4b54      	ldr	r3, [pc, #336]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004942:	4b51      	ldr	r3, [pc, #324]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	4b51      	ldr	r3, [pc, #324]	; (8004a8c <HAL_RCC_OscConfig+0x7c8>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004952:	3a01      	subs	r2, #1
 8004954:	0112      	lsls	r2, r2, #4
 8004956:	4311      	orrs	r1, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800495c:	0212      	lsls	r2, r2, #8
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004964:	0852      	lsrs	r2, r2, #1
 8004966:	3a01      	subs	r2, #1
 8004968:	0552      	lsls	r2, r2, #21
 800496a:	4311      	orrs	r1, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004970:	0852      	lsrs	r2, r2, #1
 8004972:	3a01      	subs	r2, #1
 8004974:	0652      	lsls	r2, r2, #25
 8004976:	4311      	orrs	r1, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800497c:	0912      	lsrs	r2, r2, #4
 800497e:	0452      	lsls	r2, r2, #17
 8004980:	430a      	orrs	r2, r1
 8004982:	4941      	ldr	r1, [pc, #260]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004992:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004994:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a3b      	ldr	r2, [pc, #236]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 800499a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a0:	f7fd ff54 	bl	800284c <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fd ff50 	bl	800284c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e062      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	4b33      	ldr	r3, [pc, #204]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049c6:	e05a      	b.n	8004a7e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e059      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049cc:	4b2e      	ldr	r3, [pc, #184]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d152      	bne.n	8004a7e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049d8:	4b2b      	ldr	r3, [pc, #172]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2a      	ldr	r2, [pc, #168]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049f0:	f7fd ff2c 	bl	800284c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd ff28 	bl	800284c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e03a      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0a:	4b1f      	ldr	r3, [pc, #124]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x734>
 8004a16:	e032      	b.n	8004a7e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d02d      	beq.n	8004a7a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a28:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a2a:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a42:	4b11      	ldr	r3, [pc, #68]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fd fefb 	bl	800284c <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fd fef7 	bl	800284c <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e009      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <HAL_RCC_OscConfig+0x7c4>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f0      	bne.n	8004a5a <HAL_RCC_OscConfig+0x796>
 8004a78:	e001      	b.n	8004a7e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3720      	adds	r7, #32
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	f99d808c 	.word	0xf99d808c

08004a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0c8      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa4:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d910      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab2:	4b63      	ldr	r3, [pc, #396]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f023 0207 	bic.w	r2, r3, #7
 8004aba:	4961      	ldr	r1, [pc, #388]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac2:	4b5f      	ldr	r3, [pc, #380]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d001      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0b0      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d04c      	beq.n	8004b7a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d121      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e09e      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e092      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e086      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b28:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e07e      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b38:	4b42      	ldr	r3, [pc, #264]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 0203 	bic.w	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	493f      	ldr	r1, [pc, #252]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4a:	f7fd fe7f 	bl	800284c <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fd fe7b 	bl	800284c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e066      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b68:	4b36      	ldr	r3, [pc, #216]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 020c 	and.w	r2, r3, #12
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d1eb      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	492c      	ldr	r1, [pc, #176]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b98:	4b29      	ldr	r3, [pc, #164]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d210      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b26      	ldr	r3, [pc, #152]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 0207 	bic.w	r2, r3, #7
 8004bae:	4924      	ldr	r1, [pc, #144]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCC_ClockConfig+0x1b0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e036      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4918      	ldr	r1, [pc, #96]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4910      	ldr	r1, [pc, #64]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c06:	f000 f825 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_RCC_ClockConfig+0x1c0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fdbe 	bl	80027ac <HAL_InitTick>
 8004c30:	4603      	mov	r3, r0
 8004c32:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c34:	7afb      	ldrb	r3, [r7, #11]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40021000 	.word	0x40021000
 8004c48:	080083f0 	.word	0x080083f0
 8004c4c:	20000034 	.word	0x20000034
 8004c50:	20000038 	.word	0x20000038

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b089      	sub	sp, #36	; 0x24
 8004c58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c62:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c6c:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d121      	bne.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d11e      	bne.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c88:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c94:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	f003 030f 	and.w	r3, r3, #15
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ca4:	4b2c      	ldr	r3, [pc, #176]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cb0:	4a2a      	ldr	r2, [pc, #168]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cc4:	e00a      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d102      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e004      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b0c      	cmp	r3, #12
 8004ce0:	d133      	bne.n	8004d4a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xa4>
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_GetSysClockFreq+0xaa>
 8004cf6:	e005      	b.n	8004d04 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cf8:	4b19      	ldr	r3, [pc, #100]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cfa:	617b      	str	r3, [r7, #20]
      break;
 8004cfc:	e005      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d00:	617b      	str	r3, [r7, #20]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	617b      	str	r3, [r7, #20]
      break;
 8004d08:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	3301      	adds	r3, #1
 8004d16:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	fb02 f203 	mul.w	r2, r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d30:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x104>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0e5b      	lsrs	r3, r3, #25
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3724      	adds	r7, #36	; 0x24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	08008400 	.word	0x08008400
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d70:	2300      	movs	r3, #0
 8004d72:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d74:	4b2a      	ldr	r3, [pc, #168]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff fa3c 	bl	80041fc <HAL_PWREx_GetVoltageRange>
 8004d84:	6178      	str	r0, [r7, #20]
 8004d86:	e014      	b.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004da0:	f7ff fa2c 	bl	80041fc <HAL_PWREx_GetVoltageRange>
 8004da4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004daa:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db8:	d10b      	bne.n	8004dd2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d919      	bls.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8004dc4:	d902      	bls.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	e013      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dcc:	2301      	movs	r3, #1
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	e010      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d902      	bls.n	8004dde <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dd8:	2303      	movs	r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	e00a      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d102      	bne.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004de4:	2302      	movs	r3, #2
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	e004      	b.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d101      	bne.n	8004df4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004df0:	2301      	movs	r3, #1
 8004df2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 0207 	bic.w	r2, r3, #7
 8004dfc:	4909      	ldr	r1, [pc, #36]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40022000 	.word	0x40022000

08004e28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e30:	2300      	movs	r3, #0
 8004e32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e34:	2300      	movs	r3, #0
 8004e36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d03f      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4c:	d01c      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d802      	bhi.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00e      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004e58:	e01f      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e64:	d01c      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004e66:	e018      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e68:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a84      	ldr	r2, [pc, #528]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e74:	e015      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fab9 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e86:	e00c      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3320      	adds	r3, #32
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 fba0 	bl	80055d4 <RCCEx_PLLSAI2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e98:	e003      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea2:	7cfb      	ldrb	r3, [r7, #19]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea8:	4b75      	ldr	r3, [pc, #468]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb6:	4972      	ldr	r1, [pc, #456]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ebe:	e001      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d03f      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed8:	d01c      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004eda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ede:	d802      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004ee4:	e01f      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eea:	d003      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef0:	d01c      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004ef2:	e018      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ef4:	4b62      	ldr	r3, [pc, #392]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a61      	ldr	r2, [pc, #388]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f00:	e015      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2100      	movs	r1, #0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fa73 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f12:	e00c      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3320      	adds	r3, #32
 8004f18:	2100      	movs	r1, #0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fb5a 	bl	80055d4 <RCCEx_PLLSAI2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	74fb      	strb	r3, [r7, #19]
      break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f34:	4b52      	ldr	r3, [pc, #328]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f42:	494f      	ldr	r1, [pc, #316]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f4a:	e001      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a0 	beq.w	800509e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004f72:	2300      	movs	r3, #0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f78:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	4a40      	ldr	r2, [pc, #256]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f82:	6593      	str	r3, [r2, #88]	; 0x58
 8004f84:	4b3e      	ldr	r3, [pc, #248]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f94:	4b3b      	ldr	r3, [pc, #236]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3a      	ldr	r2, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa0:	f7fd fc54 	bl	800284c <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fa6:	e009      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fd fc50 	bl	800284c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d902      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	74fb      	strb	r3, [r7, #19]
        break;
 8004fba:	e005      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fbc:	4b31      	ldr	r3, [pc, #196]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ef      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d15c      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fce:	4b2c      	ldr	r3, [pc, #176]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01f      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d019      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fec:	4b24      	ldr	r3, [pc, #144]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff8:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	4a20      	ldr	r2, [pc, #128]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	4a1c      	ldr	r2, [pc, #112]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d016      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fd fc0f 	bl	800284c <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005030:	e00b      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005032:	f7fd fc0b 	bl	800284c <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005040:	4293      	cmp	r3, r2
 8005042:	d902      	bls.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	74fb      	strb	r3, [r7, #19]
            break;
 8005048:	e006      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ec      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10c      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506e:	4904      	ldr	r1, [pc, #16]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005076:	e009      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005078:	7cfb      	ldrb	r3, [r7, #19]
 800507a:	74bb      	strb	r3, [r7, #18]
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800507e:	bf00      	nop
 8005080:	40021000 	.word	0x40021000
 8005084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800508c:	7c7b      	ldrb	r3, [r7, #17]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d105      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005092:	4b9e      	ldr	r3, [pc, #632]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	4a9d      	ldr	r2, [pc, #628]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800509c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050aa:	4b98      	ldr	r3, [pc, #608]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	f023 0203 	bic.w	r2, r3, #3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	4994      	ldr	r1, [pc, #592]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050cc:	4b8f      	ldr	r3, [pc, #572]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	f023 020c 	bic.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	498c      	ldr	r1, [pc, #560]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ee:	4b87      	ldr	r3, [pc, #540]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	4983      	ldr	r1, [pc, #524]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005110:	4b7e      	ldr	r3, [pc, #504]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	497b      	ldr	r1, [pc, #492]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	4972      	ldr	r1, [pc, #456]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0320 	and.w	r3, r3, #32
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005154:	4b6d      	ldr	r3, [pc, #436]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005162:	496a      	ldr	r1, [pc, #424]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005176:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	4961      	ldr	r1, [pc, #388]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005198:	4b5c      	ldr	r3, [pc, #368]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a6:	4959      	ldr	r1, [pc, #356]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051ba:	4b54      	ldr	r3, [pc, #336]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c8:	4950      	ldr	r1, [pc, #320]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051dc:	4b4b      	ldr	r3, [pc, #300]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	4948      	ldr	r1, [pc, #288]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520c:	493f      	ldr	r1, [pc, #252]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d028      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005220:	4b3a      	ldr	r3, [pc, #232]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522e:	4937      	ldr	r1, [pc, #220]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800523e:	d106      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	4a31      	ldr	r2, [pc, #196]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800524a:	60d3      	str	r3, [r2, #12]
 800524c:	e011      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005252:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005256:	d10c      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f8c8 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d028      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800527e:	4b23      	ldr	r3, [pc, #140]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	491f      	ldr	r1, [pc, #124]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800529c:	d106      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052a8:	60d3      	str	r3, [r2, #12]
 80052aa:	e011      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3304      	adds	r3, #4
 80052ba:	2101      	movs	r1, #1
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f899 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 80052c2:	4603      	mov	r3, r0
 80052c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02b      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ea:	4908      	ldr	r1, [pc, #32]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fa:	d109      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a02      	ldr	r2, [pc, #8]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005306:	60d3      	str	r3, [r2, #12]
 8005308:	e014      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005318:	d10c      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f867 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02f      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005340:	4b2b      	ldr	r3, [pc, #172]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800534e:	4928      	ldr	r1, [pc, #160]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800535e:	d10d      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3304      	adds	r3, #4
 8005364:	2102      	movs	r1, #2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f844 	bl	80053f4 <RCCEx_PLLSAI1_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d014      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	74bb      	strb	r3, [r7, #18]
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005384:	d10c      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3320      	adds	r3, #32
 800538a:	2102      	movs	r1, #2
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f921 	bl	80055d4 <RCCEx_PLLSAI2_Config>
 8005392:	4603      	mov	r3, r0
 8005394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005396:	7cfb      	ldrb	r3, [r7, #19]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800539c:	7cfb      	ldrb	r3, [r7, #19]
 800539e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ba:	490d      	ldr	r1, [pc, #52]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ce:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053de:	4904      	ldr	r1, [pc, #16]	; (80053f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000

080053f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005402:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d018      	beq.n	8005440 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800540e:	4b70      	ldr	r3, [pc, #448]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0203 	and.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d10d      	bne.n	800543a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
       ||
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
       ||
 8005436:	429a      	cmp	r2, r3
 8005438:	d044      	beq.n	80054c4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
 800543e:	e041      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d00c      	beq.n	8005462 <RCCEx_PLLSAI1_Config+0x6e>
 8005448:	2b03      	cmp	r3, #3
 800544a:	d013      	beq.n	8005474 <RCCEx_PLLSAI1_Config+0x80>
 800544c:	2b01      	cmp	r3, #1
 800544e:	d120      	bne.n	8005492 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005450:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11d      	bne.n	8005498 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e01a      	b.n	8005498 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005462:	4b5b      	ldr	r3, [pc, #364]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546a:	2b00      	cmp	r3, #0
 800546c:	d116      	bne.n	800549c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005472:	e013      	b.n	800549c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005474:	4b56      	ldr	r3, [pc, #344]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005480:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d109      	bne.n	80054a0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005490:	e006      	b.n	80054a0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
      break;
 8005496:	e004      	b.n	80054a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005498:	bf00      	nop
 800549a:	e002      	b.n	80054a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800549c:	bf00      	nop
 800549e:	e000      	b.n	80054a2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80054a0:	bf00      	nop
    }

    if(status == HAL_OK)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10d      	bne.n	80054c4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054a8:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	430b      	orrs	r3, r1
 80054be:	4944      	ldr	r1, [pc, #272]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d17d      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a40      	ldr	r2, [pc, #256]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fd f9b9 	bl	800284c <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054dc:	e009      	b.n	80054f2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054de:	f7fd f9b5 	bl	800284c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d902      	bls.n	80054f2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	73fb      	strb	r3, [r7, #15]
        break;
 80054f0:	e005      	b.n	80054fe <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ef      	bne.n	80054de <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d160      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d111      	bne.n	800552e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800550a:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6892      	ldr	r2, [r2, #8]
 800551a:	0211      	lsls	r1, r2, #8
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68d2      	ldr	r2, [r2, #12]
 8005520:	0912      	lsrs	r2, r2, #4
 8005522:	0452      	lsls	r2, r2, #17
 8005524:	430a      	orrs	r2, r1
 8005526:	492a      	ldr	r1, [pc, #168]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005528:	4313      	orrs	r3, r2
 800552a:	610b      	str	r3, [r1, #16]
 800552c:	e027      	b.n	800557e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d112      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800553c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6892      	ldr	r2, [r2, #8]
 8005544:	0211      	lsls	r1, r2, #8
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6912      	ldr	r2, [r2, #16]
 800554a:	0852      	lsrs	r2, r2, #1
 800554c:	3a01      	subs	r2, #1
 800554e:	0552      	lsls	r2, r2, #21
 8005550:	430a      	orrs	r2, r1
 8005552:	491f      	ldr	r1, [pc, #124]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005554:	4313      	orrs	r3, r2
 8005556:	610b      	str	r3, [r1, #16]
 8005558:	e011      	b.n	800557e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800555a:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005562:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	6892      	ldr	r2, [r2, #8]
 800556a:	0211      	lsls	r1, r2, #8
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6952      	ldr	r2, [r2, #20]
 8005570:	0852      	lsrs	r2, r2, #1
 8005572:	3a01      	subs	r2, #1
 8005574:	0652      	lsls	r2, r2, #25
 8005576:	430a      	orrs	r2, r1
 8005578:	4915      	ldr	r1, [pc, #84]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800557a:	4313      	orrs	r3, r2
 800557c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005584:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005588:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558a:	f7fd f95f 	bl	800284c <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005590:	e009      	b.n	80055a6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005592:	f7fd f95b 	bl	800284c <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d902      	bls.n	80055a6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	73fb      	strb	r3, [r7, #15]
          break;
 80055a4:	e005      	b.n	80055b2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055a6:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ef      	beq.n	8005592 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d106      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	4903      	ldr	r1, [pc, #12]	; (80055d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40021000 	.word	0x40021000

080055d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055e2:	4b68      	ldr	r3, [pc, #416]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055ee:	4b65      	ldr	r3, [pc, #404]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0203 	and.w	r2, r3, #3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d10d      	bne.n	800561a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
       ||
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005606:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
       ||
 8005616:	429a      	cmp	r2, r3
 8005618:	d044      	beq.n	80056a4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
 800561e:	e041      	b.n	80056a4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d00c      	beq.n	8005642 <RCCEx_PLLSAI2_Config+0x6e>
 8005628:	2b03      	cmp	r3, #3
 800562a:	d013      	beq.n	8005654 <RCCEx_PLLSAI2_Config+0x80>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d120      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005630:	4b54      	ldr	r3, [pc, #336]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d11d      	bne.n	8005678 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005640:	e01a      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005642:	4b50      	ldr	r3, [pc, #320]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005652:	e013      	b.n	800567c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005654:	4b4b      	ldr	r3, [pc, #300]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10f      	bne.n	8005680 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005660:	4b48      	ldr	r3, [pc, #288]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005670:	e006      	b.n	8005680 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
      break;
 8005676:	e004      	b.n	8005682 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005678:	bf00      	nop
 800567a:	e002      	b.n	8005682 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800567c:	bf00      	nop
 800567e:	e000      	b.n	8005682 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005680:	bf00      	nop
    }

    if(status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005688:	4b3e      	ldr	r3, [pc, #248]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	3b01      	subs	r3, #1
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	430b      	orrs	r3, r1
 800569e:	4939      	ldr	r1, [pc, #228]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d167      	bne.n	800577a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056aa:	4b36      	ldr	r3, [pc, #216]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a35      	ldr	r2, [pc, #212]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fd f8c9 	bl	800284c <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056bc:	e009      	b.n	80056d2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056be:	f7fd f8c5 	bl	800284c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d902      	bls.n	80056d2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	73fb      	strb	r3, [r7, #15]
        break;
 80056d0:	e005      	b.n	80056de <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ef      	bne.n	80056be <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d14a      	bne.n	800577a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d111      	bne.n	800570e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	0211      	lsls	r1, r2, #8
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	68d2      	ldr	r2, [r2, #12]
 8005700:	0912      	lsrs	r2, r2, #4
 8005702:	0452      	lsls	r2, r2, #17
 8005704:	430a      	orrs	r2, r1
 8005706:	491f      	ldr	r1, [pc, #124]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005708:	4313      	orrs	r3, r2
 800570a:	614b      	str	r3, [r1, #20]
 800570c:	e011      	b.n	8005732 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800570e:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6892      	ldr	r2, [r2, #8]
 800571e:	0211      	lsls	r1, r2, #8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6912      	ldr	r2, [r2, #16]
 8005724:	0852      	lsrs	r2, r2, #1
 8005726:	3a01      	subs	r2, #1
 8005728:	0652      	lsls	r2, r2, #25
 800572a:	430a      	orrs	r2, r1
 800572c:	4915      	ldr	r1, [pc, #84]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 800572e:	4313      	orrs	r3, r2
 8005730:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005732:	4b14      	ldr	r3, [pc, #80]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a13      	ldr	r2, [pc, #76]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573e:	f7fd f885 	bl	800284c <HAL_GetTick>
 8005742:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005744:	e009      	b.n	800575a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005746:	f7fd f881 	bl	800284c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d902      	bls.n	800575a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	73fb      	strb	r3, [r7, #15]
          break;
 8005758:	e005      	b.n	8005766 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ef      	beq.n	8005746 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d106      	bne.n	800577a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000

08005788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e095      	b.n	80058c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057aa:	d009      	beq.n	80057c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	61da      	str	r2, [r3, #28]
 80057b2:	e005      	b.n	80057c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fc98 	bl	8002110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005800:	d902      	bls.n	8005808 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e002      	b.n	800580e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800580c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005816:	d007      	beq.n	8005828 <HAL_SPI_Init+0xa0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005820:	d002      	beq.n	8005828 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	ea42 0103 	orr.w	r1, r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005872:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	f003 0204 	and.w	r2, r3, #4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058a4:	ea42 0103 	orr.w	r1, r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b088      	sub	sp, #32
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_SPI_Transmit+0x22>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e158      	b.n	8005ba2 <HAL_SPI_Transmit+0x2d4>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058f8:	f7fc ffa8 	bl	800284c <HAL_GetTick>
 80058fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d002      	beq.n	8005914 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800590e:	2302      	movs	r3, #2
 8005910:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005912:	e13d      	b.n	8005b90 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <HAL_SPI_Transmit+0x52>
 800591a:	88fb      	ldrh	r3, [r7, #6]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d102      	bne.n	8005926 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005924:	e134      	b.n	8005b90 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2203      	movs	r2, #3
 800592a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	88fa      	ldrh	r2, [r7, #6]
 800593e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005970:	d10f      	bne.n	8005992 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005990:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d007      	beq.n	80059b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b8:	d94b      	bls.n	8005a52 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Transmit+0xfa>
 80059c2:	8afb      	ldrh	r3, [r7, #22]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d13e      	bne.n	8005a46 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059ec:	e02b      	b.n	8005a46 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d112      	bne.n	8005a22 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a20:	e011      	b.n	8005a46 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a22:	f7fc ff13 	bl	800284c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d803      	bhi.n	8005a3a <HAL_SPI_Transmit+0x16c>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d102      	bne.n	8005a40 <HAL_SPI_Transmit+0x172>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a44:	e0a4      	b.n	8005b90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1ce      	bne.n	80059ee <HAL_SPI_Transmit+0x120>
 8005a50:	e07c      	b.n	8005b4c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_SPI_Transmit+0x192>
 8005a5a:	8afb      	ldrh	r3, [r7, #22]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d170      	bne.n	8005b42 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d912      	bls.n	8005a90 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b02      	subs	r3, #2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a8e:	e058      	b.n	8005b42 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ab6:	e044      	b.n	8005b42 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d12b      	bne.n	8005b1e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d912      	bls.n	8005af6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	1c9a      	adds	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	3b02      	subs	r3, #2
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af4:	e025      	b.n	8005b42 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	330c      	adds	r3, #12
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	3b01      	subs	r3, #1
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b1c:	e011      	b.n	8005b42 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1e:	f7fc fe95 	bl	800284c <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d803      	bhi.n	8005b36 <HAL_SPI_Transmit+0x268>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_Transmit+0x26e>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b40:	e026      	b.n	8005b90 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1b5      	bne.n	8005ab8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fbdf 	bl	8006314 <SPI_EndRxTxTransaction>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e000      	b.n	8005b90 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005b8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ba0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_SPI_Transmit_DMA+0x20>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e0d8      	b.n	8005d7e <HAL_SPI_Transmit_DMA+0x1d2>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005be4:	e0c6      	b.n	8005d74 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <HAL_SPI_Transmit_DMA+0x46>
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bf6:	e0bd      	b.n	8005d74 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	88fa      	ldrh	r2, [r7, #6]
 8005c16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c42:	d10f      	bne.n	8005c64 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	4a47      	ldr	r2, [pc, #284]	; (8005d88 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	4a46      	ldr	r2, [pc, #280]	; (8005d8c <HAL_SPI_Transmit_DMA+0x1e0>)
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	4a45      	ldr	r2, [pc, #276]	; (8005d90 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c80:	2200      	movs	r2, #0
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c92:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c9c:	d82d      	bhi.n	8005cfa <HAL_SPI_Transmit_DMA+0x14e>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca8:	d127      	bne.n	8005cfa <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10f      	bne.n	8005cd8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cc6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	085b      	lsrs	r3, r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd6:	e010      	b.n	8005cfa <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ce6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	4619      	mov	r1, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005d12:	f7fd ff33 	bl	8003b7c <HAL_DMA_Start_IT>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00c      	beq.n	8005d36 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	f043 0210 	orr.w	r2, r3, #16
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d34:	e01e      	b.n	8005d74 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b40      	cmp	r3, #64	; 0x40
 8005d42:	d007      	beq.n	8005d54 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d52:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0220 	orr.w	r2, r2, #32
 8005d62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0202 	orr.w	r2, r2, #2
 8005d72:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	08006063 	.word	0x08006063
 8005d8c:	08005fbd 	.word	0x08005fbd
 8005d90:	0800607f 	.word	0x0800607f

08005d94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	099b      	lsrs	r3, r3, #6
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10f      	bne.n	8005dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
    return;
 8005dd6:	e0d8      	b.n	8005f8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	085b      	lsrs	r3, r3, #1
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HAL_SPI_IRQHandler+0x66>
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	09db      	lsrs	r3, r3, #7
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
    return;
 8005df8:	e0c7      	b.n	8005f8a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10c      	bne.n	8005e20 <HAL_SPI_IRQHandler+0x8c>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	099b      	lsrs	r3, r3, #6
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	0a1b      	lsrs	r3, r3, #8
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80b5 	beq.w	8005f8a <HAL_SPI_IRQHandler+0x1f6>
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	095b      	lsrs	r3, r3, #5
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 80ae 	beq.w	8005f8a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	099b      	lsrs	r3, r3, #6
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d023      	beq.n	8005e82 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d011      	beq.n	8005e6a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f043 0204 	orr.w	r2, r3, #4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	e00b      	b.n	8005e82 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	693b      	ldr	r3, [r7, #16]
        return;
 8005e80:	e083      	b.n	8005f8a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d014      	beq.n	8005eb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00c      	beq.n	8005ede <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	f043 0208 	orr.w	r2, r3, #8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d050      	beq.n	8005f88 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_SPI_IRQHandler+0x17e>
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d034      	beq.n	8005f7c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0203 	bic.w	r2, r2, #3
 8005f20:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d011      	beq.n	8005f4e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2e:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_SPI_IRQHandler+0x1fc>)
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fd fe80 	bl	8003c3c <HAL_DMA_Abort_IT>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d016      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <HAL_SPI_IRQHandler+0x1fc>)
 8005f5c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd fe6a 	bl	8003c3c <HAL_DMA_Abort_IT>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f7a:	e003      	b.n	8005f84 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f813 	bl	8005fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f82:	e000      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f84:	bf00      	nop
    return;
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
  }
}
 8005f8a:	3720      	adds	r7, #32
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	080060bf 	.word	0x080060bf

08005f94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fca:	f7fc fc3f 	bl	800284c <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0320 	and.w	r3, r3, #32
 8005fda:	2b20      	cmp	r3, #32
 8005fdc:	d03b      	beq.n	8006056 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0220 	bic.w	r2, r2, #32
 8005fec:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0202 	bic.w	r2, r2, #2
 8005ffc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	2164      	movs	r1, #100	; 0x64
 8006002:	6978      	ldr	r0, [r7, #20]
 8006004:	f000 f986 	bl	8006314 <SPI_EndRxTxTransaction>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d005      	beq.n	800601a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006012:	f043 0220 	orr.w	r2, r3, #32
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ffaa 	bl	8005fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006054:	e002      	b.n	800605c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006056:	6978      	ldr	r0, [r7, #20]
 8006058:	f7fb fd5a 	bl	8001b10 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff ff8f 	bl	8005f94 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0203 	bic.w	r2, r2, #3
 800609a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	f043 0210 	orr.w	r2, r3, #16
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff ff79 	bl	8005fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff ff64 	bl	8005fa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060f8:	f7fc fba8 	bl	800284c <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006100:	1a9b      	subs	r3, r3, r2
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4413      	add	r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006108:	f7fc fba0 	bl	800284c <HAL_GetTick>
 800610c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	015b      	lsls	r3, r3, #5
 8006114:	0d1b      	lsrs	r3, r3, #20
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	fb02 f303 	mul.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611e:	e054      	b.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006126:	d050      	beq.n	80061ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006128:	f7fc fb90 	bl	800284c <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	429a      	cmp	r2, r3
 8006136:	d902      	bls.n	800613e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d13d      	bne.n	80061ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800614c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006156:	d111      	bne.n	800617c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006160:	d004      	beq.n	800616c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d107      	bne.n	800617c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006184:	d10f      	bne.n	80061a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e017      	b.n	80061ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d19b      	bne.n	8006120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000034 	.word	0x20000034

080061f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006206:	f7fc fb21 	bl	800284c <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	4413      	add	r3, r2
 8006214:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006216:	f7fc fb19 	bl	800284c <HAL_GetTick>
 800621a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800621c:	4b3c      	ldr	r3, [pc, #240]	; (8006310 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	0d1b      	lsrs	r3, r3, #20
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006234:	e05f      	b.n	80062f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800623c:	d106      	bne.n	800624c <SPI_WaitFifoStateUntilTimeout+0x54>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d103      	bne.n	800624c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d050      	beq.n	80062f6 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006254:	f7fc fafa 	bl	800284c <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	429a      	cmp	r2, r3
 8006262:	d902      	bls.n	800626a <SPI_WaitFifoStateUntilTimeout+0x72>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d13d      	bne.n	80062e6 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006282:	d111      	bne.n	80062a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	d004      	beq.n	8006298 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006296:	d107      	bne.n	80062a8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	d10f      	bne.n	80062d2 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e010      	b.n	8006308 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d197      	bne.n	8006236 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3720      	adds	r7, #32
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000034 	.word	0x20000034

08006314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff ff63 	bl	80061f8 <SPI_WaitFifoStateUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e027      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	2200      	movs	r2, #0
 8006350:	2180      	movs	r1, #128	; 0x80
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f7ff fec8 	bl	80060e8 <SPI_WaitFlagStateUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006362:	f043 0220 	orr.w	r2, r3, #32
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e014      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2200      	movs	r2, #0
 8006376:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f7ff ff3c 	bl	80061f8 <SPI_WaitFifoStateUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d007      	beq.n	8006396 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	f043 0220 	orr.w	r2, r3, #32
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e000      	b.n	8006398 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e049      	b.n	8006446 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7fc f930 	bl	800262c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	3304      	adds	r3, #4
 80063dc:	4619      	mov	r1, r3
 80063de:	4610      	mov	r0, r2
 80063e0:	f000 fb80 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <HAL_TIM_PWM_Start+0x24>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e03c      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d109      	bne.n	800648e <HAL_TIM_PWM_Start+0x3e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b01      	cmp	r3, #1
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e02f      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b08      	cmp	r3, #8
 8006492:	d109      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x58>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	e022      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d109      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x72>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	bf14      	ite	ne
 80064ba:	2301      	movne	r3, #1
 80064bc:	2300      	moveq	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	e015      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d109      	bne.n	80064dc <HAL_TIM_PWM_Start+0x8c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e008      	b.n	80064ee <HAL_TIM_PWM_Start+0x9e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	bf14      	ite	ne
 80064e8:	2301      	movne	r3, #1
 80064ea:	2300      	moveq	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e09c      	b.n	8006630 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <HAL_TIM_PWM_Start+0xb6>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006504:	e023      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d104      	bne.n	8006516 <HAL_TIM_PWM_Start+0xc6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	e01b      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d104      	bne.n	8006526 <HAL_TIM_PWM_Start+0xd6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006524:	e013      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d104      	bne.n	8006536 <HAL_TIM_PWM_Start+0xe6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2202      	movs	r2, #2
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006534:	e00b      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b10      	cmp	r3, #16
 800653a:	d104      	bne.n	8006546 <HAL_TIM_PWM_Start+0xf6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006544:	e003      	b.n	800654e <HAL_TIM_PWM_Start+0xfe>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2201      	movs	r2, #1
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe34 	bl	80071c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a35      	ldr	r2, [pc, #212]	; (8006638 <HAL_TIM_PWM_Start+0x1e8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_TIM_PWM_Start+0x13e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a34      	ldr	r2, [pc, #208]	; (800663c <HAL_TIM_PWM_Start+0x1ec>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_TIM_PWM_Start+0x13e>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a32      	ldr	r2, [pc, #200]	; (8006640 <HAL_TIM_PWM_Start+0x1f0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d009      	beq.n	800658e <HAL_TIM_PWM_Start+0x13e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a31      	ldr	r2, [pc, #196]	; (8006644 <HAL_TIM_PWM_Start+0x1f4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_TIM_PWM_Start+0x13e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <HAL_TIM_PWM_Start+0x1f8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d101      	bne.n	8006592 <HAL_TIM_PWM_Start+0x142>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_TIM_PWM_Start+0x144>
 8006592:	2300      	movs	r3, #0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <HAL_TIM_PWM_Start+0x1e8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d01d      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d018      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_TIM_PWM_Start+0x1fc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_TIM_PWM_Start+0x200>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_PWM_Start+0x204>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_TIM_PWM_Start+0x1ec>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIM_PWM_Start+0x19e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_TIM_PWM_Start+0x1f0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d115      	bne.n	800661a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <HAL_TIM_PWM_Start+0x208>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d015      	beq.n	800662c <HAL_TIM_PWM_Start+0x1dc>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006606:	d011      	beq.n	800662c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0201 	orr.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006618:	e008      	b.n	800662c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	e000      	b.n	800662e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40013400 	.word	0x40013400
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	00010007 	.word	0x00010007

0800665c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e097      	b.n	80067a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fb ff8d 	bl	80025a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066a0:	f023 0307 	bic.w	r3, r3, #7
 80066a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f000 fa17 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	4313      	orrs	r3, r2
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066fc:	f023 030c 	bic.w	r3, r3, #12
 8006700:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006708:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800670c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	69db      	ldr	r3, [r3, #28]
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	4313      	orrs	r3, r2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	011a      	lsls	r2, r3, #4
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	031b      	lsls	r3, r3, #12
 800672c:	4313      	orrs	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	4313      	orrs	r3, r2
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d110      	bne.n	80067fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d102      	bne.n	80067e4 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067de:	7b7b      	ldrb	r3, [r7, #13]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d001      	beq.n	80067e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e068      	b.n	80068ba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f8:	e031      	b.n	800685e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d110      	bne.n	8006822 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006800:	7bbb      	ldrb	r3, [r7, #14]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d102      	bne.n	800680c <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006806:	7b3b      	ldrb	r3, [r7, #12]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d001      	beq.n	8006810 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e054      	b.n	80068ba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006820:	e01d      	b.n	800685e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006822:	7bfb      	ldrb	r3, [r7, #15]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d108      	bne.n	800683a <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d105      	bne.n	800683a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800682e:	7b7b      	ldrb	r3, [r7, #13]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d102      	bne.n	800683a <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006834:	7b3b      	ldrb	r3, [r7, #12]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d001      	beq.n	800683e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e03d      	b.n	80068ba <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2202      	movs	r2, #2
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <HAL_TIM_Encoder_Start+0xc2>
 8006864:	2b04      	cmp	r3, #4
 8006866:	d008      	beq.n	800687a <HAL_TIM_Encoder_Start+0xd2>
 8006868:	e00f      	b.n	800688a <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2201      	movs	r2, #1
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fca6 	bl	80071c4 <TIM_CCxChannelCmd>
      break;
 8006878:	e016      	b.n	80068a8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2201      	movs	r2, #1
 8006880:	2104      	movs	r1, #4
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fc9e 	bl	80071c4 <TIM_CCxChannelCmd>
      break;
 8006888:	e00e      	b.n	80068a8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2201      	movs	r2, #1
 8006890:	2100      	movs	r1, #0
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc96 	bl	80071c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	2104      	movs	r1, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fc8f 	bl	80071c4 <TIM_CCxChannelCmd>
      break;
 80068a6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068da:	2302      	movs	r3, #2
 80068dc:	e0fd      	b.n	8006ada <HAL_TIM_PWM_ConfigChannel+0x216>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b14      	cmp	r3, #20
 80068ea:	f200 80f0 	bhi.w	8006ace <HAL_TIM_PWM_ConfigChannel+0x20a>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006949 	.word	0x08006949
 80068f8:	08006acf 	.word	0x08006acf
 80068fc:	08006acf 	.word	0x08006acf
 8006900:	08006acf 	.word	0x08006acf
 8006904:	08006989 	.word	0x08006989
 8006908:	08006acf 	.word	0x08006acf
 800690c:	08006acf 	.word	0x08006acf
 8006910:	08006acf 	.word	0x08006acf
 8006914:	080069cb 	.word	0x080069cb
 8006918:	08006acf 	.word	0x08006acf
 800691c:	08006acf 	.word	0x08006acf
 8006920:	08006acf 	.word	0x08006acf
 8006924:	08006a0b 	.word	0x08006a0b
 8006928:	08006acf 	.word	0x08006acf
 800692c:	08006acf 	.word	0x08006acf
 8006930:	08006acf 	.word	0x08006acf
 8006934:	08006a4d 	.word	0x08006a4d
 8006938:	08006acf 	.word	0x08006acf
 800693c:	08006acf 	.word	0x08006acf
 8006940:	08006acf 	.word	0x08006acf
 8006944:	08006a8d 	.word	0x08006a8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f962 	bl	8006c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0208 	orr.w	r2, r2, #8
 8006962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	699a      	ldr	r2, [r3, #24]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0204 	bic.w	r2, r2, #4
 8006972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6999      	ldr	r1, [r3, #24]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	619a      	str	r2, [r3, #24]
      break;
 8006986:	e0a3      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f9d2 	bl	8006d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699a      	ldr	r2, [r3, #24]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6999      	ldr	r1, [r3, #24]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	021a      	lsls	r2, r3, #8
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	619a      	str	r2, [r3, #24]
      break;
 80069c8:	e082      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fa3b 	bl	8006e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f042 0208 	orr.w	r2, r2, #8
 80069e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0204 	bic.w	r2, r2, #4
 80069f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69d9      	ldr	r1, [r3, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	61da      	str	r2, [r3, #28]
      break;
 8006a08:	e062      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 faa3 	bl	8006f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69d9      	ldr	r1, [r3, #28]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	021a      	lsls	r2, r3, #8
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	61da      	str	r2, [r3, #28]
      break;
 8006a4a:	e041      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 faec 	bl	8007030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0208 	orr.w	r2, r2, #8
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0204 	bic.w	r2, r2, #4
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691a      	ldr	r2, [r3, #16]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a8a:	e021      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fb30 	bl	80070f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	021a      	lsls	r2, r3, #8
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006acc:	e000      	b.n	8006ad0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006ace:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b02:	d00f      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a3c      	ldr	r2, [pc, #240]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a3b      	ldr	r2, [pc, #236]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a3a      	ldr	r2, [pc, #232]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d01f      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d01b      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <TIM_Base_SetConfig+0x118>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d017      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <TIM_Base_SetConfig+0x11c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00f      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a29      	ldr	r2, [pc, #164]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00b      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d007      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a27      	ldr	r2, [pc, #156]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d003      	beq.n	8006b7e <TIM_Base_SetConfig+0x9a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a26      	ldr	r2, [pc, #152]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a10      	ldr	r2, [pc, #64]	; (8006bf8 <TIM_Base_SetConfig+0x114>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00f      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a12      	ldr	r2, [pc, #72]	; (8006c08 <TIM_Base_SetConfig+0x124>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00b      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <TIM_Base_SetConfig+0x128>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d007      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a10      	ldr	r2, [pc, #64]	; (8006c10 <TIM_Base_SetConfig+0x12c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_Base_SetConfig+0xf8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0f      	ldr	r2, [pc, #60]	; (8006c14 <TIM_Base_SetConfig+0x130>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d103      	bne.n	8006be4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691a      	ldr	r2, [r3, #16]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	615a      	str	r2, [r3, #20]
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40014000 	.word	0x40014000
 8006c10:	40014400 	.word	0x40014400
 8006c14:	40014800 	.word	0x40014800

08006c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0201 	bic.w	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0303 	bic.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f023 0302 	bic.w	r3, r3, #2
 8006c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2c      	ldr	r2, [pc, #176]	; (8006d24 <TIM_OC1_SetConfig+0x10c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00f      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2b      	ldr	r2, [pc, #172]	; (8006d28 <TIM_OC1_SetConfig+0x110>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00b      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2a      	ldr	r2, [pc, #168]	; (8006d2c <TIM_OC1_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d007      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <TIM_OC1_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d003      	beq.n	8006c98 <TIM_OC1_SetConfig+0x80>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <TIM_OC1_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d10c      	bne.n	8006cb2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0308 	bic.w	r3, r3, #8
 8006c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 0304 	bic.w	r3, r3, #4
 8006cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1b      	ldr	r2, [pc, #108]	; (8006d24 <TIM_OC1_SetConfig+0x10c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00f      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <TIM_OC1_SetConfig+0x110>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00b      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <TIM_OC1_SetConfig+0x114>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <TIM_OC1_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d003      	beq.n	8006cda <TIM_OC1_SetConfig+0xc2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC1_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d111      	bne.n	8006cfe <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	621a      	str	r2, [r3, #32]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40013400 	.word	0x40013400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800

08006d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f023 0210 	bic.w	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f023 0320 	bic.w	r3, r3, #32
 8006d86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a28      	ldr	r2, [pc, #160]	; (8006e38 <TIM_OC2_SetConfig+0x100>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d003      	beq.n	8006da4 <TIM_OC2_SetConfig+0x6c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a27      	ldr	r2, [pc, #156]	; (8006e3c <TIM_OC2_SetConfig+0x104>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10d      	bne.n	8006dc0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <TIM_OC2_SetConfig+0x100>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00f      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a1c      	ldr	r2, [pc, #112]	; (8006e3c <TIM_OC2_SetConfig+0x104>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00b      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1b      	ldr	r2, [pc, #108]	; (8006e40 <TIM_OC2_SetConfig+0x108>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d007      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a1a      	ldr	r2, [pc, #104]	; (8006e44 <TIM_OC2_SetConfig+0x10c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_OC2_SetConfig+0xb0>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <TIM_OC2_SetConfig+0x110>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d113      	bne.n	8006e10 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40013400 	.word	0x40013400
 8006e40:	40014000 	.word	0x40014000
 8006e44:	40014400 	.word	0x40014400
 8006e48:	40014800 	.word	0x40014800

08006e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a27      	ldr	r2, [pc, #156]	; (8006f48 <TIM_OC3_SetConfig+0xfc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC3_SetConfig+0x6a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a26      	ldr	r2, [pc, #152]	; (8006f4c <TIM_OC3_SetConfig+0x100>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d10d      	bne.n	8006ed2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	021b      	lsls	r3, r3, #8
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <TIM_OC3_SetConfig+0xfc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <TIM_OC3_SetConfig+0x100>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <TIM_OC3_SetConfig+0x104>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <TIM_OC3_SetConfig+0x108>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_OC3_SetConfig+0xae>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <TIM_OC3_SetConfig+0x10c>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d113      	bne.n	8006f22 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	621a      	str	r2, [r3, #32]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40013400 	.word	0x40013400
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800

08006f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <TIM_OC4_SetConfig+0xc0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00f      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	; (8007020 <TIM_OC4_SetConfig+0xc4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00b      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <TIM_OC4_SetConfig+0xc8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d007      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <TIM_OC4_SetConfig+0xcc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x84>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a14      	ldr	r2, [pc, #80]	; (800702c <TIM_OC4_SetConfig+0xd0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	019b      	lsls	r3, r3, #6
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40013400 	.word	0x40013400
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800

08007030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <TIM_OC5_SetConfig+0xb4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00f      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <TIM_OC5_SetConfig+0xb8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d00b      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC5_SetConfig+0xbc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d007      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC5_SetConfig+0xc0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC5_SetConfig+0x7a>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <TIM_OC5_SetConfig+0xc4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d109      	bne.n	80070be <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	621a      	str	r2, [r3, #32]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40013400 	.word	0x40013400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40014400 	.word	0x40014400
 80070f4:	40014800 	.word	0x40014800

080070f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_OC6_SetConfig+0xb8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00f      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <TIM_OC6_SetConfig+0xbc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d00b      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <TIM_OC6_SetConfig+0xc0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d007      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC6_SetConfig+0xc4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC6_SetConfig+0x7c>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <TIM_OC6_SetConfig+0xc8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d109      	bne.n	8007188 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	695b      	ldr	r3, [r3, #20]
 8007180:	029b      	lsls	r3, r3, #10
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	621a      	str	r2, [r3, #32]
}
 80071a2:	bf00      	nop
 80071a4:	371c      	adds	r7, #28
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800

080071c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2201      	movs	r2, #1
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e068      	b.n	80072fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a2e      	ldr	r2, [pc, #184]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a2d      	ldr	r2, [pc, #180]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d108      	bne.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007262:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007274:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1e      	ldr	r2, [pc, #120]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d01d      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729a:	d018      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1b      	ldr	r2, [pc, #108]	; (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d013      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	; (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d00e      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a18      	ldr	r2, [pc, #96]	; (8007318 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d009      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a13      	ldr	r2, [pc, #76]	; (800730c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d004      	beq.n	80072ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a14      	ldr	r2, [pc, #80]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10c      	bne.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40012c00 	.word	0x40012c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40000400 	.word	0x40000400
 8007314:	40000800 	.word	0x40000800
 8007318:	40000c00 	.word	0x40000c00
 800731c:	40014000 	.word	0x40014000

08007320 <__libc_init_array>:
 8007320:	b570      	push	{r4, r5, r6, lr}
 8007322:	4e0d      	ldr	r6, [pc, #52]	; (8007358 <__libc_init_array+0x38>)
 8007324:	4c0d      	ldr	r4, [pc, #52]	; (800735c <__libc_init_array+0x3c>)
 8007326:	1ba4      	subs	r4, r4, r6
 8007328:	10a4      	asrs	r4, r4, #2
 800732a:	2500      	movs	r5, #0
 800732c:	42a5      	cmp	r5, r4
 800732e:	d109      	bne.n	8007344 <__libc_init_array+0x24>
 8007330:	4e0b      	ldr	r6, [pc, #44]	; (8007360 <__libc_init_array+0x40>)
 8007332:	4c0c      	ldr	r4, [pc, #48]	; (8007364 <__libc_init_array+0x44>)
 8007334:	f000 fd78 	bl	8007e28 <_init>
 8007338:	1ba4      	subs	r4, r4, r6
 800733a:	10a4      	asrs	r4, r4, #2
 800733c:	2500      	movs	r5, #0
 800733e:	42a5      	cmp	r5, r4
 8007340:	d105      	bne.n	800734e <__libc_init_array+0x2e>
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007348:	4798      	blx	r3
 800734a:	3501      	adds	r5, #1
 800734c:	e7ee      	b.n	800732c <__libc_init_array+0xc>
 800734e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007352:	4798      	blx	r3
 8007354:	3501      	adds	r5, #1
 8007356:	e7f2      	b.n	800733e <__libc_init_array+0x1e>
 8007358:	08008800 	.word	0x08008800
 800735c:	08008800 	.word	0x08008800
 8007360:	08008800 	.word	0x08008800
 8007364:	08008804 	.word	0x08008804

08007368 <memcpy>:
 8007368:	b510      	push	{r4, lr}
 800736a:	1e43      	subs	r3, r0, #1
 800736c:	440a      	add	r2, r1
 800736e:	4291      	cmp	r1, r2
 8007370:	d100      	bne.n	8007374 <memcpy+0xc>
 8007372:	bd10      	pop	{r4, pc}
 8007374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800737c:	e7f7      	b.n	800736e <memcpy+0x6>

0800737e <memset>:
 800737e:	4402      	add	r2, r0
 8007380:	4603      	mov	r3, r0
 8007382:	4293      	cmp	r3, r2
 8007384:	d100      	bne.n	8007388 <memset+0xa>
 8007386:	4770      	bx	lr
 8007388:	f803 1b01 	strb.w	r1, [r3], #1
 800738c:	e7f9      	b.n	8007382 <memset+0x4>
	...

08007390 <sinf>:
 8007390:	ee10 3a10 	vmov	r3, s0
 8007394:	b507      	push	{r0, r1, r2, lr}
 8007396:	4a1d      	ldr	r2, [pc, #116]	; (800740c <sinf+0x7c>)
 8007398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800739c:	4293      	cmp	r3, r2
 800739e:	dc05      	bgt.n	80073ac <sinf+0x1c>
 80073a0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007410 <sinf+0x80>
 80073a4:	2000      	movs	r0, #0
 80073a6:	f000 fc41 	bl	8007c2c <__kernel_sinf>
 80073aa:	e004      	b.n	80073b6 <sinf+0x26>
 80073ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80073b0:	db04      	blt.n	80073bc <sinf+0x2c>
 80073b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80073b6:	b003      	add	sp, #12
 80073b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80073bc:	4668      	mov	r0, sp
 80073be:	f000 f829 	bl	8007414 <__ieee754_rem_pio2f>
 80073c2:	f000 0003 	and.w	r0, r0, #3
 80073c6:	2801      	cmp	r0, #1
 80073c8:	d008      	beq.n	80073dc <sinf+0x4c>
 80073ca:	2802      	cmp	r0, #2
 80073cc:	d00d      	beq.n	80073ea <sinf+0x5a>
 80073ce:	b9b0      	cbnz	r0, 80073fe <sinf+0x6e>
 80073d0:	2001      	movs	r0, #1
 80073d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80073d6:	ed9d 0a00 	vldr	s0, [sp]
 80073da:	e7e4      	b.n	80073a6 <sinf+0x16>
 80073dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80073e0:	ed9d 0a00 	vldr	s0, [sp]
 80073e4:	f000 f942 	bl	800766c <__kernel_cosf>
 80073e8:	e7e5      	b.n	80073b6 <sinf+0x26>
 80073ea:	2001      	movs	r0, #1
 80073ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80073f0:	ed9d 0a00 	vldr	s0, [sp]
 80073f4:	f000 fc1a 	bl	8007c2c <__kernel_sinf>
 80073f8:	eeb1 0a40 	vneg.f32	s0, s0
 80073fc:	e7db      	b.n	80073b6 <sinf+0x26>
 80073fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8007402:	ed9d 0a00 	vldr	s0, [sp]
 8007406:	f000 f931 	bl	800766c <__kernel_cosf>
 800740a:	e7f5      	b.n	80073f8 <sinf+0x68>
 800740c:	3f490fd8 	.word	0x3f490fd8
 8007410:	00000000 	.word	0x00000000

08007414 <__ieee754_rem_pio2f>:
 8007414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007416:	ee10 6a10 	vmov	r6, s0
 800741a:	4b86      	ldr	r3, [pc, #536]	; (8007634 <__ieee754_rem_pio2f+0x220>)
 800741c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007420:	429c      	cmp	r4, r3
 8007422:	b087      	sub	sp, #28
 8007424:	4605      	mov	r5, r0
 8007426:	dc05      	bgt.n	8007434 <__ieee754_rem_pio2f+0x20>
 8007428:	2300      	movs	r3, #0
 800742a:	ed85 0a00 	vstr	s0, [r5]
 800742e:	6043      	str	r3, [r0, #4]
 8007430:	2000      	movs	r0, #0
 8007432:	e020      	b.n	8007476 <__ieee754_rem_pio2f+0x62>
 8007434:	4b80      	ldr	r3, [pc, #512]	; (8007638 <__ieee754_rem_pio2f+0x224>)
 8007436:	429c      	cmp	r4, r3
 8007438:	dc38      	bgt.n	80074ac <__ieee754_rem_pio2f+0x98>
 800743a:	2e00      	cmp	r6, #0
 800743c:	f024 040f 	bic.w	r4, r4, #15
 8007440:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800763c <__ieee754_rem_pio2f+0x228>
 8007444:	4b7e      	ldr	r3, [pc, #504]	; (8007640 <__ieee754_rem_pio2f+0x22c>)
 8007446:	dd18      	ble.n	800747a <__ieee754_rem_pio2f+0x66>
 8007448:	429c      	cmp	r4, r3
 800744a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800744e:	bf09      	itett	eq
 8007450:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8007644 <__ieee754_rem_pio2f+0x230>
 8007454:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8007648 <__ieee754_rem_pio2f+0x234>
 8007458:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800745c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800764c <__ieee754_rem_pio2f+0x238>
 8007460:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007464:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007468:	edc0 6a00 	vstr	s13, [r0]
 800746c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007470:	edc0 7a01 	vstr	s15, [r0, #4]
 8007474:	2001      	movs	r0, #1
 8007476:	b007      	add	sp, #28
 8007478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800747a:	429c      	cmp	r4, r3
 800747c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007480:	bf09      	itett	eq
 8007482:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8007644 <__ieee754_rem_pio2f+0x230>
 8007486:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8007648 <__ieee754_rem_pio2f+0x234>
 800748a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800748e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800764c <__ieee754_rem_pio2f+0x238>
 8007492:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800749a:	edc0 6a00 	vstr	s13, [r0]
 800749e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80074a6:	f04f 30ff 	mov.w	r0, #4294967295
 80074aa:	e7e4      	b.n	8007476 <__ieee754_rem_pio2f+0x62>
 80074ac:	4b68      	ldr	r3, [pc, #416]	; (8007650 <__ieee754_rem_pio2f+0x23c>)
 80074ae:	429c      	cmp	r4, r3
 80074b0:	dc71      	bgt.n	8007596 <__ieee754_rem_pio2f+0x182>
 80074b2:	f000 fc03 	bl	8007cbc <fabsf>
 80074b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8007654 <__ieee754_rem_pio2f+0x240>
 80074ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80074be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80074c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80074ca:	ee17 0a90 	vmov	r0, s15
 80074ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800763c <__ieee754_rem_pio2f+0x228>
 80074d2:	eeb1 7a46 	vneg.f32	s14, s12
 80074d6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80074da:	281f      	cmp	r0, #31
 80074dc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007648 <__ieee754_rem_pio2f+0x234>
 80074e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80074e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80074e8:	ee16 3a90 	vmov	r3, s13
 80074ec:	dc1c      	bgt.n	8007528 <__ieee754_rem_pio2f+0x114>
 80074ee:	1e47      	subs	r7, r0, #1
 80074f0:	4959      	ldr	r1, [pc, #356]	; (8007658 <__ieee754_rem_pio2f+0x244>)
 80074f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80074f6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80074fa:	428a      	cmp	r2, r1
 80074fc:	d014      	beq.n	8007528 <__ieee754_rem_pio2f+0x114>
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	ed95 7a00 	vldr	s14, [r5]
 8007504:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007508:	2e00      	cmp	r6, #0
 800750a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800750e:	ed85 0a01 	vstr	s0, [r5, #4]
 8007512:	dab0      	bge.n	8007476 <__ieee754_rem_pio2f+0x62>
 8007514:	eeb1 7a47 	vneg.f32	s14, s14
 8007518:	eeb1 0a40 	vneg.f32	s0, s0
 800751c:	ed85 7a00 	vstr	s14, [r5]
 8007520:	ed85 0a01 	vstr	s0, [r5, #4]
 8007524:	4240      	negs	r0, r0
 8007526:	e7a6      	b.n	8007476 <__ieee754_rem_pio2f+0x62>
 8007528:	15e4      	asrs	r4, r4, #23
 800752a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800752e:	1aa2      	subs	r2, r4, r2
 8007530:	2a08      	cmp	r2, #8
 8007532:	dde4      	ble.n	80074fe <__ieee754_rem_pio2f+0xea>
 8007534:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007644 <__ieee754_rem_pio2f+0x230>
 8007538:	eef0 6a40 	vmov.f32	s13, s0
 800753c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007540:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007544:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007548:	eddf 7a40 	vldr	s15, [pc, #256]	; 800764c <__ieee754_rem_pio2f+0x238>
 800754c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007550:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007554:	eef0 7a40 	vmov.f32	s15, s0
 8007558:	ee15 3a90 	vmov	r3, s11
 800755c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007560:	1aa4      	subs	r4, r4, r2
 8007562:	2c19      	cmp	r4, #25
 8007564:	dc04      	bgt.n	8007570 <__ieee754_rem_pio2f+0x15c>
 8007566:	edc5 5a00 	vstr	s11, [r5]
 800756a:	eeb0 0a66 	vmov.f32	s0, s13
 800756e:	e7c7      	b.n	8007500 <__ieee754_rem_pio2f+0xec>
 8007570:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800765c <__ieee754_rem_pio2f+0x248>
 8007574:	eeb0 0a66 	vmov.f32	s0, s13
 8007578:	eea7 0a25 	vfma.f32	s0, s14, s11
 800757c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007580:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007584:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007660 <__ieee754_rem_pio2f+0x24c>
 8007588:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800758c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007590:	ed85 7a00 	vstr	s14, [r5]
 8007594:	e7b4      	b.n	8007500 <__ieee754_rem_pio2f+0xec>
 8007596:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800759a:	db06      	blt.n	80075aa <__ieee754_rem_pio2f+0x196>
 800759c:	ee70 7a40 	vsub.f32	s15, s0, s0
 80075a0:	edc0 7a01 	vstr	s15, [r0, #4]
 80075a4:	edc0 7a00 	vstr	s15, [r0]
 80075a8:	e742      	b.n	8007430 <__ieee754_rem_pio2f+0x1c>
 80075aa:	15e2      	asrs	r2, r4, #23
 80075ac:	3a86      	subs	r2, #134	; 0x86
 80075ae:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075ba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8007664 <__ieee754_rem_pio2f+0x250>
 80075be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80075c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80075ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80075d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80075d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075da:	ed8d 7a04 	vstr	s14, [sp, #16]
 80075de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80075e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ea:	edcd 7a05 	vstr	s15, [sp, #20]
 80075ee:	d11e      	bne.n	800762e <__ieee754_rem_pio2f+0x21a>
 80075f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80075f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f8:	bf0c      	ite	eq
 80075fa:	2301      	moveq	r3, #1
 80075fc:	2302      	movne	r3, #2
 80075fe:	491a      	ldr	r1, [pc, #104]	; (8007668 <__ieee754_rem_pio2f+0x254>)
 8007600:	9101      	str	r1, [sp, #4]
 8007602:	2102      	movs	r1, #2
 8007604:	9100      	str	r1, [sp, #0]
 8007606:	a803      	add	r0, sp, #12
 8007608:	4629      	mov	r1, r5
 800760a:	f000 f88d 	bl	8007728 <__kernel_rem_pio2f>
 800760e:	2e00      	cmp	r6, #0
 8007610:	f6bf af31 	bge.w	8007476 <__ieee754_rem_pio2f+0x62>
 8007614:	edd5 7a00 	vldr	s15, [r5]
 8007618:	eef1 7a67 	vneg.f32	s15, s15
 800761c:	edc5 7a00 	vstr	s15, [r5]
 8007620:	edd5 7a01 	vldr	s15, [r5, #4]
 8007624:	eef1 7a67 	vneg.f32	s15, s15
 8007628:	edc5 7a01 	vstr	s15, [r5, #4]
 800762c:	e77a      	b.n	8007524 <__ieee754_rem_pio2f+0x110>
 800762e:	2303      	movs	r3, #3
 8007630:	e7e5      	b.n	80075fe <__ieee754_rem_pio2f+0x1ea>
 8007632:	bf00      	nop
 8007634:	3f490fd8 	.word	0x3f490fd8
 8007638:	4016cbe3 	.word	0x4016cbe3
 800763c:	3fc90f80 	.word	0x3fc90f80
 8007640:	3fc90fd0 	.word	0x3fc90fd0
 8007644:	37354400 	.word	0x37354400
 8007648:	37354443 	.word	0x37354443
 800764c:	2e85a308 	.word	0x2e85a308
 8007650:	43490f80 	.word	0x43490f80
 8007654:	3f22f984 	.word	0x3f22f984
 8007658:	08008430 	.word	0x08008430
 800765c:	2e85a300 	.word	0x2e85a300
 8007660:	248d3132 	.word	0x248d3132
 8007664:	43800000 	.word	0x43800000
 8007668:	080084b0 	.word	0x080084b0

0800766c <__kernel_cosf>:
 800766c:	ee10 3a10 	vmov	r3, s0
 8007670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007674:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767c:	da05      	bge.n	800768a <__kernel_cosf+0x1e>
 800767e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007682:	ee17 2a90 	vmov	r2, s15
 8007686:	2a00      	cmp	r2, #0
 8007688:	d03b      	beq.n	8007702 <__kernel_cosf+0x96>
 800768a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800768e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007692:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007708 <__kernel_cosf+0x9c>
 8007696:	4a1d      	ldr	r2, [pc, #116]	; (800770c <__kernel_cosf+0xa0>)
 8007698:	ee66 7a07 	vmul.f32	s15, s12, s14
 800769c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8007710 <__kernel_cosf+0xa4>
 80076a0:	eea6 7a25 	vfma.f32	s14, s12, s11
 80076a4:	4293      	cmp	r3, r2
 80076a6:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8007714 <__kernel_cosf+0xa8>
 80076aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80076ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8007718 <__kernel_cosf+0xac>
 80076b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80076b6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800771c <__kernel_cosf+0xb0>
 80076ba:	eee7 5a06 	vfma.f32	s11, s14, s12
 80076be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007720 <__kernel_cosf+0xb4>
 80076c2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80076c6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80076ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 80076ce:	eee6 0a07 	vfma.f32	s1, s12, s14
 80076d2:	dc04      	bgt.n	80076de <__kernel_cosf+0x72>
 80076d4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80076d8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80076dc:	4770      	bx	lr
 80076de:	4a11      	ldr	r2, [pc, #68]	; (8007724 <__kernel_cosf+0xb8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	bfda      	itte	le
 80076e4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80076e8:	ee07 3a10 	vmovle	s14, r3
 80076ec:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80076f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076f4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80076f8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80076fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007700:	4770      	bx	lr
 8007702:	eeb0 0a66 	vmov.f32	s0, s13
 8007706:	4770      	bx	lr
 8007708:	ad47d74e 	.word	0xad47d74e
 800770c:	3e999999 	.word	0x3e999999
 8007710:	310f74f6 	.word	0x310f74f6
 8007714:	b493f27c 	.word	0xb493f27c
 8007718:	37d00d01 	.word	0x37d00d01
 800771c:	bab60b61 	.word	0xbab60b61
 8007720:	3d2aaaab 	.word	0x3d2aaaab
 8007724:	3f480000 	.word	0x3f480000

08007728 <__kernel_rem_pio2f>:
 8007728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	ed2d 8b04 	vpush	{d8-d9}
 8007730:	b0d7      	sub	sp, #348	; 0x15c
 8007732:	469b      	mov	fp, r3
 8007734:	460e      	mov	r6, r1
 8007736:	4bbe      	ldr	r3, [pc, #760]	; (8007a30 <__kernel_rem_pio2f+0x308>)
 8007738:	9964      	ldr	r1, [sp, #400]	; 0x190
 800773a:	9002      	str	r0, [sp, #8]
 800773c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8007740:	9865      	ldr	r0, [sp, #404]	; 0x194
 8007742:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8007a40 <__kernel_rem_pio2f+0x318>
 8007746:	1ed1      	subs	r1, r2, #3
 8007748:	2308      	movs	r3, #8
 800774a:	fb91 f1f3 	sdiv	r1, r1, r3
 800774e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007752:	f10b 3aff 	add.w	sl, fp, #4294967295
 8007756:	1c4c      	adds	r4, r1, #1
 8007758:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800775c:	eba1 050a 	sub.w	r5, r1, sl
 8007760:	aa1a      	add	r2, sp, #104	; 0x68
 8007762:	eb09 070a 	add.w	r7, r9, sl
 8007766:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800776a:	4696      	mov	lr, r2
 800776c:	2300      	movs	r3, #0
 800776e:	42bb      	cmp	r3, r7
 8007770:	dd0f      	ble.n	8007792 <__kernel_rem_pio2f+0x6a>
 8007772:	af42      	add	r7, sp, #264	; 0x108
 8007774:	2200      	movs	r2, #0
 8007776:	454a      	cmp	r2, r9
 8007778:	dc27      	bgt.n	80077ca <__kernel_rem_pio2f+0xa2>
 800777a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800777e:	eb0b 0302 	add.w	r3, fp, r2
 8007782:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007786:	9d02      	ldr	r5, [sp, #8]
 8007788:	eddf 7aad 	vldr	s15, [pc, #692]	; 8007a40 <__kernel_rem_pio2f+0x318>
 800778c:	f04f 0c00 	mov.w	ip, #0
 8007790:	e015      	b.n	80077be <__kernel_rem_pio2f+0x96>
 8007792:	42dd      	cmn	r5, r3
 8007794:	bf5d      	ittte	pl
 8007796:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800779a:	ee07 2a90 	vmovpl	s15, r2
 800779e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80077a2:	eef0 7a47 	vmovmi.f32	s15, s14
 80077a6:	ecee 7a01 	vstmia	lr!, {s15}
 80077aa:	3301      	adds	r3, #1
 80077ac:	e7df      	b.n	800776e <__kernel_rem_pio2f+0x46>
 80077ae:	ecf5 6a01 	vldmia	r5!, {s13}
 80077b2:	ed33 7a01 	vldmdb	r3!, {s14}
 80077b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80077ba:	f10c 0c01 	add.w	ip, ip, #1
 80077be:	45d4      	cmp	ip, sl
 80077c0:	ddf5      	ble.n	80077ae <__kernel_rem_pio2f+0x86>
 80077c2:	ece7 7a01 	vstmia	r7!, {s15}
 80077c6:	3201      	adds	r2, #1
 80077c8:	e7d5      	b.n	8007776 <__kernel_rem_pio2f+0x4e>
 80077ca:	ab06      	add	r3, sp, #24
 80077cc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8007a3c <__kernel_rem_pio2f+0x314>
 80077d6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8007a38 <__kernel_rem_pio2f+0x310>
 80077da:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80077de:	9303      	str	r3, [sp, #12]
 80077e0:	464d      	mov	r5, r9
 80077e2:	ab56      	add	r3, sp, #344	; 0x158
 80077e4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80077e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80077ec:	3f01      	subs	r7, #1
 80077ee:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80077f2:	00bf      	lsls	r7, r7, #2
 80077f4:	ab56      	add	r3, sp, #344	; 0x158
 80077f6:	19da      	adds	r2, r3, r7
 80077f8:	3a4c      	subs	r2, #76	; 0x4c
 80077fa:	2300      	movs	r3, #0
 80077fc:	1ae9      	subs	r1, r5, r3
 80077fe:	2900      	cmp	r1, #0
 8007800:	dc4c      	bgt.n	800789c <__kernel_rem_pio2f+0x174>
 8007802:	4620      	mov	r0, r4
 8007804:	f000 faa4 	bl	8007d50 <scalbnf>
 8007808:	eeb0 8a40 	vmov.f32	s16, s0
 800780c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8007810:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007814:	f000 fa5a 	bl	8007ccc <floorf>
 8007818:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800781c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007820:	2c00      	cmp	r4, #0
 8007822:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007826:	edcd 7a01 	vstr	s15, [sp, #4]
 800782a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800782e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007832:	dd48      	ble.n	80078c6 <__kernel_rem_pio2f+0x19e>
 8007834:	1e69      	subs	r1, r5, #1
 8007836:	ab06      	add	r3, sp, #24
 8007838:	f1c4 0008 	rsb	r0, r4, #8
 800783c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8007840:	9a01      	ldr	r2, [sp, #4]
 8007842:	fa4c f300 	asr.w	r3, ip, r0
 8007846:	441a      	add	r2, r3
 8007848:	4083      	lsls	r3, r0
 800784a:	9201      	str	r2, [sp, #4]
 800784c:	ebac 0203 	sub.w	r2, ip, r3
 8007850:	ab06      	add	r3, sp, #24
 8007852:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8007856:	f1c4 0307 	rsb	r3, r4, #7
 800785a:	fa42 f803 	asr.w	r8, r2, r3
 800785e:	f1b8 0f00 	cmp.w	r8, #0
 8007862:	dd41      	ble.n	80078e8 <__kernel_rem_pio2f+0x1c0>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	2000      	movs	r0, #0
 8007868:	3301      	adds	r3, #1
 800786a:	9301      	str	r3, [sp, #4]
 800786c:	4601      	mov	r1, r0
 800786e:	4285      	cmp	r5, r0
 8007870:	dc6d      	bgt.n	800794e <__kernel_rem_pio2f+0x226>
 8007872:	2c00      	cmp	r4, #0
 8007874:	dd04      	ble.n	8007880 <__kernel_rem_pio2f+0x158>
 8007876:	2c01      	cmp	r4, #1
 8007878:	d07e      	beq.n	8007978 <__kernel_rem_pio2f+0x250>
 800787a:	2c02      	cmp	r4, #2
 800787c:	f000 8086 	beq.w	800798c <__kernel_rem_pio2f+0x264>
 8007880:	f1b8 0f02 	cmp.w	r8, #2
 8007884:	d130      	bne.n	80078e8 <__kernel_rem_pio2f+0x1c0>
 8007886:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800788a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800788e:	b359      	cbz	r1, 80078e8 <__kernel_rem_pio2f+0x1c0>
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fa5d 	bl	8007d50 <scalbnf>
 8007896:	ee38 8a40 	vsub.f32	s16, s16, s0
 800789a:	e025      	b.n	80078e8 <__kernel_rem_pio2f+0x1c0>
 800789c:	ee60 7a28 	vmul.f32	s15, s0, s17
 80078a0:	a806      	add	r0, sp, #24
 80078a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80078a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078aa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80078ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80078b2:	ee10 1a10 	vmov	r1, s0
 80078b6:	ed32 0a01 	vldmdb	r2!, {s0}
 80078ba:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80078be:	ee37 0a80 	vadd.f32	s0, s15, s0
 80078c2:	3301      	adds	r3, #1
 80078c4:	e79a      	b.n	80077fc <__kernel_rem_pio2f+0xd4>
 80078c6:	d106      	bne.n	80078d6 <__kernel_rem_pio2f+0x1ae>
 80078c8:	1e6b      	subs	r3, r5, #1
 80078ca:	aa06      	add	r2, sp, #24
 80078cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80078d0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80078d4:	e7c3      	b.n	800785e <__kernel_rem_pio2f+0x136>
 80078d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80078da:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	da31      	bge.n	8007948 <__kernel_rem_pio2f+0x220>
 80078e4:	f04f 0800 	mov.w	r8, #0
 80078e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80078ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f0:	f040 80a8 	bne.w	8007a44 <__kernel_rem_pio2f+0x31c>
 80078f4:	1e6b      	subs	r3, r5, #1
 80078f6:	4618      	mov	r0, r3
 80078f8:	2200      	movs	r2, #0
 80078fa:	4548      	cmp	r0, r9
 80078fc:	da4d      	bge.n	800799a <__kernel_rem_pio2f+0x272>
 80078fe:	2a00      	cmp	r2, #0
 8007900:	f000 8087 	beq.w	8007a12 <__kernel_rem_pio2f+0x2ea>
 8007904:	aa06      	add	r2, sp, #24
 8007906:	3c08      	subs	r4, #8
 8007908:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800790c:	2900      	cmp	r1, #0
 800790e:	f000 808d 	beq.w	8007a2c <__kernel_rem_pio2f+0x304>
 8007912:	4620      	mov	r0, r4
 8007914:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007918:	9302      	str	r3, [sp, #8]
 800791a:	f000 fa19 	bl	8007d50 <scalbnf>
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007a3c <__kernel_rem_pio2f+0x314>
 8007924:	0099      	lsls	r1, r3, #2
 8007926:	aa42      	add	r2, sp, #264	; 0x108
 8007928:	1850      	adds	r0, r2, r1
 800792a:	1d05      	adds	r5, r0, #4
 800792c:	461c      	mov	r4, r3
 800792e:	2c00      	cmp	r4, #0
 8007930:	f280 80b8 	bge.w	8007aa4 <__kernel_rem_pio2f+0x37c>
 8007934:	2500      	movs	r5, #0
 8007936:	1b5c      	subs	r4, r3, r5
 8007938:	2c00      	cmp	r4, #0
 800793a:	f2c0 80d8 	blt.w	8007aee <__kernel_rem_pio2f+0x3c6>
 800793e:	4f3d      	ldr	r7, [pc, #244]	; (8007a34 <__kernel_rem_pio2f+0x30c>)
 8007940:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8007a40 <__kernel_rem_pio2f+0x318>
 8007944:	2400      	movs	r4, #0
 8007946:	e0c6      	b.n	8007ad6 <__kernel_rem_pio2f+0x3ae>
 8007948:	f04f 0802 	mov.w	r8, #2
 800794c:	e78a      	b.n	8007864 <__kernel_rem_pio2f+0x13c>
 800794e:	ab06      	add	r3, sp, #24
 8007950:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007954:	b949      	cbnz	r1, 800796a <__kernel_rem_pio2f+0x242>
 8007956:	b12b      	cbz	r3, 8007964 <__kernel_rem_pio2f+0x23c>
 8007958:	aa06      	add	r2, sp, #24
 800795a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800795e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007962:	2301      	movs	r3, #1
 8007964:	3001      	adds	r0, #1
 8007966:	4619      	mov	r1, r3
 8007968:	e781      	b.n	800786e <__kernel_rem_pio2f+0x146>
 800796a:	aa06      	add	r2, sp, #24
 800796c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007970:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8007974:	460b      	mov	r3, r1
 8007976:	e7f5      	b.n	8007964 <__kernel_rem_pio2f+0x23c>
 8007978:	1e68      	subs	r0, r5, #1
 800797a:	ab06      	add	r3, sp, #24
 800797c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007984:	aa06      	add	r2, sp, #24
 8007986:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800798a:	e779      	b.n	8007880 <__kernel_rem_pio2f+0x158>
 800798c:	1e68      	subs	r0, r5, #1
 800798e:	ab06      	add	r3, sp, #24
 8007990:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007998:	e7f4      	b.n	8007984 <__kernel_rem_pio2f+0x25c>
 800799a:	a906      	add	r1, sp, #24
 800799c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80079a0:	3801      	subs	r0, #1
 80079a2:	430a      	orrs	r2, r1
 80079a4:	e7a9      	b.n	80078fa <__kernel_rem_pio2f+0x1d2>
 80079a6:	f10c 0c01 	add.w	ip, ip, #1
 80079aa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d0f9      	beq.n	80079a6 <__kernel_rem_pio2f+0x27e>
 80079b2:	eb0b 0305 	add.w	r3, fp, r5
 80079b6:	aa1a      	add	r2, sp, #104	; 0x68
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	1898      	adds	r0, r3, r2
 80079bc:	3004      	adds	r0, #4
 80079be:	1c69      	adds	r1, r5, #1
 80079c0:	3704      	adds	r7, #4
 80079c2:	2200      	movs	r2, #0
 80079c4:	4465      	add	r5, ip
 80079c6:	9005      	str	r0, [sp, #20]
 80079c8:	428d      	cmp	r5, r1
 80079ca:	f6ff af0a 	blt.w	80077e2 <__kernel_rem_pio2f+0xba>
 80079ce:	a81a      	add	r0, sp, #104	; 0x68
 80079d0:	eb02 0c03 	add.w	ip, r2, r3
 80079d4:	4484      	add	ip, r0
 80079d6:	9803      	ldr	r0, [sp, #12]
 80079d8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80079dc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80079e0:	9001      	str	r0, [sp, #4]
 80079e2:	ee07 0a90 	vmov	s15, r0
 80079e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079ea:	9805      	ldr	r0, [sp, #20]
 80079ec:	edcc 7a00 	vstr	s15, [ip]
 80079f0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8007a40 <__kernel_rem_pio2f+0x318>
 80079f4:	eb00 0802 	add.w	r8, r0, r2
 80079f8:	f04f 0c00 	mov.w	ip, #0
 80079fc:	45d4      	cmp	ip, sl
 80079fe:	dd0c      	ble.n	8007a1a <__kernel_rem_pio2f+0x2f2>
 8007a00:	eb02 0c07 	add.w	ip, r2, r7
 8007a04:	a842      	add	r0, sp, #264	; 0x108
 8007a06:	4484      	add	ip, r0
 8007a08:	edcc 7a01 	vstr	s15, [ip, #4]
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	3204      	adds	r2, #4
 8007a10:	e7da      	b.n	80079c8 <__kernel_rem_pio2f+0x2a0>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	f04f 0c01 	mov.w	ip, #1
 8007a18:	e7c7      	b.n	80079aa <__kernel_rem_pio2f+0x282>
 8007a1a:	ecfe 6a01 	vldmia	lr!, {s13}
 8007a1e:	ed38 7a01 	vldmdb	r8!, {s14}
 8007a22:	f10c 0c01 	add.w	ip, ip, #1
 8007a26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007a2a:	e7e7      	b.n	80079fc <__kernel_rem_pio2f+0x2d4>
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	e769      	b.n	8007904 <__kernel_rem_pio2f+0x1dc>
 8007a30:	080087f4 	.word	0x080087f4
 8007a34:	080087c8 	.word	0x080087c8
 8007a38:	43800000 	.word	0x43800000
 8007a3c:	3b800000 	.word	0x3b800000
 8007a40:	00000000 	.word	0x00000000
 8007a44:	4260      	negs	r0, r4
 8007a46:	eeb0 0a48 	vmov.f32	s0, s16
 8007a4a:	f000 f981 	bl	8007d50 <scalbnf>
 8007a4e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8007a38 <__kernel_rem_pio2f+0x310>
 8007a52:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5a:	db1a      	blt.n	8007a92 <__kernel_rem_pio2f+0x36a>
 8007a5c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007a3c <__kernel_rem_pio2f+0x314>
 8007a60:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007a64:	aa06      	add	r2, sp, #24
 8007a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a6a:	a906      	add	r1, sp, #24
 8007a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a70:	3408      	adds	r4, #8
 8007a72:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a7a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007a7e:	ee10 3a10 	vmov	r3, s0
 8007a82:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007a86:	1c6b      	adds	r3, r5, #1
 8007a88:	ee17 2a90 	vmov	r2, s15
 8007a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a90:	e73f      	b.n	8007912 <__kernel_rem_pio2f+0x1ea>
 8007a92:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007a96:	aa06      	add	r2, sp, #24
 8007a98:	ee10 3a10 	vmov	r3, s0
 8007a9c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	e736      	b.n	8007912 <__kernel_rem_pio2f+0x1ea>
 8007aa4:	aa06      	add	r2, sp, #24
 8007aa6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8007aaa:	9202      	str	r2, [sp, #8]
 8007aac:	ee07 2a90 	vmov	s15, r2
 8007ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ab4:	3c01      	subs	r4, #1
 8007ab6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007aba:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007abe:	ed65 7a01 	vstmdb	r5!, {s15}
 8007ac2:	e734      	b.n	800792e <__kernel_rem_pio2f+0x206>
 8007ac4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8007ac8:	ecf7 6a01 	vldmia	r7!, {s13}
 8007acc:	ed9c 7a00 	vldr	s14, [ip]
 8007ad0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	454c      	cmp	r4, r9
 8007ad8:	dc01      	bgt.n	8007ade <__kernel_rem_pio2f+0x3b6>
 8007ada:	42a5      	cmp	r5, r4
 8007adc:	daf2      	bge.n	8007ac4 <__kernel_rem_pio2f+0x39c>
 8007ade:	aa56      	add	r2, sp, #344	; 0x158
 8007ae0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8007ae4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8007ae8:	3501      	adds	r5, #1
 8007aea:	3804      	subs	r0, #4
 8007aec:	e723      	b.n	8007936 <__kernel_rem_pio2f+0x20e>
 8007aee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007af0:	2a03      	cmp	r2, #3
 8007af2:	d84d      	bhi.n	8007b90 <__kernel_rem_pio2f+0x468>
 8007af4:	e8df f002 	tbb	[pc, r2]
 8007af8:	021f1f3e 	.word	0x021f1f3e
 8007afc:	aa56      	add	r2, sp, #344	; 0x158
 8007afe:	4411      	add	r1, r2
 8007b00:	399c      	subs	r1, #156	; 0x9c
 8007b02:	4608      	mov	r0, r1
 8007b04:	461c      	mov	r4, r3
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	dc5f      	bgt.n	8007bca <__kernel_rem_pio2f+0x4a2>
 8007b0a:	4608      	mov	r0, r1
 8007b0c:	461c      	mov	r4, r3
 8007b0e:	2c01      	cmp	r4, #1
 8007b10:	dc6b      	bgt.n	8007bea <__kernel_rem_pio2f+0x4c2>
 8007b12:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8007a40 <__kernel_rem_pio2f+0x318>
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	dc77      	bgt.n	8007c0a <__kernel_rem_pio2f+0x4e2>
 8007b1a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007b1e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8007b22:	f1b8 0f00 	cmp.w	r8, #0
 8007b26:	d176      	bne.n	8007c16 <__kernel_rem_pio2f+0x4ee>
 8007b28:	edc6 6a00 	vstr	s13, [r6]
 8007b2c:	ed86 7a01 	vstr	s14, [r6, #4]
 8007b30:	edc6 7a02 	vstr	s15, [r6, #8]
 8007b34:	e02c      	b.n	8007b90 <__kernel_rem_pio2f+0x468>
 8007b36:	aa56      	add	r2, sp, #344	; 0x158
 8007b38:	4411      	add	r1, r2
 8007b3a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8007a40 <__kernel_rem_pio2f+0x318>
 8007b3e:	399c      	subs	r1, #156	; 0x9c
 8007b40:	4618      	mov	r0, r3
 8007b42:	2800      	cmp	r0, #0
 8007b44:	da32      	bge.n	8007bac <__kernel_rem_pio2f+0x484>
 8007b46:	f1b8 0f00 	cmp.w	r8, #0
 8007b4a:	d035      	beq.n	8007bb8 <__kernel_rem_pio2f+0x490>
 8007b4c:	eef1 7a47 	vneg.f32	s15, s14
 8007b50:	edc6 7a00 	vstr	s15, [r6]
 8007b54:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8007b58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b5c:	a82f      	add	r0, sp, #188	; 0xbc
 8007b5e:	2101      	movs	r1, #1
 8007b60:	428b      	cmp	r3, r1
 8007b62:	da2c      	bge.n	8007bbe <__kernel_rem_pio2f+0x496>
 8007b64:	f1b8 0f00 	cmp.w	r8, #0
 8007b68:	d001      	beq.n	8007b6e <__kernel_rem_pio2f+0x446>
 8007b6a:	eef1 7a67 	vneg.f32	s15, s15
 8007b6e:	edc6 7a01 	vstr	s15, [r6, #4]
 8007b72:	e00d      	b.n	8007b90 <__kernel_rem_pio2f+0x468>
 8007b74:	aa56      	add	r2, sp, #344	; 0x158
 8007b76:	4411      	add	r1, r2
 8007b78:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007a40 <__kernel_rem_pio2f+0x318>
 8007b7c:	399c      	subs	r1, #156	; 0x9c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da0e      	bge.n	8007ba0 <__kernel_rem_pio2f+0x478>
 8007b82:	f1b8 0f00 	cmp.w	r8, #0
 8007b86:	d001      	beq.n	8007b8c <__kernel_rem_pio2f+0x464>
 8007b88:	eef1 7a67 	vneg.f32	s15, s15
 8007b8c:	edc6 7a00 	vstr	s15, [r6]
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	f003 0007 	and.w	r0, r3, #7
 8007b96:	b057      	add	sp, #348	; 0x15c
 8007b98:	ecbd 8b04 	vpop	{d8-d9}
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	ed31 7a01 	vldmdb	r1!, {s14}
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007baa:	e7e8      	b.n	8007b7e <__kernel_rem_pio2f+0x456>
 8007bac:	ed71 7a01 	vldmdb	r1!, {s15}
 8007bb0:	3801      	subs	r0, #1
 8007bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007bb6:	e7c4      	b.n	8007b42 <__kernel_rem_pio2f+0x41a>
 8007bb8:	eef0 7a47 	vmov.f32	s15, s14
 8007bbc:	e7c8      	b.n	8007b50 <__kernel_rem_pio2f+0x428>
 8007bbe:	ecb0 7a01 	vldmia	r0!, {s14}
 8007bc2:	3101      	adds	r1, #1
 8007bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007bc8:	e7ca      	b.n	8007b60 <__kernel_rem_pio2f+0x438>
 8007bca:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007bce:	ed70 6a01 	vldmdb	r0!, {s13}
 8007bd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bd6:	3c01      	subs	r4, #1
 8007bd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bdc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007be4:	edc0 7a00 	vstr	s15, [r0]
 8007be8:	e78d      	b.n	8007b06 <__kernel_rem_pio2f+0x3de>
 8007bea:	ed50 7a02 	vldr	s15, [r0, #-8]
 8007bee:	ed70 6a01 	vldmdb	r0!, {s13}
 8007bf2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007bf6:	3c01      	subs	r4, #1
 8007bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007bfc:	ed00 7a01 	vstr	s14, [r0, #-4]
 8007c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c04:	edc0 7a00 	vstr	s15, [r0]
 8007c08:	e781      	b.n	8007b0e <__kernel_rem_pio2f+0x3e6>
 8007c0a:	ed31 7a01 	vldmdb	r1!, {s14}
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c14:	e77f      	b.n	8007b16 <__kernel_rem_pio2f+0x3ee>
 8007c16:	eef1 6a66 	vneg.f32	s13, s13
 8007c1a:	eeb1 7a47 	vneg.f32	s14, s14
 8007c1e:	edc6 6a00 	vstr	s13, [r6]
 8007c22:	ed86 7a01 	vstr	s14, [r6, #4]
 8007c26:	eef1 7a67 	vneg.f32	s15, s15
 8007c2a:	e781      	b.n	8007b30 <__kernel_rem_pio2f+0x408>

08007c2c <__kernel_sinf>:
 8007c2c:	ee10 3a10 	vmov	r3, s0
 8007c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007c38:	da04      	bge.n	8007c44 <__kernel_sinf+0x18>
 8007c3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007c3e:	ee17 3a90 	vmov	r3, s15
 8007c42:	b35b      	cbz	r3, 8007c9c <__kernel_sinf+0x70>
 8007c44:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007c48:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007ca0 <__kernel_sinf+0x74>
 8007c4c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007ca4 <__kernel_sinf+0x78>
 8007c50:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c54:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007ca8 <__kernel_sinf+0x7c>
 8007c58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007c5c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007cac <__kernel_sinf+0x80>
 8007c60:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007c64:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007cb0 <__kernel_sinf+0x84>
 8007c68:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007c6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007c70:	b930      	cbnz	r0, 8007c80 <__kernel_sinf+0x54>
 8007c72:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007cb4 <__kernel_sinf+0x88>
 8007c76:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007c7a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007c7e:	4770      	bx	lr
 8007c80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007c84:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007c88:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007c8c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007c90:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007cb8 <__kernel_sinf+0x8c>
 8007c94:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007c98:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	2f2ec9d3 	.word	0x2f2ec9d3
 8007ca4:	b2d72f34 	.word	0xb2d72f34
 8007ca8:	3638ef1b 	.word	0x3638ef1b
 8007cac:	b9500d01 	.word	0xb9500d01
 8007cb0:	3c088889 	.word	0x3c088889
 8007cb4:	be2aaaab 	.word	0xbe2aaaab
 8007cb8:	3e2aaaab 	.word	0x3e2aaaab

08007cbc <fabsf>:
 8007cbc:	ee10 3a10 	vmov	r3, s0
 8007cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cc4:	ee00 3a10 	vmov	s0, r3
 8007cc8:	4770      	bx	lr
	...

08007ccc <floorf>:
 8007ccc:	ee10 3a10 	vmov	r3, s0
 8007cd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cd4:	0dca      	lsrs	r2, r1, #23
 8007cd6:	3a7f      	subs	r2, #127	; 0x7f
 8007cd8:	2a16      	cmp	r2, #22
 8007cda:	dc2a      	bgt.n	8007d32 <floorf+0x66>
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	da11      	bge.n	8007d04 <floorf+0x38>
 8007ce0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007d44 <floorf+0x78>
 8007ce4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ce8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf0:	dd05      	ble.n	8007cfe <floorf+0x32>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	da23      	bge.n	8007d3e <floorf+0x72>
 8007cf6:	4a14      	ldr	r2, [pc, #80]	; (8007d48 <floorf+0x7c>)
 8007cf8:	2900      	cmp	r1, #0
 8007cfa:	bf18      	it	ne
 8007cfc:	4613      	movne	r3, r2
 8007cfe:	ee00 3a10 	vmov	s0, r3
 8007d02:	4770      	bx	lr
 8007d04:	4911      	ldr	r1, [pc, #68]	; (8007d4c <floorf+0x80>)
 8007d06:	4111      	asrs	r1, r2
 8007d08:	420b      	tst	r3, r1
 8007d0a:	d0fa      	beq.n	8007d02 <floorf+0x36>
 8007d0c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007d44 <floorf+0x78>
 8007d10:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d1c:	ddef      	ble.n	8007cfe <floorf+0x32>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfbe      	ittt	lt
 8007d22:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007d26:	fa40 f202 	asrlt.w	r2, r0, r2
 8007d2a:	189b      	addlt	r3, r3, r2
 8007d2c:	ea23 0301 	bic.w	r3, r3, r1
 8007d30:	e7e5      	b.n	8007cfe <floorf+0x32>
 8007d32:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007d36:	d3e4      	bcc.n	8007d02 <floorf+0x36>
 8007d38:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007d3c:	4770      	bx	lr
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e7dd      	b.n	8007cfe <floorf+0x32>
 8007d42:	bf00      	nop
 8007d44:	7149f2ca 	.word	0x7149f2ca
 8007d48:	bf800000 	.word	0xbf800000
 8007d4c:	007fffff 	.word	0x007fffff

08007d50 <scalbnf>:
 8007d50:	b508      	push	{r3, lr}
 8007d52:	ee10 2a10 	vmov	r2, s0
 8007d56:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007d5a:	ed2d 8b02 	vpush	{d8}
 8007d5e:	eef0 0a40 	vmov.f32	s1, s0
 8007d62:	d004      	beq.n	8007d6e <scalbnf+0x1e>
 8007d64:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007d68:	d306      	bcc.n	8007d78 <scalbnf+0x28>
 8007d6a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8007d6e:	ecbd 8b02 	vpop	{d8}
 8007d72:	eeb0 0a60 	vmov.f32	s0, s1
 8007d76:	bd08      	pop	{r3, pc}
 8007d78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d7c:	d21c      	bcs.n	8007db8 <scalbnf+0x68>
 8007d7e:	4b1f      	ldr	r3, [pc, #124]	; (8007dfc <scalbnf+0xac>)
 8007d80:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007e00 <scalbnf+0xb0>
 8007d84:	4298      	cmp	r0, r3
 8007d86:	ee60 0a27 	vmul.f32	s1, s0, s15
 8007d8a:	db10      	blt.n	8007dae <scalbnf+0x5e>
 8007d8c:	ee10 2a90 	vmov	r2, s1
 8007d90:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8007d94:	3b19      	subs	r3, #25
 8007d96:	4403      	add	r3, r0
 8007d98:	2bfe      	cmp	r3, #254	; 0xfe
 8007d9a:	dd0f      	ble.n	8007dbc <scalbnf+0x6c>
 8007d9c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007e04 <scalbnf+0xb4>
 8007da0:	eeb0 0a48 	vmov.f32	s0, s16
 8007da4:	f000 f834 	bl	8007e10 <copysignf>
 8007da8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007dac:	e7df      	b.n	8007d6e <scalbnf+0x1e>
 8007dae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007e08 <scalbnf+0xb8>
 8007db2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007db6:	e7da      	b.n	8007d6e <scalbnf+0x1e>
 8007db8:	0ddb      	lsrs	r3, r3, #23
 8007dba:	e7ec      	b.n	8007d96 <scalbnf+0x46>
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dd06      	ble.n	8007dce <scalbnf+0x7e>
 8007dc0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007dc4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007dc8:	ee00 3a90 	vmov	s1, r3
 8007dcc:	e7cf      	b.n	8007d6e <scalbnf+0x1e>
 8007dce:	f113 0f16 	cmn.w	r3, #22
 8007dd2:	da06      	bge.n	8007de2 <scalbnf+0x92>
 8007dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007dd8:	4298      	cmp	r0, r3
 8007dda:	dcdf      	bgt.n	8007d9c <scalbnf+0x4c>
 8007ddc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007e08 <scalbnf+0xb8>
 8007de0:	e7de      	b.n	8007da0 <scalbnf+0x50>
 8007de2:	3319      	adds	r3, #25
 8007de4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007de8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007dec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007e0c <scalbnf+0xbc>
 8007df0:	ee07 3a10 	vmov	s14, r3
 8007df4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007df8:	e7b9      	b.n	8007d6e <scalbnf+0x1e>
 8007dfa:	bf00      	nop
 8007dfc:	ffff3cb0 	.word	0xffff3cb0
 8007e00:	4c000000 	.word	0x4c000000
 8007e04:	7149f2ca 	.word	0x7149f2ca
 8007e08:	0da24260 	.word	0x0da24260
 8007e0c:	33000000 	.word	0x33000000

08007e10 <copysignf>:
 8007e10:	ee10 3a10 	vmov	r3, s0
 8007e14:	ee10 2a90 	vmov	r2, s1
 8007e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007e20:	4313      	orrs	r3, r2
 8007e22:	ee00 3a10 	vmov	s0, r3
 8007e26:	4770      	bx	lr

08007e28 <_init>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr

08007e34 <_fini>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr
