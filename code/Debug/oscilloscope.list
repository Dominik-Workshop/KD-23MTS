
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a534  0800a534  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a534  0800a534  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a534  0800a534  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a534  0800a534  0001a534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a538  0800a538  0001a538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800a53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e9c  200000a8  0800a5e4  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f44  0800a5e4  00022f44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f9a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031ce  00000000  00000000  0003a072  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  0003d240  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003e698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad62  00000000  00000000  0003f958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130be  00000000  00000000  0006a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001067fd  00000000  00000000  0007d778  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183f75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c38  00000000  00000000  00183ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094ac 	.word	0x080094ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080094ac 	.word	0x080094ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <ILI9488_Init>:
uint8_t textsize_x;
uint8_t textsize_y;
uint8_t rotation;


void ILI9488_Init(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f004 f93d 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f002 fc86 	bl	80034cc <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f004 f933 	bl	8004e34 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000bce:	4b65      	ldr	r3, [pc, #404]	; (8000d64 <ILI9488_Init+0x1bc>)
 8000bd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bd4:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000bd6:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <ILI9488_Init+0x1c0>)
 8000bd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000bdc:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 8000bde:	20e0      	movs	r0, #224	; 0xe0
 8000be0:	f000 ff32 	bl	8001a48 <writecommand>
	writedata(0x00);
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 ff53 	bl	8001a90 <writedata>
	writedata(0x03);
 8000bea:	2003      	movs	r0, #3
 8000bec:	f000 ff50 	bl	8001a90 <writedata>
	writedata(0x09);
 8000bf0:	2009      	movs	r0, #9
 8000bf2:	f000 ff4d 	bl	8001a90 <writedata>
	writedata(0x08);
 8000bf6:	2008      	movs	r0, #8
 8000bf8:	f000 ff4a 	bl	8001a90 <writedata>
	writedata(0x16);
 8000bfc:	2016      	movs	r0, #22
 8000bfe:	f000 ff47 	bl	8001a90 <writedata>
	writedata(0x0A);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f000 ff44 	bl	8001a90 <writedata>
	writedata(0x3F);
 8000c08:	203f      	movs	r0, #63	; 0x3f
 8000c0a:	f000 ff41 	bl	8001a90 <writedata>
	writedata(0x78);
 8000c0e:	2078      	movs	r0, #120	; 0x78
 8000c10:	f000 ff3e 	bl	8001a90 <writedata>
	writedata(0x4C);
 8000c14:	204c      	movs	r0, #76	; 0x4c
 8000c16:	f000 ff3b 	bl	8001a90 <writedata>
	writedata(0x09);
 8000c1a:	2009      	movs	r0, #9
 8000c1c:	f000 ff38 	bl	8001a90 <writedata>
	writedata(0x0A);
 8000c20:	200a      	movs	r0, #10
 8000c22:	f000 ff35 	bl	8001a90 <writedata>
	writedata(0x08);
 8000c26:	2008      	movs	r0, #8
 8000c28:	f000 ff32 	bl	8001a90 <writedata>
	writedata(0x16);
 8000c2c:	2016      	movs	r0, #22
 8000c2e:	f000 ff2f 	bl	8001a90 <writedata>
	writedata(0x1A);
 8000c32:	201a      	movs	r0, #26
 8000c34:	f000 ff2c 	bl	8001a90 <writedata>
	writedata(0x0F);
 8000c38:	200f      	movs	r0, #15
 8000c3a:	f000 ff29 	bl	8001a90 <writedata>

	writecommand(0XE1);
 8000c3e:	20e1      	movs	r0, #225	; 0xe1
 8000c40:	f000 ff02 	bl	8001a48 <writecommand>
	writedata(0x00);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 ff23 	bl	8001a90 <writedata>
	writedata(0x16);
 8000c4a:	2016      	movs	r0, #22
 8000c4c:	f000 ff20 	bl	8001a90 <writedata>
	writedata(0x19);
 8000c50:	2019      	movs	r0, #25
 8000c52:	f000 ff1d 	bl	8001a90 <writedata>
	writedata(0x03);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 ff1a 	bl	8001a90 <writedata>
	writedata(0x0F);
 8000c5c:	200f      	movs	r0, #15
 8000c5e:	f000 ff17 	bl	8001a90 <writedata>
	writedata(0x05);
 8000c62:	2005      	movs	r0, #5
 8000c64:	f000 ff14 	bl	8001a90 <writedata>
	writedata(0x32);
 8000c68:	2032      	movs	r0, #50	; 0x32
 8000c6a:	f000 ff11 	bl	8001a90 <writedata>
	writedata(0x45);
 8000c6e:	2045      	movs	r0, #69	; 0x45
 8000c70:	f000 ff0e 	bl	8001a90 <writedata>
	writedata(0x46);
 8000c74:	2046      	movs	r0, #70	; 0x46
 8000c76:	f000 ff0b 	bl	8001a90 <writedata>
	writedata(0x04);
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f000 ff08 	bl	8001a90 <writedata>
	writedata(0x0E);
 8000c80:	200e      	movs	r0, #14
 8000c82:	f000 ff05 	bl	8001a90 <writedata>
	writedata(0x0D);
 8000c86:	200d      	movs	r0, #13
 8000c88:	f000 ff02 	bl	8001a90 <writedata>
	writedata(0x35);
 8000c8c:	2035      	movs	r0, #53	; 0x35
 8000c8e:	f000 feff 	bl	8001a90 <writedata>
	writedata(0x37);
 8000c92:	2037      	movs	r0, #55	; 0x37
 8000c94:	f000 fefc 	bl	8001a90 <writedata>
	writedata(0x0F);
 8000c98:	200f      	movs	r0, #15
 8000c9a:	f000 fef9 	bl	8001a90 <writedata>

	writecommand(0XC0);     //Power Control 1
 8000c9e:	20c0      	movs	r0, #192	; 0xc0
 8000ca0:	f000 fed2 	bl	8001a48 <writecommand>
	writedata(0x17);    	//Vreg1out
 8000ca4:	2017      	movs	r0, #23
 8000ca6:	f000 fef3 	bl	8001a90 <writedata>
	writedata(0x15);    	//Verg2out
 8000caa:	2015      	movs	r0, #21
 8000cac:	f000 fef0 	bl	8001a90 <writedata>

	writecommand(0xC1);     //Power Control 2
 8000cb0:	20c1      	movs	r0, #193	; 0xc1
 8000cb2:	f000 fec9 	bl	8001a48 <writecommand>
	writedata(0x41);    	//VGH,VGL
 8000cb6:	2041      	movs	r0, #65	; 0x41
 8000cb8:	f000 feea 	bl	8001a90 <writedata>

	writecommand(0xC5);     //Power Control 3
 8000cbc:	20c5      	movs	r0, #197	; 0xc5
 8000cbe:	f000 fec3 	bl	8001a48 <writecommand>
	writedata(0x00);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 fee4 	bl	8001a90 <writedata>
	writedata(0x12);    	//Vcom
 8000cc8:	2012      	movs	r0, #18
 8000cca:	f000 fee1 	bl	8001a90 <writedata>
	writedata(0x80);
 8000cce:	2080      	movs	r0, #128	; 0x80
 8000cd0:	f000 fede 	bl	8001a90 <writedata>

	writecommand(0x36);     //Memory Access
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f000 feb7 	bl	8001a48 <writecommand>
	writedata(0x48);
 8000cda:	2048      	movs	r0, #72	; 0x48
 8000cdc:	f000 fed8 	bl	8001a90 <writedata>

	writecommand(0x36);     // Interface Pixel Format
 8000ce0:	2036      	movs	r0, #54	; 0x36
 8000ce2:	f000 feb1 	bl	8001a48 <writecommand>
	writedata(0x66); 	  	//18 bit
 8000ce6:	2066      	movs	r0, #102	; 0x66
 8000ce8:	f000 fed2 	bl	8001a90 <writedata>

	writecommand(0XB0);     // Interface Mode Control
 8000cec:	20b0      	movs	r0, #176	; 0xb0
 8000cee:	f000 feab 	bl	8001a48 <writecommand>
	writedata(0x80);     	//SDO NOT USE
 8000cf2:	2080      	movs	r0, #128	; 0x80
 8000cf4:	f000 fecc 	bl	8001a90 <writedata>

	writecommand(0xB1);     //Frame rate
 8000cf8:	20b1      	movs	r0, #177	; 0xb1
 8000cfa:	f000 fea5 	bl	8001a48 <writecommand>
	writedata(0xA0);    	//60Hz
 8000cfe:	20a0      	movs	r0, #160	; 0xa0
 8000d00:	f000 fec6 	bl	8001a90 <writedata>

	writecommand(0xB4);     //Display Inversion Control
 8000d04:	20b4      	movs	r0, #180	; 0xb4
 8000d06:	f000 fe9f 	bl	8001a48 <writecommand>
	writedata(0x02);    	//2-dot
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f000 fec0 	bl	8001a90 <writedata>

	writecommand(0XB6); 	//Display Function Control  RGB/MCU Interface Control
 8000d10:	20b6      	movs	r0, #182	; 0xb6
 8000d12:	f000 fe99 	bl	8001a48 <writecommand>

	writedata(0x02);    	//MCU
 8000d16:	2002      	movs	r0, #2
 8000d18:	f000 feba 	bl	8001a90 <writedata>
	writedata(0x02);    	//Source,Gate scan dieection
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 feb7 	bl	8001a90 <writedata>

	writecommand(0XE9);     // Set Image Functio
 8000d22:	20e9      	movs	r0, #233	; 0xe9
 8000d24:	f000 fe90 	bl	8001a48 <writecommand>
	writedata(0x00);    	// Disable 24 bit data
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 feb1 	bl	8001a90 <writedata>

	writecommand(0xF7);     // Adjust Control
 8000d2e:	20f7      	movs	r0, #247	; 0xf7
 8000d30:	f000 fe8a 	bl	8001a48 <writecommand>
	writedata(0xA9);
 8000d34:	20a9      	movs	r0, #169	; 0xa9
 8000d36:	f000 feab 	bl	8001a90 <writedata>
	writedata(0x51);
 8000d3a:	2051      	movs	r0, #81	; 0x51
 8000d3c:	f000 fea8 	bl	8001a90 <writedata>
	writedata(0x2C);
 8000d40:	202c      	movs	r0, #44	; 0x2c
 8000d42:	f000 fea5 	bl	8001a90 <writedata>
	writedata(0x82);    	// D7 stream, loose
 8000d46:	2082      	movs	r0, #130	; 0x82
 8000d48:	f000 fea2 	bl	8001a90 <writedata>

	writecommand(ILI9488_SLPOUT); 	//Exit Sleep
 8000d4c:	2011      	movs	r0, #17
 8000d4e:	f000 fe7b 	bl	8001a48 <writecommand>

	HAL_Delay(120);
 8000d52:	2078      	movs	r0, #120	; 0x78
 8000d54:	f002 fbba 	bl	80034cc <HAL_Delay>

	writecommand(ILI9488_DISPON); 	//Display on
 8000d58:	2029      	movs	r0, #41	; 0x29
 8000d5a:	f000 fe75 	bl	8001a48 <writecommand>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20012cdc 	.word	0x20012cdc
 8000d68:	20012ce0 	.word	0x20012ce0

08000d6c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1){
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	80fb      	strh	r3, [r7, #6]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	80bb      	strh	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	807b      	strh	r3, [r7, #2]
 8000d86:	4613      	mov	r3, r2
 8000d88:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000d8a:	202a      	movs	r0, #42	; 0x2a
 8000d8c:	f000 fe5c 	bl	8001a48 <writecommand>
	writedata(x0 >> 8);
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fe79 	bl	8001a90 <writedata>
	writedata(x0 & 0xFF);     	 // XSTART
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fe74 	bl	8001a90 <writedata>
	writedata(x1 >> 8);
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fe6d 	bl	8001a90 <writedata>
	writedata(x1 & 0xFF);     	 // XEND
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fe68 	bl	8001a90 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000dc0:	202b      	movs	r0, #43	; 0x2b
 8000dc2:	f000 fe41 	bl	8001a48 <writecommand>
	writedata(y0 >> 8);
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fe5e 	bl	8001a90 <writedata>
	writedata(y0 & 0xff);        // YSTART
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fe59 	bl	8001a90 <writedata>
	writedata(y1 >> 8);
 8000dde:	883b      	ldrh	r3, [r7, #0]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 fe52 	bl	8001a90 <writedata>
	writedata(y1 & 0xff);        // YEND
 8000dec:	883b      	ldrh	r3, [r7, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fe4d 	bl	8001a90 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000df6:	202c      	movs	r0, #44	; 0x2c
 8000df8:	f000 fe26 	bl	8001a48 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <setAddrWindow+0xb0>)
 8000e04:	f004 f816 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <setAddrWindow+0xb0>)
 8000e0e:	f004 f811 	bl	8004e34 <HAL_GPIO_WritePin>
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	48000800 	.word	0x48000800

08000e20 <clearScreen>:
}

/**
 * @brief Sets all pixels to black
 */
void clearScreen(){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	memset(image_buffer, BLACK, sizeof(image_buffer));
 8000e24:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <clearScreen+0x14>)
 8000e2c:	f007 f8e1 	bl	8007ff2 <memset>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000c4 	.word	0x200000c4

08000e38 <drawPixel>:
 *
 * @param x The x-coordinate of the pixel.
 * @param y The y-coordinate of the pixel.
 * @param color The color value to set for the pixel.
 */
void drawPixel(int16_t x, int16_t y, uint8_t color){
 8000e38:	b490      	push	{r4, r7}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	460b      	mov	r3, r1
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	70fb      	strb	r3, [r7, #3]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f2c0 80a3 	blt.w	8000f9a <drawPixel+0x162>
 8000e54:	4b53      	ldr	r3, [pc, #332]	; (8000fa4 <drawPixel+0x16c>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	f280 809b 	bge.w	8000f9a <drawPixel+0x162>
 8000e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f2c0 8096 	blt.w	8000f9a <drawPixel+0x162>
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <drawPixel+0x170>)
 8000e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e74:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f280 808e 	bge.w	8000f9a <drawPixel+0x162>
		return;
	IMG_BUF_SET(x, y, color);
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d144      	bne.n	8000f14 <drawPixel+0xdc>
 8000e8a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e8e:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <drawPixel+0x16c>)
 8000e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e94:	0fd9      	lsrs	r1, r3, #31
 8000e96:	440b      	add	r3, r1
 8000e98:	105b      	asrs	r3, r3, #1
 8000e9a:	b218      	sxth	r0, r3
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea6:	0fd9      	lsrs	r1, r3, #31
 8000ea8:	440b      	add	r3, r1
 8000eaa:	105b      	asrs	r3, r3, #1
 8000eac:	b219      	sxth	r1, r3
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a3e      	ldr	r2, [pc, #248]	; (8000fac <drawPixel+0x174>)
 8000eb4:	5cd2      	ldrb	r2, [r2, r3]
 8000eb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eba:	fb00 f303 	mul.w	r3, r0, r3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f002 020f 	and.w	r2, r2, #15
 8000ec4:	b2d1      	uxtb	r1, r2
 8000ec6:	4a39      	ldr	r2, [pc, #228]	; (8000fac <drawPixel+0x174>)
 8000ec8:	54d1      	strb	r1, [r2, r3]
 8000eca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <drawPixel+0x16c>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	0fd9      	lsrs	r1, r3, #31
 8000ed6:	440b      	add	r3, r1
 8000ed8:	105b      	asrs	r3, r3, #1
 8000eda:	b218      	sxth	r0, r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	fb03 f202 	mul.w	r2, r3, r2
 8000ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee6:	0fd9      	lsrs	r1, r3, #31
 8000ee8:	440b      	add	r3, r1
 8000eea:	105b      	asrs	r3, r3, #1
 8000eec:	b219      	sxth	r1, r3
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a2e      	ldr	r2, [pc, #184]	; (8000fac <drawPixel+0x174>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f06:	fb00 f303 	mul.w	r3, r0, r3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	b2d1      	uxtb	r1, r2
 8000f0e:	4a27      	ldr	r2, [pc, #156]	; (8000fac <drawPixel+0x174>)
 8000f10:	54d1      	strb	r1, [r2, r3]
 8000f12:	e043      	b.n	8000f9c <drawPixel+0x164>
 8000f14:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <drawPixel+0x16c>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	0fd9      	lsrs	r1, r3, #31
 8000f20:	440b      	add	r3, r1
 8000f22:	105b      	asrs	r3, r3, #1
 8000f24:	b218      	sxth	r0, r3
 8000f26:	4603      	mov	r3, r0
 8000f28:	fb03 f202 	mul.w	r2, r3, r2
 8000f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f30:	0fd9      	lsrs	r1, r3, #31
 8000f32:	440b      	add	r3, r1
 8000f34:	105b      	asrs	r3, r3, #1
 8000f36:	b219      	sxth	r1, r3
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a1b      	ldr	r2, [pc, #108]	; (8000fac <drawPixel+0x174>)
 8000f3e:	5cd2      	ldrb	r2, [r2, r3]
 8000f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f44:	fb00 f303 	mul.w	r3, r0, r3
 8000f48:	440b      	add	r3, r1
 8000f4a:	f022 020f 	bic.w	r2, r2, #15
 8000f4e:	b2d1      	uxtb	r1, r2
 8000f50:	4a16      	ldr	r2, [pc, #88]	; (8000fac <drawPixel+0x174>)
 8000f52:	54d1      	strb	r1, [r2, r3]
 8000f54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <drawPixel+0x16c>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	0fd9      	lsrs	r1, r3, #31
 8000f60:	440b      	add	r3, r1
 8000f62:	105b      	asrs	r3, r3, #1
 8000f64:	b21c      	sxth	r4, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	fb03 f202 	mul.w	r2, r3, r2
 8000f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f70:	0fd9      	lsrs	r1, r3, #31
 8000f72:	440b      	add	r3, r1
 8000f74:	105b      	asrs	r3, r3, #1
 8000f76:	b218      	sxth	r0, r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <drawPixel+0x174>)
 8000f7e:	5cd1      	ldrb	r1, [r2, r3]
 8000f80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f84:	4622      	mov	r2, r4
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4413      	add	r3, r2
 8000f8e:	78fa      	ldrb	r2, [r7, #3]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	b2d1      	uxtb	r1, r2
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <drawPixel+0x174>)
 8000f96:	54d1      	strb	r1, [r2, r3]
 8000f98:	e000      	b.n	8000f9c <drawPixel+0x164>
		return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc90      	pop	{r4, r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	20012cdc 	.word	0x20012cdc
 8000fa8:	20012ce0 	.word	0x20012ce0
 8000fac:	200000c4 	.word	0x200000c4

08000fb0 <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color){
 8000fb0:	b4b0      	push	{r4, r5, r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	4608      	mov	r0, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	80fb      	strh	r3, [r7, #6]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8000fce:	4b6c      	ldr	r3, [pc, #432]	; (8001180 <drawFastVLine+0x1d0>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f280 80cc 	bge.w	8001176 <drawFastVLine+0x1c6>
 8000fde:	4b69      	ldr	r3, [pc, #420]	; (8001184 <drawFastVLine+0x1d4>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f280 80c4 	bge.w	8001176 <drawFastVLine+0x1c6>
		return;
	if ((y + h - 1) >= _height)
 8000fee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a62      	ldr	r2, [pc, #392]	; (8001184 <drawFastVLine+0x1d4>)
 8000ffc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001000:	4293      	cmp	r3, r2
 8001002:	db07      	blt.n	8001014 <drawFastVLine+0x64>
		h = _height - y;
 8001004:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <drawFastVLine+0x1d4>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	b29a      	uxth	r2, r3
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < h; ++i){
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
 8001018:	e0a6      	b.n	8001168 <drawFastVLine+0x1b8>
		IMG_BUF_SET(x, y+i, color);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	b29b      	uxth	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d150      	bne.n	80010c8 <drawFastVLine+0x118>
 8001026:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800102a:	89fb      	ldrh	r3, [r7, #14]
 800102c:	441a      	add	r2, r3
 800102e:	4b54      	ldr	r3, [pc, #336]	; (8001180 <drawFastVLine+0x1d0>)
 8001030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001034:	0fd9      	lsrs	r1, r3, #31
 8001036:	440b      	add	r3, r1
 8001038:	105b      	asrs	r3, r3, #1
 800103a:	b21c      	sxth	r4, r3
 800103c:	4623      	mov	r3, r4
 800103e:	fb03 f202 	mul.w	r2, r3, r2
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	0fd9      	lsrs	r1, r3, #31
 8001048:	440b      	add	r3, r1
 800104a:	105b      	asrs	r3, r3, #1
 800104c:	b218      	sxth	r0, r3
 800104e:	4603      	mov	r3, r0
 8001050:	4413      	add	r3, r2
 8001052:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <drawFastVLine+0x1d8>)
 8001054:	5cd2      	ldrb	r2, [r2, r3]
 8001056:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	440b      	add	r3, r1
 800105e:	4621      	mov	r1, r4
 8001060:	fb01 f303 	mul.w	r3, r1, r3
 8001064:	4601      	mov	r1, r0
 8001066:	440b      	add	r3, r1
 8001068:	f002 020f 	and.w	r2, r2, #15
 800106c:	b2d1      	uxtb	r1, r2
 800106e:	4a46      	ldr	r2, [pc, #280]	; (8001188 <drawFastVLine+0x1d8>)
 8001070:	54d1      	strb	r1, [r2, r3]
 8001072:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	441a      	add	r2, r3
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <drawFastVLine+0x1d0>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	0fd9      	lsrs	r1, r3, #31
 8001082:	440b      	add	r3, r1
 8001084:	105b      	asrs	r3, r3, #1
 8001086:	b218      	sxth	r0, r3
 8001088:	4603      	mov	r3, r0
 800108a:	fb03 f202 	mul.w	r2, r3, r2
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0fd9      	lsrs	r1, r3, #31
 8001094:	440b      	add	r3, r1
 8001096:	105b      	asrs	r3, r3, #1
 8001098:	b219      	sxth	r1, r3
 800109a:	460b      	mov	r3, r1
 800109c:	4413      	add	r3, r2
 800109e:	4a3a      	ldr	r2, [pc, #232]	; (8001188 <drawFastVLine+0x1d8>)
 80010a0:	5cd3      	ldrb	r3, [r2, r3]
 80010a2:	b25a      	sxtb	r2, r3
 80010a4:	883b      	ldrh	r3, [r7, #0]
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25c      	sxtb	r4, r3
 80010ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010b2:	89fb      	ldrh	r3, [r7, #14]
 80010b4:	4413      	add	r3, r2
 80010b6:	4602      	mov	r2, r0
 80010b8:	fb02 f303 	mul.w	r3, r2, r3
 80010bc:	460a      	mov	r2, r1
 80010be:	4413      	add	r3, r2
 80010c0:	b2e1      	uxtb	r1, r4
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <drawFastVLine+0x1d8>)
 80010c4:	54d1      	strb	r1, [r2, r3]
 80010c6:	e04c      	b.n	8001162 <drawFastVLine+0x1b2>
 80010c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	441a      	add	r2, r3
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <drawFastVLine+0x1d0>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	0fd9      	lsrs	r1, r3, #31
 80010d8:	440b      	add	r3, r1
 80010da:	105b      	asrs	r3, r3, #1
 80010dc:	b21c      	sxth	r4, r3
 80010de:	4623      	mov	r3, r4
 80010e0:	fb03 f202 	mul.w	r2, r3, r2
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	0fd9      	lsrs	r1, r3, #31
 80010ea:	440b      	add	r3, r1
 80010ec:	105b      	asrs	r3, r3, #1
 80010ee:	b218      	sxth	r0, r3
 80010f0:	4603      	mov	r3, r0
 80010f2:	4413      	add	r3, r2
 80010f4:	4a24      	ldr	r2, [pc, #144]	; (8001188 <drawFastVLine+0x1d8>)
 80010f6:	5cd2      	ldrb	r2, [r2, r3]
 80010f8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	440b      	add	r3, r1
 8001100:	4621      	mov	r1, r4
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	4601      	mov	r1, r0
 8001108:	440b      	add	r3, r1
 800110a:	f022 020f 	bic.w	r2, r2, #15
 800110e:	b2d1      	uxtb	r1, r2
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <drawFastVLine+0x1d8>)
 8001112:	54d1      	strb	r1, [r2, r3]
 8001114:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001118:	89fb      	ldrh	r3, [r7, #14]
 800111a:	441a      	add	r2, r3
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <drawFastVLine+0x1d0>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	0fd9      	lsrs	r1, r3, #31
 8001124:	440b      	add	r3, r1
 8001126:	105b      	asrs	r3, r3, #1
 8001128:	b21d      	sxth	r5, r3
 800112a:	462b      	mov	r3, r5
 800112c:	fb03 f202 	mul.w	r2, r3, r2
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	0fd9      	lsrs	r1, r3, #31
 8001136:	440b      	add	r3, r1
 8001138:	105b      	asrs	r3, r3, #1
 800113a:	b21c      	sxth	r4, r3
 800113c:	4623      	mov	r3, r4
 800113e:	4413      	add	r3, r2
 8001140:	4a11      	ldr	r2, [pc, #68]	; (8001188 <drawFastVLine+0x1d8>)
 8001142:	5cd1      	ldrb	r1, [r2, r3]
 8001144:	883b      	ldrh	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	4403      	add	r3, r0
 8001150:	4628      	mov	r0, r5
 8001152:	fb00 f303 	mul.w	r3, r0, r3
 8001156:	4620      	mov	r0, r4
 8001158:	4403      	add	r3, r0
 800115a:	430a      	orrs	r2, r1
 800115c:	b2d1      	uxtb	r1, r2
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <drawFastVLine+0x1d8>)
 8001160:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < h; ++i){
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	3301      	adds	r3, #1
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	89fa      	ldrh	r2, [r7, #14]
 800116a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800116e:	429a      	cmp	r2, r3
 8001170:	f6ff af53 	blt.w	800101a <drawFastVLine+0x6a>
 8001174:	e000      	b.n	8001178 <drawFastVLine+0x1c8>
		return;
 8001176:	bf00      	nop
	}
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bcb0      	pop	{r4, r5, r7}
 800117e:	4770      	bx	lr
 8001180:	20012cdc 	.word	0x20012cdc
 8001184:	20012ce0 	.word	0x20012ce0
 8001188:	200000c4 	.word	0x200000c4

0800118c <drawFastHLine>:

void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color){
 800118c:	b490      	push	{r4, r7}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4603      	mov	r3, r0
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]
 80011a6:	4613      	mov	r3, r2
 80011a8:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 80011aa:	4b61      	ldr	r3, [pc, #388]	; (8001330 <drawFastHLine+0x1a4>)
 80011ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f280 80b6 	bge.w	8001326 <drawFastHLine+0x19a>
 80011ba:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <drawFastHLine+0x1a8>)
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f280 80ae 	bge.w	8001326 <drawFastHLine+0x19a>
		return;
	if ((x + w - 1) >= _width)
 80011ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	3b01      	subs	r3, #1
 80011d6:	4a56      	ldr	r2, [pc, #344]	; (8001330 <drawFastHLine+0x1a4>)
 80011d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011dc:	4293      	cmp	r3, r2
 80011de:	db07      	blt.n	80011f0 <drawFastHLine+0x64>
		w = _width - x;
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <drawFastHLine+0x1a4>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < w; ++i){
 80011f0:	2300      	movs	r3, #0
 80011f2:	81fb      	strh	r3, [r7, #14]
 80011f4:	e090      	b.n	8001318 <drawFastHLine+0x18c>
			IMG_BUF_SET(x+i, y, color);
 80011f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	4413      	add	r3, r2
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d144      	bne.n	8001290 <drawFastHLine+0x104>
 8001206:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <drawFastHLine+0x1a4>)
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	0fd9      	lsrs	r1, r3, #31
 8001212:	440b      	add	r3, r1
 8001214:	105b      	asrs	r3, r3, #1
 8001216:	b218      	sxth	r0, r3
 8001218:	4603      	mov	r3, r0
 800121a:	fb03 f202 	mul.w	r2, r3, r2
 800121e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	440b      	add	r3, r1
 8001226:	0fd9      	lsrs	r1, r3, #31
 8001228:	440b      	add	r3, r1
 800122a:	105b      	asrs	r3, r3, #1
 800122c:	441a      	add	r2, r3
 800122e:	4942      	ldr	r1, [pc, #264]	; (8001338 <drawFastHLine+0x1ac>)
 8001230:	5c8a      	ldrb	r2, [r1, r2]
 8001232:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001236:	fb00 f101 	mul.w	r1, r0, r1
 800123a:	440b      	add	r3, r1
 800123c:	f002 020f 	and.w	r2, r2, #15
 8001240:	b2d1      	uxtb	r1, r2
 8001242:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <drawFastHLine+0x1ac>)
 8001244:	54d1      	strb	r1, [r2, r3]
 8001246:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800124a:	4b39      	ldr	r3, [pc, #228]	; (8001330 <drawFastHLine+0x1a4>)
 800124c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001250:	0fd9      	lsrs	r1, r3, #31
 8001252:	440b      	add	r3, r1
 8001254:	105b      	asrs	r3, r3, #1
 8001256:	b218      	sxth	r0, r3
 8001258:	4603      	mov	r3, r0
 800125a:	fb03 f202 	mul.w	r2, r3, r2
 800125e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	440b      	add	r3, r1
 8001266:	0fd9      	lsrs	r1, r3, #31
 8001268:	440b      	add	r3, r1
 800126a:	105b      	asrs	r3, r3, #1
 800126c:	441a      	add	r2, r3
 800126e:	4932      	ldr	r1, [pc, #200]	; (8001338 <drawFastHLine+0x1ac>)
 8001270:	5c8a      	ldrb	r2, [r1, r2]
 8001272:	b251      	sxtb	r1, r2
 8001274:	883a      	ldrh	r2, [r7, #0]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b252      	sxtb	r2, r2
 800127a:	430a      	orrs	r2, r1
 800127c:	b251      	sxtb	r1, r2
 800127e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001282:	fb00 f202 	mul.w	r2, r0, r2
 8001286:	4413      	add	r3, r2
 8001288:	b2c9      	uxtb	r1, r1
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <drawFastHLine+0x1ac>)
 800128c:	54d1      	strb	r1, [r2, r3]
 800128e:	e040      	b.n	8001312 <drawFastHLine+0x186>
 8001290:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <drawFastHLine+0x1a4>)
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	0fd9      	lsrs	r1, r3, #31
 800129c:	440b      	add	r3, r1
 800129e:	105b      	asrs	r3, r3, #1
 80012a0:	b218      	sxth	r0, r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	fb03 f202 	mul.w	r2, r3, r2
 80012a8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	440b      	add	r3, r1
 80012b0:	0fd9      	lsrs	r1, r3, #31
 80012b2:	440b      	add	r3, r1
 80012b4:	105b      	asrs	r3, r3, #1
 80012b6:	441a      	add	r2, r3
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <drawFastHLine+0x1ac>)
 80012ba:	5c8a      	ldrb	r2, [r1, r2]
 80012bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80012c0:	fb00 f101 	mul.w	r1, r0, r1
 80012c4:	440b      	add	r3, r1
 80012c6:	f022 020f 	bic.w	r2, r2, #15
 80012ca:	b2d1      	uxtb	r1, r2
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <drawFastHLine+0x1ac>)
 80012ce:	54d1      	strb	r1, [r2, r3]
 80012d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <drawFastHLine+0x1a4>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	0fd9      	lsrs	r1, r3, #31
 80012dc:	440b      	add	r3, r1
 80012de:	105b      	asrs	r3, r3, #1
 80012e0:	b21c      	sxth	r4, r3
 80012e2:	4623      	mov	r3, r4
 80012e4:	fb03 f202 	mul.w	r2, r3, r2
 80012e8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012ec:	89fb      	ldrh	r3, [r7, #14]
 80012ee:	440b      	add	r3, r1
 80012f0:	0fd9      	lsrs	r1, r3, #31
 80012f2:	440b      	add	r3, r1
 80012f4:	105b      	asrs	r3, r3, #1
 80012f6:	441a      	add	r2, r3
 80012f8:	490f      	ldr	r1, [pc, #60]	; (8001338 <drawFastHLine+0x1ac>)
 80012fa:	5c89      	ldrb	r1, [r1, r2]
 80012fc:	883a      	ldrh	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001304:	fb04 f000 	mul.w	r0, r4, r0
 8001308:	4403      	add	r3, r0
 800130a:	430a      	orrs	r2, r1
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <drawFastHLine+0x1ac>)
 8001310:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < w; ++i){
 8001312:	89fb      	ldrh	r3, [r7, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	81fb      	strh	r3, [r7, #14]
 8001318:	89fa      	ldrh	r2, [r7, #14]
 800131a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800131e:	429a      	cmp	r2, r3
 8001320:	f6ff af69 	blt.w	80011f6 <drawFastHLine+0x6a>
 8001324:	e000      	b.n	8001328 <drawFastHLine+0x19c>
		return;
 8001326:	bf00      	nop
		}
}
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bc90      	pop	{r4, r7}
 800132e:	4770      	bx	lr
 8001330:	20012cdc 	.word	0x20012cdc
 8001334:	20012ce0 	.word	0x20012ce0
 8001338:	200000c4 	.word	0x200000c4

0800133c <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color){
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b087      	sub	sp, #28
 8001340:	af02      	add	r7, sp, #8
 8001342:	4604      	mov	r4, r0
 8001344:	4608      	mov	r0, r1
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	4623      	mov	r3, r4
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	460b      	mov	r3, r1
 8001354:	807b      	strh	r3, [r7, #2]
 8001356:	4613      	mov	r3, r2
 8001358:	803b      	strh	r3, [r7, #0]
	 if (x0 == x1) {
 800135a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800135e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001362:	429a      	cmp	r2, r3
 8001364:	d11a      	bne.n	800139c <drawLine+0x60>
	    if (y0 > y1)
 8001366:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800136a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800136e:	429a      	cmp	r2, r3
 8001370:	dd05      	ble.n	800137e <drawLine+0x42>
	      _swap_int16_t(y0, y1);
 8001372:	88bb      	ldrh	r3, [r7, #4]
 8001374:	81bb      	strh	r3, [r7, #12]
 8001376:	883b      	ldrh	r3, [r7, #0]
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	89bb      	ldrh	r3, [r7, #12]
 800137c:	803b      	strh	r3, [r7, #0]
	    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800137e:	883a      	ldrh	r2, [r7, #0]
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	3301      	adds	r3, #1
 8001388:	b29b      	uxth	r3, r3
 800138a:	b21a      	sxth	r2, r3
 800138c:	8c3b      	ldrh	r3, [r7, #32]
 800138e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001392:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001396:	f7ff fe0b 	bl	8000fb0 <drawFastVLine>
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
	  } else {

	    writeLine(x0, y0, x1, y1, color);
	  }
}
 800139a:	e02d      	b.n	80013f8 <drawLine+0xbc>
	  } else if (y0 == y1) {
 800139c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d11a      	bne.n	80013de <drawLine+0xa2>
	    if (x0 > x1)
 80013a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	dd05      	ble.n	80013c0 <drawLine+0x84>
	      _swap_int16_t(x0, x1);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	81fb      	strh	r3, [r7, #14]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	80fb      	strh	r3, [r7, #6]
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	807b      	strh	r3, [r7, #2]
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	8c3b      	ldrh	r3, [r7, #32]
 80013d0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013d8:	f7ff fed8 	bl	800118c <drawFastHLine>
}
 80013dc:	e00c      	b.n	80013f8 <drawLine+0xbc>
	    writeLine(x0, y0, x1, y1, color);
 80013de:	f9b7 4000 	ldrsh.w	r4, [r7]
 80013e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013ee:	8c3b      	ldrh	r3, [r7, #32]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	4623      	mov	r3, r4
 80013f4:	f000 f804 	bl	8001400 <writeLine>
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd90      	pop	{r4, r7, pc}

08001400 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color){
 8001400:	b490      	push	{r4, r7}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	4604      	mov	r4, r0
 8001408:	4608      	mov	r0, r1
 800140a:	4611      	mov	r1, r2
 800140c:	461a      	mov	r2, r3
 800140e:	4623      	mov	r3, r4
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	4603      	mov	r3, r0
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800141e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001422:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800142c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001430:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001438:	1acb      	subs	r3, r1, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	bfb8      	it	lt
 800143e:	425b      	neglt	r3, r3
 8001440:	429a      	cmp	r2, r3
 8001442:	bfcc      	ite	gt
 8001444:	2301      	movgt	r3, #1
 8001446:	2300      	movle	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	837b      	strh	r3, [r7, #26]
  if (steep) {
 800144c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00b      	beq.n	800146c <writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	833b      	strh	r3, [r7, #24]
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	80fb      	strh	r3, [r7, #6]
 800145c:	8b3b      	ldrh	r3, [r7, #24]
 800145e:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	82fb      	strh	r3, [r7, #22]
 8001464:	883b      	ldrh	r3, [r7, #0]
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	8afb      	ldrh	r3, [r7, #22]
 800146a:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 800146c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001474:	429a      	cmp	r2, r3
 8001476:	dd0b      	ble.n	8001490 <writeLine+0x90>
    _swap_int16_t(x0, x1);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	82bb      	strh	r3, [r7, #20]
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	8abb      	ldrh	r3, [r7, #20]
 8001482:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	827b      	strh	r3, [r7, #18]
 8001488:	883b      	ldrh	r3, [r7, #0]
 800148a:	80bb      	strh	r3, [r7, #4]
 800148c:	8a7b      	ldrh	r3, [r7, #18]
 800148e:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	b29b      	uxth	r3, r3
 8001498:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800149a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800149e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bfb8      	it	lt
 80014a8:	425b      	neglt	r3, r3
 80014aa:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 80014ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80014b0:	0fda      	lsrs	r2, r3, #31
 80014b2:	4413      	add	r3, r2
 80014b4:	105b      	asrs	r3, r3, #1
 80014b6:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 80014b8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80014bc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	da02      	bge.n	80014ca <writeLine+0xca>
    ystep = 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	83bb      	strh	r3, [r7, #28]
 80014c8:	e13a      	b.n	8001740 <writeLine+0x340>
  } else {
    ystep = -1;
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 80014d0:	e136      	b.n	8001740 <writeLine+0x340>
    if (steep) {
 80014d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 808d 	beq.w	80015f6 <writeLine+0x1f6>
    	IMG_BUF_SET(y0, x0, color)
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d144      	bne.n	8001572 <writeLine+0x172>
 80014e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ec:	4b9a      	ldr	r3, [pc, #616]	; (8001758 <writeLine+0x358>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	0fd9      	lsrs	r1, r3, #31
 80014f4:	440b      	add	r3, r1
 80014f6:	105b      	asrs	r3, r3, #1
 80014f8:	b218      	sxth	r0, r3
 80014fa:	4603      	mov	r3, r0
 80014fc:	fb03 f202 	mul.w	r2, r3, r2
 8001500:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001504:	0fd9      	lsrs	r1, r3, #31
 8001506:	440b      	add	r3, r1
 8001508:	105b      	asrs	r3, r3, #1
 800150a:	b219      	sxth	r1, r3
 800150c:	460b      	mov	r3, r1
 800150e:	4413      	add	r3, r2
 8001510:	4a92      	ldr	r2, [pc, #584]	; (800175c <writeLine+0x35c>)
 8001512:	5cd2      	ldrb	r2, [r2, r3]
 8001514:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001518:	fb00 f303 	mul.w	r3, r0, r3
 800151c:	440b      	add	r3, r1
 800151e:	f002 020f 	and.w	r2, r2, #15
 8001522:	b2d1      	uxtb	r1, r2
 8001524:	4a8d      	ldr	r2, [pc, #564]	; (800175c <writeLine+0x35c>)
 8001526:	54d1      	strb	r1, [r2, r3]
 8001528:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800152c:	4b8a      	ldr	r3, [pc, #552]	; (8001758 <writeLine+0x358>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	0fd9      	lsrs	r1, r3, #31
 8001534:	440b      	add	r3, r1
 8001536:	105b      	asrs	r3, r3, #1
 8001538:	b218      	sxth	r0, r3
 800153a:	4603      	mov	r3, r0
 800153c:	fb03 f202 	mul.w	r2, r3, r2
 8001540:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001544:	0fd9      	lsrs	r1, r3, #31
 8001546:	440b      	add	r3, r1
 8001548:	105b      	asrs	r3, r3, #1
 800154a:	b219      	sxth	r1, r3
 800154c:	460b      	mov	r3, r1
 800154e:	4413      	add	r3, r2
 8001550:	4a82      	ldr	r2, [pc, #520]	; (800175c <writeLine+0x35c>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	b25a      	sxtb	r2, r3
 8001556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	b25b      	sxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001564:	fb00 f303 	mul.w	r3, r0, r3
 8001568:	440b      	add	r3, r1
 800156a:	b2d1      	uxtb	r1, r2
 800156c:	4a7b      	ldr	r2, [pc, #492]	; (800175c <writeLine+0x35c>)
 800156e:	54d1      	strb	r1, [r2, r3]
 8001570:	e0cd      	b.n	800170e <writeLine+0x30e>
 8001572:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <writeLine+0x358>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	0fd9      	lsrs	r1, r3, #31
 800157e:	440b      	add	r3, r1
 8001580:	105b      	asrs	r3, r3, #1
 8001582:	b218      	sxth	r0, r3
 8001584:	4603      	mov	r3, r0
 8001586:	fb03 f202 	mul.w	r2, r3, r2
 800158a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800158e:	0fd9      	lsrs	r1, r3, #31
 8001590:	440b      	add	r3, r1
 8001592:	105b      	asrs	r3, r3, #1
 8001594:	b219      	sxth	r1, r3
 8001596:	460b      	mov	r3, r1
 8001598:	4413      	add	r3, r2
 800159a:	4a70      	ldr	r2, [pc, #448]	; (800175c <writeLine+0x35c>)
 800159c:	5cd2      	ldrb	r2, [r2, r3]
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	fb00 f303 	mul.w	r3, r0, r3
 80015a6:	440b      	add	r3, r1
 80015a8:	f022 020f 	bic.w	r2, r2, #15
 80015ac:	b2d1      	uxtb	r1, r2
 80015ae:	4a6b      	ldr	r2, [pc, #428]	; (800175c <writeLine+0x35c>)
 80015b0:	54d1      	strb	r1, [r2, r3]
 80015b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80015b6:	4b68      	ldr	r3, [pc, #416]	; (8001758 <writeLine+0x358>)
 80015b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015bc:	0fd9      	lsrs	r1, r3, #31
 80015be:	440b      	add	r3, r1
 80015c0:	105b      	asrs	r3, r3, #1
 80015c2:	b21c      	sxth	r4, r3
 80015c4:	4623      	mov	r3, r4
 80015c6:	fb03 f202 	mul.w	r2, r3, r2
 80015ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015ce:	0fd9      	lsrs	r1, r3, #31
 80015d0:	440b      	add	r3, r1
 80015d2:	105b      	asrs	r3, r3, #1
 80015d4:	b218      	sxth	r0, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	4413      	add	r3, r2
 80015da:	4a60      	ldr	r2, [pc, #384]	; (800175c <writeLine+0x35c>)
 80015dc:	5cd1      	ldrb	r1, [r2, r3]
 80015de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	fb04 f303 	mul.w	r3, r4, r3
 80015ea:	4403      	add	r3, r0
 80015ec:	430a      	orrs	r2, r1
 80015ee:	b2d1      	uxtb	r1, r2
 80015f0:	4a5a      	ldr	r2, [pc, #360]	; (800175c <writeLine+0x35c>)
 80015f2:	54d1      	strb	r1, [r2, r3]
 80015f4:	e08b      	b.n	800170e <writeLine+0x30e>
    } else {
    	IMG_BUF_SET(x0, y0, color)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d144      	bne.n	800168c <writeLine+0x28c>
 8001602:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001606:	4b54      	ldr	r3, [pc, #336]	; (8001758 <writeLine+0x358>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	0fd9      	lsrs	r1, r3, #31
 800160e:	440b      	add	r3, r1
 8001610:	105b      	asrs	r3, r3, #1
 8001612:	b218      	sxth	r0, r3
 8001614:	4603      	mov	r3, r0
 8001616:	fb03 f202 	mul.w	r2, r3, r2
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	440b      	add	r3, r1
 8001622:	105b      	asrs	r3, r3, #1
 8001624:	b219      	sxth	r1, r3
 8001626:	460b      	mov	r3, r1
 8001628:	4413      	add	r3, r2
 800162a:	4a4c      	ldr	r2, [pc, #304]	; (800175c <writeLine+0x35c>)
 800162c:	5cd2      	ldrb	r2, [r2, r3]
 800162e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001632:	fb00 f303 	mul.w	r3, r0, r3
 8001636:	440b      	add	r3, r1
 8001638:	f002 020f 	and.w	r2, r2, #15
 800163c:	b2d1      	uxtb	r1, r2
 800163e:	4a47      	ldr	r2, [pc, #284]	; (800175c <writeLine+0x35c>)
 8001640:	54d1      	strb	r1, [r2, r3]
 8001642:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <writeLine+0x358>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	0fd9      	lsrs	r1, r3, #31
 800164e:	440b      	add	r3, r1
 8001650:	105b      	asrs	r3, r3, #1
 8001652:	b218      	sxth	r0, r3
 8001654:	4603      	mov	r3, r0
 8001656:	fb03 f202 	mul.w	r2, r3, r2
 800165a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800165e:	0fd9      	lsrs	r1, r3, #31
 8001660:	440b      	add	r3, r1
 8001662:	105b      	asrs	r3, r3, #1
 8001664:	b219      	sxth	r1, r3
 8001666:	460b      	mov	r3, r1
 8001668:	4413      	add	r3, r2
 800166a:	4a3c      	ldr	r2, [pc, #240]	; (800175c <writeLine+0x35c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	b25a      	sxtb	r2, r3
 8001670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b25a      	sxtb	r2, r3
 800167a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800167e:	fb00 f303 	mul.w	r3, r0, r3
 8001682:	440b      	add	r3, r1
 8001684:	b2d1      	uxtb	r1, r2
 8001686:	4a35      	ldr	r2, [pc, #212]	; (800175c <writeLine+0x35c>)
 8001688:	54d1      	strb	r1, [r2, r3]
 800168a:	e040      	b.n	800170e <writeLine+0x30e>
 800168c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <writeLine+0x358>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	0fd9      	lsrs	r1, r3, #31
 8001698:	440b      	add	r3, r1
 800169a:	105b      	asrs	r3, r3, #1
 800169c:	b218      	sxth	r0, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	fb03 f202 	mul.w	r2, r3, r2
 80016a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a8:	0fd9      	lsrs	r1, r3, #31
 80016aa:	440b      	add	r3, r1
 80016ac:	105b      	asrs	r3, r3, #1
 80016ae:	b219      	sxth	r1, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	4413      	add	r3, r2
 80016b4:	4a29      	ldr	r2, [pc, #164]	; (800175c <writeLine+0x35c>)
 80016b6:	5cd2      	ldrb	r2, [r2, r3]
 80016b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016bc:	fb00 f303 	mul.w	r3, r0, r3
 80016c0:	440b      	add	r3, r1
 80016c2:	f022 020f 	bic.w	r2, r2, #15
 80016c6:	b2d1      	uxtb	r1, r2
 80016c8:	4a24      	ldr	r2, [pc, #144]	; (800175c <writeLine+0x35c>)
 80016ca:	54d1      	strb	r1, [r2, r3]
 80016cc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <writeLine+0x358>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	0fd9      	lsrs	r1, r3, #31
 80016d8:	440b      	add	r3, r1
 80016da:	105b      	asrs	r3, r3, #1
 80016dc:	b21c      	sxth	r4, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	fb03 f202 	mul.w	r2, r3, r2
 80016e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e8:	0fd9      	lsrs	r1, r3, #31
 80016ea:	440b      	add	r3, r1
 80016ec:	105b      	asrs	r3, r3, #1
 80016ee:	b218      	sxth	r0, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	4413      	add	r3, r2
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <writeLine+0x35c>)
 80016f6:	5cd1      	ldrb	r1, [r2, r3]
 80016f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001700:	fb04 f303 	mul.w	r3, r4, r3
 8001704:	4403      	add	r3, r0
 8001706:	430a      	orrs	r2, r1
 8001708:	b2d1      	uxtb	r1, r2
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <writeLine+0x35c>)
 800170c:	54d1      	strb	r1, [r2, r3]
    }
    err -= dy;
 800170e:	8bfa      	ldrh	r2, [r7, #30]
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	b29b      	uxth	r3, r3
 8001716:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8001718:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800171c:	2b00      	cmp	r3, #0
 800171e:	da09      	bge.n	8001734 <writeLine+0x334>
      y0 += ystep;
 8001720:	88ba      	ldrh	r2, [r7, #4]
 8001722:	8bbb      	ldrh	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	80bb      	strh	r3, [r7, #4]
      err += dx;
 800172a:	8bfa      	ldrh	r2, [r7, #30]
 800172c:	8a3b      	ldrh	r3, [r7, #16]
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8001734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	b29b      	uxth	r3, r3
 800173e:	80fb      	strh	r3, [r7, #6]
 8001740:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001744:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001748:	429a      	cmp	r2, r3
 800174a:	f77f aec2 	ble.w	80014d2 <writeLine+0xd2>
    }
  }
}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bc90      	pop	{r4, r7}
 8001756:	4770      	bx	lr
 8001758:	20012cdc 	.word	0x20012cdc
 800175c:	200000c4 	.word	0x200000c4

08001760 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t color){
 8001760:	b490      	push	{r4, r7}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4623      	mov	r3, r4
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	4603      	mov	r3, r0
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
 800177a:	4613      	mov	r3, r2
 800177c:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 800177e:	4b83      	ldr	r3, [pc, #524]	; (800198c <fillRect+0x22c>)
 8001780:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001784:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001788:	429a      	cmp	r2, r3
 800178a:	f280 80f9 	bge.w	8001980 <fillRect+0x220>
 800178e:	4b80      	ldr	r3, [pc, #512]	; (8001990 <fillRect+0x230>)
 8001790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001794:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	f280 80f1 	bge.w	8001980 <fillRect+0x220>
		return;
	if ((x + w - 1) >= _width)
 800179e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017a6:	4413      	add	r3, r2
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a78      	ldr	r2, [pc, #480]	; (800198c <fillRect+0x22c>)
 80017ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	db07      	blt.n	80017c4 <fillRect+0x64>
		w = _width - x;
 80017b4:	4b75      	ldr	r3, [pc, #468]	; (800198c <fillRect+0x22c>)
 80017b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 80017c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80017c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80017cc:	4413      	add	r3, r2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4a6f      	ldr	r2, [pc, #444]	; (8001990 <fillRect+0x230>)
 80017d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	db07      	blt.n	80017ea <fillRect+0x8a>
		h = _height - y;
 80017da:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <fillRect+0x230>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	88bb      	ldrh	r3, [r7, #4]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	803b      	strh	r3, [r7, #0]

	for(int16_t i = 0; i < w; ++i){
 80017ea:	2300      	movs	r3, #0
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	e0bf      	b.n	8001970 <fillRect+0x210>
		for(int16_t j = 0; j < h; ++j){
 80017f0:	2300      	movs	r3, #0
 80017f2:	81bb      	strh	r3, [r7, #12]
 80017f4:	e0b1      	b.n	800195a <fillRect+0x1fa>
			IMG_BUF_SET(x+i, y+j, color);
 80017f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017fe:	4413      	add	r3, r2
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d154      	bne.n	80018b2 <fillRect+0x152>
 8001808:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800180c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001810:	441a      	add	r2, r3
 8001812:	4b5e      	ldr	r3, [pc, #376]	; (800198c <fillRect+0x22c>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	0fd9      	lsrs	r1, r3, #31
 800181a:	440b      	add	r3, r1
 800181c:	105b      	asrs	r3, r3, #1
 800181e:	b21c      	sxth	r4, r3
 8001820:	4623      	mov	r3, r4
 8001822:	fb03 f202 	mul.w	r2, r3, r2
 8001826:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800182a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182e:	440b      	add	r3, r1
 8001830:	0fd9      	lsrs	r1, r3, #31
 8001832:	440b      	add	r3, r1
 8001834:	105b      	asrs	r3, r3, #1
 8001836:	441a      	add	r2, r3
 8001838:	4956      	ldr	r1, [pc, #344]	; (8001994 <fillRect+0x234>)
 800183a:	5c8a      	ldrb	r2, [r1, r2]
 800183c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001840:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001844:	4401      	add	r1, r0
 8001846:	4620      	mov	r0, r4
 8001848:	fb00 f101 	mul.w	r1, r0, r1
 800184c:	440b      	add	r3, r1
 800184e:	f002 020f 	and.w	r2, r2, #15
 8001852:	b2d1      	uxtb	r1, r2
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <fillRect+0x234>)
 8001856:	54d1      	strb	r1, [r2, r3]
 8001858:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800185c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001860:	441a      	add	r2, r3
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <fillRect+0x22c>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	0fd9      	lsrs	r1, r3, #31
 800186a:	440b      	add	r3, r1
 800186c:	105b      	asrs	r3, r3, #1
 800186e:	b218      	sxth	r0, r3
 8001870:	4603      	mov	r3, r0
 8001872:	fb03 f202 	mul.w	r2, r3, r2
 8001876:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800187a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187e:	440b      	add	r3, r1
 8001880:	0fd9      	lsrs	r1, r3, #31
 8001882:	440b      	add	r3, r1
 8001884:	105b      	asrs	r3, r3, #1
 8001886:	441a      	add	r2, r3
 8001888:	4942      	ldr	r1, [pc, #264]	; (8001994 <fillRect+0x234>)
 800188a:	5c8a      	ldrb	r2, [r1, r2]
 800188c:	b251      	sxtb	r1, r2
 800188e:	7e3a      	ldrb	r2, [r7, #24]
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b252      	sxtb	r2, r2
 8001894:	430a      	orrs	r2, r1
 8001896:	b254      	sxtb	r4, r2
 8001898:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800189c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80018a0:	440a      	add	r2, r1
 80018a2:	4601      	mov	r1, r0
 80018a4:	fb01 f202 	mul.w	r2, r1, r2
 80018a8:	4413      	add	r3, r2
 80018aa:	b2e1      	uxtb	r1, r4
 80018ac:	4a39      	ldr	r2, [pc, #228]	; (8001994 <fillRect+0x234>)
 80018ae:	54d1      	strb	r1, [r2, r3]
 80018b0:	e04f      	b.n	8001952 <fillRect+0x1f2>
 80018b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018ba:	441a      	add	r2, r3
 80018bc:	4b33      	ldr	r3, [pc, #204]	; (800198c <fillRect+0x22c>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	0fd9      	lsrs	r1, r3, #31
 80018c4:	440b      	add	r3, r1
 80018c6:	105b      	asrs	r3, r3, #1
 80018c8:	b21c      	sxth	r4, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	fb03 f202 	mul.w	r2, r3, r2
 80018d0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80018d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018d8:	440b      	add	r3, r1
 80018da:	0fd9      	lsrs	r1, r3, #31
 80018dc:	440b      	add	r3, r1
 80018de:	105b      	asrs	r3, r3, #1
 80018e0:	441a      	add	r2, r3
 80018e2:	492c      	ldr	r1, [pc, #176]	; (8001994 <fillRect+0x234>)
 80018e4:	5c8a      	ldrb	r2, [r1, r2]
 80018e6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80018ea:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80018ee:	4401      	add	r1, r0
 80018f0:	4620      	mov	r0, r4
 80018f2:	fb00 f101 	mul.w	r1, r0, r1
 80018f6:	440b      	add	r3, r1
 80018f8:	f022 020f 	bic.w	r2, r2, #15
 80018fc:	b2d1      	uxtb	r1, r2
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <fillRect+0x234>)
 8001900:	54d1      	strb	r1, [r2, r3]
 8001902:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001906:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800190a:	441a      	add	r2, r3
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <fillRect+0x22c>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	0fd9      	lsrs	r1, r3, #31
 8001914:	440b      	add	r3, r1
 8001916:	105b      	asrs	r3, r3, #1
 8001918:	b21c      	sxth	r4, r3
 800191a:	4623      	mov	r3, r4
 800191c:	fb03 f202 	mul.w	r2, r3, r2
 8001920:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001924:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001928:	440b      	add	r3, r1
 800192a:	0fd9      	lsrs	r1, r3, #31
 800192c:	440b      	add	r3, r1
 800192e:	105b      	asrs	r3, r3, #1
 8001930:	441a      	add	r2, r3
 8001932:	4918      	ldr	r1, [pc, #96]	; (8001994 <fillRect+0x234>)
 8001934:	5c89      	ldrb	r1, [r1, r2]
 8001936:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800193a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800193e:	4402      	add	r2, r0
 8001940:	4620      	mov	r0, r4
 8001942:	fb00 f202 	mul.w	r2, r0, r2
 8001946:	4413      	add	r3, r2
 8001948:	7e3a      	ldrb	r2, [r7, #24]
 800194a:	430a      	orrs	r2, r1
 800194c:	b2d1      	uxtb	r1, r2
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <fillRect+0x234>)
 8001950:	54d1      	strb	r1, [r2, r3]
		for(int16_t j = 0; j < h; ++j){
 8001952:	89bb      	ldrh	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	81bb      	strh	r3, [r7, #12]
 800195a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800195e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001962:	429a      	cmp	r2, r3
 8001964:	f6ff af47 	blt.w	80017f6 <fillRect+0x96>
	for(int16_t i = 0; i < w; ++i){
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	3301      	adds	r3, #1
 800196c:	b29b      	uxth	r3, r3
 800196e:	81fb      	strh	r3, [r7, #14]
 8001970:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001974:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001978:	429a      	cmp	r2, r3
 800197a:	f6ff af39 	blt.w	80017f0 <fillRect+0x90>
 800197e:	e000      	b.n	8001982 <fillRect+0x222>
		return;
 8001980:	bf00      	nop
		}
	}
}
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bc90      	pop	{r4, r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20012cdc 	.word	0x20012cdc
 8001990:	20012ce0 	.word	0x20012ce0
 8001994:	200000c4 	.word	0x200000c4

08001998 <setRotation>:

void setRotation(uint8_t r){
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	writecommand(ILI9488_MADCTL);
 80019a2:	2036      	movs	r0, #54	; 0x36
 80019a4:	f000 f850 	bl	8001a48 <writecommand>
	rotation = r % 4; // can't be higher than 3
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <setRotation+0xa4>)
 80019b2:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80019b4:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <setRotation+0xa4>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d83b      	bhi.n	8001a34 <setRotation+0x9c>
 80019bc:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <setRotation+0x2c>)
 80019be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c2:	bf00      	nop
 80019c4:	080019d5 	.word	0x080019d5
 80019c8:	080019ed 	.word	0x080019ed
 80019cc:	08001a05 	.word	0x08001a05
 80019d0:	08001a1d 	.word	0x08001a1d
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 80019d4:	2048      	movs	r0, #72	; 0x48
 80019d6:	f000 f85b 	bl	8001a90 <writedata>
		_width = ILI9488_TFTWIDTH;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <setRotation+0xa8>)
 80019dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019e0:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <setRotation+0xac>)
 80019e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019e8:	801a      	strh	r2, [r3, #0]
		break;
 80019ea:	e023      	b.n	8001a34 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 80019ec:	2028      	movs	r0, #40	; 0x28
 80019ee:	f000 f84f 	bl	8001a90 <writedata>
		_width = ILI9488_TFTHEIGHT;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <setRotation+0xa8>)
 80019f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019f8:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <setRotation+0xac>)
 80019fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a00:	801a      	strh	r2, [r3, #0]
		break;
 8001a02:	e017      	b.n	8001a34 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001a04:	2088      	movs	r0, #136	; 0x88
 8001a06:	f000 f843 	bl	8001a90 <writedata>
		_width = ILI9488_TFTWIDTH;
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <setRotation+0xa8>)
 8001a0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a10:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <setRotation+0xac>)
 8001a14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a18:	801a      	strh	r2, [r3, #0]
		break;
 8001a1a:	e00b      	b.n	8001a34 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001a1c:	20e8      	movs	r0, #232	; 0xe8
 8001a1e:	f000 f837 	bl	8001a90 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001a22:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <setRotation+0xa8>)
 8001a24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a28:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <setRotation+0xac>)
 8001a2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a30:	801a      	strh	r2, [r3, #0]
		break;
 8001a32:	bf00      	nop
	}
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20012cd8 	.word	0x20012cd8
 8001a40:	20012cdc 	.word	0x20012cdc
 8001a44:	20012ce0 	.word	0x20012ce0

08001a48 <writecommand>:

void spiwrite(uint8_t data){
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);
}

void writecommand(uint8_t c){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2110      	movs	r1, #16
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <writecommand+0x40>)
 8001a58:	f003 f9ec 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <writecommand+0x40>)
 8001a64:	f003 f9e6 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 8001a68:	1df9      	adds	r1, r7, #7
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <writecommand+0x44>)
 8001a70:	f004 fd61 	bl	8006536 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <writecommand+0x40>)
 8001a7c:	f003 f9da 	bl	8004e34 <HAL_GPIO_WritePin>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	20012df8 	.word	0x20012df8

08001a90 <writedata>:
	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
}

void writedata(uint8_t d){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <writedata+0x40>)
 8001aa0:	f003 f9c8 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aaa:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <writedata+0x40>)
 8001aac:	f003 f9c2 	bl	8004e34 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8001ab0:	1df9      	adds	r1, r7, #7
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <writedata+0x44>)
 8001ab8:	f004 fd3d 	bl	8006536 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <writedata+0x40>)
 8001ac4:	f003 f9b6 	bl	8004e34 <HAL_GPIO_WritePin>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	20012df8 	.word	0x20012df8

08001ad8 <ILI9341_Draw_Colour_Burst>:
	}
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size){
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	80fb      	strh	r3, [r7, #6]
 8001ae4:	466b      	mov	r3, sp
 8001ae6:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE){
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d802      	bhi.n	8001afe <ILI9341_Draw_Colour_Burst+0x26>
		Buffer_Size = Size;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
 8001afc:	e002      	b.n	8001b04 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else{
		Buffer_Size = BURST_MAX_SIZE;
 8001afe:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2110      	movs	r1, #16
 8001b08:	4867      	ldr	r0, [pc, #412]	; (8001ca8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001b0a:	f003 f993 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b14:	4864      	ldr	r0, [pc, #400]	; (8001ca8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001b16:	f003 f98d 	bl	8004e34 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	0adb      	lsrs	r3, r3, #11
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	115b      	asrs	r3, r3, #5
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 8001b3e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b42:	4613      	mov	r3, r2
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	1a9b      	subs	r3, r3, r2
 8001b48:	4a58      	ldr	r2, [pc, #352]	; (8001cac <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	441a      	add	r2, r3
 8001b50:	1112      	asrs	r2, r2, #4
 8001b52:	17db      	asrs	r3, r3, #31
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 8001b5a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001b5e:	4613      	mov	r3, r2
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001b66:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6a:	441a      	add	r2, r3
 8001b6c:	1152      	asrs	r2, r2, #5
 8001b6e:	17db      	asrs	r3, r3, #31
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 8001b76:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	1a9b      	subs	r3, r3, r2
 8001b80:	4a4a      	ldr	r2, [pc, #296]	; (8001cac <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001b82:	fb82 1203 	smull	r1, r2, r2, r3
 8001b86:	441a      	add	r2, r3
 8001b88:	1112      	asrs	r2, r2, #4
 8001b8a:	17db      	asrs	r3, r3, #31
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 8001b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b94:	4603      	mov	r3, r0
 8001b96:	3b01      	subs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	00d4      	lsls	r4, r2, #3
 8001baa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001bae:	00cb      	lsls	r3, r1, #3
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f04f 0400 	mov.w	r4, #0
 8001bbe:	00d4      	lsls	r4, r2, #3
 8001bc0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001bc4:	00cb      	lsls	r3, r1, #3
 8001bc6:	1dc3      	adds	r3, r0, #7
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	ebad 0d03 	sub.w	sp, sp, r3
 8001bd0:	466b      	mov	r3, sp
 8001bd2:	3300      	adds	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3){
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bda:	e014      	b.n	8001c06 <ILI9341_Draw_Colour_Burst+0x12e>
		burst_buffer[j] = r;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be0:	4413      	add	r3, r2
 8001be2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001be6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	3301      	adds	r3, #1
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001bf2:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 8001bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001bfe:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3){
 8001c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c02:	3303      	adds	r3, #3
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3e6      	bcc.n	8001bdc <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2c:	fb01 f202 	mul.w	r2, r1, r2
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0){
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d018      	beq.n	8001c6c <ILI9341_Draw_Colour_Burst+0x194>
		for (uint32_t j = 0; j < (Sending_in_Block); j++){
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c3e:	e011      	b.n	8001c64 <ILI9341_Draw_Colour_Burst+0x18c>
			SPI1_TX_completed_flag = 0;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	b292      	uxth	r2, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	481a      	ldr	r0, [pc, #104]	; (8001cb8 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001c50:	f004 fde0 	bl	8006814 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 8001c54:	bf00      	nop
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0fb      	beq.n	8001c56 <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++){
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	3301      	adds	r3, #1
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3e9      	bcc.n	8001c40 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001c82:	f004 fdc7 	bl	8006814 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 8001c86:	bf00      	nop
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0fb      	beq.n	8001c88 <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001c98:	f003 f8cc 	bl	8004e34 <HAL_GPIO_WritePin>
 8001c9c:	46ad      	mov	sp, r5
}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	84210843 	.word	0x84210843
 8001cb0:	82082083 	.word	0x82082083
 8001cb4:	20000030 	.word	0x20000030
 8001cb8:	20012df8 	.word	0x20012df8

08001cbc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour){
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 8001cc6:	f240 133f 	movw	r3, #319	; 0x13f
 8001cca:	f240 12df 	movw	r2, #479	; 0x1df
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff f84b 	bl	8000d6c <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fefb 	bl	8001ad8 <ILI9341_Draw_Colour_Burst>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <LCD_Char>:
//{
//	filledRectangleClip(0U, 0U, (uint16_t)ILI9488_TFTWIDTH, (uint16_t)ILI9488_TFTHEIGHT, colour);
//}
//

void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24){
 8001cea:	b590      	push	{r4, r7, lr}
 8001cec:	b08b      	sub	sp, #44	; 0x2c
 8001cee:	af02      	add	r7, sp, #8
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	81fb      	strh	r3, [r7, #14]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	777b      	strb	r3, [r7, #29]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++){
 8001d14:	2300      	movs	r3, #0
 8001d16:	763b      	strb	r3, [r7, #24]
 8001d18:	e09b      	b.n	8001e52 <LCD_Char+0x168>
		for (cur_x = 0; cur_x < glyph -> width; cur_x++){
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	767b      	strb	r3, [r7, #25]
 8001d1e:	e056      	b.n	8001dce <LCD_Char+0xe4>
			if (bit == 0){
 8001d20:	7f3b      	ldrb	r3, [r7, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <LCD_Char+0x50>
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001d26:	8bfb      	ldrh	r3, [r7, #30]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	83fa      	strh	r2, [r7, #30]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8001d3a:	7f7a      	ldrb	r2, [r7, #29]
 8001d3c:	7f3b      	ldrb	r3, [r7, #28]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <LCD_Char+0x64>
 8001d46:	8b7b      	ldrh	r3, [r7, #26]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	837b      	strh	r3, [r7, #26]
 8001d4c:	e039      	b.n	8001dc2 <LCD_Char+0xd8>
			else if (set_pixels > 0){
 8001d4e:	8b7b      	ldrh	r3, [r7, #26]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d036      	beq.n	8001dc2 <LCD_Char+0xd8>
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	7e7b      	ldrb	r3, [r7, #25]
 8001d5e:	441a      	add	r2, r3
 8001d60:	8b7b      	ldrh	r3, [r7, #26]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	fb12 f303 	smulbb	r3, r2, r3
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	89fb      	ldrh	r3, [r7, #14]
 8001d74:	4413      	add	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b218      	sxth	r0, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d80:	461a      	mov	r2, r3
 8001d82:	7e3b      	ldrb	r3, [r7, #24]
 8001d84:	4413      	add	r3, r2
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	fb12 f303 	smulbb	r3, r2, r3
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	89bb      	ldrh	r3, [r7, #12]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b219      	sxth	r1, r3
 8001d9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	8b7a      	ldrh	r2, [r7, #26]
 8001da4:	fb12 f303 	smulbb	r3, r2, r3
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001db0:	b21c      	sxth	r4, r3
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4623      	mov	r3, r4
 8001dba:	f7ff fcd1 	bl	8001760 <fillRect>
				set_pixels = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001dc2:	7f3b      	ldrb	r3, [r7, #28]
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++){
 8001dc8:	7e7b      	ldrb	r3, [r7, #25]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	767b      	strb	r3, [r7, #25]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	789b      	ldrb	r3, [r3, #2]
 8001dd2:	7e7a      	ldrb	r2, [r7, #25]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3a3      	bcc.n	8001d20 <LCD_Char+0x36>
		}
		if (set_pixels > 0){
 8001dd8:	8b7b      	ldrh	r3, [r7, #26]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d036      	beq.n	8001e4c <LCD_Char+0x162>
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001de4:	461a      	mov	r2, r3
 8001de6:	7e7b      	ldrb	r3, [r7, #25]
 8001de8:	441a      	add	r2, r3
 8001dea:	8b7b      	ldrh	r3, [r7, #26]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	fb12 f303 	smulbb	r3, r2, r3
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b218      	sxth	r0, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	7e3b      	ldrb	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	fb12 f303 	smulbb	r3, r2, r3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	89bb      	ldrh	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b219      	sxth	r1, r3
 8001e26:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	8b7a      	ldrh	r2, [r7, #26]
 8001e2e:	fb12 f303 	smulbb	r3, r2, r3
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e3a:	b21c      	sxth	r4, r3
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4623      	mov	r3, r4
 8001e44:	f7ff fc8c 	bl	8001760 <fillRect>
			set_pixels = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++){
 8001e4c:	7e3b      	ldrb	r3, [r7, #24]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	763b      	strb	r3, [r7, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	78db      	ldrb	r3, [r3, #3]
 8001e56:	7e3a      	ldrb	r2, [r7, #24]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f4ff af5e 	bcc.w	8001d1a <LCD_Char+0x30>
		}
	}
}
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}

08001e66 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24){
 8001e66:	b590      	push	{r4, r7, lr}
 8001e68:	b08f      	sub	sp, #60	; 0x3c
 8001e6a:	af02      	add	r7, sp, #8
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	4603      	mov	r3, r0
 8001e72:	81fb      	strh	r3, [r7, #14]
 8001e74:	460b      	mov	r3, r1
 8001e76:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	220c      	movs	r2, #12
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f006 f8a7 	bl	8007fdc <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++){
 8001e8e:	2300      	movs	r3, #0
 8001e90:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001e92:	e056      	b.n	8001f42 <LCD_Font+0xdc>
		char c = text[text_pos];
 8001e94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n'){
 8001ea0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ea4:	2b0a      	cmp	r3, #10
 8001ea6:	d10f      	bne.n	8001ec8 <LCD_Font+0x62>
			cursor_x = x;
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001eac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	fb12 f303 	smulbb	r3, r2, r3
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001ec6:	e039      	b.n	8001f3c <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r'){
 8001ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ecc:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d333      	bcc.n	8001f3c <LCD_Font+0xd6>
 8001ed4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ed8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d82d      	bhi.n	8001f3c <LCD_Font+0xd6>
 8001ee0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ee4:	2b0d      	cmp	r3, #13
 8001ee6:	d029      	beq.n	8001f3c <LCD_Font+0xd6>
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001eee:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	18d1      	adds	r1, r2, r3
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2208      	movs	r2, #8
 8001efe:	4618      	mov	r0, r3
 8001f00:	f006 f86c 	bl	8007fdc <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001f04:	f107 041c 	add.w	r4, r7, #28
 8001f08:	f107 0214 	add.w	r2, r7, #20
 8001f0c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001f10:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	4623      	mov	r3, r4
 8001f20:	f7ff fee3 	bl	8001cea <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001f24:	7e3b      	ldrb	r3, [r7, #24]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	fb12 f303 	smulbb	r3, r2, r3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++){
 8001f3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f3e:	3301      	adds	r3, #1
 8001f40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f42:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001f44:	68b8      	ldr	r0, [r7, #8]
 8001f46:	f7fe f943 	bl	80001d0 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	d3a1      	bcc.n	8001e94 <LCD_Font+0x2e>
		}
	}
}
 8001f50:	bf00      	nop
 8001f52:	3734      	adds	r7, #52	; 0x34
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <imageRender>:

/**
 * @brief Renders an image stored in an image buffer to the LCD screen
 *
 */
void imageRender(){
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	466b      	mov	r3, sp
 8001f60:	461d      	mov	r5, r3
	setAddrWindow(0, 0, _width - 1, _height - 1);
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <imageRender+0x198>)
 8001f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <imageRender+0x19c>)
 8001f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7fe fef5 	bl	8000d6c <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2110      	movs	r1, #16
 8001f86:	485c      	ldr	r0, [pc, #368]	; (80020f8 <imageRender+0x1a0>)
 8001f88:	f002 ff54 	bl	8004e34 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f92:	4859      	ldr	r0, [pc, #356]	; (80020f8 <imageRender+0x1a0>)
 8001f94:	f002 ff4e 	bl	8004e34 <HAL_GPIO_WritePin>

	// Buffer to hold pixel color data for a single line of the screen
	uint8_t linebuff[_width * 3 + 1];
 8001f98:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <imageRender+0x198>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	1c58      	adds	r0, r3, #1
 8001fa8:	1e43      	subs	r3, r0, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	4603      	mov	r3, r0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	f04f 0400 	mov.w	r4, #0
 8001fbc:	00d4      	lsls	r4, r2, #3
 8001fbe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001fc2:	00cb      	lsls	r3, r1, #3
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	f04f 0400 	mov.w	r4, #0
 8001fd4:	00d4      	lsls	r4, r2, #3
 8001fd6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001fda:	00cb      	lsls	r3, r1, #3
 8001fdc:	4603      	mov	r3, r0
 8001fde:	3307      	adds	r3, #7
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	ebad 0d03 	sub.w	sp, sp, r3
 8001fe8:	466b      	mov	r3, sp
 8001fea:	3300      	adds	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]

	// Iterate through each row (height) of the screen
	for (uint16_t h = 0; h < _height; h++){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	81bb      	strh	r3, [r7, #12]
 8001ff2:	e06b      	b.n	80020cc <imageRender+0x174>
		// Iterate through each column (width) of the screen
		for (uint16_t w = 0; w < _width; w++){
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	81fb      	strh	r3, [r7, #14]
 8001ff8:	e052      	b.n	80020a0 <imageRender+0x148>
			// Retrieve the pixel color index from the image buffer
			uint8_t pixel_color = IMG_BUFF_GET(w, h);
 8001ffa:	89fb      	ldrh	r3, [r7, #14]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10e      	bne.n	8002024 <imageRender+0xcc>
 8002006:	89ba      	ldrh	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	011b      	lsls	r3, r3, #4
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	461a      	mov	r2, r3
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	085b      	lsrs	r3, r3, #1
 8002016:	b29b      	uxth	r3, r3
 8002018:	4413      	add	r3, r2
 800201a:	4a38      	ldr	r2, [pc, #224]	; (80020fc <imageRender+0x1a4>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e00e      	b.n	8002042 <imageRender+0xea>
 8002024:	89ba      	ldrh	r2, [r7, #12]
 8002026:	4613      	mov	r3, r2
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	461a      	mov	r2, r3
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	4413      	add	r3, r2
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <imageRender+0x1a4>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	b2db      	uxtb	r3, r3
 8002042:	70fb      	strb	r3, [r7, #3]
			// Retrieve the RGB color values corresponding to the pixel color index
			linebuff[3*w + 0] = colors[pixel_color][0];	// r
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	89f9      	ldrh	r1, [r7, #14]
 8002048:	460b      	mov	r3, r1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4419      	add	r1, r3
 800204e:	482c      	ldr	r0, [pc, #176]	; (8002100 <imageRender+0x1a8>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	4403      	add	r3, r0
 8002058:	781a      	ldrb	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	545a      	strb	r2, [r3, r1]
			linebuff[3*w + 1] = colors[pixel_color][1];	// g
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	89f9      	ldrh	r1, [r7, #14]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	4825      	ldr	r0, [pc, #148]	; (8002100 <imageRender+0x1a8>)
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	4403      	add	r3, r0
 8002074:	3301      	adds	r3, #1
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	545a      	strb	r2, [r3, r1]
			linebuff[3*w + 2] = colors[pixel_color][2];	// b
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	89f9      	ldrh	r1, [r7, #14]
 8002080:	460b      	mov	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	440b      	add	r3, r1
 8002086:	1c99      	adds	r1, r3, #2
 8002088:	481d      	ldr	r0, [pc, #116]	; (8002100 <imageRender+0x1a8>)
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	4403      	add	r3, r0
 8002092:	3302      	adds	r3, #2
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	545a      	strb	r2, [r3, r1]
		for (uint16_t w = 0; w < _width; w++){
 800209a:	89fb      	ldrh	r3, [r7, #14]
 800209c:	3301      	adds	r3, #1
 800209e:	81fb      	strh	r3, [r7, #14]
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <imageRender+0x198>)
 80020a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dba6      	blt.n	8001ffa <imageRender+0xa2>
		}
		HAL_SPI_Transmit(&hspi1, linebuff, _width * 3, 100);
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <imageRender+0x198>)
 80020b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	0052      	lsls	r2, r2, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	b29a      	uxth	r2, r3
 80020be:	2364      	movs	r3, #100	; 0x64
 80020c0:	4810      	ldr	r0, [pc, #64]	; (8002104 <imageRender+0x1ac>)
 80020c2:	f004 fa38 	bl	8006536 <HAL_SPI_Transmit>
	for (uint16_t h = 0; h < _height; h++){
 80020c6:	89bb      	ldrh	r3, [r7, #12]
 80020c8:	3301      	adds	r3, #1
 80020ca:	81bb      	strh	r3, [r7, #12]
 80020cc:	89bb      	ldrh	r3, [r7, #12]
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <imageRender+0x19c>)
 80020d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020d4:	4293      	cmp	r3, r2
 80020d6:	db8d      	blt.n	8001ff4 <imageRender+0x9c>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <imageRender+0x1a0>)
 80020e0:	f002 fea8 	bl	8004e34 <HAL_GPIO_WritePin>
 80020e4:	46ad      	mov	sp, r5
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20012cdc 	.word	0x20012cdc
 80020f4:	20012ce0 	.word	0x20012ce0
 80020f8:	48000800 	.word	0x48000800
 80020fc:	200000c4 	.word	0x200000c4
 8002100:	20000000 	.word	0x20000000
 8002104:	20012df8 	.word	0x20012df8

08002108 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800212c:	4a2f      	ldr	r2, [pc, #188]	; (80021ec <MX_ADC1_Init+0xe4>)
 800212e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002132:	2200      	movs	r2, #0
 8002134:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800213c:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800214a:	2204      	movs	r2, #4
 800214c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002150:	2200      	movs	r2, #0
 8002152:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002156:	2201      	movs	r2, #1
 8002158:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800215c:	2201      	movs	r2, #1
 800215e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800216a:	2200      	movs	r2, #0
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002170:	2200      	movs	r2, #0
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800217e:	2200      	movs	r2, #0
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <MX_ADC1_Init+0xe0>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800218a:	4817      	ldr	r0, [pc, #92]	; (80021e8 <MX_ADC1_Init+0xe0>)
 800218c:	f001 fb4c 	bl	8003828 <HAL_ADC_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8002196:	f000 fbb1 	bl	80028fc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4810      	ldr	r0, [pc, #64]	; (80021e8 <MX_ADC1_Init+0xe0>)
 80021a6:	f002 f8a7 	bl	80042f8 <HAL_ADCEx_MultiModeConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80021b0:	f000 fba4 	bl	80028fc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <MX_ADC1_Init+0xe8>)
 80021b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021b8:	2306      	movs	r3, #6
 80021ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021c0:	237f      	movs	r3, #127	; 0x7f
 80021c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021c4:	2304      	movs	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_ADC1_Init+0xe0>)
 80021d2:	f001 fc7d 	bl	8003ad0 <HAL_ADC_ConfigChannel>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80021dc:	f000 fb8e 	bl	80028fc <Error_Handler>
  }

}
 80021e0:	bf00      	nop
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20012ce8 	.word	0x20012ce8
 80021ec:	50040000 	.word	0x50040000
 80021f0:	08600004 	.word	0x08600004

080021f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2a      	ldr	r2, [pc, #168]	; (80022bc <HAL_ADC_MspInit+0xc8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d14e      	bne.n	80022b4 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002216:	4b2a      	ldr	r3, [pc, #168]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	4a29      	ldr	r2, [pc, #164]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 800221c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002222:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_ADC_MspInit+0xcc>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8002246:	2302      	movs	r3, #2
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800224a:	230b      	movs	r3, #11
 800224c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	481a      	ldr	r0, [pc, #104]	; (80022c4 <HAL_ADC_MspInit+0xd0>)
 800225a:	f002 fc43 	bl	8004ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <HAL_ADC_MspInit+0xd8>)
 8002262:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002266:	2200      	movs	r2, #0
 8002268:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226a:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 800227e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 800228e:	2220      	movs	r2, #32
 8002290:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 800229a:	f002 f9eb 	bl	8004674 <HAL_DMA_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 80022a4:	f000 fb2a 	bl	80028fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 80022ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80022ae:	4a06      	ldr	r2, [pc, #24]	; (80022c8 <HAL_ADC_MspInit+0xd4>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022b4:	bf00      	nop
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	50040000 	.word	0x50040000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000800 	.word	0x48000800
 80022c8:	20012d4c 	.word	0x20012d4c
 80022cc:	40020430 	.word	0x40020430

080022d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d6:	4b16      	ldr	r3, [pc, #88]	; (8002330 <MX_DMA_Init+0x60>)
 80022d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <MX_DMA_Init+0x60>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6493      	str	r3, [r2, #72]	; 0x48
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <MX_DMA_Init+0x60>)
 80022e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <MX_DMA_Init+0x60>)
 80022f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f2:	4a0f      	ldr	r2, [pc, #60]	; (8002330 <MX_DMA_Init+0x60>)
 80022f4:	f043 0302 	orr.w	r3, r3, #2
 80022f8:	6493      	str	r3, [r2, #72]	; 0x48
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <MX_DMA_Init+0x60>)
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	200d      	movs	r0, #13
 800230c:	f002 f97b 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002310:	200d      	movs	r0, #13
 8002312:	f002 f994 	bl	800463e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	203a      	movs	r0, #58	; 0x3a
 800231c:	f002 f973 	bl	8004606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002320:	203a      	movs	r0, #58	; 0x3a
 8002322:	f002 f98c 	bl	800463e <HAL_NVIC_EnableIRQ>

}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <MX_GPIO_Init+0x138>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4a47      	ldr	r2, [pc, #284]	; (800246c <MX_GPIO_Init+0x138>)
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002356:	4b45      	ldr	r3, [pc, #276]	; (800246c <MX_GPIO_Init+0x138>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <MX_GPIO_Init+0x138>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	4a41      	ldr	r2, [pc, #260]	; (800246c <MX_GPIO_Init+0x138>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <MX_GPIO_Init+0x138>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237a:	4b3c      	ldr	r3, [pc, #240]	; (800246c <MX_GPIO_Init+0x138>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	4a3b      	ldr	r2, [pc, #236]	; (800246c <MX_GPIO_Init+0x138>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <MX_GPIO_Init+0x138>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8002392:	2200      	movs	r2, #0
 8002394:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800239c:	f002 fd4a 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80023a6:	4832      	ldr	r0, [pc, #200]	; (8002470 <MX_GPIO_Init+0x13c>)
 80023a8:	f002 fd44 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b2:	4830      	ldr	r0, [pc, #192]	; (8002474 <MX_GPIO_Init+0x140>)
 80023b4:	f002 fd3e 	bl	8004e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <MX_GPIO_Init+0x144>)
 80023c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4619      	mov	r1, r3
 80023cc:	4828      	ldr	r0, [pc, #160]	; (8002470 <MX_GPIO_Init+0x13c>)
 80023ce:	f002 fb89 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80023d2:	2301      	movs	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 030c 	add.w	r3, r7, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4822      	ldr	r0, [pc, #136]	; (8002470 <MX_GPIO_Init+0x13c>)
 80023e6:	f002 fb7d 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023ea:	2320      	movs	r3, #32
 80023ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	4619      	mov	r1, r3
 8002400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002404:	f002 fb6e 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8002408:	f44f 7388 	mov.w	r3, #272	; 0x110
 800240c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	2303      	movs	r3, #3
 8002418:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	4619      	mov	r1, r3
 8002420:	4813      	ldr	r0, [pc, #76]	; (8002470 <MX_GPIO_Init+0x13c>)
 8002422:	f002 fb5f 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4619      	mov	r1, r3
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_GPIO_Init+0x140>)
 8002440:	f002 fb50 	bl	8004ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8002444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8002456:	f107 030c 	add.w	r3, r7, #12
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f002 fb40 	bl	8004ae4 <HAL_GPIO_Init>

}
 8002464:	bf00      	nop
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	48000800 	.word	0x48000800
 8002474:	48000400 	.word	0x48000400
 8002478:	10210000 	.word	0x10210000

0800247c <drawGrid>:
uint8_t hOffset = (TFT_WIDTH - GRID_WIDTH)/2 + 100;
uint8_t vOffset = 25;
uint8_t dHeight = GRID_HEIGHT/8;


void drawGrid(){
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
	// draw vertical lines
	for(int i = 0; i < 441; i += 44)
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	e00a      	b.n	800249e <drawGrid+0x22>
		drawFastVLine(i, 26, 291-26, GREY);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	b218      	sxth	r0, r3
 800248c:	2301      	movs	r3, #1
 800248e:	f240 1209 	movw	r2, #265	; 0x109
 8002492:	211a      	movs	r1, #26
 8002494:	f7fe fd8c 	bl	8000fb0 <drawFastVLine>
	for(int i = 0; i < 441; i += 44)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	332c      	adds	r3, #44	; 0x2c
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80024a4:	ddf0      	ble.n	8002488 <drawGrid+0xc>
	// draw horizontal lines
	for(int i = 26; i < 291; i += 44)
 80024a6:	231a      	movs	r3, #26
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	e00a      	b.n	80024c2 <drawGrid+0x46>
		drawFastHLine(0, i, 440, GREY);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	b219      	sxth	r1, r3
 80024b0:	2301      	movs	r3, #1
 80024b2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7fe fe68 	bl	800118c <drawFastHLine>
	for(int i = 26; i < 291; i += 44)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	332c      	adds	r3, #44	; 0x2c
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 80024c8:	ddf0      	ble.n	80024ac <drawGrid+0x30>

	for(int i = 21; i < 441; i += 44)
 80024ca:	2315      	movs	r3, #21
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	e009      	b.n	80024e4 <drawGrid+0x68>
			drawFastVLine(i, 156, 5, GREY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	b218      	sxth	r0, r3
 80024d4:	2301      	movs	r3, #1
 80024d6:	2205      	movs	r2, #5
 80024d8:	219c      	movs	r1, #156	; 0x9c
 80024da:	f7fe fd69 	bl	8000fb0 <drawFastVLine>
	for(int i = 21; i < 441; i += 44)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	332c      	adds	r3, #44	; 0x2c
 80024e2:	607b      	str	r3, [r7, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 80024ea:	ddf1      	ble.n	80024d0 <drawGrid+0x54>
	for(int i = 47; i < 291; i += 44)
 80024ec:	232f      	movs	r3, #47	; 0x2f
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	e009      	b.n	8002506 <drawGrid+0x8a>
			drawFastHLine(218, i, 5, GREY);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b219      	sxth	r1, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	2205      	movs	r2, #5
 80024fa:	20da      	movs	r0, #218	; 0xda
 80024fc:	f7fe fe46 	bl	800118c <drawFastHLine>
	for(int i = 47; i < 291; i += 44)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	332c      	adds	r3, #44	; 0x2c
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800250c:	ddf1      	ble.n	80024f2 <drawGrid+0x76>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <drawChanellVperDev>:

void drawChanellVperDev(uint16_t x, uint8_t color){
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af02      	add	r7, sp, #8
 800251c:	4603      	mov	r3, r0
 800251e:	460a      	mov	r2, r1
 8002520:	80fb      	strh	r3, [r7, #6]
 8002522:	4613      	mov	r3, r2
 8002524:	717b      	strb	r3, [r7, #5]
	drawLine(x + 10, 295, x + 110, 295, color);	 // _____
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	330a      	adds	r3, #10
 800252a:	b29b      	uxth	r3, r3
 800252c:	b218      	sxth	r0, r3
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	336e      	adds	r3, #110	; 0x6e
 8002532:	b29b      	uxth	r3, r3
 8002534:	b21a      	sxth	r2, r3
 8002536:	797b      	ldrb	r3, [r7, #5]
 8002538:	b29b      	uxth	r3, r3
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	f240 1327 	movw	r3, #295	; 0x127
 8002540:	f240 1127 	movw	r1, #295	; 0x127
 8002544:	f7fe fefa 	bl	800133c <drawLine>
	for(uint8_t i = 0; i < 30; ++i){
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
 800254c:	e019      	b.n	8002582 <drawChanellVperDev+0x6c>
		drawLine(x + i+10, 295, x + i, 319, color);   //  /
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	b29a      	uxth	r2, r3
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	4413      	add	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	330a      	adds	r3, #10
 800255a:	b29b      	uxth	r3, r3
 800255c:	b218      	sxth	r0, r3
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	b29a      	uxth	r2, r3
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	4413      	add	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	b21a      	sxth	r2, r3
 800256a:	797b      	ldrb	r3, [r7, #5]
 800256c:	b29b      	uxth	r3, r3
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f240 133f 	movw	r3, #319	; 0x13f
 8002574:	f240 1127 	movw	r1, #295	; 0x127
 8002578:	f7fe fee0 	bl	800133c <drawLine>
	for(uint8_t i = 0; i < 30; ++i){
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	3301      	adds	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b1d      	cmp	r3, #29
 8002586:	d9e2      	bls.n	800254e <drawChanellVperDev+0x38>
	}

	drawLine(x + 110, 295, x +  100, 319, color); //		   /
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	336e      	adds	r3, #110	; 0x6e
 800258c:	b29b      	uxth	r3, r3
 800258e:	b218      	sxth	r0, r3
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	3364      	adds	r3, #100	; 0x64
 8002594:	b29b      	uxth	r3, r3
 8002596:	b21a      	sxth	r2, r3
 8002598:	797b      	ldrb	r3, [r7, #5]
 800259a:	b29b      	uxth	r3, r3
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f240 133f 	movw	r3, #319	; 0x13f
 80025a2:	f240 1127 	movw	r1, #295	; 0x127
 80025a6:	f7fe fec9 	bl	800133c <drawLine>
	drawLine(x + 0, 319,x +  100, 319, color);	 // ____
 80025aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	3364      	adds	r3, #100	; 0x64
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	f240 133f 	movw	r3, #319	; 0x13f
 80025c0:	f240 113f 	movw	r1, #319	; 0x13f
 80025c4:	f7fe feba 	bl	800133c <drawLine>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_SPI_TxCpltCallback+0x1c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000030 	.word	0x20000030

080025f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	f5ad 6df6 	sub.w	sp, sp, #1968	; 0x7b0
 80025f6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  oscilloscope_channel CH1;
  oscilloscope_channel_init(&CH1);
 80025f8:	f107 0318 	add.w	r3, r7, #24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f984 	bl	800290a <oscilloscope_channel_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002602:	f000 fee7 	bl	80033d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002606:	f000 f8f3 	bl	80027f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800260a:	f7ff fe93 	bl	8002334 <MX_GPIO_Init>
  MX_DMA_Init();
 800260e:	f7ff fe5f 	bl	80022d0 <MX_DMA_Init>
  MX_SPI1_Init();
 8002612:	f000 faff 	bl	8002c14 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002616:	f000 fb3b 	bl	8002c90 <MX_SPI2_Init>
  MX_TIM3_Init();
 800261a:	f000 fd91 	bl	8003140 <MX_TIM3_Init>
  MX_ADC1_Init();
 800261e:	f7ff fd73 	bl	8002108 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002622:	f000 fd33 	bl	800308c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CH1.waveform , MEMORY_DEPTH);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002626:	213c      	movs	r1, #60	; 0x3c
 8002628:	4865      	ldr	r0, [pc, #404]	; (80027c0 <main+0x1d0>)
 800262a:	f004 fef1 	bl	8007410 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800262e:	210c      	movs	r1, #12
 8002630:	4864      	ldr	r0, [pc, #400]	; (80027c4 <main+0x1d4>)
 8002632:	f004 fd41 	bl	80070b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002636:	2108      	movs	r1, #8
 8002638:	4862      	ldr	r0, [pc, #392]	; (80027c4 <main+0x1d4>)
 800263a:	f004 fd3d 	bl	80070b8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LCD_BRIGHTNESS); // 0-1000
 800263e:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <main+0x1d4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200); // 0-1000
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <main+0x1d4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22c8      	movs	r2, #200	; 0xc8
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  ILI9488_Init();
 8002650:	f7fe faaa 	bl	8000ba8 <ILI9488_Init>
  setRotation(1);
 8002654:	2001      	movs	r0, #1
 8002656:	f7ff f99f 	bl	8001998 <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff fb2e 	bl	8001cbc <ILI9341_Fill_Screen>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int faza = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
  while (1){

	  clearScreen();
 8002666:	f7fe fbdb 	bl	8000e20 <clearScreen>
	  drawGrid();
 800266a:	f7ff ff07 	bl	800247c <drawGrid>

	  for(int i = 0; i < 480; ++i){
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
 8002674:	e033      	b.n	80026de <main+0xee>
		CH1.waveform[i] = 2000*sinf(0.05f*i + faza*0.1f) + 2000;
 8002676:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80027c8 <main+0x1d8>
 8002686:	ee27 7a87 	vmul.f32	s14, s15, s14
 800268a:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002696:	eddf 6a4d 	vldr	s13, [pc, #308]	; 80027cc <main+0x1dc>
 800269a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	eeb0 0a67 	vmov.f32	s0, s15
 80026a6:	f006 f8a9 	bl	80087fc <sinf>
 80026aa:	eeb0 7a40 	vmov.f32	s14, s0
 80026ae:	eddf 7a48 	vldr	s15, [pc, #288]	; 80027d0 <main+0x1e0>
 80026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80027d0 <main+0x1e0>
 80026ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c2:	ee17 3a90 	vmov	r3, s15
 80026c6:	b299      	uxth	r1, r3
 80026c8:	f107 0318 	add.w	r3, r7, #24
 80026cc:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 80026d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for(int i = 0; i < 480; ++i){
 80026d4:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 80026d8:	3301      	adds	r3, #1
 80026da:	f8c7 37a0 	str.w	r3, [r7, #1952]	; 0x7a0
 80026de:	f8d7 37a0 	ldr.w	r3, [r7, #1952]	; 0x7a0
 80026e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80026e6:	dbc6      	blt.n	8002676 <main+0x86>
	  }
	  faza++;
 80026e8:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	; 0x7a4
 80026ec:	3301      	adds	r3, #1
 80026ee:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4

	  draw_waveform(& CH1);
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f9aa 	bl	8002a50 <draw_waveform>
	  sprintf(buf,"Vpp=%d", calculate_peak_to_peak(CH1.waveform));
 80026fc:	f107 0318 	add.w	r3, r7, #24
 8002700:	4618      	mov	r0, r3
 8002702:	f000 f918 	bl	8002936 <calculate_peak_to_peak>
 8002706:	4602      	mov	r2, r0
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4932      	ldr	r1, [pc, #200]	; (80027d4 <main+0x1e4>)
 800270c:	4618      	mov	r0, r3
 800270e:	f005 fc79 	bl	8008004 <siprintf>
	  LCD_Font(5, 15, buf, _Open_Sans_Bold_12  , 1, GREEN);
 8002712:	1d3a      	adds	r2, r7, #4
 8002714:	2304      	movs	r3, #4
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2301      	movs	r3, #1
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <main+0x1e8>)
 800271e:	210f      	movs	r1, #15
 8002720:	2005      	movs	r0, #5
 8002722:	f7ff fba0 	bl	8001e66 <LCD_Font>
	  sprintf(buf,"Vrms=%d", calculate_RMS(CH1.waveform));
 8002726:	f107 0318 	add.w	r3, r7, #24
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f942 	bl	80029b4 <calculate_RMS>
 8002730:	4602      	mov	r2, r0
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4929      	ldr	r1, [pc, #164]	; (80027dc <main+0x1ec>)
 8002736:	4618      	mov	r0, r3
 8002738:	f005 fc64 	bl	8008004 <siprintf>
	  LCD_Font(80, 15, buf, _Open_Sans_Bold_12  , 1, GREEN);
 800273c:	1d3a      	adds	r2, r7, #4
 800273e:	2304      	movs	r3, #4
 8002740:	9301      	str	r3, [sp, #4]
 8002742:	2301      	movs	r3, #1
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <main+0x1e8>)
 8002748:	210f      	movs	r1, #15
 800274a:	2050      	movs	r0, #80	; 0x50
 800274c:	f7ff fb8b 	bl	8001e66 <LCD_Font>

	  drawChanellVperDev(0, GREEN);
 8002750:	2104      	movs	r1, #4
 8002752:	2000      	movs	r0, #0
 8002754:	f7ff fedf 	bl	8002516 <drawChanellVperDev>
	  LCD_Font(16, 312, "1", _Open_Sans_Bold_14, 1, BLACK);
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2301      	movs	r3, #1
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <main+0x1f0>)
 8002762:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <main+0x1f4>)
 8002764:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002768:	2010      	movs	r0, #16
 800276a:	f7ff fb7c 	bl	8001e66 <LCD_Font>
	  LCD_Font(48, 312, "1.00V", _Open_Sans_Bold_14, 1, WHITE);
 800276e:	2302      	movs	r3, #2
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	2301      	movs	r3, #1
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <main+0x1f0>)
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <main+0x1f8>)
 800277a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800277e:	2030      	movs	r0, #48	; 0x30
 8002780:	f7ff fb71 	bl	8001e66 <LCD_Font>

	  drawChanellVperDev(110, GREY);
 8002784:	2101      	movs	r1, #1
 8002786:	206e      	movs	r0, #110	; 0x6e
 8002788:	f7ff fec5 	bl	8002516 <drawChanellVperDev>
	  LCD_Font(16+110, 312, "2", _Open_Sans_Bold_14, 1, BLACK);
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2301      	movs	r3, #1
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <main+0x1f0>)
 8002796:	4a15      	ldr	r2, [pc, #84]	; (80027ec <main+0x1fc>)
 8002798:	f44f 719c 	mov.w	r1, #312	; 0x138
 800279c:	207e      	movs	r0, #126	; 0x7e
 800279e:	f7ff fb62 	bl	8001e66 <LCD_Font>
	  LCD_Font(48+110, 312, "1.00V", _Open_Sans_Bold_14, 1, GREY);
 80027a2:	2301      	movs	r3, #1
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2301      	movs	r3, #1
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <main+0x1f0>)
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <main+0x1f8>)
 80027ae:	f44f 719c 	mov.w	r1, #312	; 0x138
 80027b2:	209e      	movs	r0, #158	; 0x9e
 80027b4:	f7ff fb57 	bl	8001e66 <LCD_Font>

	  imageRender();
 80027b8:	f7ff fbce 	bl	8001f58 <imageRender>
	  clearScreen();
 80027bc:	e753      	b.n	8002666 <main+0x76>
 80027be:	bf00      	nop
 80027c0:	20012ef0 	.word	0x20012ef0
 80027c4:	20012ea4 	.word	0x20012ea4
 80027c8:	3d4ccccd 	.word	0x3d4ccccd
 80027cc:	3dcccccd 	.word	0x3dcccccd
 80027d0:	44fa0000 	.word	0x44fa0000
 80027d4:	080094c4 	.word	0x080094c4
 80027d8:	08009a7c 	.word	0x08009a7c
 80027dc:	080094cc 	.word	0x080094cc
 80027e0:	0800a0e0 	.word	0x0800a0e0
 80027e4:	080094d4 	.word	0x080094d4
 80027e8:	080094d8 	.word	0x080094d8
 80027ec:	080094e0 	.word	0x080094e0

080027f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b0b8      	sub	sp, #224	; 0xe0
 80027f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027fa:	2244      	movs	r2, #68	; 0x44
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f005 fbf7 	bl	8007ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002804:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002814:	463b      	mov	r3, r7
 8002816:	2288      	movs	r2, #136	; 0x88
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f005 fbe9 	bl	8007ff2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800282a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282e:	2310      	movs	r3, #16
 8002830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002840:	2301      	movs	r3, #1
 8002842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002846:	230a      	movs	r3, #10
 8002848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800284c:	2307      	movs	r3, #7
 800284e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800285e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fb62 	bl	8004f2c <HAL_RCC_OscConfig>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800286e:	f000 f845 	bl	80028fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002872:	230f      	movs	r3, #15
 8002874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002878:	2303      	movs	r3, #3
 800287a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002890:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002894:	2104      	movs	r1, #4
 8002896:	4618      	mov	r0, r3
 8002898:	f002 ff2e 	bl	80056f8 <HAL_RCC_ClockConfig>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80028a2:	f000 f82b 	bl	80028fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80028ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80028b0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80028b2:	2302      	movs	r3, #2
 80028b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80028ba:	2308      	movs	r3, #8
 80028bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80028be:	2307      	movs	r3, #7
 80028c0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80028c2:	2302      	movs	r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80028ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ce:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 f8dc 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80028de:	f000 f80d 	bl	80028fc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028e6:	f002 facb 	bl	8004e80 <HAL_PWREx_ControlVoltageScaling>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80028f0:	f000 f804 	bl	80028fc <Error_Handler>
  }
}
 80028f4:	bf00      	nop
 80028f6:	37e0      	adds	r7, #224	; 0xe0
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <oscilloscope_channel_init>:
 *      Author: Dominik
 */

#include "oscilloscope.h"

void oscilloscope_channel_init(oscilloscope_channel* ch){
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	ch->x_offset = 0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
	ch->y_offset = 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
	ch->y_scale = 0;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <calculate_peak_to_peak>:


int calculate_peak_to_peak(int16_t waveform[MEMORY_DEPTH]){
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	uint32_t max=0, min=4096;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002946:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8002948:	2300      	movs	r3, #0
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	e024      	b.n	8002998 <calculate_peak_to_peak+0x62>
		if(waveform[i]<min)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295a:	461a      	mov	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4293      	cmp	r3, r2
 8002960:	d906      	bls.n	8002970 <calculate_peak_to_peak+0x3a>
			min=waveform[i];
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296e:	613b      	str	r3, [r7, #16]
		if(waveform[i]>max)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297c:	461a      	mov	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4293      	cmp	r3, r2
 8002982:	d206      	bcs.n	8002992 <calculate_peak_to_peak+0x5c>
			max=waveform[i];
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002990:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800299e:	dbd6      	blt.n	800294e <calculate_peak_to_peak+0x18>
	}
	return max-min;
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <calculate_RMS>:

int calculate_RMS(int16_t waveform[MEMORY_DEPTH]) {
 80029b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029b8:	b08a      	sub	sp, #40	; 0x28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
    int64_t sum_of_squares = 0;
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    for (int i = 0; i < MEMORY_DEPTH; ++i) {
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	e01c      	b.n	8002a0a <calculate_RMS+0x56>
        sum_of_squares += (int32_t)waveform[i] * waveform[i];
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029dc:	4619      	mov	r1, r3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ea:	fb03 f301 	mul.w	r3, r3, r1
 80029ee:	469b      	mov	fp, r3
 80029f0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80029f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80029f8:	eb1b 0301 	adds.w	r3, fp, r1
 80029fc:	eb4c 0402 	adc.w	r4, ip, r2
 8002a00:	e9c7 3408 	strd	r3, r4, [r7, #32]
    for (int i = 0; i < MEMORY_DEPTH; ++i) {
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	3301      	adds	r3, #1
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002a10:	dbde      	blt.n	80029d0 <calculate_RMS+0x1c>
    }
    double mean_of_squares = (double)sum_of_squares / MEMORY_DEPTH;
 8002a12:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a16:	f7fd fdc1 	bl	800059c <__aeabi_l2d>
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <calculate_RMS+0x98>)
 8002a20:	f7fd ff14 	bl	800084c <__aeabi_ddiv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double rms = sqrt(mean_of_squares);
 8002a2c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002a30:	f005 ff26 	bl	8008880 <sqrt>
 8002a34:	ed87 0b02 	vstr	d0, [r7, #8]
    return (int)rms;
 8002a38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3c:	f7fe f88c 	bl	8000b58 <__aeabi_d2iz>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002a4c:	407e0000 	.word	0x407e0000

08002a50 <draw_waveform>:


void draw_waveform(oscilloscope_channel* ch){
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b091      	sub	sp, #68	; 0x44
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	6078      	str	r0, [r7, #4]
	ch->x_offset = -htim1.Instance->CNT;
 8002a58:	4b6c      	ldr	r3, [pc, #432]	; (8002c0c <draw_waveform+0x1bc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	425b      	negs	r3, r3
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b21a      	sxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0

	for(int i = 0; i < 440; ++i)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a70:	e00e      	b.n	8002a90 <draw_waveform+0x40>
				ch->waveform_display[i] = ch->waveform[i];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a76:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	460a      	mov	r2, r1
 8002a88:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i < 440; ++i)
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	f5b3 7fdc 	cmp.w	r3, #440	; 0x1b8
 8002a96:	dbec      	blt.n	8002a72 <draw_waveform+0x22>
		for(int i = 0; i < 440-1; ++i){
 8002a98:	2300      	movs	r3, #0
 8002a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9c:	e03b      	b.n	8002b16 <draw_waveform+0xc6>
			//ch->waveform_display[i] = ch->waveform[i];
			int x0 = i;
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	61bb      	str	r3, [r7, #24]
			int x1 = i+1;
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
			int y0 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002aae:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	440b      	add	r3, r1
 8002abe:	88db      	ldrh	r3, [r3, #6]
 8002ac0:	4953      	ldr	r1, [pc, #332]	; (8002c10 <draw_waveform+0x1c0>)
 8002ac2:	fba1 1303 	umull	r1, r3, r1, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	613b      	str	r3, [r7, #16]
			int y1 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i+1]/40;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002ad4:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3301      	adds	r3, #1
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	440b      	add	r3, r1
 8002ae6:	88db      	ldrh	r3, [r3, #6]
 8002ae8:	4949      	ldr	r1, [pc, #292]	; (8002c10 <draw_waveform+0x1c0>)
 8002aea:	fba1 1303 	umull	r1, r3, r1, r3
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	60fb      	str	r3, [r7, #12]
			drawLine(x0, y0, x1, y1, GREEN);
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	b218      	sxth	r0, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	b219      	sxth	r1, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	b21c      	sxth	r4, r3
 8002b06:	2304      	movs	r3, #4
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	f7fe fc16 	bl	800133c <drawLine>
		for(int i = 0; i < 440-1; ++i){
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	3301      	adds	r3, #1
 8002b14:	633b      	str	r3, [r7, #48]	; 0x30
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	f5b3 7fdb 	cmp.w	r3, #438	; 0x1b6
 8002b1c:	ddbf      	ble.n	8002a9e <draw_waveform+0x4e>
		}
	// draw marker 0
	for(int j = 0; j < 5; ++j){
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b22:	e010      	b.n	8002b46 <draw_waveform+0xf6>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 2, GREEN);
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	b218      	sxth	r0, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	f1c3 03a8 	rsb	r3, r3, #168	; 0xa8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f97c 	bl	8000e38 <drawPixel>
	for(int j = 0; j < 5; ++j){
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	3301      	adds	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	ddeb      	ble.n	8002b24 <draw_waveform+0xd4>
		}
		for(int j = 0; j < 6; ++j){
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b50:	e010      	b.n	8002b74 <draw_waveform+0x124>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 1, GREEN);
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	b218      	sxth	r0, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	2204      	movs	r2, #4
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7fe f965 	bl	8000e38 <drawPixel>
		for(int j = 0; j < 6; ++j){
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	3301      	adds	r3, #1
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	2b05      	cmp	r3, #5
 8002b78:	ddeb      	ble.n	8002b52 <draw_waveform+0x102>
		}
		for(int j = 0; j < 7; ++j){
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e010      	b.n	8002ba2 <draw_waveform+0x152>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset, GREEN);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	b218      	sxth	r0, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	2204      	movs	r2, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fe f94e 	bl	8000e38 <drawPixel>
		for(int j = 0; j < 7; ++j){
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	ddeb      	ble.n	8002b80 <draw_waveform+0x130>
		}
		for(int j = 0; j < 6; ++j){
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	e010      	b.n	8002bd0 <draw_waveform+0x180>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 1, GREEN);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	b218      	sxth	r0, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	b21b      	sxth	r3, r3
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f7fe f937 	bl	8000e38 <drawPixel>
		for(int j = 0; j < 6; ++j){
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	ddeb      	ble.n	8002bae <draw_waveform+0x15e>
		}
		for(int j = 0; j < 5; ++j){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e010      	b.n	8002bfe <draw_waveform+0x1ae>
				drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, GREEN);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	b218      	sxth	r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7fe f920 	bl	8000e38 <drawPixel>
		for(int j = 0; j < 5; ++j){
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	ddeb      	ble.n	8002bdc <draw_waveform+0x18c>
		}
}
 8002c04:	bf00      	nop
 8002c06:	373c      	adds	r7, #60	; 0x3c
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	20012ef0 	.word	0x20012ef0
 8002c10:	cccccccd 	.word	0xcccccccd

08002c14 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c1a:	4a1c      	ldr	r2, [pc, #112]	; (8002c8c <MX_SPI1_Init+0x78>)
 8002c1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c62:	2207      	movs	r2, #7
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c6e:	2208      	movs	r2, #8
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_SPI1_Init+0x74>)
 8002c74:	f003 fbbc 	bl	80063f0 <HAL_SPI_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c7e:	f7ff fe3d 	bl	80028fc <Error_Handler>
  }

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20012df8 	.word	0x20012df8
 8002c8c:	40013000 	.word	0x40013000

08002c90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <MX_SPI2_Init+0x78>)
 8002c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb6:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cc6:	2218      	movs	r2, #24
 8002cc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd6:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cde:	2207      	movs	r2, #7
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cea:	2208      	movs	r2, #8
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cee:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_SPI2_Init+0x74>)
 8002cf0:	f003 fb7e 	bl	80063f0 <HAL_SPI_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002cfa:	f7ff fdff 	bl	80028fc <Error_Handler>
  }

}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20012d94 	.word	0x20012d94
 8002d08:	40003800 	.word	0x40003800

08002d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a63      	ldr	r2, [pc, #396]	; (8002eb8 <HAL_SPI_MspInit+0x1ac>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d176      	bne.n	8002e1c <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2e:	4b63      	ldr	r3, [pc, #396]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	4a62      	ldr	r2, [pc, #392]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d38:	6613      	str	r3, [r2, #96]	; 0x60
 8002d3a:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4a:	4a5c      	ldr	r2, [pc, #368]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d52:	4b5a      	ldr	r3, [pc, #360]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	4a56      	ldr	r2, [pc, #344]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d76:	23c0      	movs	r3, #192	; 0xc0
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d86:	2305      	movs	r3, #5
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d94:	f001 fea6 	bl	8004ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002da8:	2305      	movs	r3, #5
 8002daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db0:	4619      	mov	r1, r3
 8002db2:	4843      	ldr	r0, [pc, #268]	; (8002ec0 <HAL_SPI_MspInit+0x1b4>)
 8002db4:	f001 fe96 	bl	8004ae4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002db8:	4b42      	ldr	r3, [pc, #264]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dba:	4a43      	ldr	r2, [pc, #268]	; (8002ec8 <HAL_SPI_MspInit+0x1bc>)
 8002dbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002dbe:	4b41      	ldr	r3, [pc, #260]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dc4:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dc6:	2210      	movs	r2, #16
 8002dc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dd0:	4b3c      	ldr	r3, [pc, #240]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ddc:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002de2:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002dee:	4835      	ldr	r0, [pc, #212]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002df0:	f001 fc40 	bl	8004674 <HAL_DMA_Init>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002dfa:	f7ff fd7f 	bl	80028fc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
 8002e04:	4a2f      	ldr	r2, [pc, #188]	; (8002ec4 <HAL_SPI_MspInit+0x1b8>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	2023      	movs	r0, #35	; 0x23
 8002e10:	f001 fbf9 	bl	8004606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e14:	2023      	movs	r0, #35	; 0x23
 8002e16:	f001 fc12 	bl	800463e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e1a:	e049      	b.n	8002eb0 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <HAL_SPI_MspInit+0x1c0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d144      	bne.n	8002eb0 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4a24      	ldr	r2, [pc, #144]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a18      	ldr	r2, [pc, #96]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <HAL_SPI_MspInit+0x1b0>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e6e:	230c      	movs	r3, #12
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e72:	2302      	movs	r3, #2
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e7e:	2305      	movs	r3, #5
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e86:	4619      	mov	r1, r3
 8002e88:	4811      	ldr	r0, [pc, #68]	; (8002ed0 <HAL_SPI_MspInit+0x1c4>)
 8002e8a:	f001 fe2b 	bl	8004ae4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ea0:	2305      	movs	r3, #5
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4805      	ldr	r0, [pc, #20]	; (8002ec0 <HAL_SPI_MspInit+0x1b4>)
 8002eac:	f001 fe1a 	bl	8004ae4 <HAL_GPIO_Init>
}
 8002eb0:	bf00      	nop
 8002eb2:	3738      	adds	r7, #56	; 0x38
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40013000 	.word	0x40013000
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	48000400 	.word	0x48000400
 8002ec4:	20012e5c 	.word	0x20012e5c
 8002ec8:	40020030 	.word	0x40020030
 8002ecc:	40003800 	.word	0x40003800
 8002ed0:	48000800 	.word	0x48000800

08002ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_MspInit+0x44>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_MspInit+0x44>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_MspInit+0x44>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_MspInit+0x44>)
 8002ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <HAL_MspInit+0x44>)
 8002ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efc:	6593      	str	r3, [r2, #88]	; 0x58
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_MspInit+0x44>)
 8002f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f2e:	e7fe      	b.n	8002f2e <HardFault_Handler+0x4>

08002f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <MemManage_Handler+0x4>

08002f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f3a:	e7fe      	b.n	8002f3a <BusFault_Handler+0x4>

08002f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <UsageFault_Handler+0x4>

08002f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f70:	f000 fa8c 	bl	800348c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002f7c:	4802      	ldr	r0, [pc, #8]	; (8002f88 <DMA1_Channel3_IRQHandler+0x10>)
 8002f7e:	f001 fcd2 	bl	8004926 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20012e5c 	.word	0x20012e5c

08002f8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <SPI1_IRQHandler+0x10>)
 8002f92:	f003 fd33 	bl	80069fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20012df8 	.word	0x20012df8

08002fa0 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <DMA2_Channel3_IRQHandler+0x10>)
 8002fa6:	f001 fcbe 	bl	8004926 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20012d4c 	.word	0x20012d4c

08002fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_sbrk+0x5c>)
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <_sbrk+0x60>)
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	; (8003018 <_sbrk+0x64>)
 8002fd2:	4a12      	ldr	r2, [pc, #72]	; (800301c <_sbrk+0x68>)
 8002fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe4:	f004 ffd0 	bl	8007f88 <__errno>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	230c      	movs	r3, #12
 8002fec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002fee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff2:	e009      	b.n	8003008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	; (8003018 <_sbrk+0x64>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <_sbrk+0x64>)
 8003004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003006:	68fb      	ldr	r3, [r7, #12]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20018000 	.word	0x20018000
 8003014:	00000400 	.word	0x00000400
 8003018:	20012cc4 	.word	0x20012cc4
 800301c:	20012f48 	.word	0x20012f48

08003020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003024:	4b17      	ldr	r3, [pc, #92]	; (8003084 <SystemInit+0x64>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	4a16      	ldr	r2, [pc, #88]	; (8003084 <SystemInit+0x64>)
 800302c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <SystemInit+0x68>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <SystemInit+0x68>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <SystemInit+0x68>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <SystemInit+0x68>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <SystemInit+0x68>)
 800304c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003050:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003054:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <SystemInit+0x68>)
 8003058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800305c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <SystemInit+0x68>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <SystemInit+0x68>)
 8003064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <SystemInit+0x68>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <SystemInit+0x64>)
 8003072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003076:	609a      	str	r2, [r3, #8]
#endif
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000ed00 	.word	0xe000ed00
 8003088:	40021000 	.word	0x40021000

0800308c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08c      	sub	sp, #48	; 0x30
 8003090:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	2224      	movs	r2, #36	; 0x24
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f004 ffa9 	bl	8007ff2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	463b      	mov	r3, r7
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <MX_TIM1_Init+0xac>)
 80030ac:	4a23      	ldr	r2, [pc, #140]	; (800313c <MX_TIM1_Init+0xb0>)
 80030ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <MX_TIM1_Init+0xac>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <MX_TIM1_Init+0xac>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <MX_TIM1_Init+0xac>)
 80030be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <MX_TIM1_Init+0xac>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <MX_TIM1_Init+0xac>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <MX_TIM1_Init+0xac>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030d6:	2303      	movs	r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030de:	2301      	movs	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030ea:	2300      	movs	r3, #0
 80030ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030ee:	2301      	movs	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	4619      	mov	r1, r3
 8003100:	480d      	ldr	r0, [pc, #52]	; (8003138 <MX_TIM1_Init+0xac>)
 8003102:	f004 f8df 	bl	80072c4 <HAL_TIM_Encoder_Init>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800310c:	f7ff fbf6 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003110:	2300      	movs	r3, #0
 8003112:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003114:	2300      	movs	r3, #0
 8003116:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800311c:	463b      	mov	r3, r7
 800311e:	4619      	mov	r1, r3
 8003120:	4805      	ldr	r0, [pc, #20]	; (8003138 <MX_TIM1_Init+0xac>)
 8003122:	f004 fea9 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800312c:	f7ff fbe6 	bl	80028fc <Error_Handler>
  }

}
 8003130:	bf00      	nop
 8003132:	3730      	adds	r7, #48	; 0x30
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20012ef0 	.word	0x20012ef0
 800313c:	40012c00 	.word	0x40012c00

08003140 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	; 0x28
 8003144:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003146:	f107 031c 	add.w	r3, r7, #28
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003152:	463b      	mov	r3, r7
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
 8003160:	615a      	str	r2, [r3, #20]
 8003162:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <MX_TIM3_Init+0xc4>)
 8003166:	4a28      	ldr	r2, [pc, #160]	; (8003208 <MX_TIM3_Init+0xc8>)
 8003168:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <MX_TIM3_Init+0xc4>)
 800316c:	224f      	movs	r2, #79	; 0x4f
 800316e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <MX_TIM3_Init+0xc4>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <MX_TIM3_Init+0xc4>)
 8003178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800317c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <MX_TIM3_Init+0xc4>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <MX_TIM3_Init+0xc4>)
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800318a:	481e      	ldr	r0, [pc, #120]	; (8003204 <MX_TIM3_Init+0xc4>)
 800318c:	f003 ff3c 	bl	8007008 <HAL_TIM_PWM_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003196:	f7ff fbb1 	bl	80028fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4619      	mov	r1, r3
 80031a8:	4816      	ldr	r0, [pc, #88]	; (8003204 <MX_TIM3_Init+0xc4>)
 80031aa:	f004 fe65 	bl	8007e78 <HAL_TIMEx_MasterConfigSynchronization>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80031b4:	f7ff fba2 	bl	80028fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031b8:	2360      	movs	r3, #96	; 0x60
 80031ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031c8:	463b      	mov	r3, r7
 80031ca:	2208      	movs	r2, #8
 80031cc:	4619      	mov	r1, r3
 80031ce:	480d      	ldr	r0, [pc, #52]	; (8003204 <MX_TIM3_Init+0xc4>)
 80031d0:	f004 f9ac 	bl	800752c <HAL_TIM_PWM_ConfigChannel>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80031da:	f7ff fb8f 	bl	80028fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031de:	463b      	mov	r3, r7
 80031e0:	220c      	movs	r2, #12
 80031e2:	4619      	mov	r1, r3
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <MX_TIM3_Init+0xc4>)
 80031e6:	f004 f9a1 	bl	800752c <HAL_TIM_PWM_ConfigChannel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80031f0:	f7ff fb84 	bl	80028fc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80031f4:	4803      	ldr	r0, [pc, #12]	; (8003204 <MX_TIM3_Init+0xc4>)
 80031f6:	f000 f86d 	bl	80032d4 <HAL_TIM_MspPostInit>

}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	; 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20012ea4 	.word	0x20012ea4
 8003208:	40000400 	.word	0x40000400

0800320c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_TIM_Encoder_MspInit+0x80>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d129      	bne.n	8003282 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800322e:	4b18      	ldr	r3, [pc, #96]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 8003234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003238:	6613      	str	r3, [r2, #96]	; 0x60
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_TIM_Encoder_MspInit+0x84>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800325e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003268:	2301      	movs	r3, #1
 800326a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003270:	2301      	movs	r3, #1
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	4619      	mov	r1, r3
 800327a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800327e:	f001 fc31 	bl	8004ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003282:	bf00      	nop
 8003284:	3728      	adds	r7, #40	; 0x28
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40012c00 	.word	0x40012c00
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_TIM_PWM_MspInit+0x38>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d10b      	bne.n	80032be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a09      	ldr	r2, [pc, #36]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032ac:	f043 0302 	orr.w	r3, r3, #2
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40021000 	.word	0x40021000

080032d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_TIM_MspPostInit+0x9c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d138      	bne.n	8003368 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_TIM_MspPostInit+0xa0>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GEN_OUT_Pin;
 8003326:	2301      	movs	r3, #1
 8003328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003336:	2302      	movs	r3, #2
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GEN_OUT_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	480d      	ldr	r0, [pc, #52]	; (8003378 <HAL_TIM_MspPostInit+0xa4>)
 8003342:	f001 fbcf 	bl	8004ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8003346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800334a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334c:	2302      	movs	r3, #2
 800334e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003358:	2302      	movs	r3, #2
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 0314 	add.w	r3, r7, #20
 8003360:	4619      	mov	r1, r3
 8003362:	4806      	ldr	r0, [pc, #24]	; (800337c <HAL_TIM_MspPostInit+0xa8>)
 8003364:	f001 fbbe 	bl	8004ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003368:	bf00      	nop
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40000400 	.word	0x40000400
 8003374:	40021000 	.word	0x40021000
 8003378:	48000400 	.word	0x48000400
 800337c:	48000800 	.word	0x48000800

08003380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003384:	f7ff fe4c 	bl	8003020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003388:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800338a:	e003      	b.n	8003394 <LoopCopyDataInit>

0800338c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800338e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003390:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003392:	3104      	adds	r1, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003394:	480a      	ldr	r0, [pc, #40]	; (80033c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003398:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800339a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800339c:	d3f6      	bcc.n	800338c <CopyDataInit>
	ldr	r2, =_sbss
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80033a0:	e002      	b.n	80033a8 <LoopFillZerobss>

080033a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033a4:	f842 3b04 	str.w	r3, [r2], #4

080033a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <LoopForever+0x16>)
	cmp	r2, r3
 80033aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033ac:	d3f9      	bcc.n	80033a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ae:	f004 fdf1 	bl	8007f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033b2:	f7ff f91d 	bl	80025f0 <main>

080033b6 <LoopForever>:

LoopForever:
    b LoopForever
 80033b6:	e7fe      	b.n	80033b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033b8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80033bc:	0800a53c 	.word	0x0800a53c
	ldr	r0, =_sdata
 80033c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033c4:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 80033c8:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80033cc:	20012f44 	.word	0x20012f44

080033d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <ADC1_2_IRQHandler>
	...

080033d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <HAL_Init+0x3c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <HAL_Init+0x3c>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ea:	2003      	movs	r0, #3
 80033ec:	f001 f900 	bl	80045f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f0:	2000      	movs	r0, #0
 80033f2:	f000 f80f 	bl	8003414 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	e001      	b.n	8003406 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003402:	f7ff fd67 	bl	8002ed4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003406:	79fb      	ldrb	r3, [r7, #7]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40022000 	.word	0x40022000

08003414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003420:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_InitTick+0x6c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d023      	beq.n	8003470 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003428:	4b16      	ldr	r3, [pc, #88]	; (8003484 <HAL_InitTick+0x70>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <HAL_InitTick+0x6c>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f001 f90b 	bl	800465a <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b0f      	cmp	r3, #15
 800344e:	d809      	bhi.n	8003464 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003450:	2200      	movs	r2, #0
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	f001 f8d5 	bl	8004606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_InitTick+0x74>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e007      	b.n	8003474 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e004      	b.n	8003474 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	e001      	b.n	8003474 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000003c 	.word	0x2000003c
 8003484:	20000034 	.word	0x20000034
 8003488:	20000038 	.word	0x20000038

0800348c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_IncTick+0x20>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x24>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <HAL_IncTick+0x24>)
 800349e:	6013      	str	r3, [r2, #0]
}
 80034a0:	bf00      	nop
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	2000003c 	.word	0x2000003c
 80034b0:	20012f3c 	.word	0x20012f3c

080034b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return uwTick;
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetTick+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20012f3c 	.word	0x20012f3c

080034cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034d4:	f7ff ffee 	bl	80034b4 <HAL_GetTick>
 80034d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d005      	beq.n	80034f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_Delay+0x40>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034f2:	bf00      	nop
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	d8f7      	bhi.n	80034f4 <HAL_Delay+0x28>
  {
  }
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	2000003c 	.word	0x2000003c

08003510 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3360      	adds	r3, #96	; 0x60
 800358a:	461a      	mov	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <LL_ADC_SetOffset+0x44>)
 800359a:	4013      	ands	r3, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	03fff000 	.word	0x03fff000

080035c0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	461a      	mov	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	431a      	orrs	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003622:	b480      	push	{r7}
 8003624:	b087      	sub	sp, #28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3330      	adds	r3, #48	; 0x30
 8003632:	461a      	mov	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	4413      	add	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	211f      	movs	r1, #31
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	401a      	ands	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	f003 011f 	and.w	r1, r3, #31
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800367a:	b480      	push	{r7}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3314      	adds	r3, #20
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	0e5b      	lsrs	r3, r3, #25
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	0d1b      	lsrs	r3, r3, #20
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2107      	movs	r1, #7
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	401a      	ands	r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	0d1b      	lsrs	r3, r3, #20
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	431a      	orrs	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0318 	and.w	r3, r3, #24
 80036f2:	4908      	ldr	r1, [pc, #32]	; (8003714 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036f4:	40d9      	lsrs	r1, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	400b      	ands	r3, r1
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	0007ffff 	.word	0x0007ffff

08003718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6093      	str	r3, [r2, #8]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a0:	d101      	bne.n	80037a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <LL_ADC_IsEnabled+0x18>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <LL_ADC_IsEnabled+0x1a>
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d101      	bne.n	80037f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b08      	cmp	r3, #8
 8003812:	d101      	bne.n	8003818 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003828:	b590      	push	{r4, r7, lr}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e134      	b.n	8003aac <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fe fccf 	bl	80021f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff67 	bl	800373c <LL_ADC_IsDeepPowerDownEnabled>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff4d 	bl	8003718 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff82 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d113      	bne.n	80038b6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ff66 	bl	8003764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003898:	4b86      	ldr	r3, [pc, #536]	; (8003ab4 <HAL_ADC_Init+0x28c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	099b      	lsrs	r3, r3, #6
 800389e:	4a86      	ldr	r2, [pc, #536]	; (8003ab8 <HAL_ADC_Init+0x290>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ff66 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f043 0210 	orr.w	r2, r3, #16
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f043 0201 	orr.w	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff77 	bl	80037da <LL_ADC_REG_IsConversionOngoing>
 80038ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 80cf 	bne.w	8003a9a <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 80cb 	bne.w	8003a9a <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff4b 	bl	80037b4 <LL_ADC_IsEnabled>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d115      	bne.n	8003950 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003924:	4865      	ldr	r0, [pc, #404]	; (8003abc <HAL_ADC_Init+0x294>)
 8003926:	f7ff ff45 	bl	80037b4 <LL_ADC_IsEnabled>
 800392a:	4604      	mov	r4, r0
 800392c:	4864      	ldr	r0, [pc, #400]	; (8003ac0 <HAL_ADC_Init+0x298>)
 800392e:	f7ff ff41 	bl	80037b4 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	431c      	orrs	r4, r3
 8003936:	4863      	ldr	r0, [pc, #396]	; (8003ac4 <HAL_ADC_Init+0x29c>)
 8003938:	f7ff ff3c 	bl	80037b4 <LL_ADC_IsEnabled>
 800393c:	4603      	mov	r3, r0
 800393e:	4323      	orrs	r3, r4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d105      	bne.n	8003950 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4619      	mov	r1, r3
 800394a:	485f      	ldr	r0, [pc, #380]	; (8003ac8 <HAL_ADC_Init+0x2a0>)
 800394c:	f7ff fde0 	bl	8003510 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7e5b      	ldrb	r3, [r3, #25]
 8003954:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800395a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003960:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003966:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800396e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3020 	ldrb.w	r3, [r3, #32]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d106      	bne.n	800398c <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	3b01      	subs	r3, #1
 8003984:	045b      	lsls	r3, r3, #17
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_ADC_Init+0x2a4>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	69b9      	ldr	r1, [r7, #24]
 80039b8:	430b      	orrs	r3, r1
 80039ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff0a 	bl	80037da <LL_ADC_REG_IsConversionOngoing>
 80039c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff17 	bl	8003800 <LL_ADC_INJ_IsConversionOngoing>
 80039d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d13d      	bne.n	8003a56 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13a      	bne.n	8003a56 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	430b      	orrs	r3, r1
 8003a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d118      	bne.n	8003a46 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a1e:	f023 0304 	bic.w	r3, r3, #4
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a36:	430a      	orrs	r2, r1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	611a      	str	r2, [r3, #16]
 8003a44:	e007      	b.n	8003a56 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d10c      	bne.n	8003a78 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f023 010f 	bic.w	r1, r3, #15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
 8003a76:	e007      	b.n	8003a88 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 020f 	bic.w	r2, r2, #15
 8003a86:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	f023 0303 	bic.w	r3, r3, #3
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
 8003a98:	e007      	b.n	8003aaa <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9e:	f043 0210 	orr.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}
 8003ab4:	20000034 	.word	0x20000034
 8003ab8:	053e2d63 	.word	0x053e2d63
 8003abc:	50040000 	.word	0x50040000
 8003ac0:	50040100 	.word	0x50040100
 8003ac4:	50040200 	.word	0x50040200
 8003ac8:	50040300 	.word	0x50040300
 8003acc:	fff0c007 	.word	0xfff0c007

08003ad0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0b6      	sub	sp, #216	; 0xd8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x22>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e3c6      	b.n	8004280 <HAL_ADC_ConfigChannel+0x7b0>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fe6b 	bl	80037da <LL_ADC_REG_IsConversionOngoing>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 83a7 	bne.w	800425a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b05      	cmp	r3, #5
 8003b12:	d824      	bhi.n	8003b5e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	3b02      	subs	r3, #2
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d81b      	bhi.n	8003b56 <HAL_ADC_ConfigChannel+0x86>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <HAL_ADC_ConfigChannel+0x54>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003b45 	.word	0x08003b45
 8003b30:	08003b4d 	.word	0x08003b4d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	220c      	movs	r2, #12
 8003b38:	605a      	str	r2, [r3, #4]
          break;
 8003b3a:	e011      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2212      	movs	r2, #18
 8003b40:	605a      	str	r2, [r3, #4]
          break;
 8003b42:	e00d      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2218      	movs	r2, #24
 8003b48:	605a      	str	r2, [r3, #4]
          break;
 8003b4a:	e009      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b52:	605a      	str	r2, [r3, #4]
          break;
 8003b54:	e004      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2206      	movs	r2, #6
 8003b5a:	605a      	str	r2, [r3, #4]
          break;
 8003b5c:	e000      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003b5e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f7ff fd58 	bl	8003622 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fe2f 	bl	80037da <LL_ADC_REG_IsConversionOngoing>
 8003b7c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fe3b 	bl	8003800 <LL_ADC_INJ_IsConversionOngoing>
 8003b8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f040 81a6 	bne.w	8003ee4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f040 81a1 	bne.w	8003ee4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f7ff fd63 	bl	800367a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d00a      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003be6:	f7ff fcc7 	bl	8003578 <LL_ADC_SetOffset>
 8003bea:	e17b      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fce4 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x148>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fcd9 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	0e9b      	lsrs	r3, r3, #26
 8003c12:	f003 021f 	and.w	r2, r3, #31
 8003c16:	e01e      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x186>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fcce 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c2e:	fa93 f3a3 	rbit	r3, r3
 8003c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003c46:	2320      	movs	r3, #32
 8003c48:	e004      	b.n	8003c54 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c4e:	fab3 f383 	clz	r3, r3
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d105      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x19e>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	0e9b      	lsrs	r3, r3, #26
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	e018      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x1d0>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003c92:	2320      	movs	r3, #32
 8003c94:	e004      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d106      	bne.n	8003cb2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff fc9d 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fc81 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x20e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2101      	movs	r1, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff fc76 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	0e9b      	lsrs	r3, r3, #26
 8003cd8:	f003 021f 	and.w	r2, r3, #31
 8003cdc:	e01e      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x24c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fc6b 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cf4:	fa93 f3a3 	rbit	r3, r3
 8003cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e004      	b.n	8003d1a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d14:	fab3 f383 	clz	r3, r3
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x264>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0e9b      	lsrs	r3, r3, #26
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	e018      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x296>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e004      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d106      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fc3a 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fc1e 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x2d4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2102      	movs	r1, #2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fc13 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	0e9b      	lsrs	r3, r3, #26
 8003d9e:	f003 021f 	and.w	r2, r3, #31
 8003da2:	e01e      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x312>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fc08 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	e004      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d105      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x32a>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	e016      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x358>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003e0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003e1a:	2320      	movs	r3, #32
 8003e1c:	e004      	b.n	8003e28 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d106      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff fbd9 	bl	80035ec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2103      	movs	r1, #3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fbbd 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10a      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x396>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2103      	movs	r1, #3
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fbb2 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	0e9b      	lsrs	r3, r3, #26
 8003e60:	f003 021f 	and.w	r2, r3, #31
 8003e64:	e017      	b.n	8003e96 <HAL_ADC_ConfigChannel+0x3c6>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fba7 	bl	80035c0 <LL_ADC_GetOffsetChannel>
 8003e72:	4603      	mov	r3, r0
 8003e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	fa93 f3a3 	rbit	r3, r3
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	e003      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8e:	fab3 f383 	clz	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_ADC_ConfigChannel+0x3de>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	0e9b      	lsrs	r3, r3, #26
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	e011      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x402>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	e003      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d106      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2200      	movs	r2, #0
 8003edc:	2103      	movs	r1, #3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fb84 	bl	80035ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fc63 	bl	80037b4 <LL_ADC_IsEnabled>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 813f 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6819      	ldr	r1, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	461a      	mov	r2, r3
 8003f04:	f7ff fbe4 	bl	80036d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4a8e      	ldr	r2, [pc, #568]	; (8004148 <HAL_ADC_ConfigChannel+0x678>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	f040 8130 	bne.w	8004174 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10b      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x46c>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	0e9b      	lsrs	r3, r3, #26
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2b09      	cmp	r3, #9
 8003f32:	bf94      	ite	ls
 8003f34:	2301      	movls	r3, #1
 8003f36:	2300      	movhi	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e019      	b.n	8003f70 <HAL_ADC_ConfigChannel+0x4a0>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003f54:	2320      	movs	r3, #32
 8003f56:	e003      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f5a:	fab3 f383 	clz	r3, r3
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	f003 031f 	and.w	r3, r3, #31
 8003f66:	2b09      	cmp	r3, #9
 8003f68:	bf94      	ite	ls
 8003f6a:	2301      	movls	r3, #1
 8003f6c:	2300      	movhi	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d079      	beq.n	8004068 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d107      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x4c0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	0e9b      	lsrs	r3, r3, #26
 8003f86:	3301      	adds	r3, #1
 8003f88:	069b      	lsls	r3, r3, #26
 8003f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f8e:	e015      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x4ec>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f98:	fa93 f3a3 	rbit	r3, r3
 8003f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e003      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	069b      	lsls	r3, r3, #26
 8003fb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d109      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x50c>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	0e9b      	lsrs	r3, r3, #26
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fda:	e017      	b.n	800400c <HAL_ADC_ConfigChannel+0x53c>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	e003      	b.n	8004000 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	2101      	movs	r1, #1
 8004008:	fa01 f303 	lsl.w	r3, r1, r3
 800400c:	ea42 0103 	orr.w	r1, r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x562>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	3301      	adds	r3, #1
 8004024:	f003 021f 	and.w	r2, r3, #31
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	051b      	lsls	r3, r3, #20
 8004030:	e018      	b.n	8004064 <HAL_ADC_ConfigChannel+0x594>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800404a:	2320      	movs	r3, #32
 800404c:	e003      	b.n	8004056 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	fab3 f383 	clz	r3, r3
 8004054:	b2db      	uxtb	r3, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f003 021f 	and.w	r2, r3, #31
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004064:	430b      	orrs	r3, r1
 8004066:	e080      	b.n	800416a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x5b4>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	0e9b      	lsrs	r3, r3, #26
 800407a:	3301      	adds	r3, #1
 800407c:	069b      	lsls	r3, r3, #26
 800407e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004082:	e015      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x5e0>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e003      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	069b      	lsls	r3, r3, #26
 80040ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d109      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x600>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	3301      	adds	r3, #1
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2101      	movs	r1, #1
 80040ca:	fa01 f303 	lsl.w	r3, r1, r3
 80040ce:	e017      	b.n	8004100 <HAL_ADC_ConfigChannel+0x630>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	fa93 f3a3 	rbit	r3, r3
 80040dc:	61fb      	str	r3, [r7, #28]
  return result;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80040e8:	2320      	movs	r3, #32
 80040ea:	e003      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	ea42 0103 	orr.w	r1, r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10d      	bne.n	800412c <HAL_ADC_ConfigChannel+0x65c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0e9b      	lsrs	r3, r3, #26
 8004116:	3301      	adds	r3, #1
 8004118:	f003 021f 	and.w	r2, r3, #31
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	3b1e      	subs	r3, #30
 8004124:	051b      	lsls	r3, r3, #20
 8004126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800412a:	e01d      	b.n	8004168 <HAL_ADC_ConfigChannel+0x698>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	613b      	str	r3, [r7, #16]
  return result;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004144:	2320      	movs	r3, #32
 8004146:	e005      	b.n	8004154 <HAL_ADC_ConfigChannel+0x684>
 8004148:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f003 021f 	and.w	r2, r3, #31
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	3b1e      	subs	r3, #30
 8004162:	051b      	lsls	r3, r3, #20
 8004164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004168:	430b      	orrs	r3, r1
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	6892      	ldr	r2, [r2, #8]
 800416e:	4619      	mov	r1, r3
 8004170:	f7ff fa83 	bl	800367a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_ADC_ConfigChannel+0x7b8>)
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d079      	beq.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004180:	4842      	ldr	r0, [pc, #264]	; (800428c <HAL_ADC_ConfigChannel+0x7bc>)
 8004182:	f7ff f9eb 	bl	800355c <LL_ADC_GetCommonPathInternalCh>
 8004186:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a40      	ldr	r2, [pc, #256]	; (8004290 <HAL_ADC_ConfigChannel+0x7c0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d12b      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004198:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d125      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <HAL_ADC_ConfigChannel+0x7c4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_ADC_ConfigChannel+0x6e4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <HAL_ADC_ConfigChannel+0x7c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d15c      	bne.n	800426e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041bc:	4619      	mov	r1, r3
 80041be:	4833      	ldr	r0, [pc, #204]	; (800428c <HAL_ADC_ConfigChannel+0x7bc>)
 80041c0:	f7ff f9b9 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80041c4:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_ADC_ConfigChannel+0x7cc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	099b      	lsrs	r3, r3, #6
 80041ca:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <HAL_ADC_ConfigChannel+0x7d0>)
 80041cc:	fba2 2303 	umull	r2, r3, r2, r3
 80041d0:	099a      	lsrs	r2, r3, #6
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041dc:	e002      	b.n	80041e4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f9      	bne.n	80041de <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041ea:	e040      	b.n	800426e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <HAL_ADC_ConfigChannel+0x7d4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d118      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x758>
 80041f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d112      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <HAL_ADC_ConfigChannel+0x7c4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <HAL_ADC_ConfigChannel+0x746>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_ADC_ConfigChannel+0x7c8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d12d      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421e:	4619      	mov	r1, r3
 8004220:	481a      	ldr	r0, [pc, #104]	; (800428c <HAL_ADC_ConfigChannel+0x7bc>)
 8004222:	f7ff f988 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004226:	e024      	b.n	8004272 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_ADC_ConfigChannel+0x7d8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d120      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11a      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a14      	ldr	r2, [pc, #80]	; (8004294 <HAL_ADC_ConfigChannel+0x7c4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d115      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800424c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004250:	4619      	mov	r1, r3
 8004252:	480e      	ldr	r0, [pc, #56]	; (800428c <HAL_ADC_ConfigChannel+0x7bc>)
 8004254:	f7ff f96f 	bl	8003536 <LL_ADC_SetCommonPathInternalCh>
 8004258:	e00c      	b.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800426c:	e002      	b.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004272:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800427c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004280:	4618      	mov	r0, r3
 8004282:	37d8      	adds	r7, #216	; 0xd8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	80080000 	.word	0x80080000
 800428c:	50040300 	.word	0x50040300
 8004290:	c7520000 	.word	0xc7520000
 8004294:	50040000 	.word	0x50040000
 8004298:	50040200 	.word	0x50040200
 800429c:	20000034 	.word	0x20000034
 80042a0:	053e2d63 	.word	0x053e2d63
 80042a4:	cb840000 	.word	0xcb840000
 80042a8:	80000001 	.word	0x80000001

080042ac <LL_ADC_IsEnabled>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <LL_ADC_IsEnabled+0x18>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LL_ADC_IsEnabled+0x1a>
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d101      	bne.n	80042ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042f8:	b590      	push	{r4, r7, lr}
 80042fa:	b09f      	sub	sp, #124	; 0x7c
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004312:	2302      	movs	r3, #2
 8004314:	e08f      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a47      	ldr	r2, [pc, #284]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d102      	bne.n	800432e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004328:	4b46      	ldr	r3, [pc, #280]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	e001      	b.n	8004332 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e072      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff ffbd 	bl	80042d2 <LL_ADC_REG_IsConversionOngoing>
 8004358:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ffb7 	bl	80042d2 <LL_ADC_REG_IsConversionOngoing>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d154      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800436a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800436c:	2b00      	cmp	r3, #0
 800436e:	d151      	bne.n	8004414 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004370:	4b35      	ldr	r3, [pc, #212]	; (8004448 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02c      	beq.n	80043d6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800437c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800438e:	035b      	lsls	r3, r3, #13
 8004390:	430b      	orrs	r3, r1
 8004392:	431a      	orrs	r2, r3
 8004394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004396:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004398:	4829      	ldr	r0, [pc, #164]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800439a:	f7ff ff87 	bl	80042ac <LL_ADC_IsEnabled>
 800439e:	4604      	mov	r4, r0
 80043a0:	4828      	ldr	r0, [pc, #160]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80043a2:	f7ff ff83 	bl	80042ac <LL_ADC_IsEnabled>
 80043a6:	4603      	mov	r3, r0
 80043a8:	431c      	orrs	r4, r3
 80043aa:	4828      	ldr	r0, [pc, #160]	; (800444c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80043ac:	f7ff ff7e 	bl	80042ac <LL_ADC_IsEnabled>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4323      	orrs	r3, r4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d137      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043c0:	f023 030f 	bic.w	r3, r3, #15
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	6811      	ldr	r1, [r2, #0]
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	431a      	orrs	r2, r3
 80043d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d4:	e028      	b.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043e2:	4817      	ldr	r0, [pc, #92]	; (8004440 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80043e4:	f7ff ff62 	bl	80042ac <LL_ADC_IsEnabled>
 80043e8:	4604      	mov	r4, r0
 80043ea:	4816      	ldr	r0, [pc, #88]	; (8004444 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80043ec:	f7ff ff5e 	bl	80042ac <LL_ADC_IsEnabled>
 80043f0:	4603      	mov	r3, r0
 80043f2:	431c      	orrs	r4, r3
 80043f4:	4815      	ldr	r0, [pc, #84]	; (800444c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80043f6:	f7ff ff59 	bl	80042ac <LL_ADC_IsEnabled>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4323      	orrs	r3, r4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d112      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800440a:	f023 030f 	bic.w	r3, r3, #15
 800440e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004410:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004412:	e009      	b.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004426:	e000      	b.n	800442a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004432:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004436:	4618      	mov	r0, r3
 8004438:	377c      	adds	r7, #124	; 0x7c
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	50040000 	.word	0x50040000
 8004444:	50040100 	.word	0x50040100
 8004448:	50040300 	.word	0x50040300
 800444c:	50040200 	.word	0x50040200

08004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	; (80044ec <__NVIC_EnableIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	; (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	; (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	; 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045bc:	d301      	bcc.n	80045c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045be:	2301      	movs	r3, #1
 80045c0:	e00f      	b.n	80045e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c2:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <SysTick_Config+0x40>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ca:	210f      	movs	r1, #15
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	f7ff ff8e 	bl	80044f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <SysTick_Config+0x40>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <SysTick_Config+0x40>)
 80045dc:	2207      	movs	r2, #7
 80045de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	e000e010 	.word	0xe000e010

080045f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ff29 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	4603      	mov	r3, r0
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004618:	f7ff ff3e 	bl	8004498 <__NVIC_GetPriorityGrouping>
 800461c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	6978      	ldr	r0, [r7, #20]
 8004624:	f7ff ff8e 	bl	8004544 <NVIC_EncodePriority>
 8004628:	4602      	mov	r2, r0
 800462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462e:	4611      	mov	r1, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff5d 	bl	80044f0 <__NVIC_SetPriority>
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b082      	sub	sp, #8
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff31 	bl	80044b4 <__NVIC_EnableIRQ>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ffa2 	bl	80045ac <SysTick_Config>
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e098      	b.n	80047b8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	4b4d      	ldr	r3, [pc, #308]	; (80047c4 <HAL_DMA_Init+0x150>)
 800468e:	429a      	cmp	r2, r3
 8004690:	d80f      	bhi.n	80046b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_DMA_Init+0x154>)
 800469a:	4413      	add	r3, r2
 800469c:	4a4b      	ldr	r2, [pc, #300]	; (80047cc <HAL_DMA_Init+0x158>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	091b      	lsrs	r3, r3, #4
 80046a4:	009a      	lsls	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a48      	ldr	r2, [pc, #288]	; (80047d0 <HAL_DMA_Init+0x15c>)
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
 80046b0:	e00e      	b.n	80046d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	4b46      	ldr	r3, [pc, #280]	; (80047d4 <HAL_DMA_Init+0x160>)
 80046ba:	4413      	add	r3, r2
 80046bc:	4a43      	ldr	r2, [pc, #268]	; (80047cc <HAL_DMA_Init+0x158>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	009a      	lsls	r2, r3, #2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a42      	ldr	r2, [pc, #264]	; (80047d8 <HAL_DMA_Init+0x164>)
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800472a:	d039      	beq.n	80047a0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <HAL_DMA_Init+0x15c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d11a      	bne.n	800476c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_DMA_Init+0x168>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 031c 	and.w	r3, r3, #28
 8004742:	210f      	movs	r1, #15
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	4924      	ldr	r1, [pc, #144]	; (80047dc <HAL_DMA_Init+0x168>)
 800474c:	4013      	ands	r3, r2
 800474e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004750:	4b22      	ldr	r3, [pc, #136]	; (80047dc <HAL_DMA_Init+0x168>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f003 031c 	and.w	r3, r3, #28
 8004760:	fa01 f303 	lsl.w	r3, r1, r3
 8004764:	491d      	ldr	r1, [pc, #116]	; (80047dc <HAL_DMA_Init+0x168>)
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]
 800476a:	e019      	b.n	80047a0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800476c:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_DMA_Init+0x16c>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004774:	f003 031c 	and.w	r3, r3, #28
 8004778:	210f      	movs	r1, #15
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	4917      	ldr	r1, [pc, #92]	; (80047e0 <HAL_DMA_Init+0x16c>)
 8004782:	4013      	ands	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <HAL_DMA_Init+0x16c>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f003 031c 	and.w	r3, r3, #28
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	4911      	ldr	r1, [pc, #68]	; (80047e0 <HAL_DMA_Init+0x16c>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	40020407 	.word	0x40020407
 80047c8:	bffdfff8 	.word	0xbffdfff8
 80047cc:	cccccccd 	.word	0xcccccccd
 80047d0:	40020000 	.word	0x40020000
 80047d4:	bffdfbf8 	.word	0xbffdfbf8
 80047d8:	40020400 	.word	0x40020400
 80047dc:	400200a8 	.word	0x400200a8
 80047e0:	400204a8 	.word	0x400204a8

080047e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_DMA_Start_IT+0x20>
 8004800:	2302      	movs	r3, #2
 8004802:	e04b      	b.n	800489c <HAL_DMA_Start_IT+0xb8>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d13a      	bne.n	800488e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0201 	bic.w	r2, r2, #1
 8004834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f921 	bl	8004a84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 020e 	orr.w	r2, r2, #14
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e00f      	b.n	800487c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0204 	bic.w	r2, r2, #4
 800486a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 020a 	orr.w	r2, r2, #10
 800487a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e005      	b.n	800489a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d005      	beq.n	80048c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2204      	movs	r2, #4
 80048c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	73fb      	strb	r3, [r7, #15]
 80048c6:	e029      	b.n	800491c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 020e 	bic.w	r2, r2, #14
 80048d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	f003 021c 	and.w	r2, r3, #28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f202 	lsl.w	r2, r1, r2
 80048fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
    }
  }
  return status;
 800491c:	7bfb      	ldrb	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f003 031c 	and.w	r3, r3, #28
 8004946:	2204      	movs	r2, #4
 8004948:	409a      	lsls	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d026      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x7a>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d021      	beq.n	80049a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0204 	bic.w	r2, r2, #4
 8004978:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f003 021c 	and.w	r2, r3, #28
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2104      	movs	r1, #4
 8004988:	fa01 f202 	lsl.w	r2, r1, r2
 800498c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	2b00      	cmp	r3, #0
 8004994:	d071      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800499e:	e06c      	b.n	8004a7a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a4:	f003 031c 	and.w	r3, r3, #28
 80049a8:	2202      	movs	r2, #2
 80049aa:	409a      	lsls	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d02e      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xec>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d029      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 020a 	bic.w	r2, r2, #10
 80049da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e8:	f003 021c 	and.w	r2, r3, #28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2102      	movs	r1, #2
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d038      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004a10:	e033      	b.n	8004a7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f003 031c 	and.w	r3, r3, #28
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02a      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x156>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d025      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 020e 	bic.w	r2, r2, #14
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	f003 021c 	and.w	r2, r3, #28
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
}
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f003 021c 	and.w	r2, r3, #28
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2b10      	cmp	r3, #16
 8004ab4:	d108      	bne.n	8004ac8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ac6:	e007      	b.n	8004ad8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	60da      	str	r2, [r3, #12]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004af2:	e17f      	b.n	8004df4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8171 	beq.w	8004dee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d00b      	beq.n	8004b2c <HAL_GPIO_Init+0x48>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b20:	2b11      	cmp	r3, #17
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b12      	cmp	r3, #18
 8004b2a:	d130      	bne.n	8004b8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b62:	2201      	movs	r2, #1
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 0201 	and.w	r2, r3, #1
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d118      	bne.n	8004bcc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	f003 0201 	and.w	r2, r3, #1
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4013      	ands	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d003      	beq.n	8004c0c <HAL_GPIO_Init+0x128>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b12      	cmp	r3, #18
 8004c0a:	d123      	bne.n	8004c54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	08da      	lsrs	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3208      	adds	r2, #8
 8004c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	220f      	movs	r2, #15
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	08da      	lsrs	r2, r3, #3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3208      	adds	r2, #8
 8004c4e:	6939      	ldr	r1, [r7, #16]
 8004c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	2203      	movs	r2, #3
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 0203 	and.w	r2, r3, #3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80ac 	beq.w	8004dee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c96:	4b5e      	ldr	r3, [pc, #376]	; (8004e10 <HAL_GPIO_Init+0x32c>)
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	4a5d      	ldr	r2, [pc, #372]	; (8004e10 <HAL_GPIO_Init+0x32c>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ca2:	4b5b      	ldr	r3, [pc, #364]	; (8004e10 <HAL_GPIO_Init+0x32c>)
 8004ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cae:	4a59      	ldr	r2, [pc, #356]	; (8004e14 <HAL_GPIO_Init+0x330>)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cd8:	d025      	beq.n	8004d26 <HAL_GPIO_Init+0x242>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <HAL_GPIO_Init+0x334>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01f      	beq.n	8004d22 <HAL_GPIO_Init+0x23e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4d      	ldr	r2, [pc, #308]	; (8004e1c <HAL_GPIO_Init+0x338>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_GPIO_Init+0x23a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4c      	ldr	r2, [pc, #304]	; (8004e20 <HAL_GPIO_Init+0x33c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_Init+0x236>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4b      	ldr	r2, [pc, #300]	; (8004e24 <HAL_GPIO_Init+0x340>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00d      	beq.n	8004d16 <HAL_GPIO_Init+0x232>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4a      	ldr	r2, [pc, #296]	; (8004e28 <HAL_GPIO_Init+0x344>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_Init+0x22e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a49      	ldr	r2, [pc, #292]	; (8004e2c <HAL_GPIO_Init+0x348>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_GPIO_Init+0x22a>
 8004d0a:	2306      	movs	r3, #6
 8004d0c:	e00c      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d0e:	2307      	movs	r3, #7
 8004d10:	e00a      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d12:	2305      	movs	r3, #5
 8004d14:	e008      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d16:	2304      	movs	r3, #4
 8004d18:	e006      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e004      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e002      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_GPIO_Init+0x244>
 8004d26:	2300      	movs	r3, #0
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	f002 0203 	and.w	r2, r2, #3
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	4093      	lsls	r3, r2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d38:	4936      	ldr	r1, [pc, #216]	; (8004e14 <HAL_GPIO_Init+0x330>)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	3302      	adds	r3, #2
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d6a:	4a31      	ldr	r2, [pc, #196]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004d70:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d94:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d9a:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dbe:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <HAL_GPIO_Init+0x34c>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3301      	adds	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f47f ae78 	bne.w	8004af4 <HAL_GPIO_Init+0x10>
  }
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	40021000 	.word	0x40021000
 8004e14:	40010000 	.word	0x40010000
 8004e18:	48000400 	.word	0x48000400
 8004e1c:	48000800 	.word	0x48000800
 8004e20:	48000c00 	.word	0x48000c00
 8004e24:	48001000 	.word	0x48001000
 8004e28:	48001400 	.word	0x48001400
 8004e2c:	48001800 	.word	0x48001800
 8004e30:	40010400 	.word	0x40010400

08004e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	807b      	strh	r3, [r7, #2]
 8004e40:	4613      	mov	r3, r2
 8004e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e44:	787b      	ldrb	r3, [r7, #1]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40007000 	.word	0x40007000

08004e80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8e:	d130      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e90:	4b23      	ldr	r3, [pc, #140]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9c:	d038      	beq.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e9e:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ea6:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004eac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2232      	movs	r2, #50	; 0x32
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	4a1b      	ldr	r2, [pc, #108]	; (8004f28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0c9b      	lsrs	r3, r3, #18
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ec4:	e002      	b.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ecc:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d102      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f2      	bne.n	8004ec6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d110      	bne.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e00f      	b.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efe:	d007      	beq.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f08:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40007000 	.word	0x40007000
 8004f24:	20000034 	.word	0x20000034
 8004f28:	431bde83 	.word	0x431bde83

08004f2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e3d4      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4ba1      	ldr	r3, [pc, #644]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f48:	4b9e      	ldr	r3, [pc, #632]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80e4 	beq.w	8005128 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <HAL_RCC_OscConfig+0x4a>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b0c      	cmp	r3, #12
 8004f6a:	f040 808b 	bne.w	8005084 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	f040 8087 	bne.w	8005084 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f76:	4b93      	ldr	r3, [pc, #588]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x62>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e3ac      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	4b8c      	ldr	r3, [pc, #560]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x7c>
 8004f9e:	4b89      	ldr	r3, [pc, #548]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCC_OscConfig+0x88>
 8004fa8:	4b86      	ldr	r3, [pc, #536]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d223      	bcs.n	8005000 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fd07 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e38d      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fcc:	4b7d      	ldr	r3, [pc, #500]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7c      	ldr	r2, [pc, #496]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fd2:	f043 0308 	orr.w	r3, r3, #8
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b7a      	ldr	r3, [pc, #488]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4977      	ldr	r1, [pc, #476]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fea:	4b76      	ldr	r3, [pc, #472]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	4972      	ldr	r1, [pc, #456]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	604b      	str	r3, [r1, #4]
 8004ffe:	e025      	b.n	800504c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005000:	4b70      	ldr	r3, [pc, #448]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a6f      	ldr	r2, [pc, #444]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005006:	f043 0308 	orr.w	r3, r3, #8
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	4b6d      	ldr	r3, [pc, #436]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	496a      	ldr	r1, [pc, #424]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800501e:	4b69      	ldr	r3, [pc, #420]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	4965      	ldr	r1, [pc, #404]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800502e:	4313      	orrs	r3, r2
 8005030:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d109      	bne.n	800504c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fcc7 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e34d      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800504c:	f000 fc36 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8005050:	4601      	mov	r1, r0
 8005052:	4b5c      	ldr	r3, [pc, #368]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	4a5a      	ldr	r2, [pc, #360]	; (80051c8 <HAL_RCC_OscConfig+0x29c>)
 800505e:	5cd3      	ldrb	r3, [r2, r3]
 8005060:	f003 031f 	and.w	r3, r3, #31
 8005064:	fa21 f303 	lsr.w	r3, r1, r3
 8005068:	4a58      	ldr	r2, [pc, #352]	; (80051cc <HAL_RCC_OscConfig+0x2a0>)
 800506a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <HAL_RCC_OscConfig+0x2a4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe f9cf 	bl	8003414 <HAL_InitTick>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d052      	beq.n	8005126 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	e331      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d032      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800508c:	4b4d      	ldr	r3, [pc, #308]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a4c      	ldr	r2, [pc, #304]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005098:	f7fe fa0c 	bl	80034b4 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050a0:	f7fe fa08 	bl	80034b4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e31a      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050b2:	4b44      	ldr	r3, [pc, #272]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050be:	4b41      	ldr	r3, [pc, #260]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a40      	ldr	r2, [pc, #256]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	4b3e      	ldr	r3, [pc, #248]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	493b      	ldr	r1, [pc, #236]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050dc:	4b39      	ldr	r3, [pc, #228]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	4936      	ldr	r1, [pc, #216]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	e01a      	b.n	8005128 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050f2:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a33      	ldr	r2, [pc, #204]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050fe:	f7fe f9d9 	bl	80034b4 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005106:	f7fe f9d5 	bl	80034b4 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e2e7      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005118:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x1da>
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005126:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d074      	beq.n	800521e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b08      	cmp	r3, #8
 8005138:	d005      	beq.n	8005146 <HAL_RCC_OscConfig+0x21a>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d10e      	bne.n	800515e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d10b      	bne.n	800515e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005146:	4b1f      	ldr	r3, [pc, #124]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d064      	beq.n	800521c <HAL_RCC_OscConfig+0x2f0>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d160      	bne.n	800521c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e2c4      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x24a>
 8005168:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800516e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	e01d      	b.n	80051b2 <HAL_RCC_OscConfig+0x286>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800517e:	d10c      	bne.n	800519a <HAL_RCC_OscConfig+0x26e>
 8005180:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0f      	ldr	r2, [pc, #60]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0c      	ldr	r2, [pc, #48]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 8005192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e00b      	b.n	80051b2 <HAL_RCC_OscConfig+0x286>
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80051a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <HAL_RCC_OscConfig+0x298>)
 80051ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01c      	beq.n	80051f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fe f97b 	bl	80034b4 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c0:	e011      	b.n	80051e6 <HAL_RCC_OscConfig+0x2ba>
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800a0ec 	.word	0x0800a0ec
 80051cc:	20000034 	.word	0x20000034
 80051d0:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fe f96e 	bl	80034b4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e280      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e6:	4baf      	ldr	r3, [pc, #700]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x2a8>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fe f95e 	bl	80034b4 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fe f95a 	bl	80034b4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e26c      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800520e:	4ba5      	ldr	r3, [pc, #660]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x2d0>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d060      	beq.n	80052ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x310>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d119      	bne.n	800526a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d116      	bne.n	800526a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	4b99      	ldr	r3, [pc, #612]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x328>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e249      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b93      	ldr	r3, [pc, #588]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	4990      	ldr	r1, [pc, #576]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005268:	e040      	b.n	80052ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d023      	beq.n	80052ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005272:	4b8c      	ldr	r3, [pc, #560]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a8b      	ldr	r2, [pc, #556]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800527c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fe f919 	bl	80034b4 <HAL_GetTick>
 8005282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005286:	f7fe f915 	bl	80034b4 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e227      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005298:	4b82      	ldr	r3, [pc, #520]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a4:	4b7f      	ldr	r3, [pc, #508]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	497c      	ldr	r1, [pc, #496]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	604b      	str	r3, [r1, #4]
 80052b8:	e018      	b.n	80052ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ba:	4b7a      	ldr	r3, [pc, #488]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a79      	ldr	r2, [pc, #484]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80052c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fe f8f5 	bl	80034b4 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ce:	f7fe f8f1 	bl	80034b4 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e203      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e0:	4b70      	ldr	r3, [pc, #448]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1f0      	bne.n	80052ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d03c      	beq.n	8005372 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01c      	beq.n	800533a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005300:	4b68      	ldr	r3, [pc, #416]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	4a67      	ldr	r2, [pc, #412]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fe f8d0 	bl	80034b4 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005318:	f7fe f8cc 	bl	80034b4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e1de      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800532a:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800532c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0ef      	beq.n	8005318 <HAL_RCC_OscConfig+0x3ec>
 8005338:	e01b      	b.n	8005372 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800533a:	4b5a      	ldr	r3, [pc, #360]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800533c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005340:	4a58      	ldr	r2, [pc, #352]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534a:	f7fe f8b3 	bl	80034b4 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005352:	f7fe f8af 	bl	80034b4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1c1      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005364:	4b4f      	ldr	r3, [pc, #316]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1ef      	bne.n	8005352 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80a6 	beq.w	80054cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005380:	2300      	movs	r3, #0
 8005382:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005384:	4b47      	ldr	r3, [pc, #284]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10d      	bne.n	80053ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005390:	4b44      	ldr	r3, [pc, #272]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	4a43      	ldr	r2, [pc, #268]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	6593      	str	r3, [r2, #88]	; 0x58
 800539c:	4b41      	ldr	r3, [pc, #260]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a4:	60bb      	str	r3, [r7, #8]
 80053a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a8:	2301      	movs	r3, #1
 80053aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ac:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <HAL_RCC_OscConfig+0x57c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d118      	bne.n	80053ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCC_OscConfig+0x57c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a3a      	ldr	r2, [pc, #232]	; (80054a8 <HAL_RCC_OscConfig+0x57c>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c4:	f7fe f876 	bl	80034b4 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fe f872 	bl	80034b4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e184      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053de:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <HAL_RCC_OscConfig+0x57c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d108      	bne.n	8005404 <HAL_RCC_OscConfig+0x4d8>
 80053f2:	4b2c      	ldr	r3, [pc, #176]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	4a2a      	ldr	r2, [pc, #168]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005402:	e024      	b.n	800544e <HAL_RCC_OscConfig+0x522>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b05      	cmp	r3, #5
 800540a:	d110      	bne.n	800542e <HAL_RCC_OscConfig+0x502>
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	4a24      	ldr	r2, [pc, #144]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005414:	f043 0304 	orr.w	r3, r3, #4
 8005418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800541c:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 800541e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005422:	4a20      	ldr	r2, [pc, #128]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800542c:	e00f      	b.n	800544e <HAL_RCC_OscConfig+0x522>
 800542e:	4b1d      	ldr	r3, [pc, #116]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	4a17      	ldr	r2, [pc, #92]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005446:	f023 0304 	bic.w	r3, r3, #4
 800544a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fe f82d 	bl	80034b4 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545c:	e00a      	b.n	8005474 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7fe f829 	bl	80034b4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e139      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005474:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_OscConfig+0x578>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ed      	beq.n	800545e <HAL_RCC_OscConfig+0x532>
 8005482:	e01a      	b.n	80054ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005484:	f7fe f816 	bl	80034b4 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800548a:	e00f      	b.n	80054ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548c:	f7fe f812 	bl	80034b4 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	; 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d906      	bls.n	80054ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e122      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ac:	4b90      	ldr	r3, [pc, #576]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e8      	bne.n	800548c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d105      	bne.n	80054cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054c0:	4b8b      	ldr	r3, [pc, #556]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a8a      	ldr	r2, [pc, #552]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80054c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8108 	beq.w	80056e6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b02      	cmp	r3, #2
 80054dc:	f040 80d0 	bne.w	8005680 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054e0:	4b83      	ldr	r3, [pc, #524]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 0203 	and.w	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d130      	bne.n	8005556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	3b01      	subs	r3, #1
 8005500:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d127      	bne.n	8005556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d11f      	bne.n	8005556 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005520:	2a07      	cmp	r2, #7
 8005522:	bf14      	ite	ne
 8005524:	2201      	movne	r2, #1
 8005526:	2200      	moveq	r2, #0
 8005528:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800552a:	4293      	cmp	r3, r2
 800552c:	d113      	bne.n	8005556 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d109      	bne.n	8005556 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	3b01      	subs	r3, #1
 8005550:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d06e      	beq.n	8005634 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	d069      	beq.n	8005630 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800555c:	4b64      	ldr	r3, [pc, #400]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005568:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e0b7      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005578:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a5c      	ldr	r2, [pc, #368]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800557e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005582:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005584:	f7fd ff96 	bl	80034b4 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800558c:	f7fd ff92 	bl	80034b4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e0a4      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800559e:	4b54      	ldr	r3, [pc, #336]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055aa:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <HAL_RCC_OscConfig+0x7c8>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055ba:	3a01      	subs	r2, #1
 80055bc:	0112      	lsls	r2, r2, #4
 80055be:	4311      	orrs	r1, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c4:	0212      	lsls	r2, r2, #8
 80055c6:	4311      	orrs	r1, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055cc:	0852      	lsrs	r2, r2, #1
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0552      	lsls	r2, r2, #21
 80055d2:	4311      	orrs	r1, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055d8:	0852      	lsrs	r2, r2, #1
 80055da:	3a01      	subs	r2, #1
 80055dc:	0652      	lsls	r2, r2, #25
 80055de:	4311      	orrs	r1, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055e4:	0912      	lsrs	r2, r2, #4
 80055e6:	0452      	lsls	r2, r2, #17
 80055e8:	430a      	orrs	r2, r1
 80055ea:	4941      	ldr	r1, [pc, #260]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055f0:	4b3f      	ldr	r3, [pc, #252]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3e      	ldr	r2, [pc, #248]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055fc:	4b3c      	ldr	r3, [pc, #240]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a3b      	ldr	r2, [pc, #236]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005606:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005608:	f7fd ff54 	bl	80034b4 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005610:	f7fd ff50 	bl	80034b4 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e062      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005622:	4b33      	ldr	r3, [pc, #204]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800562e:	e05a      	b.n	80056e6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e059      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005634:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d152      	bne.n	80056e6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2a      	ldr	r2, [pc, #168]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800564a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800564c:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005656:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005658:	f7fd ff2c 	bl	80034b4 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005660:	f7fd ff28 	bl	80034b4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e03a      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x734>
 800567e:	e032      	b.n	80056e6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d02d      	beq.n	80056e2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005686:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 800568c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005690:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005692:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800569e:	4b14      	ldr	r3, [pc, #80]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	4a13      	ldr	r2, [pc, #76]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80056a4:	f023 0303 	bic.w	r3, r3, #3
 80056a8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80056aa:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	4a10      	ldr	r2, [pc, #64]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80056b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80056b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fd fefb 	bl	80034b4 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c2:	f7fd fef7 	bl	80034b4 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e009      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d4:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCC_OscConfig+0x7c4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1f0      	bne.n	80056c2 <HAL_RCC_OscConfig+0x796>
 80056e0:	e001      	b.n	80056e6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3720      	adds	r7, #32
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40021000 	.word	0x40021000
 80056f4:	f99d808c 	.word	0xf99d808c

080056f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0c8      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800570c:	4b66      	ldr	r3, [pc, #408]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d910      	bls.n	800573c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800571a:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f023 0207 	bic.w	r2, r3, #7
 8005722:	4961      	ldr	r1, [pc, #388]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800572a:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d001      	beq.n	800573c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0b0      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d04c      	beq.n	80057e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d107      	bne.n	8005760 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005750:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d121      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e09e      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d107      	bne.n	8005778 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005768:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d115      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e092      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005780:	4b4a      	ldr	r3, [pc, #296]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e086      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005790:	4b46      	ldr	r3, [pc, #280]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e07e      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057a0:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 0203 	bic.w	r2, r3, #3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	493f      	ldr	r1, [pc, #252]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b2:	f7fd fe7f 	bl	80034b4 <HAL_GetTick>
 80057b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ba:	f7fd fe7b 	bl	80034b4 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e066      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 020c 	and.w	r2, r3, #12
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	429a      	cmp	r2, r3
 80057e0:	d1eb      	bne.n	80057ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ee:	4b2f      	ldr	r3, [pc, #188]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	492c      	ldr	r1, [pc, #176]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005800:	4b29      	ldr	r3, [pc, #164]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	429a      	cmp	r2, r3
 800580c:	d210      	bcs.n	8005830 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580e:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 0207 	bic.w	r2, r3, #7
 8005816:	4924      	ldr	r1, [pc, #144]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	4313      	orrs	r3, r2
 800581c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_RCC_ClockConfig+0x1b0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e036      	b.n	800589e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4918      	ldr	r1, [pc, #96]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0308 	and.w	r3, r3, #8
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4910      	ldr	r1, [pc, #64]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800586e:	f000 f825 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8005872:	4601      	mov	r1, r0
 8005874:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <HAL_RCC_ClockConfig+0x1b4>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	091b      	lsrs	r3, r3, #4
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <HAL_RCC_ClockConfig+0x1b8>)
 8005880:	5cd3      	ldrb	r3, [r2, r3]
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	fa21 f303 	lsr.w	r3, r1, r3
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_RCC_ClockConfig+0x1bc>)
 800588c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800588e:	4b0a      	ldr	r3, [pc, #40]	; (80058b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fd fdbe 	bl	8003414 <HAL_InitTick>
 8005898:	4603      	mov	r3, r0
 800589a:	72fb      	strb	r3, [r7, #11]

  return status;
 800589c:	7afb      	ldrb	r3, [r7, #11]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40022000 	.word	0x40022000
 80058ac:	40021000 	.word	0x40021000
 80058b0:	0800a0ec 	.word	0x0800a0ec
 80058b4:	20000034 	.word	0x20000034
 80058b8:	20000038 	.word	0x20000038

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	b089      	sub	sp, #36	; 0x24
 80058c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058ca:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058d4:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0303 	and.w	r3, r3, #3
 80058dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x34>
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b0c      	cmp	r3, #12
 80058e8:	d121      	bne.n	800592e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d11e      	bne.n	800592e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058f0:	4b33      	ldr	r3, [pc, #204]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058fc:	4b30      	ldr	r3, [pc, #192]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80058fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005902:	0a1b      	lsrs	r3, r3, #8
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	e005      	b.n	8005918 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005920:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800592c:	e00a      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d102      	bne.n	800593a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	e004      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b08      	cmp	r3, #8
 800593e:	d101      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005942:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	2b0c      	cmp	r3, #12
 8005948:	d133      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0xa4>
 800595a:	2b03      	cmp	r3, #3
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0xaa>
 800595e:	e005      	b.n	800596c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005962:	617b      	str	r3, [r7, #20]
      break;
 8005964:	e005      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005966:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_RCC_GetSysClockFreq+0x110>)
 8005968:	617b      	str	r3, [r7, #20]
      break;
 800596a:	e002      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	617b      	str	r3, [r7, #20]
      break;
 8005970:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005972:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	091b      	lsrs	r3, r3, #4
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	3301      	adds	r3, #1
 800597e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	fb02 f203 	mul.w	r2, r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	fbb2 f3f3 	udiv	r3, r2, r3
 8005996:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	0e5b      	lsrs	r3, r3, #25
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	3301      	adds	r3, #1
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059b2:	69bb      	ldr	r3, [r7, #24]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3724      	adds	r7, #36	; 0x24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0800a0fc 	.word	0x0800a0fc
 80059c8:	00f42400 	.word	0x00f42400
 80059cc:	007a1200 	.word	0x007a1200

080059d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059dc:	4b2a      	ldr	r3, [pc, #168]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059e8:	f7ff fa3c 	bl	8004e64 <HAL_PWREx_GetVoltageRange>
 80059ec:	6178      	str	r0, [r7, #20]
 80059ee:	e014      	b.n	8005a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059fa:	6593      	str	r3, [r2, #88]	; 0x58
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a08:	f7ff fa2c 	bl	8004e64 <HAL_PWREx_GetVoltageRange>
 8005a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a12:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a20:	d10b      	bne.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d919      	bls.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a2c:	d902      	bls.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a2e:	2302      	movs	r3, #2
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e013      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a34:	2301      	movs	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e010      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d902      	bls.n	8005a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a40:	2303      	movs	r3, #3
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	e00a      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d102      	bne.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e004      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d101      	bne.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a58:	2301      	movs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	; (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 0207 	bic.w	r2, r3, #7
 8005a64:	4909      	ldr	r1, [pc, #36]	; (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d001      	beq.n	8005a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40022000 	.word	0x40022000

08005a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d03f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab4:	d01c      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aba:	d802      	bhi.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00e      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005ac0:	e01f      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ac6:	d003      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005acc:	d01c      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005ace:	e018      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ad0:	4b85      	ldr	r3, [pc, #532]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4a84      	ldr	r2, [pc, #528]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005adc:	e015      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fab9 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aee:	e00c      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3320      	adds	r3, #32
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fba0 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b00:	e003      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	74fb      	strb	r3, [r7, #19]
      break;
 8005b06:	e000      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10b      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b10:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1e:	4972      	ldr	r1, [pc, #456]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b26:	e001      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	7cfb      	ldrb	r3, [r7, #19]
 8005b2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d03f      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b40:	d01c      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b46:	d802      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00e      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005b4c:	e01f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b52:	d003      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b58:	d01c      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005b5a:	e018      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b5c:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	4a61      	ldr	r2, [pc, #388]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b68:	e015      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fa73 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b7a:	e00c      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3320      	adds	r3, #32
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fb5a 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b8c:	e003      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	74fb      	strb	r3, [r7, #19]
      break;
 8005b92:	e000      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b9c:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005baa:	494f      	ldr	r1, [pc, #316]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bb2:	e001      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb4:	7cfb      	ldrb	r3, [r7, #19]
 8005bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80a0 	beq.w	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be0:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be4:	4a40      	ldr	r2, [pc, #256]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bea:	6593      	str	r3, [r2, #88]	; 0x58
 8005bec:	4b3e      	ldr	r3, [pc, #248]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a3a      	ldr	r2, [pc, #232]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c08:	f7fd fc54 	bl	80034b4 <HAL_GetTick>
 8005c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c0e:	e009      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c10:	f7fd fc50 	bl	80034b4 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d902      	bls.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	74fb      	strb	r3, [r7, #19]
        break;
 8005c22:	e005      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0ef      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005c30:	7cfb      	ldrb	r3, [r7, #19]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d15c      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01f      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d019      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c54:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c60:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d016      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fd fc0f 	bl	80034b4 <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c98:	e00b      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9a:	f7fd fc0b 	bl	80034b4 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d902      	bls.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	74fb      	strb	r3, [r7, #19]
            break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0ec      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc6:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	4904      	ldr	r1, [pc, #16]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cde:	e009      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ce0:	7cfb      	ldrb	r3, [r7, #19]
 8005ce2:	74bb      	strb	r3, [r7, #18]
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005ce6:	bf00      	nop
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	7cfb      	ldrb	r3, [r7, #19]
 8005cf2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf4:	7c7b      	ldrb	r3, [r7, #17]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cfa:	4b9e      	ldr	r3, [pc, #632]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	4a9d      	ldr	r2, [pc, #628]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d12:	4b98      	ldr	r3, [pc, #608]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	f023 0203 	bic.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	4994      	ldr	r1, [pc, #592]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d34:	4b8f      	ldr	r3, [pc, #572]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	f023 020c 	bic.w	r2, r3, #12
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	498c      	ldr	r1, [pc, #560]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d56:	4b87      	ldr	r3, [pc, #540]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4983      	ldr	r1, [pc, #524]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0308 	and.w	r3, r3, #8
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d78:	4b7e      	ldr	r3, [pc, #504]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	497b      	ldr	r1, [pc, #492]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da8:	4972      	ldr	r1, [pc, #456]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dbc:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dca:	496a      	ldr	r1, [pc, #424]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	4961      	ldr	r1, [pc, #388]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e00:	4b5c      	ldr	r3, [pc, #368]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	4959      	ldr	r1, [pc, #356]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e22:	4b54      	ldr	r3, [pc, #336]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	4950      	ldr	r1, [pc, #320]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e44:	4b4b      	ldr	r3, [pc, #300]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	4948      	ldr	r1, [pc, #288]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e66:	4b43      	ldr	r3, [pc, #268]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	493f      	ldr	r1, [pc, #252]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d028      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e88:	4b3a      	ldr	r3, [pc, #232]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e96:	4937      	ldr	r1, [pc, #220]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ea6:	d106      	bne.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea8:	4b32      	ldr	r3, [pc, #200]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eb2:	60d3      	str	r3, [r2, #12]
 8005eb4:	e011      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ebe:	d10c      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 f8c8 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005ed6:	7cfb      	ldrb	r3, [r7, #19]
 8005ed8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d028      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef4:	491f      	ldr	r1, [pc, #124]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f04:	d106      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f06:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4a1a      	ldr	r2, [pc, #104]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f10:	60d3      	str	r3, [r2, #12]
 8005f12:	e011      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3304      	adds	r3, #4
 8005f22:	2101      	movs	r1, #1
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f899 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f2e:	7cfb      	ldrb	r3, [r7, #19]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005f34:	7cfb      	ldrb	r3, [r7, #19]
 8005f36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02b      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f52:	4908      	ldr	r1, [pc, #32]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f62:	d109      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	4a02      	ldr	r2, [pc, #8]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6e:	60d3      	str	r3, [r2, #12]
 8005f70:	e014      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f80:	d10c      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2101      	movs	r1, #1
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f867 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005f98:	7cfb      	ldrb	r3, [r7, #19]
 8005f9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02f      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fb6:	4928      	ldr	r1, [pc, #160]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fc6:	d10d      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f844 	bl	800605c <RCCEx_PLLSAI1_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d014      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005fde:	7cfb      	ldrb	r3, [r7, #19]
 8005fe0:	74bb      	strb	r3, [r7, #18]
 8005fe2:	e011      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fec:	d10c      	bne.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3320      	adds	r3, #32
 8005ff2:	2102      	movs	r1, #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 f921 	bl	800623c <RCCEx_PLLSAI2_Config>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ffe:	7cfb      	ldrb	r3, [r7, #19]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8006004:	7cfb      	ldrb	r3, [r7, #19]
 8006006:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006014:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006022:	490d      	ldr	r1, [pc, #52]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006046:	4904      	ldr	r1, [pc, #16]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800604e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000

0800605c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800606a:	4b73      	ldr	r3, [pc, #460]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d018      	beq.n	80060a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006076:	4b70      	ldr	r3, [pc, #448]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0203 	and.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d10d      	bne.n	80060a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
       ||
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800608e:	4b6a      	ldr	r3, [pc, #424]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
       ||
 800609e:	429a      	cmp	r2, r3
 80060a0:	d044      	beq.n	800612c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
 80060a6:	e041      	b.n	800612c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d00c      	beq.n	80060ca <RCCEx_PLLSAI1_Config+0x6e>
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d013      	beq.n	80060dc <RCCEx_PLLSAI1_Config+0x80>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d120      	bne.n	80060fa <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060b8:	4b5f      	ldr	r3, [pc, #380]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11d      	bne.n	8006100 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e01a      	b.n	8006100 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060ca:	4b5b      	ldr	r3, [pc, #364]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d116      	bne.n	8006104 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060da:	e013      	b.n	8006104 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060dc:	4b56      	ldr	r3, [pc, #344]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10f      	bne.n	8006108 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060e8:	4b53      	ldr	r3, [pc, #332]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060f8:	e006      	b.n	8006108 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	e004      	b.n	800610a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006100:	bf00      	nop
 8006102:	e002      	b.n	800610a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006104:	bf00      	nop
 8006106:	e000      	b.n	800610a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8006108:	bf00      	nop
    }

    if(status == HAL_OK)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10d      	bne.n	800612c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006110:	4b49      	ldr	r3, [pc, #292]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6819      	ldr	r1, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	430b      	orrs	r3, r1
 8006126:	4944      	ldr	r1, [pc, #272]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006128:	4313      	orrs	r3, r2
 800612a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d17d      	bne.n	800622e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006132:	4b41      	ldr	r3, [pc, #260]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a40      	ldr	r2, [pc, #256]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006138:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800613c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613e:	f7fd f9b9 	bl	80034b4 <HAL_GetTick>
 8006142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006144:	e009      	b.n	800615a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006146:	f7fd f9b5 	bl	80034b4 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d902      	bls.n	800615a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	73fb      	strb	r3, [r7, #15]
        break;
 8006158:	e005      	b.n	8006166 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1ef      	bne.n	8006146 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d160      	bne.n	800622e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d111      	bne.n	8006196 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006172:	4b31      	ldr	r3, [pc, #196]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800617a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6892      	ldr	r2, [r2, #8]
 8006182:	0211      	lsls	r1, r2, #8
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	68d2      	ldr	r2, [r2, #12]
 8006188:	0912      	lsrs	r2, r2, #4
 800618a:	0452      	lsls	r2, r2, #17
 800618c:	430a      	orrs	r2, r1
 800618e:	492a      	ldr	r1, [pc, #168]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
 8006194:	e027      	b.n	80061e6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d112      	bne.n	80061c2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800619c:	4b26      	ldr	r3, [pc, #152]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6892      	ldr	r2, [r2, #8]
 80061ac:	0211      	lsls	r1, r2, #8
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6912      	ldr	r2, [r2, #16]
 80061b2:	0852      	lsrs	r2, r2, #1
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0552      	lsls	r2, r2, #21
 80061b8:	430a      	orrs	r2, r1
 80061ba:	491f      	ldr	r1, [pc, #124]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
 80061c0:	e011      	b.n	80061e6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6892      	ldr	r2, [r2, #8]
 80061d2:	0211      	lsls	r1, r2, #8
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6952      	ldr	r2, [r2, #20]
 80061d8:	0852      	lsrs	r2, r2, #1
 80061da:	3a01      	subs	r2, #1
 80061dc:	0652      	lsls	r2, r2, #25
 80061de:	430a      	orrs	r2, r1
 80061e0:	4915      	ldr	r1, [pc, #84]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a13      	ldr	r2, [pc, #76]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f2:	f7fd f95f 	bl	80034b4 <HAL_GetTick>
 80061f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061f8:	e009      	b.n	800620e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061fa:	f7fd f95b 	bl	80034b4 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d902      	bls.n	800620e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	73fb      	strb	r3, [r7, #15]
          break;
 800620c:	e005      	b.n	800621a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800620e:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4903      	ldr	r1, [pc, #12]	; (8006238 <RCCEx_PLLSAI1_Config+0x1dc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800622e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	40021000 	.word	0x40021000

0800623c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800624a:	4b68      	ldr	r3, [pc, #416]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d018      	beq.n	8006288 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0203 	and.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d10d      	bne.n	8006282 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
       ||
 800626a:	2b00      	cmp	r3, #0
 800626c:	d009      	beq.n	8006282 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800626e:	4b5f      	ldr	r3, [pc, #380]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
       ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d044      	beq.n	800630c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
 8006286:	e041      	b.n	800630c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d00c      	beq.n	80062aa <RCCEx_PLLSAI2_Config+0x6e>
 8006290:	2b03      	cmp	r3, #3
 8006292:	d013      	beq.n	80062bc <RCCEx_PLLSAI2_Config+0x80>
 8006294:	2b01      	cmp	r3, #1
 8006296:	d120      	bne.n	80062da <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006298:	4b54      	ldr	r3, [pc, #336]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11d      	bne.n	80062e0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a8:	e01a      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062aa:	4b50      	ldr	r3, [pc, #320]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d116      	bne.n	80062e4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ba:	e013      	b.n	80062e4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062bc:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10f      	bne.n	80062e8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062c8:	4b48      	ldr	r3, [pc, #288]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062d8:	e006      	b.n	80062e8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      break;
 80062de:	e004      	b.n	80062ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <RCCEx_PLLSAI2_Config+0xae>
      break;
 80062e8:	bf00      	nop
    }

    if(status == HAL_OK)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10d      	bne.n	800630c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80062f0:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	3b01      	subs	r3, #1
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	430b      	orrs	r3, r1
 8006306:	4939      	ldr	r1, [pc, #228]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006308:	4313      	orrs	r3, r2
 800630a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d167      	bne.n	80063e2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006312:	4b36      	ldr	r3, [pc, #216]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a35      	ldr	r2, [pc, #212]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631e:	f7fd f8c9 	bl	80034b4 <HAL_GetTick>
 8006322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006324:	e009      	b.n	800633a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006326:	f7fd f8c5 	bl	80034b4 <HAL_GetTick>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	2b02      	cmp	r3, #2
 8006332:	d902      	bls.n	800633a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	73fb      	strb	r3, [r7, #15]
        break;
 8006338:	e005      	b.n	8006346 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1ef      	bne.n	8006326 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d14a      	bne.n	80063e2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d111      	bne.n	8006376 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006352:	4b26      	ldr	r3, [pc, #152]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800635a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6892      	ldr	r2, [r2, #8]
 8006362:	0211      	lsls	r1, r2, #8
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68d2      	ldr	r2, [r2, #12]
 8006368:	0912      	lsrs	r2, r2, #4
 800636a:	0452      	lsls	r2, r2, #17
 800636c:	430a      	orrs	r2, r1
 800636e:	491f      	ldr	r1, [pc, #124]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006370:	4313      	orrs	r3, r2
 8006372:	614b      	str	r3, [r1, #20]
 8006374:	e011      	b.n	800639a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800637e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6892      	ldr	r2, [r2, #8]
 8006386:	0211      	lsls	r1, r2, #8
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6912      	ldr	r2, [r2, #16]
 800638c:	0852      	lsrs	r2, r2, #1
 800638e:	3a01      	subs	r2, #1
 8006390:	0652      	lsls	r2, r2, #25
 8006392:	430a      	orrs	r2, r1
 8006394:	4915      	ldr	r1, [pc, #84]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 8006396:	4313      	orrs	r3, r2
 8006398:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80063a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a6:	f7fd f885 	bl	80034b4 <HAL_GetTick>
 80063aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063ac:	e009      	b.n	80063c2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063ae:	f7fd f881 	bl	80034b4 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d902      	bls.n	80063c2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	73fb      	strb	r3, [r7, #15]
          break;
 80063c0:	e005      	b.n	80063ce <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0ef      	beq.n	80063ae <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80063d6:	695a      	ldr	r2, [r3, #20]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	4903      	ldr	r1, [pc, #12]	; (80063ec <RCCEx_PLLSAI2_Config+0x1b0>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000

080063f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e095      	b.n	800652e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d108      	bne.n	800641c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006412:	d009      	beq.n	8006428 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	61da      	str	r2, [r3, #28]
 800641a:	e005      	b.n	8006428 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fc fc62 	bl	8002d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006468:	d902      	bls.n	8006470 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e002      	b.n	8006476 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800647e:	d007      	beq.n	8006490 <HAL_SPI_Init+0xa0>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006488:	d002      	beq.n	8006490 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	ea42 0103 	orr.w	r1, r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	f003 0204 	and.w	r2, r3, #4
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800650c:	ea42 0103 	orr.w	r1, r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b088      	sub	sp, #32
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_SPI_Transmit+0x22>
 8006554:	2302      	movs	r3, #2
 8006556:	e158      	b.n	800680a <HAL_SPI_Transmit+0x2d4>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006560:	f7fc ffa8 	bl	80034b4 <HAL_GetTick>
 8006564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006576:	2302      	movs	r3, #2
 8006578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800657a:	e13d      	b.n	80067f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Transmit+0x52>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800658c:	e134      	b.n	80067f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2203      	movs	r2, #3
 8006592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d8:	d10f      	bne.n	80065fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d007      	beq.n	8006618 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006620:	d94b      	bls.n	80066ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_Transmit+0xfa>
 800662a:	8afb      	ldrh	r3, [r7, #22]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d13e      	bne.n	80066ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	1c9a      	adds	r2, r3, #2
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800664a:	b29b      	uxth	r3, r3
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006654:	e02b      	b.n	80066ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d112      	bne.n	800668a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	1c9a      	adds	r2, r3, #2
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667e:	b29b      	uxth	r3, r3
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006688:	e011      	b.n	80066ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668a:	f7fc ff13 	bl	80034b4 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	429a      	cmp	r2, r3
 8006698:	d803      	bhi.n	80066a2 <HAL_SPI_Transmit+0x16c>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d102      	bne.n	80066a8 <HAL_SPI_Transmit+0x172>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066ac:	e0a4      	b.n	80067f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ce      	bne.n	8006656 <HAL_SPI_Transmit+0x120>
 80066b8:	e07c      	b.n	80067b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_Transmit+0x192>
 80066c2:	8afb      	ldrh	r3, [r7, #22]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d170      	bne.n	80067aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d912      	bls.n	80066f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	1c9a      	adds	r2, r3, #2
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b02      	subs	r3, #2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066f6:	e058      	b.n	80067aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	330c      	adds	r3, #12
 8006702:	7812      	ldrb	r2, [r2, #0]
 8006704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800671e:	e044      	b.n	80067aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d12b      	bne.n	8006786 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d912      	bls.n	800675e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	881a      	ldrh	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	1c9a      	adds	r2, r3, #2
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b02      	subs	r3, #2
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675c:	e025      	b.n	80067aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006784:	e011      	b.n	80067aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006786:	f7fc fe95 	bl	80034b4 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d803      	bhi.n	800679e <HAL_SPI_Transmit+0x268>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d102      	bne.n	80067a4 <HAL_SPI_Transmit+0x26e>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067a8:	e026      	b.n	80067f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1b5      	bne.n	8006720 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 fbdf 	bl	8006f7c <SPI_EndRxTxTransaction>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067d2:	2300      	movs	r3, #0
 80067d4:	613b      	str	r3, [r7, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	77fb      	strb	r3, [r7, #31]
 80067f4:	e000      	b.n	80067f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80067f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006808:	7ffb      	ldrb	r3, [r7, #31]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_SPI_Transmit_DMA+0x20>
 8006830:	2302      	movs	r3, #2
 8006832:	e0d8      	b.n	80069e6 <HAL_SPI_Transmit_DMA+0x1d2>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d002      	beq.n	800684e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006848:	2302      	movs	r3, #2
 800684a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800684c:	e0c6      	b.n	80069dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_SPI_Transmit_DMA+0x46>
 8006854:	88fb      	ldrh	r3, [r7, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d102      	bne.n	8006860 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800685e:	e0bd      	b.n	80069dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2203      	movs	r2, #3
 8006864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068aa:	d10f      	bne.n	80068cc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d0:	4a47      	ldr	r2, [pc, #284]	; (80069f0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	4a46      	ldr	r2, [pc, #280]	; (80069f4 <HAL_SPI_Transmit_DMA+0x1e0>)
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e0:	4a45      	ldr	r2, [pc, #276]	; (80069f8 <HAL_SPI_Transmit_DMA+0x1e4>)
 80068e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e8:	2200      	movs	r2, #0
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068fa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006904:	d82d      	bhi.n	8006962 <HAL_SPI_Transmit_DMA+0x14e>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006910:	d127      	bne.n	8006962 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10f      	bne.n	8006940 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800692e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800693e:	e010      	b.n	8006962 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800694e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	b29b      	uxth	r3, r3
 800695a:	3301      	adds	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	4619      	mov	r1, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800697a:	f7fd ff33 	bl	80047e4 <HAL_DMA_Start_IT>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00c      	beq.n	800699e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006988:	f043 0210 	orr.w	r2, r3, #16
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800699c:	e01e      	b.n	80069dc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	d007      	beq.n	80069bc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069ba:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0220 	orr.w	r2, r2, #32
 80069ca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0202 	orr.w	r2, r2, #2
 80069da:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	08006ccb 	.word	0x08006ccb
 80069f4:	08006c25 	.word	0x08006c25
 80069f8:	08006ce7 	.word	0x08006ce7

080069fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10f      	bne.n	8006a40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	099b      	lsrs	r3, r3, #6
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
    return;
 8006a3e:	e0d8      	b.n	8006bf2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	085b      	lsrs	r3, r3, #1
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00a      	beq.n	8006a62 <HAL_SPI_IRQHandler+0x66>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	09db      	lsrs	r3, r3, #7
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
    return;
 8006a60:	e0c7      	b.n	8006bf2 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10c      	bne.n	8006a88 <HAL_SPI_IRQHandler+0x8c>
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	099b      	lsrs	r3, r3, #6
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d106      	bne.n	8006a88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 80b5 	beq.w	8006bf2 <HAL_SPI_IRQHandler+0x1f6>
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80ae 	beq.w	8006bf2 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	099b      	lsrs	r3, r3, #6
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d023      	beq.n	8006aea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d011      	beq.n	8006ad2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab2:	f043 0204 	orr.w	r2, r3, #4
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	e00b      	b.n	8006aea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	613b      	str	r3, [r7, #16]
 8006ae6:	693b      	ldr	r3, [r7, #16]
        return;
 8006ae8:	e083      	b.n	8006bf2 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d014      	beq.n	8006b20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b02:	2300      	movs	r3, #0
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	0a1b      	lsrs	r3, r3, #8
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00c      	beq.n	8006b46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b30:	f043 0208 	orr.w	r2, r3, #8
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d050      	beq.n	8006bf0 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d104      	bne.n	8006b7a <HAL_SPI_IRQHandler+0x17e>
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d034      	beq.n	8006be4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0203 	bic.w	r2, r2, #3
 8006b88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d011      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <HAL_SPI_IRQHandler+0x1fc>)
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fd fe80 	bl	80048a4 <HAL_DMA_Abort_IT>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <HAL_SPI_IRQHandler+0x1fc>)
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fd fe6a 	bl	80048a4 <HAL_DMA_Abort_IT>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006be2:	e003      	b.n	8006bec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f813 	bl	8006c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bea:	e000      	b.n	8006bee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006bec:	bf00      	nop
    return;
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
  }
}
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08006d27 	.word	0x08006d27

08006bfc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c32:	f7fc fc3f 	bl	80034b4 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d03b      	beq.n	8006cbe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0220 	bic.w	r2, r2, #32
 8006c54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0202 	bic.w	r2, r2, #2
 8006c64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	2164      	movs	r1, #100	; 0x64
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f000 f986 	bl	8006f7c <SPI_EndRxTxTransaction>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d005      	beq.n	8006c82 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006cb6:	6978      	ldr	r0, [r7, #20]
 8006cb8:	f7ff ffaa 	bl	8006c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006cbc:	e002      	b.n	8006cc4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f7fb fc86 	bl	80025d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b084      	sub	sp, #16
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff8f 	bl	8006bfc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0203 	bic.w	r2, r2, #3
 8006d02:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d08:	f043 0210 	orr.w	r2, r3, #16
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff ff79 	bl	8006c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff ff64 	bl	8006c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d60:	f7fc fba8 	bl	80034b4 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d70:	f7fc fba0 	bl	80034b4 <HAL_GetTick>
 8006d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d76:	4b39      	ldr	r3, [pc, #228]	; (8006e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	015b      	lsls	r3, r3, #5
 8006d7c:	0d1b      	lsrs	r3, r3, #20
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
 8006d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d86:	e054      	b.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8e:	d050      	beq.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d90:	f7fc fb90 	bl	80034b4 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d902      	bls.n	8006da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d13d      	bne.n	8006e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dbe:	d111      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dc8:	d004      	beq.n	8006dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd2:	d107      	bne.n	8006de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	d10f      	bne.n	8006e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e017      	b.n	8006e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d19b      	bne.n	8006d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000034 	.word	0x20000034

08006e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e6e:	f7fc fb21 	bl	80034b4 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e7e:	f7fc fb19 	bl	80034b4 <HAL_GetTick>
 8006e82:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e84:	4b3c      	ldr	r3, [pc, #240]	; (8006f78 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	00da      	lsls	r2, r3, #3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	0d1b      	lsrs	r3, r3, #20
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	fb02 f303 	mul.w	r3, r2, r3
 8006e9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e9c:	e05f      	b.n	8006f5e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ea4:	d106      	bne.n	8006eb4 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d050      	beq.n	8006f5e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ebc:	f7fc fafa 	bl	80034b4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d902      	bls.n	8006ed2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d13d      	bne.n	8006f4e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eea:	d111      	bne.n	8006f10 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef4:	d004      	beq.n	8006f00 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efe:	d107      	bne.n	8006f10 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f18:	d10f      	bne.n	8006f3a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e010      	b.n	8006f70 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4013      	ands	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d197      	bne.n	8006e9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000034 	.word	0x20000034

08006f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7ff ff63 	bl	8006e60 <SPI_WaitFifoStateUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa4:	f043 0220 	orr.w	r2, r3, #32
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e027      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	2180      	movs	r1, #128	; 0x80
 8006fba:	68f8      	ldr	r0, [r7, #12]
 8006fbc:	f7ff fec8 	bl	8006d50 <SPI_WaitFlagStateUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fca:	f043 0220 	orr.w	r2, r3, #32
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e014      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff ff3c 	bl	8006e60 <SPI_WaitFifoStateUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e000      	b.n	8007000 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e049      	b.n	80070ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fc f930 	bl	8003294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 fb80 	bl	800774c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <HAL_TIM_PWM_Start+0x24>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	bf14      	ite	ne
 80070d4:	2301      	movne	r3, #1
 80070d6:	2300      	moveq	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e03c      	b.n	8007156 <HAL_TIM_PWM_Start+0x9e>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d109      	bne.n	80070f6 <HAL_TIM_PWM_Start+0x3e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	bf14      	ite	ne
 80070ee:	2301      	movne	r3, #1
 80070f0:	2300      	moveq	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	e02f      	b.n	8007156 <HAL_TIM_PWM_Start+0x9e>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d109      	bne.n	8007110 <HAL_TIM_PWM_Start+0x58>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	bf14      	ite	ne
 8007108:	2301      	movne	r3, #1
 800710a:	2300      	moveq	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	e022      	b.n	8007156 <HAL_TIM_PWM_Start+0x9e>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b0c      	cmp	r3, #12
 8007114:	d109      	bne.n	800712a <HAL_TIM_PWM_Start+0x72>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b01      	cmp	r3, #1
 8007120:	bf14      	ite	ne
 8007122:	2301      	movne	r3, #1
 8007124:	2300      	moveq	r3, #0
 8007126:	b2db      	uxtb	r3, r3
 8007128:	e015      	b.n	8007156 <HAL_TIM_PWM_Start+0x9e>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b10      	cmp	r3, #16
 800712e:	d109      	bne.n	8007144 <HAL_TIM_PWM_Start+0x8c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	bf14      	ite	ne
 800713c:	2301      	movne	r3, #1
 800713e:	2300      	moveq	r3, #0
 8007140:	b2db      	uxtb	r3, r3
 8007142:	e008      	b.n	8007156 <HAL_TIM_PWM_Start+0x9e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	bf14      	ite	ne
 8007150:	2301      	movne	r3, #1
 8007152:	2300      	moveq	r3, #0
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e09c      	b.n	8007298 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <HAL_TIM_PWM_Start+0xb6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800716c:	e023      	b.n	80071b6 <HAL_TIM_PWM_Start+0xfe>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b04      	cmp	r3, #4
 8007172:	d104      	bne.n	800717e <HAL_TIM_PWM_Start+0xc6>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800717c:	e01b      	b.n	80071b6 <HAL_TIM_PWM_Start+0xfe>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b08      	cmp	r3, #8
 8007182:	d104      	bne.n	800718e <HAL_TIM_PWM_Start+0xd6>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800718c:	e013      	b.n	80071b6 <HAL_TIM_PWM_Start+0xfe>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d104      	bne.n	800719e <HAL_TIM_PWM_Start+0xe6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800719c:	e00b      	b.n	80071b6 <HAL_TIM_PWM_Start+0xfe>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b10      	cmp	r3, #16
 80071a2:	d104      	bne.n	80071ae <HAL_TIM_PWM_Start+0xf6>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2202      	movs	r2, #2
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071ac:	e003      	b.n	80071b6 <HAL_TIM_PWM_Start+0xfe>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2201      	movs	r2, #1
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fe34 	bl	8007e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a35      	ldr	r2, [pc, #212]	; (80072a0 <HAL_TIM_PWM_Start+0x1e8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x13e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a34      	ldr	r2, [pc, #208]	; (80072a4 <HAL_TIM_PWM_Start+0x1ec>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x13e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a32      	ldr	r2, [pc, #200]	; (80072a8 <HAL_TIM_PWM_Start+0x1f0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x13e>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a31      	ldr	r2, [pc, #196]	; (80072ac <HAL_TIM_PWM_Start+0x1f4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_TIM_PWM_Start+0x13e>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <HAL_TIM_PWM_Start+0x1f8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_PWM_Start+0x142>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <HAL_TIM_PWM_Start+0x144>
 80071fa:	2300      	movs	r3, #0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a22      	ldr	r2, [pc, #136]	; (80072a0 <HAL_TIM_PWM_Start+0x1e8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d01d      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d018      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a22      	ldr	r2, [pc, #136]	; (80072b4 <HAL_TIM_PWM_Start+0x1fc>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d013      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <HAL_TIM_PWM_Start+0x200>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d00e      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a1f      	ldr	r2, [pc, #124]	; (80072bc <HAL_TIM_PWM_Start+0x204>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d009      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a17      	ldr	r2, [pc, #92]	; (80072a4 <HAL_TIM_PWM_Start+0x1ec>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d004      	beq.n	8007256 <HAL_TIM_PWM_Start+0x19e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a15      	ldr	r2, [pc, #84]	; (80072a8 <HAL_TIM_PWM_Start+0x1f0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d115      	bne.n	8007282 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	4b18      	ldr	r3, [pc, #96]	; (80072c0 <HAL_TIM_PWM_Start+0x208>)
 800725e:	4013      	ands	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b06      	cmp	r3, #6
 8007266:	d015      	beq.n	8007294 <HAL_TIM_PWM_Start+0x1dc>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800726e:	d011      	beq.n	8007294 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	e008      	b.n	8007294 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e000      	b.n	8007296 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40013400 	.word	0x40013400
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40014400 	.word	0x40014400
 80072b0:	40014800 	.word	0x40014800
 80072b4:	40000400 	.word	0x40000400
 80072b8:	40000800 	.word	0x40000800
 80072bc:	40000c00 	.word	0x40000c00
 80072c0:	00010007 	.word	0x00010007

080072c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e097      	b.n	8007408 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7fb ff8d 	bl	800320c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2202      	movs	r2, #2
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007308:	f023 0307 	bic.w	r3, r3, #7
 800730c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f000 fa17 	bl	800774c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	4313      	orrs	r3, r2
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007364:	f023 030c 	bic.w	r3, r3, #12
 8007368:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	4313      	orrs	r3, r2
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	011a      	lsls	r2, r3, #4
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	031b      	lsls	r3, r3, #12
 8007394:	4313      	orrs	r3, r2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	4313      	orrs	r3, r2
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007420:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007428:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007430:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007438:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d110      	bne.n	8007462 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d102      	bne.n	800744c <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007446:	7b7b      	ldrb	r3, [r7, #13]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d001      	beq.n	8007450 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e068      	b.n	8007522 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007460:	e031      	b.n	80074c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d110      	bne.n	800748a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d102      	bne.n	8007474 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800746e:	7b3b      	ldrb	r3, [r7, #12]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d001      	beq.n	8007478 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e054      	b.n	8007522 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2202      	movs	r2, #2
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007488:	e01d      	b.n	80074c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d108      	bne.n	80074a2 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d105      	bne.n	80074a2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007496:	7b7b      	ldrb	r3, [r7, #13]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d102      	bne.n	80074a2 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800749c:	7b3b      	ldrb	r3, [r7, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e03d      	b.n	8007522 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2202      	movs	r2, #2
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2202      	movs	r2, #2
 80074b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2202      	movs	r2, #2
 80074ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_TIM_Encoder_Start+0xc2>
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d008      	beq.n	80074e2 <HAL_TIM_Encoder_Start+0xd2>
 80074d0:	e00f      	b.n	80074f2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2201      	movs	r2, #1
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fca6 	bl	8007e2c <TIM_CCxChannelCmd>
      break;
 80074e0:	e016      	b.n	8007510 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2201      	movs	r2, #1
 80074e8:	2104      	movs	r1, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fc9e 	bl	8007e2c <TIM_CCxChannelCmd>
      break;
 80074f0:	e00e      	b.n	8007510 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2201      	movs	r2, #1
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fc96 	bl	8007e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2201      	movs	r2, #1
 8007506:	2104      	movs	r1, #4
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fc8f 	bl	8007e2c <TIM_CCxChannelCmd>
      break;
 800750e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f042 0201 	orr.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753e:	2b01      	cmp	r3, #1
 8007540:	d101      	bne.n	8007546 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007542:	2302      	movs	r3, #2
 8007544:	e0fd      	b.n	8007742 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b14      	cmp	r3, #20
 8007552:	f200 80f0 	bhi.w	8007736 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075b1 	.word	0x080075b1
 8007560:	08007737 	.word	0x08007737
 8007564:	08007737 	.word	0x08007737
 8007568:	08007737 	.word	0x08007737
 800756c:	080075f1 	.word	0x080075f1
 8007570:	08007737 	.word	0x08007737
 8007574:	08007737 	.word	0x08007737
 8007578:	08007737 	.word	0x08007737
 800757c:	08007633 	.word	0x08007633
 8007580:	08007737 	.word	0x08007737
 8007584:	08007737 	.word	0x08007737
 8007588:	08007737 	.word	0x08007737
 800758c:	08007673 	.word	0x08007673
 8007590:	08007737 	.word	0x08007737
 8007594:	08007737 	.word	0x08007737
 8007598:	08007737 	.word	0x08007737
 800759c:	080076b5 	.word	0x080076b5
 80075a0:	08007737 	.word	0x08007737
 80075a4:	08007737 	.word	0x08007737
 80075a8:	08007737 	.word	0x08007737
 80075ac:	080076f5 	.word	0x080076f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f962 	bl	8007880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0208 	orr.w	r2, r2, #8
 80075ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699a      	ldr	r2, [r3, #24]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0204 	bic.w	r2, r2, #4
 80075da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6999      	ldr	r1, [r3, #24]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	619a      	str	r2, [r3, #24]
      break;
 80075ee:	e0a3      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 f9d2 	bl	80079a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800760a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800761a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6999      	ldr	r1, [r3, #24]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	021a      	lsls	r2, r3, #8
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	619a      	str	r2, [r3, #24]
      break;
 8007630:	e082      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fa3b 	bl	8007ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0208 	orr.w	r2, r2, #8
 800764c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0204 	bic.w	r2, r2, #4
 800765c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69d9      	ldr	r1, [r3, #28]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	61da      	str	r2, [r3, #28]
      break;
 8007670:	e062      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 faa3 	bl	8007bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800768c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69da      	ldr	r2, [r3, #28]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800769c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	69d9      	ldr	r1, [r3, #28]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	021a      	lsls	r2, r3, #8
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	61da      	str	r2, [r3, #28]
      break;
 80076b2:	e041      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 faec 	bl	8007c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0204 	bic.w	r2, r2, #4
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076f2:	e021      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fb30 	bl	8007d60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800770e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007734:	e000      	b.n	8007738 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop

0800774c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a40      	ldr	r2, [pc, #256]	; (8007860 <TIM_Base_SetConfig+0x114>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776a:	d00f      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <TIM_Base_SetConfig+0x118>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00b      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a3c      	ldr	r2, [pc, #240]	; (8007868 <TIM_Base_SetConfig+0x11c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3b      	ldr	r2, [pc, #236]	; (800786c <TIM_Base_SetConfig+0x120>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d003      	beq.n	800778c <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <TIM_Base_SetConfig+0x124>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d108      	bne.n	800779e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a2f      	ldr	r2, [pc, #188]	; (8007860 <TIM_Base_SetConfig+0x114>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01f      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ac:	d01b      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2c      	ldr	r2, [pc, #176]	; (8007864 <TIM_Base_SetConfig+0x118>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d017      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a2b      	ldr	r2, [pc, #172]	; (8007868 <TIM_Base_SetConfig+0x11c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2a      	ldr	r2, [pc, #168]	; (800786c <TIM_Base_SetConfig+0x120>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00f      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a29      	ldr	r2, [pc, #164]	; (8007870 <TIM_Base_SetConfig+0x124>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00b      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a28      	ldr	r2, [pc, #160]	; (8007874 <TIM_Base_SetConfig+0x128>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d007      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a27      	ldr	r2, [pc, #156]	; (8007878 <TIM_Base_SetConfig+0x12c>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_Base_SetConfig+0x9a>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a26      	ldr	r2, [pc, #152]	; (800787c <TIM_Base_SetConfig+0x130>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d108      	bne.n	80077f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <TIM_Base_SetConfig+0x114>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d00f      	beq.n	8007844 <TIM_Base_SetConfig+0xf8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a12      	ldr	r2, [pc, #72]	; (8007870 <TIM_Base_SetConfig+0x124>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00b      	beq.n	8007844 <TIM_Base_SetConfig+0xf8>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a11      	ldr	r2, [pc, #68]	; (8007874 <TIM_Base_SetConfig+0x128>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d007      	beq.n	8007844 <TIM_Base_SetConfig+0xf8>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a10      	ldr	r2, [pc, #64]	; (8007878 <TIM_Base_SetConfig+0x12c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d003      	beq.n	8007844 <TIM_Base_SetConfig+0xf8>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a0f      	ldr	r2, [pc, #60]	; (800787c <TIM_Base_SetConfig+0x130>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d103      	bne.n	800784c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	615a      	str	r2, [r3, #20]
}
 8007852:	bf00      	nop
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40012c00 	.word	0x40012c00
 8007864:	40000400 	.word	0x40000400
 8007868:	40000800 	.word	0x40000800
 800786c:	40000c00 	.word	0x40000c00
 8007870:	40013400 	.word	0x40013400
 8007874:	40014000 	.word	0x40014000
 8007878:	40014400 	.word	0x40014400
 800787c:	40014800 	.word	0x40014800

08007880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0201 	bic.w	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f023 0303 	bic.w	r3, r3, #3
 80078ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f023 0302 	bic.w	r3, r3, #2
 80078cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a2c      	ldr	r2, [pc, #176]	; (800798c <TIM_OC1_SetConfig+0x10c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d00f      	beq.n	8007900 <TIM_OC1_SetConfig+0x80>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a2b      	ldr	r2, [pc, #172]	; (8007990 <TIM_OC1_SetConfig+0x110>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00b      	beq.n	8007900 <TIM_OC1_SetConfig+0x80>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a2a      	ldr	r2, [pc, #168]	; (8007994 <TIM_OC1_SetConfig+0x114>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d007      	beq.n	8007900 <TIM_OC1_SetConfig+0x80>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a29      	ldr	r2, [pc, #164]	; (8007998 <TIM_OC1_SetConfig+0x118>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_OC1_SetConfig+0x80>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a28      	ldr	r2, [pc, #160]	; (800799c <TIM_OC1_SetConfig+0x11c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d10c      	bne.n	800791a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f023 0308 	bic.w	r3, r3, #8
 8007906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0304 	bic.w	r3, r3, #4
 8007918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a1b      	ldr	r2, [pc, #108]	; (800798c <TIM_OC1_SetConfig+0x10c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00f      	beq.n	8007942 <TIM_OC1_SetConfig+0xc2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <TIM_OC1_SetConfig+0x110>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00b      	beq.n	8007942 <TIM_OC1_SetConfig+0xc2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <TIM_OC1_SetConfig+0x114>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_OC1_SetConfig+0xc2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a18      	ldr	r2, [pc, #96]	; (8007998 <TIM_OC1_SetConfig+0x118>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_OC1_SetConfig+0xc2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a17      	ldr	r2, [pc, #92]	; (800799c <TIM_OC1_SetConfig+0x11c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d111      	bne.n	8007966 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	621a      	str	r2, [r3, #32]
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	40012c00 	.word	0x40012c00
 8007990:	40013400 	.word	0x40013400
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400
 800799c:	40014800 	.word	0x40014800

080079a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	f023 0210 	bic.w	r2, r3, #16
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0320 	bic.w	r3, r3, #32
 80079ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a28      	ldr	r2, [pc, #160]	; (8007aa0 <TIM_OC2_SetConfig+0x100>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_OC2_SetConfig+0x6c>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <TIM_OC2_SetConfig+0x104>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d10d      	bne.n	8007a28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <TIM_OC2_SetConfig+0x100>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00f      	beq.n	8007a50 <TIM_OC2_SetConfig+0xb0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1c      	ldr	r2, [pc, #112]	; (8007aa4 <TIM_OC2_SetConfig+0x104>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_OC2_SetConfig+0xb0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <TIM_OC2_SetConfig+0x108>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_OC2_SetConfig+0xb0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1a      	ldr	r2, [pc, #104]	; (8007aac <TIM_OC2_SetConfig+0x10c>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_OC2_SetConfig+0xb0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <TIM_OC2_SetConfig+0x110>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d113      	bne.n	8007a78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	40012c00 	.word	0x40012c00
 8007aa4:	40013400 	.word	0x40013400
 8007aa8:	40014000 	.word	0x40014000
 8007aac:	40014400 	.word	0x40014400
 8007ab0:	40014800 	.word	0x40014800

08007ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a27      	ldr	r2, [pc, #156]	; (8007bb0 <TIM_OC3_SetConfig+0xfc>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_OC3_SetConfig+0x6a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a26      	ldr	r2, [pc, #152]	; (8007bb4 <TIM_OC3_SetConfig+0x100>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d10d      	bne.n	8007b3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	021b      	lsls	r3, r3, #8
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <TIM_OC3_SetConfig+0xfc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00f      	beq.n	8007b62 <TIM_OC3_SetConfig+0xae>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1b      	ldr	r2, [pc, #108]	; (8007bb4 <TIM_OC3_SetConfig+0x100>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00b      	beq.n	8007b62 <TIM_OC3_SetConfig+0xae>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1a      	ldr	r2, [pc, #104]	; (8007bb8 <TIM_OC3_SetConfig+0x104>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d007      	beq.n	8007b62 <TIM_OC3_SetConfig+0xae>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a19      	ldr	r2, [pc, #100]	; (8007bbc <TIM_OC3_SetConfig+0x108>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d003      	beq.n	8007b62 <TIM_OC3_SetConfig+0xae>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a18      	ldr	r2, [pc, #96]	; (8007bc0 <TIM_OC3_SetConfig+0x10c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d113      	bne.n	8007b8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	621a      	str	r2, [r3, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	40012c00 	.word	0x40012c00
 8007bb4:	40013400 	.word	0x40013400
 8007bb8:	40014000 	.word	0x40014000
 8007bbc:	40014400 	.word	0x40014400
 8007bc0:	40014800 	.word	0x40014800

08007bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
 8007bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	031b      	lsls	r3, r3, #12
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_OC4_SetConfig+0xc0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00f      	beq.n	8007c48 <TIM_OC4_SetConfig+0x84>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC4_SetConfig+0xc4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00b      	beq.n	8007c48 <TIM_OC4_SetConfig+0x84>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <TIM_OC4_SetConfig+0xc8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d007      	beq.n	8007c48 <TIM_OC4_SetConfig+0x84>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <TIM_OC4_SetConfig+0xcc>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_OC4_SetConfig+0x84>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <TIM_OC4_SetConfig+0xd0>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d109      	bne.n	8007c5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	019b      	lsls	r3, r3, #6
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	693a      	ldr	r2, [r7, #16]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40012c00 	.word	0x40012c00
 8007c88:	40013400 	.word	0x40013400
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40014400 	.word	0x40014400
 8007c94:	40014800 	.word	0x40014800

08007c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007cdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a17      	ldr	r2, [pc, #92]	; (8007d4c <TIM_OC5_SetConfig+0xb4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00f      	beq.n	8007d12 <TIM_OC5_SetConfig+0x7a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a16      	ldr	r2, [pc, #88]	; (8007d50 <TIM_OC5_SetConfig+0xb8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00b      	beq.n	8007d12 <TIM_OC5_SetConfig+0x7a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <TIM_OC5_SetConfig+0xbc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d007      	beq.n	8007d12 <TIM_OC5_SetConfig+0x7a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <TIM_OC5_SetConfig+0xc0>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d003      	beq.n	8007d12 <TIM_OC5_SetConfig+0x7a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <TIM_OC5_SetConfig+0xc4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d109      	bne.n	8007d26 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	621a      	str	r2, [r3, #32]
}
 8007d40:	bf00      	nop
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800

08007d60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	051b      	lsls	r3, r3, #20
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <TIM_OC6_SetConfig+0xb8>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00f      	beq.n	8007ddc <TIM_OC6_SetConfig+0x7c>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <TIM_OC6_SetConfig+0xbc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00b      	beq.n	8007ddc <TIM_OC6_SetConfig+0x7c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a16      	ldr	r2, [pc, #88]	; (8007e20 <TIM_OC6_SetConfig+0xc0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d007      	beq.n	8007ddc <TIM_OC6_SetConfig+0x7c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a15      	ldr	r2, [pc, #84]	; (8007e24 <TIM_OC6_SetConfig+0xc4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d003      	beq.n	8007ddc <TIM_OC6_SetConfig+0x7c>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <TIM_OC6_SetConfig+0xc8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d109      	bne.n	8007df0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	029b      	lsls	r3, r3, #10
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	621a      	str	r2, [r3, #32]
}
 8007e0a:	bf00      	nop
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40013400 	.word	0x40013400
 8007e20:	40014000 	.word	0x40014000
 8007e24:	40014400 	.word	0x40014400
 8007e28:	40014800 	.word	0x40014800

08007e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 031f 	and.w	r3, r3, #31
 8007e3e:	2201      	movs	r2, #1
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1a      	ldr	r2, [r3, #32]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	43db      	mvns	r3, r3
 8007e4e:	401a      	ands	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a1a      	ldr	r2, [r3, #32]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	fa01 f303 	lsl.w	r3, r1, r3
 8007e64:	431a      	orrs	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	621a      	str	r2, [r3, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e068      	b.n	8007f62 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a2e      	ldr	r2, [pc, #184]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d004      	beq.n	8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a2d      	ldr	r2, [pc, #180]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d108      	bne.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007eca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1e      	ldr	r2, [pc, #120]	; (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d01d      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f02:	d018      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d013      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1a      	ldr	r2, [pc, #104]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d00e      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a18      	ldr	r2, [pc, #96]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a13      	ldr	r2, [pc, #76]	; (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a14      	ldr	r2, [pc, #80]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d10c      	bne.n	8007f50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40012c00 	.word	0x40012c00
 8007f74:	40013400 	.word	0x40013400
 8007f78:	40000400 	.word	0x40000400
 8007f7c:	40000800 	.word	0x40000800
 8007f80:	40000c00 	.word	0x40000c00
 8007f84:	40014000 	.word	0x40014000

08007f88 <__errno>:
 8007f88:	4b01      	ldr	r3, [pc, #4]	; (8007f90 <__errno+0x8>)
 8007f8a:	6818      	ldr	r0, [r3, #0]
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	20000040 	.word	0x20000040

08007f94 <__libc_init_array>:
 8007f94:	b570      	push	{r4, r5, r6, lr}
 8007f96:	4e0d      	ldr	r6, [pc, #52]	; (8007fcc <__libc_init_array+0x38>)
 8007f98:	4c0d      	ldr	r4, [pc, #52]	; (8007fd0 <__libc_init_array+0x3c>)
 8007f9a:	1ba4      	subs	r4, r4, r6
 8007f9c:	10a4      	asrs	r4, r4, #2
 8007f9e:	2500      	movs	r5, #0
 8007fa0:	42a5      	cmp	r5, r4
 8007fa2:	d109      	bne.n	8007fb8 <__libc_init_array+0x24>
 8007fa4:	4e0b      	ldr	r6, [pc, #44]	; (8007fd4 <__libc_init_array+0x40>)
 8007fa6:	4c0c      	ldr	r4, [pc, #48]	; (8007fd8 <__libc_init_array+0x44>)
 8007fa8:	f001 fa80 	bl	80094ac <_init>
 8007fac:	1ba4      	subs	r4, r4, r6
 8007fae:	10a4      	asrs	r4, r4, #2
 8007fb0:	2500      	movs	r5, #0
 8007fb2:	42a5      	cmp	r5, r4
 8007fb4:	d105      	bne.n	8007fc2 <__libc_init_array+0x2e>
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fbc:	4798      	blx	r3
 8007fbe:	3501      	adds	r5, #1
 8007fc0:	e7ee      	b.n	8007fa0 <__libc_init_array+0xc>
 8007fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fc6:	4798      	blx	r3
 8007fc8:	3501      	adds	r5, #1
 8007fca:	e7f2      	b.n	8007fb2 <__libc_init_array+0x1e>
 8007fcc:	0800a534 	.word	0x0800a534
 8007fd0:	0800a534 	.word	0x0800a534
 8007fd4:	0800a534 	.word	0x0800a534
 8007fd8:	0800a538 	.word	0x0800a538

08007fdc <memcpy>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	1e43      	subs	r3, r0, #1
 8007fe0:	440a      	add	r2, r1
 8007fe2:	4291      	cmp	r1, r2
 8007fe4:	d100      	bne.n	8007fe8 <memcpy+0xc>
 8007fe6:	bd10      	pop	{r4, pc}
 8007fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ff0:	e7f7      	b.n	8007fe2 <memcpy+0x6>

08007ff2 <memset>:
 8007ff2:	4402      	add	r2, r0
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d100      	bne.n	8007ffc <memset+0xa>
 8007ffa:	4770      	bx	lr
 8007ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8008000:	e7f9      	b.n	8007ff6 <memset+0x4>
	...

08008004 <siprintf>:
 8008004:	b40e      	push	{r1, r2, r3}
 8008006:	b500      	push	{lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ab1d      	add	r3, sp, #116	; 0x74
 800800c:	9002      	str	r0, [sp, #8]
 800800e:	9006      	str	r0, [sp, #24]
 8008010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008014:	4809      	ldr	r0, [pc, #36]	; (800803c <siprintf+0x38>)
 8008016:	9107      	str	r1, [sp, #28]
 8008018:	9104      	str	r1, [sp, #16]
 800801a:	4909      	ldr	r1, [pc, #36]	; (8008040 <siprintf+0x3c>)
 800801c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008020:	9105      	str	r1, [sp, #20]
 8008022:	6800      	ldr	r0, [r0, #0]
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	a902      	add	r1, sp, #8
 8008028:	f000 f866 	bl	80080f8 <_svfiprintf_r>
 800802c:	9b02      	ldr	r3, [sp, #8]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	b01c      	add	sp, #112	; 0x70
 8008034:	f85d eb04 	ldr.w	lr, [sp], #4
 8008038:	b003      	add	sp, #12
 800803a:	4770      	bx	lr
 800803c:	20000040 	.word	0x20000040
 8008040:	ffff0208 	.word	0xffff0208

08008044 <__ssputs_r>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	688e      	ldr	r6, [r1, #8]
 800804a:	429e      	cmp	r6, r3
 800804c:	4682      	mov	sl, r0
 800804e:	460c      	mov	r4, r1
 8008050:	4690      	mov	r8, r2
 8008052:	4699      	mov	r9, r3
 8008054:	d837      	bhi.n	80080c6 <__ssputs_r+0x82>
 8008056:	898a      	ldrh	r2, [r1, #12]
 8008058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800805c:	d031      	beq.n	80080c2 <__ssputs_r+0x7e>
 800805e:	6825      	ldr	r5, [r4, #0]
 8008060:	6909      	ldr	r1, [r1, #16]
 8008062:	1a6f      	subs	r7, r5, r1
 8008064:	6965      	ldr	r5, [r4, #20]
 8008066:	2302      	movs	r3, #2
 8008068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800806c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008070:	f109 0301 	add.w	r3, r9, #1
 8008074:	443b      	add	r3, r7
 8008076:	429d      	cmp	r5, r3
 8008078:	bf38      	it	cc
 800807a:	461d      	movcc	r5, r3
 800807c:	0553      	lsls	r3, r2, #21
 800807e:	d530      	bpl.n	80080e2 <__ssputs_r+0x9e>
 8008080:	4629      	mov	r1, r5
 8008082:	f000 fb21 	bl	80086c8 <_malloc_r>
 8008086:	4606      	mov	r6, r0
 8008088:	b950      	cbnz	r0, 80080a0 <__ssputs_r+0x5c>
 800808a:	230c      	movs	r3, #12
 800808c:	f8ca 3000 	str.w	r3, [sl]
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a0:	463a      	mov	r2, r7
 80080a2:	6921      	ldr	r1, [r4, #16]
 80080a4:	f7ff ff9a 	bl	8007fdc <memcpy>
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b2:	81a3      	strh	r3, [r4, #12]
 80080b4:	6126      	str	r6, [r4, #16]
 80080b6:	6165      	str	r5, [r4, #20]
 80080b8:	443e      	add	r6, r7
 80080ba:	1bed      	subs	r5, r5, r7
 80080bc:	6026      	str	r6, [r4, #0]
 80080be:	60a5      	str	r5, [r4, #8]
 80080c0:	464e      	mov	r6, r9
 80080c2:	454e      	cmp	r6, r9
 80080c4:	d900      	bls.n	80080c8 <__ssputs_r+0x84>
 80080c6:	464e      	mov	r6, r9
 80080c8:	4632      	mov	r2, r6
 80080ca:	4641      	mov	r1, r8
 80080cc:	6820      	ldr	r0, [r4, #0]
 80080ce:	f000 fa93 	bl	80085f8 <memmove>
 80080d2:	68a3      	ldr	r3, [r4, #8]
 80080d4:	1b9b      	subs	r3, r3, r6
 80080d6:	60a3      	str	r3, [r4, #8]
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	441e      	add	r6, r3
 80080dc:	6026      	str	r6, [r4, #0]
 80080de:	2000      	movs	r0, #0
 80080e0:	e7dc      	b.n	800809c <__ssputs_r+0x58>
 80080e2:	462a      	mov	r2, r5
 80080e4:	f000 fb4a 	bl	800877c <_realloc_r>
 80080e8:	4606      	mov	r6, r0
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d1e2      	bne.n	80080b4 <__ssputs_r+0x70>
 80080ee:	6921      	ldr	r1, [r4, #16]
 80080f0:	4650      	mov	r0, sl
 80080f2:	f000 fa9b 	bl	800862c <_free_r>
 80080f6:	e7c8      	b.n	800808a <__ssputs_r+0x46>

080080f8 <_svfiprintf_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	461d      	mov	r5, r3
 80080fe:	898b      	ldrh	r3, [r1, #12]
 8008100:	061f      	lsls	r7, r3, #24
 8008102:	b09d      	sub	sp, #116	; 0x74
 8008104:	4680      	mov	r8, r0
 8008106:	460c      	mov	r4, r1
 8008108:	4616      	mov	r6, r2
 800810a:	d50f      	bpl.n	800812c <_svfiprintf_r+0x34>
 800810c:	690b      	ldr	r3, [r1, #16]
 800810e:	b96b      	cbnz	r3, 800812c <_svfiprintf_r+0x34>
 8008110:	2140      	movs	r1, #64	; 0x40
 8008112:	f000 fad9 	bl	80086c8 <_malloc_r>
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	6120      	str	r0, [r4, #16]
 800811a:	b928      	cbnz	r0, 8008128 <_svfiprintf_r+0x30>
 800811c:	230c      	movs	r3, #12
 800811e:	f8c8 3000 	str.w	r3, [r8]
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	e0c8      	b.n	80082ba <_svfiprintf_r+0x1c2>
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	6163      	str	r3, [r4, #20]
 800812c:	2300      	movs	r3, #0
 800812e:	9309      	str	r3, [sp, #36]	; 0x24
 8008130:	2320      	movs	r3, #32
 8008132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008136:	2330      	movs	r3, #48	; 0x30
 8008138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800813c:	9503      	str	r5, [sp, #12]
 800813e:	f04f 0b01 	mov.w	fp, #1
 8008142:	4637      	mov	r7, r6
 8008144:	463d      	mov	r5, r7
 8008146:	f815 3b01 	ldrb.w	r3, [r5], #1
 800814a:	b10b      	cbz	r3, 8008150 <_svfiprintf_r+0x58>
 800814c:	2b25      	cmp	r3, #37	; 0x25
 800814e:	d13e      	bne.n	80081ce <_svfiprintf_r+0xd6>
 8008150:	ebb7 0a06 	subs.w	sl, r7, r6
 8008154:	d00b      	beq.n	800816e <_svfiprintf_r+0x76>
 8008156:	4653      	mov	r3, sl
 8008158:	4632      	mov	r2, r6
 800815a:	4621      	mov	r1, r4
 800815c:	4640      	mov	r0, r8
 800815e:	f7ff ff71 	bl	8008044 <__ssputs_r>
 8008162:	3001      	adds	r0, #1
 8008164:	f000 80a4 	beq.w	80082b0 <_svfiprintf_r+0x1b8>
 8008168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816a:	4453      	add	r3, sl
 800816c:	9309      	str	r3, [sp, #36]	; 0x24
 800816e:	783b      	ldrb	r3, [r7, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 809d 	beq.w	80082b0 <_svfiprintf_r+0x1b8>
 8008176:	2300      	movs	r3, #0
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	9307      	str	r3, [sp, #28]
 8008184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008188:	931a      	str	r3, [sp, #104]	; 0x68
 800818a:	462f      	mov	r7, r5
 800818c:	2205      	movs	r2, #5
 800818e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008192:	4850      	ldr	r0, [pc, #320]	; (80082d4 <_svfiprintf_r+0x1dc>)
 8008194:	f7f8 f824 	bl	80001e0 <memchr>
 8008198:	9b04      	ldr	r3, [sp, #16]
 800819a:	b9d0      	cbnz	r0, 80081d2 <_svfiprintf_r+0xda>
 800819c:	06d9      	lsls	r1, r3, #27
 800819e:	bf44      	itt	mi
 80081a0:	2220      	movmi	r2, #32
 80081a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081a6:	071a      	lsls	r2, r3, #28
 80081a8:	bf44      	itt	mi
 80081aa:	222b      	movmi	r2, #43	; 0x2b
 80081ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80081b0:	782a      	ldrb	r2, [r5, #0]
 80081b2:	2a2a      	cmp	r2, #42	; 0x2a
 80081b4:	d015      	beq.n	80081e2 <_svfiprintf_r+0xea>
 80081b6:	9a07      	ldr	r2, [sp, #28]
 80081b8:	462f      	mov	r7, r5
 80081ba:	2000      	movs	r0, #0
 80081bc:	250a      	movs	r5, #10
 80081be:	4639      	mov	r1, r7
 80081c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081c4:	3b30      	subs	r3, #48	; 0x30
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	d94d      	bls.n	8008266 <_svfiprintf_r+0x16e>
 80081ca:	b1b8      	cbz	r0, 80081fc <_svfiprintf_r+0x104>
 80081cc:	e00f      	b.n	80081ee <_svfiprintf_r+0xf6>
 80081ce:	462f      	mov	r7, r5
 80081d0:	e7b8      	b.n	8008144 <_svfiprintf_r+0x4c>
 80081d2:	4a40      	ldr	r2, [pc, #256]	; (80082d4 <_svfiprintf_r+0x1dc>)
 80081d4:	1a80      	subs	r0, r0, r2
 80081d6:	fa0b f000 	lsl.w	r0, fp, r0
 80081da:	4318      	orrs	r0, r3
 80081dc:	9004      	str	r0, [sp, #16]
 80081de:	463d      	mov	r5, r7
 80081e0:	e7d3      	b.n	800818a <_svfiprintf_r+0x92>
 80081e2:	9a03      	ldr	r2, [sp, #12]
 80081e4:	1d11      	adds	r1, r2, #4
 80081e6:	6812      	ldr	r2, [r2, #0]
 80081e8:	9103      	str	r1, [sp, #12]
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	db01      	blt.n	80081f2 <_svfiprintf_r+0xfa>
 80081ee:	9207      	str	r2, [sp, #28]
 80081f0:	e004      	b.n	80081fc <_svfiprintf_r+0x104>
 80081f2:	4252      	negs	r2, r2
 80081f4:	f043 0302 	orr.w	r3, r3, #2
 80081f8:	9207      	str	r2, [sp, #28]
 80081fa:	9304      	str	r3, [sp, #16]
 80081fc:	783b      	ldrb	r3, [r7, #0]
 80081fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008200:	d10c      	bne.n	800821c <_svfiprintf_r+0x124>
 8008202:	787b      	ldrb	r3, [r7, #1]
 8008204:	2b2a      	cmp	r3, #42	; 0x2a
 8008206:	d133      	bne.n	8008270 <_svfiprintf_r+0x178>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	1d1a      	adds	r2, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	9203      	str	r2, [sp, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfb8      	it	lt
 8008214:	f04f 33ff 	movlt.w	r3, #4294967295
 8008218:	3702      	adds	r7, #2
 800821a:	9305      	str	r3, [sp, #20]
 800821c:	4d2e      	ldr	r5, [pc, #184]	; (80082d8 <_svfiprintf_r+0x1e0>)
 800821e:	7839      	ldrb	r1, [r7, #0]
 8008220:	2203      	movs	r2, #3
 8008222:	4628      	mov	r0, r5
 8008224:	f7f7 ffdc 	bl	80001e0 <memchr>
 8008228:	b138      	cbz	r0, 800823a <_svfiprintf_r+0x142>
 800822a:	2340      	movs	r3, #64	; 0x40
 800822c:	1b40      	subs	r0, r0, r5
 800822e:	fa03 f000 	lsl.w	r0, r3, r0
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	4303      	orrs	r3, r0
 8008236:	3701      	adds	r7, #1
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	7839      	ldrb	r1, [r7, #0]
 800823c:	4827      	ldr	r0, [pc, #156]	; (80082dc <_svfiprintf_r+0x1e4>)
 800823e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008242:	2206      	movs	r2, #6
 8008244:	1c7e      	adds	r6, r7, #1
 8008246:	f7f7 ffcb 	bl	80001e0 <memchr>
 800824a:	2800      	cmp	r0, #0
 800824c:	d038      	beq.n	80082c0 <_svfiprintf_r+0x1c8>
 800824e:	4b24      	ldr	r3, [pc, #144]	; (80082e0 <_svfiprintf_r+0x1e8>)
 8008250:	bb13      	cbnz	r3, 8008298 <_svfiprintf_r+0x1a0>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	3307      	adds	r3, #7
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	3308      	adds	r3, #8
 800825c:	9303      	str	r3, [sp, #12]
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008260:	444b      	add	r3, r9
 8008262:	9309      	str	r3, [sp, #36]	; 0x24
 8008264:	e76d      	b.n	8008142 <_svfiprintf_r+0x4a>
 8008266:	fb05 3202 	mla	r2, r5, r2, r3
 800826a:	2001      	movs	r0, #1
 800826c:	460f      	mov	r7, r1
 800826e:	e7a6      	b.n	80081be <_svfiprintf_r+0xc6>
 8008270:	2300      	movs	r3, #0
 8008272:	3701      	adds	r7, #1
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	4619      	mov	r1, r3
 8008278:	250a      	movs	r5, #10
 800827a:	4638      	mov	r0, r7
 800827c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008280:	3a30      	subs	r2, #48	; 0x30
 8008282:	2a09      	cmp	r2, #9
 8008284:	d903      	bls.n	800828e <_svfiprintf_r+0x196>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0c8      	beq.n	800821c <_svfiprintf_r+0x124>
 800828a:	9105      	str	r1, [sp, #20]
 800828c:	e7c6      	b.n	800821c <_svfiprintf_r+0x124>
 800828e:	fb05 2101 	mla	r1, r5, r1, r2
 8008292:	2301      	movs	r3, #1
 8008294:	4607      	mov	r7, r0
 8008296:	e7f0      	b.n	800827a <_svfiprintf_r+0x182>
 8008298:	ab03      	add	r3, sp, #12
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	4622      	mov	r2, r4
 800829e:	4b11      	ldr	r3, [pc, #68]	; (80082e4 <_svfiprintf_r+0x1ec>)
 80082a0:	a904      	add	r1, sp, #16
 80082a2:	4640      	mov	r0, r8
 80082a4:	f3af 8000 	nop.w
 80082a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082ac:	4681      	mov	r9, r0
 80082ae:	d1d6      	bne.n	800825e <_svfiprintf_r+0x166>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	065b      	lsls	r3, r3, #25
 80082b4:	f53f af35 	bmi.w	8008122 <_svfiprintf_r+0x2a>
 80082b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ba:	b01d      	add	sp, #116	; 0x74
 80082bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	ab03      	add	r3, sp, #12
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4622      	mov	r2, r4
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <_svfiprintf_r+0x1ec>)
 80082c8:	a904      	add	r1, sp, #16
 80082ca:	4640      	mov	r0, r8
 80082cc:	f000 f882 	bl	80083d4 <_printf_i>
 80082d0:	e7ea      	b.n	80082a8 <_svfiprintf_r+0x1b0>
 80082d2:	bf00      	nop
 80082d4:	0800a12c 	.word	0x0800a12c
 80082d8:	0800a132 	.word	0x0800a132
 80082dc:	0800a136 	.word	0x0800a136
 80082e0:	00000000 	.word	0x00000000
 80082e4:	08008045 	.word	0x08008045

080082e8 <_printf_common>:
 80082e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ec:	4691      	mov	r9, r2
 80082ee:	461f      	mov	r7, r3
 80082f0:	688a      	ldr	r2, [r1, #8]
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082f8:	4293      	cmp	r3, r2
 80082fa:	bfb8      	it	lt
 80082fc:	4613      	movlt	r3, r2
 80082fe:	f8c9 3000 	str.w	r3, [r9]
 8008302:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008306:	4606      	mov	r6, r0
 8008308:	460c      	mov	r4, r1
 800830a:	b112      	cbz	r2, 8008312 <_printf_common+0x2a>
 800830c:	3301      	adds	r3, #1
 800830e:	f8c9 3000 	str.w	r3, [r9]
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	0699      	lsls	r1, r3, #26
 8008316:	bf42      	ittt	mi
 8008318:	f8d9 3000 	ldrmi.w	r3, [r9]
 800831c:	3302      	addmi	r3, #2
 800831e:	f8c9 3000 	strmi.w	r3, [r9]
 8008322:	6825      	ldr	r5, [r4, #0]
 8008324:	f015 0506 	ands.w	r5, r5, #6
 8008328:	d107      	bne.n	800833a <_printf_common+0x52>
 800832a:	f104 0a19 	add.w	sl, r4, #25
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	f8d9 2000 	ldr.w	r2, [r9]
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	42ab      	cmp	r3, r5
 8008338:	dc28      	bgt.n	800838c <_printf_common+0xa4>
 800833a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800833e:	6822      	ldr	r2, [r4, #0]
 8008340:	3300      	adds	r3, #0
 8008342:	bf18      	it	ne
 8008344:	2301      	movne	r3, #1
 8008346:	0692      	lsls	r2, r2, #26
 8008348:	d42d      	bmi.n	80083a6 <_printf_common+0xbe>
 800834a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800834e:	4639      	mov	r1, r7
 8008350:	4630      	mov	r0, r6
 8008352:	47c0      	blx	r8
 8008354:	3001      	adds	r0, #1
 8008356:	d020      	beq.n	800839a <_printf_common+0xb2>
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	68e5      	ldr	r5, [r4, #12]
 800835c:	f8d9 2000 	ldr.w	r2, [r9]
 8008360:	f003 0306 	and.w	r3, r3, #6
 8008364:	2b04      	cmp	r3, #4
 8008366:	bf08      	it	eq
 8008368:	1aad      	subeq	r5, r5, r2
 800836a:	68a3      	ldr	r3, [r4, #8]
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	bf0c      	ite	eq
 8008370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008374:	2500      	movne	r5, #0
 8008376:	4293      	cmp	r3, r2
 8008378:	bfc4      	itt	gt
 800837a:	1a9b      	subgt	r3, r3, r2
 800837c:	18ed      	addgt	r5, r5, r3
 800837e:	f04f 0900 	mov.w	r9, #0
 8008382:	341a      	adds	r4, #26
 8008384:	454d      	cmp	r5, r9
 8008386:	d11a      	bne.n	80083be <_printf_common+0xd6>
 8008388:	2000      	movs	r0, #0
 800838a:	e008      	b.n	800839e <_printf_common+0xb6>
 800838c:	2301      	movs	r3, #1
 800838e:	4652      	mov	r2, sl
 8008390:	4639      	mov	r1, r7
 8008392:	4630      	mov	r0, r6
 8008394:	47c0      	blx	r8
 8008396:	3001      	adds	r0, #1
 8008398:	d103      	bne.n	80083a2 <_printf_common+0xba>
 800839a:	f04f 30ff 	mov.w	r0, #4294967295
 800839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a2:	3501      	adds	r5, #1
 80083a4:	e7c3      	b.n	800832e <_printf_common+0x46>
 80083a6:	18e1      	adds	r1, r4, r3
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	2030      	movs	r0, #48	; 0x30
 80083ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083b0:	4422      	add	r2, r4
 80083b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083ba:	3302      	adds	r3, #2
 80083bc:	e7c5      	b.n	800834a <_printf_common+0x62>
 80083be:	2301      	movs	r3, #1
 80083c0:	4622      	mov	r2, r4
 80083c2:	4639      	mov	r1, r7
 80083c4:	4630      	mov	r0, r6
 80083c6:	47c0      	blx	r8
 80083c8:	3001      	adds	r0, #1
 80083ca:	d0e6      	beq.n	800839a <_printf_common+0xb2>
 80083cc:	f109 0901 	add.w	r9, r9, #1
 80083d0:	e7d8      	b.n	8008384 <_printf_common+0x9c>
	...

080083d4 <_printf_i>:
 80083d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80083dc:	460c      	mov	r4, r1
 80083de:	7e09      	ldrb	r1, [r1, #24]
 80083e0:	b085      	sub	sp, #20
 80083e2:	296e      	cmp	r1, #110	; 0x6e
 80083e4:	4617      	mov	r7, r2
 80083e6:	4606      	mov	r6, r0
 80083e8:	4698      	mov	r8, r3
 80083ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083ec:	f000 80b3 	beq.w	8008556 <_printf_i+0x182>
 80083f0:	d822      	bhi.n	8008438 <_printf_i+0x64>
 80083f2:	2963      	cmp	r1, #99	; 0x63
 80083f4:	d036      	beq.n	8008464 <_printf_i+0x90>
 80083f6:	d80a      	bhi.n	800840e <_printf_i+0x3a>
 80083f8:	2900      	cmp	r1, #0
 80083fa:	f000 80b9 	beq.w	8008570 <_printf_i+0x19c>
 80083fe:	2958      	cmp	r1, #88	; 0x58
 8008400:	f000 8083 	beq.w	800850a <_printf_i+0x136>
 8008404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008408:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800840c:	e032      	b.n	8008474 <_printf_i+0xa0>
 800840e:	2964      	cmp	r1, #100	; 0x64
 8008410:	d001      	beq.n	8008416 <_printf_i+0x42>
 8008412:	2969      	cmp	r1, #105	; 0x69
 8008414:	d1f6      	bne.n	8008404 <_printf_i+0x30>
 8008416:	6820      	ldr	r0, [r4, #0]
 8008418:	6813      	ldr	r3, [r2, #0]
 800841a:	0605      	lsls	r5, r0, #24
 800841c:	f103 0104 	add.w	r1, r3, #4
 8008420:	d52a      	bpl.n	8008478 <_printf_i+0xa4>
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6011      	str	r1, [r2, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	da03      	bge.n	8008432 <_printf_i+0x5e>
 800842a:	222d      	movs	r2, #45	; 0x2d
 800842c:	425b      	negs	r3, r3
 800842e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008432:	486f      	ldr	r0, [pc, #444]	; (80085f0 <_printf_i+0x21c>)
 8008434:	220a      	movs	r2, #10
 8008436:	e039      	b.n	80084ac <_printf_i+0xd8>
 8008438:	2973      	cmp	r1, #115	; 0x73
 800843a:	f000 809d 	beq.w	8008578 <_printf_i+0x1a4>
 800843e:	d808      	bhi.n	8008452 <_printf_i+0x7e>
 8008440:	296f      	cmp	r1, #111	; 0x6f
 8008442:	d020      	beq.n	8008486 <_printf_i+0xb2>
 8008444:	2970      	cmp	r1, #112	; 0x70
 8008446:	d1dd      	bne.n	8008404 <_printf_i+0x30>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f043 0320 	orr.w	r3, r3, #32
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	e003      	b.n	800845a <_printf_i+0x86>
 8008452:	2975      	cmp	r1, #117	; 0x75
 8008454:	d017      	beq.n	8008486 <_printf_i+0xb2>
 8008456:	2978      	cmp	r1, #120	; 0x78
 8008458:	d1d4      	bne.n	8008404 <_printf_i+0x30>
 800845a:	2378      	movs	r3, #120	; 0x78
 800845c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008460:	4864      	ldr	r0, [pc, #400]	; (80085f4 <_printf_i+0x220>)
 8008462:	e055      	b.n	8008510 <_printf_i+0x13c>
 8008464:	6813      	ldr	r3, [r2, #0]
 8008466:	1d19      	adds	r1, r3, #4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6011      	str	r1, [r2, #0]
 800846c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008474:	2301      	movs	r3, #1
 8008476:	e08c      	b.n	8008592 <_printf_i+0x1be>
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6011      	str	r1, [r2, #0]
 800847c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008480:	bf18      	it	ne
 8008482:	b21b      	sxthne	r3, r3
 8008484:	e7cf      	b.n	8008426 <_printf_i+0x52>
 8008486:	6813      	ldr	r3, [r2, #0]
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	1d18      	adds	r0, r3, #4
 800848c:	6010      	str	r0, [r2, #0]
 800848e:	0628      	lsls	r0, r5, #24
 8008490:	d501      	bpl.n	8008496 <_printf_i+0xc2>
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	e002      	b.n	800849c <_printf_i+0xc8>
 8008496:	0668      	lsls	r0, r5, #25
 8008498:	d5fb      	bpl.n	8008492 <_printf_i+0xbe>
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	4854      	ldr	r0, [pc, #336]	; (80085f0 <_printf_i+0x21c>)
 800849e:	296f      	cmp	r1, #111	; 0x6f
 80084a0:	bf14      	ite	ne
 80084a2:	220a      	movne	r2, #10
 80084a4:	2208      	moveq	r2, #8
 80084a6:	2100      	movs	r1, #0
 80084a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ac:	6865      	ldr	r5, [r4, #4]
 80084ae:	60a5      	str	r5, [r4, #8]
 80084b0:	2d00      	cmp	r5, #0
 80084b2:	f2c0 8095 	blt.w	80085e0 <_printf_i+0x20c>
 80084b6:	6821      	ldr	r1, [r4, #0]
 80084b8:	f021 0104 	bic.w	r1, r1, #4
 80084bc:	6021      	str	r1, [r4, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d13d      	bne.n	800853e <_printf_i+0x16a>
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	f040 808e 	bne.w	80085e4 <_printf_i+0x210>
 80084c8:	4665      	mov	r5, ip
 80084ca:	2a08      	cmp	r2, #8
 80084cc:	d10b      	bne.n	80084e6 <_printf_i+0x112>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	07db      	lsls	r3, r3, #31
 80084d2:	d508      	bpl.n	80084e6 <_printf_i+0x112>
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	6862      	ldr	r2, [r4, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	bfde      	ittt	le
 80084dc:	2330      	movle	r3, #48	; 0x30
 80084de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084e6:	ebac 0305 	sub.w	r3, ip, r5
 80084ea:	6123      	str	r3, [r4, #16]
 80084ec:	f8cd 8000 	str.w	r8, [sp]
 80084f0:	463b      	mov	r3, r7
 80084f2:	aa03      	add	r2, sp, #12
 80084f4:	4621      	mov	r1, r4
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7ff fef6 	bl	80082e8 <_printf_common>
 80084fc:	3001      	adds	r0, #1
 80084fe:	d14d      	bne.n	800859c <_printf_i+0x1c8>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	b005      	add	sp, #20
 8008506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800850a:	4839      	ldr	r0, [pc, #228]	; (80085f0 <_printf_i+0x21c>)
 800850c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008510:	6813      	ldr	r3, [r2, #0]
 8008512:	6821      	ldr	r1, [r4, #0]
 8008514:	1d1d      	adds	r5, r3, #4
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6015      	str	r5, [r2, #0]
 800851a:	060a      	lsls	r2, r1, #24
 800851c:	d50b      	bpl.n	8008536 <_printf_i+0x162>
 800851e:	07ca      	lsls	r2, r1, #31
 8008520:	bf44      	itt	mi
 8008522:	f041 0120 	orrmi.w	r1, r1, #32
 8008526:	6021      	strmi	r1, [r4, #0]
 8008528:	b91b      	cbnz	r3, 8008532 <_printf_i+0x15e>
 800852a:	6822      	ldr	r2, [r4, #0]
 800852c:	f022 0220 	bic.w	r2, r2, #32
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	2210      	movs	r2, #16
 8008534:	e7b7      	b.n	80084a6 <_printf_i+0xd2>
 8008536:	064d      	lsls	r5, r1, #25
 8008538:	bf48      	it	mi
 800853a:	b29b      	uxthmi	r3, r3
 800853c:	e7ef      	b.n	800851e <_printf_i+0x14a>
 800853e:	4665      	mov	r5, ip
 8008540:	fbb3 f1f2 	udiv	r1, r3, r2
 8008544:	fb02 3311 	mls	r3, r2, r1, r3
 8008548:	5cc3      	ldrb	r3, [r0, r3]
 800854a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800854e:	460b      	mov	r3, r1
 8008550:	2900      	cmp	r1, #0
 8008552:	d1f5      	bne.n	8008540 <_printf_i+0x16c>
 8008554:	e7b9      	b.n	80084ca <_printf_i+0xf6>
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	6961      	ldr	r1, [r4, #20]
 800855c:	1d18      	adds	r0, r3, #4
 800855e:	6010      	str	r0, [r2, #0]
 8008560:	0628      	lsls	r0, r5, #24
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	d501      	bpl.n	800856a <_printf_i+0x196>
 8008566:	6019      	str	r1, [r3, #0]
 8008568:	e002      	b.n	8008570 <_printf_i+0x19c>
 800856a:	066a      	lsls	r2, r5, #25
 800856c:	d5fb      	bpl.n	8008566 <_printf_i+0x192>
 800856e:	8019      	strh	r1, [r3, #0]
 8008570:	2300      	movs	r3, #0
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	4665      	mov	r5, ip
 8008576:	e7b9      	b.n	80084ec <_printf_i+0x118>
 8008578:	6813      	ldr	r3, [r2, #0]
 800857a:	1d19      	adds	r1, r3, #4
 800857c:	6011      	str	r1, [r2, #0]
 800857e:	681d      	ldr	r5, [r3, #0]
 8008580:	6862      	ldr	r2, [r4, #4]
 8008582:	2100      	movs	r1, #0
 8008584:	4628      	mov	r0, r5
 8008586:	f7f7 fe2b 	bl	80001e0 <memchr>
 800858a:	b108      	cbz	r0, 8008590 <_printf_i+0x1bc>
 800858c:	1b40      	subs	r0, r0, r5
 800858e:	6060      	str	r0, [r4, #4]
 8008590:	6863      	ldr	r3, [r4, #4]
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	2300      	movs	r3, #0
 8008596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859a:	e7a7      	b.n	80084ec <_printf_i+0x118>
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	462a      	mov	r2, r5
 80085a0:	4639      	mov	r1, r7
 80085a2:	4630      	mov	r0, r6
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d0aa      	beq.n	8008500 <_printf_i+0x12c>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	079b      	lsls	r3, r3, #30
 80085ae:	d413      	bmi.n	80085d8 <_printf_i+0x204>
 80085b0:	68e0      	ldr	r0, [r4, #12]
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	4298      	cmp	r0, r3
 80085b6:	bfb8      	it	lt
 80085b8:	4618      	movlt	r0, r3
 80085ba:	e7a3      	b.n	8008504 <_printf_i+0x130>
 80085bc:	2301      	movs	r3, #1
 80085be:	464a      	mov	r2, r9
 80085c0:	4639      	mov	r1, r7
 80085c2:	4630      	mov	r0, r6
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d09a      	beq.n	8008500 <_printf_i+0x12c>
 80085ca:	3501      	adds	r5, #1
 80085cc:	68e3      	ldr	r3, [r4, #12]
 80085ce:	9a03      	ldr	r2, [sp, #12]
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	42ab      	cmp	r3, r5
 80085d4:	dcf2      	bgt.n	80085bc <_printf_i+0x1e8>
 80085d6:	e7eb      	b.n	80085b0 <_printf_i+0x1dc>
 80085d8:	2500      	movs	r5, #0
 80085da:	f104 0919 	add.w	r9, r4, #25
 80085de:	e7f5      	b.n	80085cc <_printf_i+0x1f8>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1ac      	bne.n	800853e <_printf_i+0x16a>
 80085e4:	7803      	ldrb	r3, [r0, #0]
 80085e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085ee:	e76c      	b.n	80084ca <_printf_i+0xf6>
 80085f0:	0800a13d 	.word	0x0800a13d
 80085f4:	0800a14e 	.word	0x0800a14e

080085f8 <memmove>:
 80085f8:	4288      	cmp	r0, r1
 80085fa:	b510      	push	{r4, lr}
 80085fc:	eb01 0302 	add.w	r3, r1, r2
 8008600:	d807      	bhi.n	8008612 <memmove+0x1a>
 8008602:	1e42      	subs	r2, r0, #1
 8008604:	4299      	cmp	r1, r3
 8008606:	d00a      	beq.n	800861e <memmove+0x26>
 8008608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008610:	e7f8      	b.n	8008604 <memmove+0xc>
 8008612:	4283      	cmp	r3, r0
 8008614:	d9f5      	bls.n	8008602 <memmove+0xa>
 8008616:	1881      	adds	r1, r0, r2
 8008618:	1ad2      	subs	r2, r2, r3
 800861a:	42d3      	cmn	r3, r2
 800861c:	d100      	bne.n	8008620 <memmove+0x28>
 800861e:	bd10      	pop	{r4, pc}
 8008620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008624:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008628:	e7f7      	b.n	800861a <memmove+0x22>
	...

0800862c <_free_r>:
 800862c:	b538      	push	{r3, r4, r5, lr}
 800862e:	4605      	mov	r5, r0
 8008630:	2900      	cmp	r1, #0
 8008632:	d045      	beq.n	80086c0 <_free_r+0x94>
 8008634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008638:	1f0c      	subs	r4, r1, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfb8      	it	lt
 800863e:	18e4      	addlt	r4, r4, r3
 8008640:	f000 f8d2 	bl	80087e8 <__malloc_lock>
 8008644:	4a1f      	ldr	r2, [pc, #124]	; (80086c4 <_free_r+0x98>)
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	4610      	mov	r0, r2
 800864a:	b933      	cbnz	r3, 800865a <_free_r+0x2e>
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	6014      	str	r4, [r2, #0]
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008656:	f000 b8c8 	b.w	80087ea <__malloc_unlock>
 800865a:	42a3      	cmp	r3, r4
 800865c:	d90c      	bls.n	8008678 <_free_r+0x4c>
 800865e:	6821      	ldr	r1, [r4, #0]
 8008660:	1862      	adds	r2, r4, r1
 8008662:	4293      	cmp	r3, r2
 8008664:	bf04      	itt	eq
 8008666:	681a      	ldreq	r2, [r3, #0]
 8008668:	685b      	ldreq	r3, [r3, #4]
 800866a:	6063      	str	r3, [r4, #4]
 800866c:	bf04      	itt	eq
 800866e:	1852      	addeq	r2, r2, r1
 8008670:	6022      	streq	r2, [r4, #0]
 8008672:	6004      	str	r4, [r0, #0]
 8008674:	e7ec      	b.n	8008650 <_free_r+0x24>
 8008676:	4613      	mov	r3, r2
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	b10a      	cbz	r2, 8008680 <_free_r+0x54>
 800867c:	42a2      	cmp	r2, r4
 800867e:	d9fa      	bls.n	8008676 <_free_r+0x4a>
 8008680:	6819      	ldr	r1, [r3, #0]
 8008682:	1858      	adds	r0, r3, r1
 8008684:	42a0      	cmp	r0, r4
 8008686:	d10b      	bne.n	80086a0 <_free_r+0x74>
 8008688:	6820      	ldr	r0, [r4, #0]
 800868a:	4401      	add	r1, r0
 800868c:	1858      	adds	r0, r3, r1
 800868e:	4282      	cmp	r2, r0
 8008690:	6019      	str	r1, [r3, #0]
 8008692:	d1dd      	bne.n	8008650 <_free_r+0x24>
 8008694:	6810      	ldr	r0, [r2, #0]
 8008696:	6852      	ldr	r2, [r2, #4]
 8008698:	605a      	str	r2, [r3, #4]
 800869a:	4401      	add	r1, r0
 800869c:	6019      	str	r1, [r3, #0]
 800869e:	e7d7      	b.n	8008650 <_free_r+0x24>
 80086a0:	d902      	bls.n	80086a8 <_free_r+0x7c>
 80086a2:	230c      	movs	r3, #12
 80086a4:	602b      	str	r3, [r5, #0]
 80086a6:	e7d3      	b.n	8008650 <_free_r+0x24>
 80086a8:	6820      	ldr	r0, [r4, #0]
 80086aa:	1821      	adds	r1, r4, r0
 80086ac:	428a      	cmp	r2, r1
 80086ae:	bf04      	itt	eq
 80086b0:	6811      	ldreq	r1, [r2, #0]
 80086b2:	6852      	ldreq	r2, [r2, #4]
 80086b4:	6062      	str	r2, [r4, #4]
 80086b6:	bf04      	itt	eq
 80086b8:	1809      	addeq	r1, r1, r0
 80086ba:	6021      	streq	r1, [r4, #0]
 80086bc:	605c      	str	r4, [r3, #4]
 80086be:	e7c7      	b.n	8008650 <_free_r+0x24>
 80086c0:	bd38      	pop	{r3, r4, r5, pc}
 80086c2:	bf00      	nop
 80086c4:	20012cc8 	.word	0x20012cc8

080086c8 <_malloc_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	1ccd      	adds	r5, r1, #3
 80086cc:	f025 0503 	bic.w	r5, r5, #3
 80086d0:	3508      	adds	r5, #8
 80086d2:	2d0c      	cmp	r5, #12
 80086d4:	bf38      	it	cc
 80086d6:	250c      	movcc	r5, #12
 80086d8:	2d00      	cmp	r5, #0
 80086da:	4606      	mov	r6, r0
 80086dc:	db01      	blt.n	80086e2 <_malloc_r+0x1a>
 80086de:	42a9      	cmp	r1, r5
 80086e0:	d903      	bls.n	80086ea <_malloc_r+0x22>
 80086e2:	230c      	movs	r3, #12
 80086e4:	6033      	str	r3, [r6, #0]
 80086e6:	2000      	movs	r0, #0
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	f000 f87d 	bl	80087e8 <__malloc_lock>
 80086ee:	4a21      	ldr	r2, [pc, #132]	; (8008774 <_malloc_r+0xac>)
 80086f0:	6814      	ldr	r4, [r2, #0]
 80086f2:	4621      	mov	r1, r4
 80086f4:	b991      	cbnz	r1, 800871c <_malloc_r+0x54>
 80086f6:	4c20      	ldr	r4, [pc, #128]	; (8008778 <_malloc_r+0xb0>)
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	b91b      	cbnz	r3, 8008704 <_malloc_r+0x3c>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f000 f863 	bl	80087c8 <_sbrk_r>
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f000 f85e 	bl	80087c8 <_sbrk_r>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d124      	bne.n	800875a <_malloc_r+0x92>
 8008710:	230c      	movs	r3, #12
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	4630      	mov	r0, r6
 8008716:	f000 f868 	bl	80087ea <__malloc_unlock>
 800871a:	e7e4      	b.n	80086e6 <_malloc_r+0x1e>
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	1b5b      	subs	r3, r3, r5
 8008720:	d418      	bmi.n	8008754 <_malloc_r+0x8c>
 8008722:	2b0b      	cmp	r3, #11
 8008724:	d90f      	bls.n	8008746 <_malloc_r+0x7e>
 8008726:	600b      	str	r3, [r1, #0]
 8008728:	50cd      	str	r5, [r1, r3]
 800872a:	18cc      	adds	r4, r1, r3
 800872c:	4630      	mov	r0, r6
 800872e:	f000 f85c 	bl	80087ea <__malloc_unlock>
 8008732:	f104 000b 	add.w	r0, r4, #11
 8008736:	1d23      	adds	r3, r4, #4
 8008738:	f020 0007 	bic.w	r0, r0, #7
 800873c:	1ac3      	subs	r3, r0, r3
 800873e:	d0d3      	beq.n	80086e8 <_malloc_r+0x20>
 8008740:	425a      	negs	r2, r3
 8008742:	50e2      	str	r2, [r4, r3]
 8008744:	e7d0      	b.n	80086e8 <_malloc_r+0x20>
 8008746:	428c      	cmp	r4, r1
 8008748:	684b      	ldr	r3, [r1, #4]
 800874a:	bf16      	itet	ne
 800874c:	6063      	strne	r3, [r4, #4]
 800874e:	6013      	streq	r3, [r2, #0]
 8008750:	460c      	movne	r4, r1
 8008752:	e7eb      	b.n	800872c <_malloc_r+0x64>
 8008754:	460c      	mov	r4, r1
 8008756:	6849      	ldr	r1, [r1, #4]
 8008758:	e7cc      	b.n	80086f4 <_malloc_r+0x2c>
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d005      	beq.n	8008770 <_malloc_r+0xa8>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4630      	mov	r0, r6
 8008768:	f000 f82e 	bl	80087c8 <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d0cf      	beq.n	8008710 <_malloc_r+0x48>
 8008770:	6025      	str	r5, [r4, #0]
 8008772:	e7db      	b.n	800872c <_malloc_r+0x64>
 8008774:	20012cc8 	.word	0x20012cc8
 8008778:	20012ccc 	.word	0x20012ccc

0800877c <_realloc_r>:
 800877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877e:	4607      	mov	r7, r0
 8008780:	4614      	mov	r4, r2
 8008782:	460e      	mov	r6, r1
 8008784:	b921      	cbnz	r1, 8008790 <_realloc_r+0x14>
 8008786:	4611      	mov	r1, r2
 8008788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800878c:	f7ff bf9c 	b.w	80086c8 <_malloc_r>
 8008790:	b922      	cbnz	r2, 800879c <_realloc_r+0x20>
 8008792:	f7ff ff4b 	bl	800862c <_free_r>
 8008796:	4625      	mov	r5, r4
 8008798:	4628      	mov	r0, r5
 800879a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800879c:	f000 f826 	bl	80087ec <_malloc_usable_size_r>
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d20f      	bcs.n	80087c4 <_realloc_r+0x48>
 80087a4:	4621      	mov	r1, r4
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff ff8e 	bl	80086c8 <_malloc_r>
 80087ac:	4605      	mov	r5, r0
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d0f2      	beq.n	8008798 <_realloc_r+0x1c>
 80087b2:	4631      	mov	r1, r6
 80087b4:	4622      	mov	r2, r4
 80087b6:	f7ff fc11 	bl	8007fdc <memcpy>
 80087ba:	4631      	mov	r1, r6
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ff35 	bl	800862c <_free_r>
 80087c2:	e7e9      	b.n	8008798 <_realloc_r+0x1c>
 80087c4:	4635      	mov	r5, r6
 80087c6:	e7e7      	b.n	8008798 <_realloc_r+0x1c>

080087c8 <_sbrk_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4c06      	ldr	r4, [pc, #24]	; (80087e4 <_sbrk_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4605      	mov	r5, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	6023      	str	r3, [r4, #0]
 80087d4:	f7fa fbee 	bl	8002fb4 <_sbrk>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_sbrk_r+0x1a>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_sbrk_r+0x1a>
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20012f40 	.word	0x20012f40

080087e8 <__malloc_lock>:
 80087e8:	4770      	bx	lr

080087ea <__malloc_unlock>:
 80087ea:	4770      	bx	lr

080087ec <_malloc_usable_size_r>:
 80087ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087f0:	1f18      	subs	r0, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfbc      	itt	lt
 80087f6:	580b      	ldrlt	r3, [r1, r0]
 80087f8:	18c0      	addlt	r0, r0, r3
 80087fa:	4770      	bx	lr

080087fc <sinf>:
 80087fc:	ee10 3a10 	vmov	r3, s0
 8008800:	b507      	push	{r0, r1, r2, lr}
 8008802:	4a1d      	ldr	r2, [pc, #116]	; (8008878 <sinf+0x7c>)
 8008804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008808:	4293      	cmp	r3, r2
 800880a:	dc05      	bgt.n	8008818 <sinf+0x1c>
 800880c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800887c <sinf+0x80>
 8008810:	2000      	movs	r0, #0
 8008812:	f000 fd4b 	bl	80092ac <__kernel_sinf>
 8008816:	e004      	b.n	8008822 <sinf+0x26>
 8008818:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800881c:	db04      	blt.n	8008828 <sinf+0x2c>
 800881e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008822:	b003      	add	sp, #12
 8008824:	f85d fb04 	ldr.w	pc, [sp], #4
 8008828:	4668      	mov	r0, sp
 800882a:	f000 f933 	bl	8008a94 <__ieee754_rem_pio2f>
 800882e:	f000 0003 	and.w	r0, r0, #3
 8008832:	2801      	cmp	r0, #1
 8008834:	d008      	beq.n	8008848 <sinf+0x4c>
 8008836:	2802      	cmp	r0, #2
 8008838:	d00d      	beq.n	8008856 <sinf+0x5a>
 800883a:	b9b0      	cbnz	r0, 800886a <sinf+0x6e>
 800883c:	2001      	movs	r0, #1
 800883e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008842:	ed9d 0a00 	vldr	s0, [sp]
 8008846:	e7e4      	b.n	8008812 <sinf+0x16>
 8008848:	eddd 0a01 	vldr	s1, [sp, #4]
 800884c:	ed9d 0a00 	vldr	s0, [sp]
 8008850:	f000 fa4c 	bl	8008cec <__kernel_cosf>
 8008854:	e7e5      	b.n	8008822 <sinf+0x26>
 8008856:	2001      	movs	r0, #1
 8008858:	eddd 0a01 	vldr	s1, [sp, #4]
 800885c:	ed9d 0a00 	vldr	s0, [sp]
 8008860:	f000 fd24 	bl	80092ac <__kernel_sinf>
 8008864:	eeb1 0a40 	vneg.f32	s0, s0
 8008868:	e7db      	b.n	8008822 <sinf+0x26>
 800886a:	eddd 0a01 	vldr	s1, [sp, #4]
 800886e:	ed9d 0a00 	vldr	s0, [sp]
 8008872:	f000 fa3b 	bl	8008cec <__kernel_cosf>
 8008876:	e7f5      	b.n	8008864 <sinf+0x68>
 8008878:	3f490fd8 	.word	0x3f490fd8
 800887c:	00000000 	.word	0x00000000

08008880 <sqrt>:
 8008880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008884:	ed2d 8b02 	vpush	{d8}
 8008888:	b08b      	sub	sp, #44	; 0x2c
 800888a:	ec55 4b10 	vmov	r4, r5, d0
 800888e:	f000 f851 	bl	8008934 <__ieee754_sqrt>
 8008892:	4b26      	ldr	r3, [pc, #152]	; (800892c <sqrt+0xac>)
 8008894:	eeb0 8a40 	vmov.f32	s16, s0
 8008898:	eef0 8a60 	vmov.f32	s17, s1
 800889c:	f993 6000 	ldrsb.w	r6, [r3]
 80088a0:	1c73      	adds	r3, r6, #1
 80088a2:	d02a      	beq.n	80088fa <sqrt+0x7a>
 80088a4:	4622      	mov	r2, r4
 80088a6:	462b      	mov	r3, r5
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f8 f93e 	bl	8000b2c <__aeabi_dcmpun>
 80088b0:	4607      	mov	r7, r0
 80088b2:	bb10      	cbnz	r0, 80088fa <sqrt+0x7a>
 80088b4:	f04f 0800 	mov.w	r8, #0
 80088b8:	f04f 0900 	mov.w	r9, #0
 80088bc:	4642      	mov	r2, r8
 80088be:	464b      	mov	r3, r9
 80088c0:	4620      	mov	r0, r4
 80088c2:	4629      	mov	r1, r5
 80088c4:	f7f8 f90a 	bl	8000adc <__aeabi_dcmplt>
 80088c8:	b1b8      	cbz	r0, 80088fa <sqrt+0x7a>
 80088ca:	2301      	movs	r3, #1
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <sqrt+0xb0>)
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	9708      	str	r7, [sp, #32]
 80088d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80088d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80088dc:	b9b6      	cbnz	r6, 800890c <sqrt+0x8c>
 80088de:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80088e2:	4668      	mov	r0, sp
 80088e4:	f000 fd2a 	bl	800933c <matherr>
 80088e8:	b1d0      	cbz	r0, 8008920 <sqrt+0xa0>
 80088ea:	9b08      	ldr	r3, [sp, #32]
 80088ec:	b11b      	cbz	r3, 80088f6 <sqrt+0x76>
 80088ee:	f7ff fb4b 	bl	8007f88 <__errno>
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80088fa:	eeb0 0a48 	vmov.f32	s0, s16
 80088fe:	eef0 0a68 	vmov.f32	s1, s17
 8008902:	b00b      	add	sp, #44	; 0x2c
 8008904:	ecbd 8b02 	vpop	{d8}
 8008908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800890c:	4642      	mov	r2, r8
 800890e:	464b      	mov	r3, r9
 8008910:	4640      	mov	r0, r8
 8008912:	4649      	mov	r1, r9
 8008914:	f7f7 ff9a 	bl	800084c <__aeabi_ddiv>
 8008918:	2e02      	cmp	r6, #2
 800891a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800891e:	d1e0      	bne.n	80088e2 <sqrt+0x62>
 8008920:	f7ff fb32 	bl	8007f88 <__errno>
 8008924:	2321      	movs	r3, #33	; 0x21
 8008926:	6003      	str	r3, [r0, #0]
 8008928:	e7df      	b.n	80088ea <sqrt+0x6a>
 800892a:	bf00      	nop
 800892c:	200000a4 	.word	0x200000a4
 8008930:	0800a15f 	.word	0x0800a15f

08008934 <__ieee754_sqrt>:
 8008934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008938:	4955      	ldr	r1, [pc, #340]	; (8008a90 <__ieee754_sqrt+0x15c>)
 800893a:	ec55 4b10 	vmov	r4, r5, d0
 800893e:	43a9      	bics	r1, r5
 8008940:	462b      	mov	r3, r5
 8008942:	462a      	mov	r2, r5
 8008944:	d112      	bne.n	800896c <__ieee754_sqrt+0x38>
 8008946:	ee10 2a10 	vmov	r2, s0
 800894a:	ee10 0a10 	vmov	r0, s0
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fe52 	bl	80005f8 <__aeabi_dmul>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4620      	mov	r0, r4
 800895a:	4629      	mov	r1, r5
 800895c:	f7f7 fc96 	bl	800028c <__adddf3>
 8008960:	4604      	mov	r4, r0
 8008962:	460d      	mov	r5, r1
 8008964:	ec45 4b10 	vmov	d0, r4, r5
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	2d00      	cmp	r5, #0
 800896e:	ee10 0a10 	vmov	r0, s0
 8008972:	4621      	mov	r1, r4
 8008974:	dc0f      	bgt.n	8008996 <__ieee754_sqrt+0x62>
 8008976:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800897a:	4330      	orrs	r0, r6
 800897c:	d0f2      	beq.n	8008964 <__ieee754_sqrt+0x30>
 800897e:	b155      	cbz	r5, 8008996 <__ieee754_sqrt+0x62>
 8008980:	ee10 2a10 	vmov	r2, s0
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f7 fc7e 	bl	8000288 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	f7f7 ff5c 	bl	800084c <__aeabi_ddiv>
 8008994:	e7e4      	b.n	8008960 <__ieee754_sqrt+0x2c>
 8008996:	151b      	asrs	r3, r3, #20
 8008998:	d073      	beq.n	8008a82 <__ieee754_sqrt+0x14e>
 800899a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800899e:	07dd      	lsls	r5, r3, #31
 80089a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80089a4:	bf48      	it	mi
 80089a6:	0fc8      	lsrmi	r0, r1, #31
 80089a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80089ac:	bf44      	itt	mi
 80089ae:	0049      	lslmi	r1, r1, #1
 80089b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80089b4:	2500      	movs	r5, #0
 80089b6:	1058      	asrs	r0, r3, #1
 80089b8:	0fcb      	lsrs	r3, r1, #31
 80089ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80089be:	0049      	lsls	r1, r1, #1
 80089c0:	2316      	movs	r3, #22
 80089c2:	462c      	mov	r4, r5
 80089c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80089c8:	19a7      	adds	r7, r4, r6
 80089ca:	4297      	cmp	r7, r2
 80089cc:	bfde      	ittt	le
 80089ce:	19bc      	addle	r4, r7, r6
 80089d0:	1bd2      	suble	r2, r2, r7
 80089d2:	19ad      	addle	r5, r5, r6
 80089d4:	0fcf      	lsrs	r7, r1, #31
 80089d6:	3b01      	subs	r3, #1
 80089d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80089dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80089e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80089e4:	d1f0      	bne.n	80089c8 <__ieee754_sqrt+0x94>
 80089e6:	f04f 0c20 	mov.w	ip, #32
 80089ea:	469e      	mov	lr, r3
 80089ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80089f0:	42a2      	cmp	r2, r4
 80089f2:	eb06 070e 	add.w	r7, r6, lr
 80089f6:	dc02      	bgt.n	80089fe <__ieee754_sqrt+0xca>
 80089f8:	d112      	bne.n	8008a20 <__ieee754_sqrt+0xec>
 80089fa:	428f      	cmp	r7, r1
 80089fc:	d810      	bhi.n	8008a20 <__ieee754_sqrt+0xec>
 80089fe:	2f00      	cmp	r7, #0
 8008a00:	eb07 0e06 	add.w	lr, r7, r6
 8008a04:	da42      	bge.n	8008a8c <__ieee754_sqrt+0x158>
 8008a06:	f1be 0f00 	cmp.w	lr, #0
 8008a0a:	db3f      	blt.n	8008a8c <__ieee754_sqrt+0x158>
 8008a0c:	f104 0801 	add.w	r8, r4, #1
 8008a10:	1b12      	subs	r2, r2, r4
 8008a12:	428f      	cmp	r7, r1
 8008a14:	bf88      	it	hi
 8008a16:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008a1a:	1bc9      	subs	r1, r1, r7
 8008a1c:	4433      	add	r3, r6
 8008a1e:	4644      	mov	r4, r8
 8008a20:	0052      	lsls	r2, r2, #1
 8008a22:	f1bc 0c01 	subs.w	ip, ip, #1
 8008a26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008a2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a32:	d1dd      	bne.n	80089f0 <__ieee754_sqrt+0xbc>
 8008a34:	430a      	orrs	r2, r1
 8008a36:	d006      	beq.n	8008a46 <__ieee754_sqrt+0x112>
 8008a38:	1c5c      	adds	r4, r3, #1
 8008a3a:	bf13      	iteet	ne
 8008a3c:	3301      	addne	r3, #1
 8008a3e:	3501      	addeq	r5, #1
 8008a40:	4663      	moveq	r3, ip
 8008a42:	f023 0301 	bicne.w	r3, r3, #1
 8008a46:	106a      	asrs	r2, r5, #1
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	07e9      	lsls	r1, r5, #31
 8008a4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008a50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008a54:	bf48      	it	mi
 8008a56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008a5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008a5e:	461c      	mov	r4, r3
 8008a60:	e780      	b.n	8008964 <__ieee754_sqrt+0x30>
 8008a62:	0aca      	lsrs	r2, r1, #11
 8008a64:	3815      	subs	r0, #21
 8008a66:	0549      	lsls	r1, r1, #21
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	d0fa      	beq.n	8008a62 <__ieee754_sqrt+0x12e>
 8008a6c:	02d6      	lsls	r6, r2, #11
 8008a6e:	d50a      	bpl.n	8008a86 <__ieee754_sqrt+0x152>
 8008a70:	f1c3 0420 	rsb	r4, r3, #32
 8008a74:	fa21 f404 	lsr.w	r4, r1, r4
 8008a78:	1e5d      	subs	r5, r3, #1
 8008a7a:	4099      	lsls	r1, r3
 8008a7c:	4322      	orrs	r2, r4
 8008a7e:	1b43      	subs	r3, r0, r5
 8008a80:	e78b      	b.n	800899a <__ieee754_sqrt+0x66>
 8008a82:	4618      	mov	r0, r3
 8008a84:	e7f0      	b.n	8008a68 <__ieee754_sqrt+0x134>
 8008a86:	0052      	lsls	r2, r2, #1
 8008a88:	3301      	adds	r3, #1
 8008a8a:	e7ef      	b.n	8008a6c <__ieee754_sqrt+0x138>
 8008a8c:	46a0      	mov	r8, r4
 8008a8e:	e7bf      	b.n	8008a10 <__ieee754_sqrt+0xdc>
 8008a90:	7ff00000 	.word	0x7ff00000

08008a94 <__ieee754_rem_pio2f>:
 8008a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a96:	ee10 6a10 	vmov	r6, s0
 8008a9a:	4b86      	ldr	r3, [pc, #536]	; (8008cb4 <__ieee754_rem_pio2f+0x220>)
 8008a9c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	dc05      	bgt.n	8008ab4 <__ieee754_rem_pio2f+0x20>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	ed85 0a00 	vstr	s0, [r5]
 8008aae:	6043      	str	r3, [r0, #4]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e020      	b.n	8008af6 <__ieee754_rem_pio2f+0x62>
 8008ab4:	4b80      	ldr	r3, [pc, #512]	; (8008cb8 <__ieee754_rem_pio2f+0x224>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	dc38      	bgt.n	8008b2c <__ieee754_rem_pio2f+0x98>
 8008aba:	2e00      	cmp	r6, #0
 8008abc:	f024 040f 	bic.w	r4, r4, #15
 8008ac0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8008cbc <__ieee754_rem_pio2f+0x228>
 8008ac4:	4b7e      	ldr	r3, [pc, #504]	; (8008cc0 <__ieee754_rem_pio2f+0x22c>)
 8008ac6:	dd18      	ble.n	8008afa <__ieee754_rem_pio2f+0x66>
 8008ac8:	429c      	cmp	r4, r3
 8008aca:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008ace:	bf09      	itett	eq
 8008ad0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008cc4 <__ieee754_rem_pio2f+0x230>
 8008ad4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008cc8 <__ieee754_rem_pio2f+0x234>
 8008ad8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008adc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8008ccc <__ieee754_rem_pio2f+0x238>
 8008ae0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008ae4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ae8:	edc0 6a00 	vstr	s13, [r0]
 8008aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008af0:	edc0 7a01 	vstr	s15, [r0, #4]
 8008af4:	2001      	movs	r0, #1
 8008af6:	b007      	add	sp, #28
 8008af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afa:	429c      	cmp	r4, r3
 8008afc:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008b00:	bf09      	itett	eq
 8008b02:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008cc4 <__ieee754_rem_pio2f+0x230>
 8008b06:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008cc8 <__ieee754_rem_pio2f+0x234>
 8008b0a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008b0e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8008ccc <__ieee754_rem_pio2f+0x238>
 8008b12:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008b16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b1a:	edc0 6a00 	vstr	s13, [r0]
 8008b1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b22:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b26:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2a:	e7e4      	b.n	8008af6 <__ieee754_rem_pio2f+0x62>
 8008b2c:	4b68      	ldr	r3, [pc, #416]	; (8008cd0 <__ieee754_rem_pio2f+0x23c>)
 8008b2e:	429c      	cmp	r4, r3
 8008b30:	dc71      	bgt.n	8008c16 <__ieee754_rem_pio2f+0x182>
 8008b32:	f000 fc05 	bl	8009340 <fabsf>
 8008b36:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008cd4 <__ieee754_rem_pio2f+0x240>
 8008b3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008b3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b46:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8008b4a:	ee17 0a90 	vmov	r0, s15
 8008b4e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008cbc <__ieee754_rem_pio2f+0x228>
 8008b52:	eeb1 7a46 	vneg.f32	s14, s12
 8008b56:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008b5a:	281f      	cmp	r0, #31
 8008b5c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008cc8 <__ieee754_rem_pio2f+0x234>
 8008b60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b64:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008b68:	ee16 3a90 	vmov	r3, s13
 8008b6c:	dc1c      	bgt.n	8008ba8 <__ieee754_rem_pio2f+0x114>
 8008b6e:	1e47      	subs	r7, r0, #1
 8008b70:	4959      	ldr	r1, [pc, #356]	; (8008cd8 <__ieee754_rem_pio2f+0x244>)
 8008b72:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8008b76:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8008b7a:	428a      	cmp	r2, r1
 8008b7c:	d014      	beq.n	8008ba8 <__ieee754_rem_pio2f+0x114>
 8008b7e:	602b      	str	r3, [r5, #0]
 8008b80:	ed95 7a00 	vldr	s14, [r5]
 8008b84:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008b8e:	ed85 0a01 	vstr	s0, [r5, #4]
 8008b92:	dab0      	bge.n	8008af6 <__ieee754_rem_pio2f+0x62>
 8008b94:	eeb1 7a47 	vneg.f32	s14, s14
 8008b98:	eeb1 0a40 	vneg.f32	s0, s0
 8008b9c:	ed85 7a00 	vstr	s14, [r5]
 8008ba0:	ed85 0a01 	vstr	s0, [r5, #4]
 8008ba4:	4240      	negs	r0, r0
 8008ba6:	e7a6      	b.n	8008af6 <__ieee754_rem_pio2f+0x62>
 8008ba8:	15e4      	asrs	r4, r4, #23
 8008baa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008bae:	1aa2      	subs	r2, r4, r2
 8008bb0:	2a08      	cmp	r2, #8
 8008bb2:	dde4      	ble.n	8008b7e <__ieee754_rem_pio2f+0xea>
 8008bb4:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008cc4 <__ieee754_rem_pio2f+0x230>
 8008bb8:	eef0 6a40 	vmov.f32	s13, s0
 8008bbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008bc0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008bc4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8008bc8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8008ccc <__ieee754_rem_pio2f+0x238>
 8008bcc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8008bd0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8008bd4:	eef0 7a40 	vmov.f32	s15, s0
 8008bd8:	ee15 3a90 	vmov	r3, s11
 8008bdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008be0:	1aa4      	subs	r4, r4, r2
 8008be2:	2c19      	cmp	r4, #25
 8008be4:	dc04      	bgt.n	8008bf0 <__ieee754_rem_pio2f+0x15c>
 8008be6:	edc5 5a00 	vstr	s11, [r5]
 8008bea:	eeb0 0a66 	vmov.f32	s0, s13
 8008bee:	e7c7      	b.n	8008b80 <__ieee754_rem_pio2f+0xec>
 8008bf0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008cdc <__ieee754_rem_pio2f+0x248>
 8008bf4:	eeb0 0a66 	vmov.f32	s0, s13
 8008bf8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8008bfc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008c00:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008c04:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008ce0 <__ieee754_rem_pio2f+0x24c>
 8008c08:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8008c0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c10:	ed85 7a00 	vstr	s14, [r5]
 8008c14:	e7b4      	b.n	8008b80 <__ieee754_rem_pio2f+0xec>
 8008c16:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008c1a:	db06      	blt.n	8008c2a <__ieee754_rem_pio2f+0x196>
 8008c1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c20:	edc0 7a01 	vstr	s15, [r0, #4]
 8008c24:	edc0 7a00 	vstr	s15, [r0]
 8008c28:	e742      	b.n	8008ab0 <__ieee754_rem_pio2f+0x1c>
 8008c2a:	15e2      	asrs	r2, r4, #23
 8008c2c:	3a86      	subs	r2, #134	; 0x86
 8008c2e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c3a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008ce4 <__ieee754_rem_pio2f+0x250>
 8008c3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c46:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008c4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c5a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008c5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008c62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6a:	edcd 7a05 	vstr	s15, [sp, #20]
 8008c6e:	d11e      	bne.n	8008cae <__ieee754_rem_pio2f+0x21a>
 8008c70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c78:	bf0c      	ite	eq
 8008c7a:	2301      	moveq	r3, #1
 8008c7c:	2302      	movne	r3, #2
 8008c7e:	491a      	ldr	r1, [pc, #104]	; (8008ce8 <__ieee754_rem_pio2f+0x254>)
 8008c80:	9101      	str	r1, [sp, #4]
 8008c82:	2102      	movs	r1, #2
 8008c84:	9100      	str	r1, [sp, #0]
 8008c86:	a803      	add	r0, sp, #12
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f000 f88d 	bl	8008da8 <__kernel_rem_pio2f>
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	f6bf af31 	bge.w	8008af6 <__ieee754_rem_pio2f+0x62>
 8008c94:	edd5 7a00 	vldr	s15, [r5]
 8008c98:	eef1 7a67 	vneg.f32	s15, s15
 8008c9c:	edc5 7a00 	vstr	s15, [r5]
 8008ca0:	edd5 7a01 	vldr	s15, [r5, #4]
 8008ca4:	eef1 7a67 	vneg.f32	s15, s15
 8008ca8:	edc5 7a01 	vstr	s15, [r5, #4]
 8008cac:	e77a      	b.n	8008ba4 <__ieee754_rem_pio2f+0x110>
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e7e5      	b.n	8008c7e <__ieee754_rem_pio2f+0x1ea>
 8008cb2:	bf00      	nop
 8008cb4:	3f490fd8 	.word	0x3f490fd8
 8008cb8:	4016cbe3 	.word	0x4016cbe3
 8008cbc:	3fc90f80 	.word	0x3fc90f80
 8008cc0:	3fc90fd0 	.word	0x3fc90fd0
 8008cc4:	37354400 	.word	0x37354400
 8008cc8:	37354443 	.word	0x37354443
 8008ccc:	2e85a308 	.word	0x2e85a308
 8008cd0:	43490f80 	.word	0x43490f80
 8008cd4:	3f22f984 	.word	0x3f22f984
 8008cd8:	0800a164 	.word	0x0800a164
 8008cdc:	2e85a300 	.word	0x2e85a300
 8008ce0:	248d3132 	.word	0x248d3132
 8008ce4:	43800000 	.word	0x43800000
 8008ce8:	0800a1e4 	.word	0x0800a1e4

08008cec <__kernel_cosf>:
 8008cec:	ee10 3a10 	vmov	r3, s0
 8008cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cf4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cfc:	da05      	bge.n	8008d0a <__kernel_cosf+0x1e>
 8008cfe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008d02:	ee17 2a90 	vmov	r2, s15
 8008d06:	2a00      	cmp	r2, #0
 8008d08:	d03b      	beq.n	8008d82 <__kernel_cosf+0x96>
 8008d0a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8008d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d88 <__kernel_cosf+0x9c>
 8008d16:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <__kernel_cosf+0xa0>)
 8008d18:	ee66 7a07 	vmul.f32	s15, s12, s14
 8008d1c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008d90 <__kernel_cosf+0xa4>
 8008d20:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008d24:	4293      	cmp	r3, r2
 8008d26:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008d94 <__kernel_cosf+0xa8>
 8008d2a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008d2e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008d98 <__kernel_cosf+0xac>
 8008d32:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008d36:	eddf 5a19 	vldr	s11, [pc, #100]	; 8008d9c <__kernel_cosf+0xb0>
 8008d3a:	eee7 5a06 	vfma.f32	s11, s14, s12
 8008d3e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008da0 <__kernel_cosf+0xb4>
 8008d42:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008d46:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8008d4a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008d4e:	eee6 0a07 	vfma.f32	s1, s12, s14
 8008d52:	dc04      	bgt.n	8008d5e <__kernel_cosf+0x72>
 8008d54:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8008d58:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8008d5c:	4770      	bx	lr
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <__kernel_cosf+0xb8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	bfda      	itte	le
 8008d64:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008d68:	ee07 3a10 	vmovle	s14, r3
 8008d6c:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8008d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d74:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8008d78:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008d7c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008d80:	4770      	bx	lr
 8008d82:	eeb0 0a66 	vmov.f32	s0, s13
 8008d86:	4770      	bx	lr
 8008d88:	ad47d74e 	.word	0xad47d74e
 8008d8c:	3e999999 	.word	0x3e999999
 8008d90:	310f74f6 	.word	0x310f74f6
 8008d94:	b493f27c 	.word	0xb493f27c
 8008d98:	37d00d01 	.word	0x37d00d01
 8008d9c:	bab60b61 	.word	0xbab60b61
 8008da0:	3d2aaaab 	.word	0x3d2aaaab
 8008da4:	3f480000 	.word	0x3f480000

08008da8 <__kernel_rem_pio2f>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	ed2d 8b04 	vpush	{d8-d9}
 8008db0:	b0d7      	sub	sp, #348	; 0x15c
 8008db2:	469b      	mov	fp, r3
 8008db4:	460e      	mov	r6, r1
 8008db6:	4bbe      	ldr	r3, [pc, #760]	; (80090b0 <__kernel_rem_pio2f+0x308>)
 8008db8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8008dba:	9002      	str	r0, [sp, #8]
 8008dbc:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008dc0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008dc2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80090c0 <__kernel_rem_pio2f+0x318>
 8008dc6:	1ed1      	subs	r1, r2, #3
 8008dc8:	2308      	movs	r3, #8
 8008dca:	fb91 f1f3 	sdiv	r1, r1, r3
 8008dce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008dd2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008dd6:	1c4c      	adds	r4, r1, #1
 8008dd8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8008ddc:	eba1 050a 	sub.w	r5, r1, sl
 8008de0:	aa1a      	add	r2, sp, #104	; 0x68
 8008de2:	eb09 070a 	add.w	r7, r9, sl
 8008de6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8008dea:	4696      	mov	lr, r2
 8008dec:	2300      	movs	r3, #0
 8008dee:	42bb      	cmp	r3, r7
 8008df0:	dd0f      	ble.n	8008e12 <__kernel_rem_pio2f+0x6a>
 8008df2:	af42      	add	r7, sp, #264	; 0x108
 8008df4:	2200      	movs	r2, #0
 8008df6:	454a      	cmp	r2, r9
 8008df8:	dc27      	bgt.n	8008e4a <__kernel_rem_pio2f+0xa2>
 8008dfa:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8008dfe:	eb0b 0302 	add.w	r3, fp, r2
 8008e02:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008e06:	9d02      	ldr	r5, [sp, #8]
 8008e08:	eddf 7aad 	vldr	s15, [pc, #692]	; 80090c0 <__kernel_rem_pio2f+0x318>
 8008e0c:	f04f 0c00 	mov.w	ip, #0
 8008e10:	e015      	b.n	8008e3e <__kernel_rem_pio2f+0x96>
 8008e12:	42dd      	cmn	r5, r3
 8008e14:	bf5d      	ittte	pl
 8008e16:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8008e1a:	ee07 2a90 	vmovpl	s15, r2
 8008e1e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008e22:	eef0 7a47 	vmovmi.f32	s15, s14
 8008e26:	ecee 7a01 	vstmia	lr!, {s15}
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	e7df      	b.n	8008dee <__kernel_rem_pio2f+0x46>
 8008e2e:	ecf5 6a01 	vldmia	r5!, {s13}
 8008e32:	ed33 7a01 	vldmdb	r3!, {s14}
 8008e36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e3a:	f10c 0c01 	add.w	ip, ip, #1
 8008e3e:	45d4      	cmp	ip, sl
 8008e40:	ddf5      	ble.n	8008e2e <__kernel_rem_pio2f+0x86>
 8008e42:	ece7 7a01 	vstmia	r7!, {s15}
 8008e46:	3201      	adds	r2, #1
 8008e48:	e7d5      	b.n	8008df6 <__kernel_rem_pio2f+0x4e>
 8008e4a:	ab06      	add	r3, sp, #24
 8008e4c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008e50:	9304      	str	r3, [sp, #16]
 8008e52:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80090bc <__kernel_rem_pio2f+0x314>
 8008e56:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80090b8 <__kernel_rem_pio2f+0x310>
 8008e5a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8008e5e:	9303      	str	r3, [sp, #12]
 8008e60:	464d      	mov	r5, r9
 8008e62:	ab56      	add	r3, sp, #344	; 0x158
 8008e64:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8008e68:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8008e6c:	3f01      	subs	r7, #1
 8008e6e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8008e72:	00bf      	lsls	r7, r7, #2
 8008e74:	ab56      	add	r3, sp, #344	; 0x158
 8008e76:	19da      	adds	r2, r3, r7
 8008e78:	3a4c      	subs	r2, #76	; 0x4c
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	1ae9      	subs	r1, r5, r3
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	dc4c      	bgt.n	8008f1c <__kernel_rem_pio2f+0x174>
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 faa6 	bl	80093d4 <scalbnf>
 8008e88:	eeb0 8a40 	vmov.f32	s16, s0
 8008e8c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008e90:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008e94:	f000 fa5c 	bl	8009350 <floorf>
 8008e98:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008e9c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008ea0:	2c00      	cmp	r4, #0
 8008ea2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008ea6:	edcd 7a01 	vstr	s15, [sp, #4]
 8008eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008eae:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008eb2:	dd48      	ble.n	8008f46 <__kernel_rem_pio2f+0x19e>
 8008eb4:	1e69      	subs	r1, r5, #1
 8008eb6:	ab06      	add	r3, sp, #24
 8008eb8:	f1c4 0008 	rsb	r0, r4, #8
 8008ebc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008ec0:	9a01      	ldr	r2, [sp, #4]
 8008ec2:	fa4c f300 	asr.w	r3, ip, r0
 8008ec6:	441a      	add	r2, r3
 8008ec8:	4083      	lsls	r3, r0
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	ebac 0203 	sub.w	r2, ip, r3
 8008ed0:	ab06      	add	r3, sp, #24
 8008ed2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008ed6:	f1c4 0307 	rsb	r3, r4, #7
 8008eda:	fa42 f803 	asr.w	r8, r2, r3
 8008ede:	f1b8 0f00 	cmp.w	r8, #0
 8008ee2:	dd41      	ble.n	8008f68 <__kernel_rem_pio2f+0x1c0>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	3301      	adds	r3, #1
 8008eea:	9301      	str	r3, [sp, #4]
 8008eec:	4601      	mov	r1, r0
 8008eee:	4285      	cmp	r5, r0
 8008ef0:	dc6d      	bgt.n	8008fce <__kernel_rem_pio2f+0x226>
 8008ef2:	2c00      	cmp	r4, #0
 8008ef4:	dd04      	ble.n	8008f00 <__kernel_rem_pio2f+0x158>
 8008ef6:	2c01      	cmp	r4, #1
 8008ef8:	d07e      	beq.n	8008ff8 <__kernel_rem_pio2f+0x250>
 8008efa:	2c02      	cmp	r4, #2
 8008efc:	f000 8086 	beq.w	800900c <__kernel_rem_pio2f+0x264>
 8008f00:	f1b8 0f02 	cmp.w	r8, #2
 8008f04:	d130      	bne.n	8008f68 <__kernel_rem_pio2f+0x1c0>
 8008f06:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008f0a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008f0e:	b359      	cbz	r1, 8008f68 <__kernel_rem_pio2f+0x1c0>
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fa5f 	bl	80093d4 <scalbnf>
 8008f16:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008f1a:	e025      	b.n	8008f68 <__kernel_rem_pio2f+0x1c0>
 8008f1c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008f20:	a806      	add	r0, sp, #24
 8008f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f2a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008f2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008f32:	ee10 1a10 	vmov	r1, s0
 8008f36:	ed32 0a01 	vldmdb	r2!, {s0}
 8008f3a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8008f3e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008f42:	3301      	adds	r3, #1
 8008f44:	e79a      	b.n	8008e7c <__kernel_rem_pio2f+0xd4>
 8008f46:	d106      	bne.n	8008f56 <__kernel_rem_pio2f+0x1ae>
 8008f48:	1e6b      	subs	r3, r5, #1
 8008f4a:	aa06      	add	r2, sp, #24
 8008f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f50:	ea4f 2822 	mov.w	r8, r2, asr #8
 8008f54:	e7c3      	b.n	8008ede <__kernel_rem_pio2f+0x136>
 8008f56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008f5a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f62:	da31      	bge.n	8008fc8 <__kernel_rem_pio2f+0x220>
 8008f64:	f04f 0800 	mov.w	r8, #0
 8008f68:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	f040 80a8 	bne.w	80090c4 <__kernel_rem_pio2f+0x31c>
 8008f74:	1e6b      	subs	r3, r5, #1
 8008f76:	4618      	mov	r0, r3
 8008f78:	2200      	movs	r2, #0
 8008f7a:	4548      	cmp	r0, r9
 8008f7c:	da4d      	bge.n	800901a <__kernel_rem_pio2f+0x272>
 8008f7e:	2a00      	cmp	r2, #0
 8008f80:	f000 8087 	beq.w	8009092 <__kernel_rem_pio2f+0x2ea>
 8008f84:	aa06      	add	r2, sp, #24
 8008f86:	3c08      	subs	r4, #8
 8008f88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	f000 808d 	beq.w	80090ac <__kernel_rem_pio2f+0x304>
 8008f92:	4620      	mov	r0, r4
 8008f94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008f98:	9302      	str	r3, [sp, #8]
 8008f9a:	f000 fa1b 	bl	80093d4 <scalbnf>
 8008f9e:	9b02      	ldr	r3, [sp, #8]
 8008fa0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80090bc <__kernel_rem_pio2f+0x314>
 8008fa4:	0099      	lsls	r1, r3, #2
 8008fa6:	aa42      	add	r2, sp, #264	; 0x108
 8008fa8:	1850      	adds	r0, r2, r1
 8008faa:	1d05      	adds	r5, r0, #4
 8008fac:	461c      	mov	r4, r3
 8008fae:	2c00      	cmp	r4, #0
 8008fb0:	f280 80b8 	bge.w	8009124 <__kernel_rem_pio2f+0x37c>
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	1b5c      	subs	r4, r3, r5
 8008fb8:	2c00      	cmp	r4, #0
 8008fba:	f2c0 80d8 	blt.w	800916e <__kernel_rem_pio2f+0x3c6>
 8008fbe:	4f3d      	ldr	r7, [pc, #244]	; (80090b4 <__kernel_rem_pio2f+0x30c>)
 8008fc0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80090c0 <__kernel_rem_pio2f+0x318>
 8008fc4:	2400      	movs	r4, #0
 8008fc6:	e0c6      	b.n	8009156 <__kernel_rem_pio2f+0x3ae>
 8008fc8:	f04f 0802 	mov.w	r8, #2
 8008fcc:	e78a      	b.n	8008ee4 <__kernel_rem_pio2f+0x13c>
 8008fce:	ab06      	add	r3, sp, #24
 8008fd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008fd4:	b949      	cbnz	r1, 8008fea <__kernel_rem_pio2f+0x242>
 8008fd6:	b12b      	cbz	r3, 8008fe4 <__kernel_rem_pio2f+0x23c>
 8008fd8:	aa06      	add	r2, sp, #24
 8008fda:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008fde:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	e781      	b.n	8008eee <__kernel_rem_pio2f+0x146>
 8008fea:	aa06      	add	r2, sp, #24
 8008fec:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008ff0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	e7f5      	b.n	8008fe4 <__kernel_rem_pio2f+0x23c>
 8008ff8:	1e68      	subs	r0, r5, #1
 8008ffa:	ab06      	add	r3, sp, #24
 8008ffc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009004:	aa06      	add	r2, sp, #24
 8009006:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800900a:	e779      	b.n	8008f00 <__kernel_rem_pio2f+0x158>
 800900c:	1e68      	subs	r0, r5, #1
 800900e:	ab06      	add	r3, sp, #24
 8009010:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009018:	e7f4      	b.n	8009004 <__kernel_rem_pio2f+0x25c>
 800901a:	a906      	add	r1, sp, #24
 800901c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009020:	3801      	subs	r0, #1
 8009022:	430a      	orrs	r2, r1
 8009024:	e7a9      	b.n	8008f7a <__kernel_rem_pio2f+0x1d2>
 8009026:	f10c 0c01 	add.w	ip, ip, #1
 800902a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800902e:	2a00      	cmp	r2, #0
 8009030:	d0f9      	beq.n	8009026 <__kernel_rem_pio2f+0x27e>
 8009032:	eb0b 0305 	add.w	r3, fp, r5
 8009036:	aa1a      	add	r2, sp, #104	; 0x68
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	1898      	adds	r0, r3, r2
 800903c:	3004      	adds	r0, #4
 800903e:	1c69      	adds	r1, r5, #1
 8009040:	3704      	adds	r7, #4
 8009042:	2200      	movs	r2, #0
 8009044:	4465      	add	r5, ip
 8009046:	9005      	str	r0, [sp, #20]
 8009048:	428d      	cmp	r5, r1
 800904a:	f6ff af0a 	blt.w	8008e62 <__kernel_rem_pio2f+0xba>
 800904e:	a81a      	add	r0, sp, #104	; 0x68
 8009050:	eb02 0c03 	add.w	ip, r2, r3
 8009054:	4484      	add	ip, r0
 8009056:	9803      	ldr	r0, [sp, #12]
 8009058:	f8dd e008 	ldr.w	lr, [sp, #8]
 800905c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8009060:	9001      	str	r0, [sp, #4]
 8009062:	ee07 0a90 	vmov	s15, r0
 8009066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800906a:	9805      	ldr	r0, [sp, #20]
 800906c:	edcc 7a00 	vstr	s15, [ip]
 8009070:	eddf 7a13 	vldr	s15, [pc, #76]	; 80090c0 <__kernel_rem_pio2f+0x318>
 8009074:	eb00 0802 	add.w	r8, r0, r2
 8009078:	f04f 0c00 	mov.w	ip, #0
 800907c:	45d4      	cmp	ip, sl
 800907e:	dd0c      	ble.n	800909a <__kernel_rem_pio2f+0x2f2>
 8009080:	eb02 0c07 	add.w	ip, r2, r7
 8009084:	a842      	add	r0, sp, #264	; 0x108
 8009086:	4484      	add	ip, r0
 8009088:	edcc 7a01 	vstr	s15, [ip, #4]
 800908c:	3101      	adds	r1, #1
 800908e:	3204      	adds	r2, #4
 8009090:	e7da      	b.n	8009048 <__kernel_rem_pio2f+0x2a0>
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	f04f 0c01 	mov.w	ip, #1
 8009098:	e7c7      	b.n	800902a <__kernel_rem_pio2f+0x282>
 800909a:	ecfe 6a01 	vldmia	lr!, {s13}
 800909e:	ed38 7a01 	vldmdb	r8!, {s14}
 80090a2:	f10c 0c01 	add.w	ip, ip, #1
 80090a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80090aa:	e7e7      	b.n	800907c <__kernel_rem_pio2f+0x2d4>
 80090ac:	3b01      	subs	r3, #1
 80090ae:	e769      	b.n	8008f84 <__kernel_rem_pio2f+0x1dc>
 80090b0:	0800a528 	.word	0x0800a528
 80090b4:	0800a4fc 	.word	0x0800a4fc
 80090b8:	43800000 	.word	0x43800000
 80090bc:	3b800000 	.word	0x3b800000
 80090c0:	00000000 	.word	0x00000000
 80090c4:	4260      	negs	r0, r4
 80090c6:	eeb0 0a48 	vmov.f32	s0, s16
 80090ca:	f000 f983 	bl	80093d4 <scalbnf>
 80090ce:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80090b8 <__kernel_rem_pio2f+0x310>
 80090d2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80090d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090da:	db1a      	blt.n	8009112 <__kernel_rem_pio2f+0x36a>
 80090dc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80090bc <__kernel_rem_pio2f+0x314>
 80090e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80090e4:	aa06      	add	r2, sp, #24
 80090e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ea:	a906      	add	r1, sp, #24
 80090ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090f0:	3408      	adds	r4, #8
 80090f2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80090f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090fe:	ee10 3a10 	vmov	r3, s0
 8009102:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009106:	1c6b      	adds	r3, r5, #1
 8009108:	ee17 2a90 	vmov	r2, s15
 800910c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009110:	e73f      	b.n	8008f92 <__kernel_rem_pio2f+0x1ea>
 8009112:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009116:	aa06      	add	r2, sp, #24
 8009118:	ee10 3a10 	vmov	r3, s0
 800911c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009120:	462b      	mov	r3, r5
 8009122:	e736      	b.n	8008f92 <__kernel_rem_pio2f+0x1ea>
 8009124:	aa06      	add	r2, sp, #24
 8009126:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800912a:	9202      	str	r2, [sp, #8]
 800912c:	ee07 2a90 	vmov	s15, r2
 8009130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009134:	3c01      	subs	r4, #1
 8009136:	ee67 7a80 	vmul.f32	s15, s15, s0
 800913a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800913e:	ed65 7a01 	vstmdb	r5!, {s15}
 8009142:	e734      	b.n	8008fae <__kernel_rem_pio2f+0x206>
 8009144:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8009148:	ecf7 6a01 	vldmia	r7!, {s13}
 800914c:	ed9c 7a00 	vldr	s14, [ip]
 8009150:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009154:	3401      	adds	r4, #1
 8009156:	454c      	cmp	r4, r9
 8009158:	dc01      	bgt.n	800915e <__kernel_rem_pio2f+0x3b6>
 800915a:	42a5      	cmp	r5, r4
 800915c:	daf2      	bge.n	8009144 <__kernel_rem_pio2f+0x39c>
 800915e:	aa56      	add	r2, sp, #344	; 0x158
 8009160:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8009164:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8009168:	3501      	adds	r5, #1
 800916a:	3804      	subs	r0, #4
 800916c:	e723      	b.n	8008fb6 <__kernel_rem_pio2f+0x20e>
 800916e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8009170:	2a03      	cmp	r2, #3
 8009172:	d84d      	bhi.n	8009210 <__kernel_rem_pio2f+0x468>
 8009174:	e8df f002 	tbb	[pc, r2]
 8009178:	021f1f3e 	.word	0x021f1f3e
 800917c:	aa56      	add	r2, sp, #344	; 0x158
 800917e:	4411      	add	r1, r2
 8009180:	399c      	subs	r1, #156	; 0x9c
 8009182:	4608      	mov	r0, r1
 8009184:	461c      	mov	r4, r3
 8009186:	2c00      	cmp	r4, #0
 8009188:	dc5f      	bgt.n	800924a <__kernel_rem_pio2f+0x4a2>
 800918a:	4608      	mov	r0, r1
 800918c:	461c      	mov	r4, r3
 800918e:	2c01      	cmp	r4, #1
 8009190:	dc6b      	bgt.n	800926a <__kernel_rem_pio2f+0x4c2>
 8009192:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80090c0 <__kernel_rem_pio2f+0x318>
 8009196:	2b01      	cmp	r3, #1
 8009198:	dc77      	bgt.n	800928a <__kernel_rem_pio2f+0x4e2>
 800919a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800919e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80091a2:	f1b8 0f00 	cmp.w	r8, #0
 80091a6:	d176      	bne.n	8009296 <__kernel_rem_pio2f+0x4ee>
 80091a8:	edc6 6a00 	vstr	s13, [r6]
 80091ac:	ed86 7a01 	vstr	s14, [r6, #4]
 80091b0:	edc6 7a02 	vstr	s15, [r6, #8]
 80091b4:	e02c      	b.n	8009210 <__kernel_rem_pio2f+0x468>
 80091b6:	aa56      	add	r2, sp, #344	; 0x158
 80091b8:	4411      	add	r1, r2
 80091ba:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80090c0 <__kernel_rem_pio2f+0x318>
 80091be:	399c      	subs	r1, #156	; 0x9c
 80091c0:	4618      	mov	r0, r3
 80091c2:	2800      	cmp	r0, #0
 80091c4:	da32      	bge.n	800922c <__kernel_rem_pio2f+0x484>
 80091c6:	f1b8 0f00 	cmp.w	r8, #0
 80091ca:	d035      	beq.n	8009238 <__kernel_rem_pio2f+0x490>
 80091cc:	eef1 7a47 	vneg.f32	s15, s14
 80091d0:	edc6 7a00 	vstr	s15, [r6]
 80091d4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80091d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091dc:	a82f      	add	r0, sp, #188	; 0xbc
 80091de:	2101      	movs	r1, #1
 80091e0:	428b      	cmp	r3, r1
 80091e2:	da2c      	bge.n	800923e <__kernel_rem_pio2f+0x496>
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	d001      	beq.n	80091ee <__kernel_rem_pio2f+0x446>
 80091ea:	eef1 7a67 	vneg.f32	s15, s15
 80091ee:	edc6 7a01 	vstr	s15, [r6, #4]
 80091f2:	e00d      	b.n	8009210 <__kernel_rem_pio2f+0x468>
 80091f4:	aa56      	add	r2, sp, #344	; 0x158
 80091f6:	4411      	add	r1, r2
 80091f8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80090c0 <__kernel_rem_pio2f+0x318>
 80091fc:	399c      	subs	r1, #156	; 0x9c
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da0e      	bge.n	8009220 <__kernel_rem_pio2f+0x478>
 8009202:	f1b8 0f00 	cmp.w	r8, #0
 8009206:	d001      	beq.n	800920c <__kernel_rem_pio2f+0x464>
 8009208:	eef1 7a67 	vneg.f32	s15, s15
 800920c:	edc6 7a00 	vstr	s15, [r6]
 8009210:	9b01      	ldr	r3, [sp, #4]
 8009212:	f003 0007 	and.w	r0, r3, #7
 8009216:	b057      	add	sp, #348	; 0x15c
 8009218:	ecbd 8b04 	vpop	{d8-d9}
 800921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	ed31 7a01 	vldmdb	r1!, {s14}
 8009224:	3b01      	subs	r3, #1
 8009226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922a:	e7e8      	b.n	80091fe <__kernel_rem_pio2f+0x456>
 800922c:	ed71 7a01 	vldmdb	r1!, {s15}
 8009230:	3801      	subs	r0, #1
 8009232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009236:	e7c4      	b.n	80091c2 <__kernel_rem_pio2f+0x41a>
 8009238:	eef0 7a47 	vmov.f32	s15, s14
 800923c:	e7c8      	b.n	80091d0 <__kernel_rem_pio2f+0x428>
 800923e:	ecb0 7a01 	vldmia	r0!, {s14}
 8009242:	3101      	adds	r1, #1
 8009244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009248:	e7ca      	b.n	80091e0 <__kernel_rem_pio2f+0x438>
 800924a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800924e:	ed70 6a01 	vldmdb	r0!, {s13}
 8009252:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009256:	3c01      	subs	r4, #1
 8009258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800925c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009264:	edc0 7a00 	vstr	s15, [r0]
 8009268:	e78d      	b.n	8009186 <__kernel_rem_pio2f+0x3de>
 800926a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800926e:	ed70 6a01 	vldmdb	r0!, {s13}
 8009272:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009276:	3c01      	subs	r4, #1
 8009278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800927c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8009280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009284:	edc0 7a00 	vstr	s15, [r0]
 8009288:	e781      	b.n	800918e <__kernel_rem_pio2f+0x3e6>
 800928a:	ed31 7a01 	vldmdb	r1!, {s14}
 800928e:	3b01      	subs	r3, #1
 8009290:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009294:	e77f      	b.n	8009196 <__kernel_rem_pio2f+0x3ee>
 8009296:	eef1 6a66 	vneg.f32	s13, s13
 800929a:	eeb1 7a47 	vneg.f32	s14, s14
 800929e:	edc6 6a00 	vstr	s13, [r6]
 80092a2:	ed86 7a01 	vstr	s14, [r6, #4]
 80092a6:	eef1 7a67 	vneg.f32	s15, s15
 80092aa:	e781      	b.n	80091b0 <__kernel_rem_pio2f+0x408>

080092ac <__kernel_sinf>:
 80092ac:	ee10 3a10 	vmov	r3, s0
 80092b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80092b8:	da04      	bge.n	80092c4 <__kernel_sinf+0x18>
 80092ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80092be:	ee17 3a90 	vmov	r3, s15
 80092c2:	b35b      	cbz	r3, 800931c <__kernel_sinf+0x70>
 80092c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80092c8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009320 <__kernel_sinf+0x74>
 80092cc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009324 <__kernel_sinf+0x78>
 80092d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80092d4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009328 <__kernel_sinf+0x7c>
 80092d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80092dc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800932c <__kernel_sinf+0x80>
 80092e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80092e4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009330 <__kernel_sinf+0x84>
 80092e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80092ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80092f0:	b930      	cbnz	r0, 8009300 <__kernel_sinf+0x54>
 80092f2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009334 <__kernel_sinf+0x88>
 80092f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80092fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80092fe:	4770      	bx	lr
 8009300:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009304:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009308:	eee0 7a86 	vfma.f32	s15, s1, s12
 800930c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009310:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009338 <__kernel_sinf+0x8c>
 8009314:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009318:	ee30 0a60 	vsub.f32	s0, s0, s1
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	2f2ec9d3 	.word	0x2f2ec9d3
 8009324:	b2d72f34 	.word	0xb2d72f34
 8009328:	3638ef1b 	.word	0x3638ef1b
 800932c:	b9500d01 	.word	0xb9500d01
 8009330:	3c088889 	.word	0x3c088889
 8009334:	be2aaaab 	.word	0xbe2aaaab
 8009338:	3e2aaaab 	.word	0x3e2aaaab

0800933c <matherr>:
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr

08009340 <fabsf>:
 8009340:	ee10 3a10 	vmov	r3, s0
 8009344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009348:	ee00 3a10 	vmov	s0, r3
 800934c:	4770      	bx	lr
	...

08009350 <floorf>:
 8009350:	ee10 3a10 	vmov	r3, s0
 8009354:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009358:	0dca      	lsrs	r2, r1, #23
 800935a:	3a7f      	subs	r2, #127	; 0x7f
 800935c:	2a16      	cmp	r2, #22
 800935e:	dc2a      	bgt.n	80093b6 <floorf+0x66>
 8009360:	2a00      	cmp	r2, #0
 8009362:	da11      	bge.n	8009388 <floorf+0x38>
 8009364:	eddf 7a18 	vldr	s15, [pc, #96]	; 80093c8 <floorf+0x78>
 8009368:	ee30 0a27 	vadd.f32	s0, s0, s15
 800936c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009374:	dd05      	ble.n	8009382 <floorf+0x32>
 8009376:	2b00      	cmp	r3, #0
 8009378:	da23      	bge.n	80093c2 <floorf+0x72>
 800937a:	4a14      	ldr	r2, [pc, #80]	; (80093cc <floorf+0x7c>)
 800937c:	2900      	cmp	r1, #0
 800937e:	bf18      	it	ne
 8009380:	4613      	movne	r3, r2
 8009382:	ee00 3a10 	vmov	s0, r3
 8009386:	4770      	bx	lr
 8009388:	4911      	ldr	r1, [pc, #68]	; (80093d0 <floorf+0x80>)
 800938a:	4111      	asrs	r1, r2
 800938c:	420b      	tst	r3, r1
 800938e:	d0fa      	beq.n	8009386 <floorf+0x36>
 8009390:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80093c8 <floorf+0x78>
 8009394:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009398:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800939c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a0:	ddef      	ble.n	8009382 <floorf+0x32>
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	bfbe      	ittt	lt
 80093a6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80093aa:	fa40 f202 	asrlt.w	r2, r0, r2
 80093ae:	189b      	addlt	r3, r3, r2
 80093b0:	ea23 0301 	bic.w	r3, r3, r1
 80093b4:	e7e5      	b.n	8009382 <floorf+0x32>
 80093b6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80093ba:	d3e4      	bcc.n	8009386 <floorf+0x36>
 80093bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80093c0:	4770      	bx	lr
 80093c2:	2300      	movs	r3, #0
 80093c4:	e7dd      	b.n	8009382 <floorf+0x32>
 80093c6:	bf00      	nop
 80093c8:	7149f2ca 	.word	0x7149f2ca
 80093cc:	bf800000 	.word	0xbf800000
 80093d0:	007fffff 	.word	0x007fffff

080093d4 <scalbnf>:
 80093d4:	b508      	push	{r3, lr}
 80093d6:	ee10 2a10 	vmov	r2, s0
 80093da:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80093de:	ed2d 8b02 	vpush	{d8}
 80093e2:	eef0 0a40 	vmov.f32	s1, s0
 80093e6:	d004      	beq.n	80093f2 <scalbnf+0x1e>
 80093e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80093ec:	d306      	bcc.n	80093fc <scalbnf+0x28>
 80093ee:	ee70 0a00 	vadd.f32	s1, s0, s0
 80093f2:	ecbd 8b02 	vpop	{d8}
 80093f6:	eeb0 0a60 	vmov.f32	s0, s1
 80093fa:	bd08      	pop	{r3, pc}
 80093fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009400:	d21c      	bcs.n	800943c <scalbnf+0x68>
 8009402:	4b1f      	ldr	r3, [pc, #124]	; (8009480 <scalbnf+0xac>)
 8009404:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009484 <scalbnf+0xb0>
 8009408:	4298      	cmp	r0, r3
 800940a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800940e:	db10      	blt.n	8009432 <scalbnf+0x5e>
 8009410:	ee10 2a90 	vmov	r2, s1
 8009414:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8009418:	3b19      	subs	r3, #25
 800941a:	4403      	add	r3, r0
 800941c:	2bfe      	cmp	r3, #254	; 0xfe
 800941e:	dd0f      	ble.n	8009440 <scalbnf+0x6c>
 8009420:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009488 <scalbnf+0xb4>
 8009424:	eeb0 0a48 	vmov.f32	s0, s16
 8009428:	f000 f834 	bl	8009494 <copysignf>
 800942c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8009430:	e7df      	b.n	80093f2 <scalbnf+0x1e>
 8009432:	eddf 7a16 	vldr	s15, [pc, #88]	; 800948c <scalbnf+0xb8>
 8009436:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800943a:	e7da      	b.n	80093f2 <scalbnf+0x1e>
 800943c:	0ddb      	lsrs	r3, r3, #23
 800943e:	e7ec      	b.n	800941a <scalbnf+0x46>
 8009440:	2b00      	cmp	r3, #0
 8009442:	dd06      	ble.n	8009452 <scalbnf+0x7e>
 8009444:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009448:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800944c:	ee00 3a90 	vmov	s1, r3
 8009450:	e7cf      	b.n	80093f2 <scalbnf+0x1e>
 8009452:	f113 0f16 	cmn.w	r3, #22
 8009456:	da06      	bge.n	8009466 <scalbnf+0x92>
 8009458:	f24c 3350 	movw	r3, #50000	; 0xc350
 800945c:	4298      	cmp	r0, r3
 800945e:	dcdf      	bgt.n	8009420 <scalbnf+0x4c>
 8009460:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800948c <scalbnf+0xb8>
 8009464:	e7de      	b.n	8009424 <scalbnf+0x50>
 8009466:	3319      	adds	r3, #25
 8009468:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800946c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009470:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009490 <scalbnf+0xbc>
 8009474:	ee07 3a10 	vmov	s14, r3
 8009478:	ee67 0a27 	vmul.f32	s1, s14, s15
 800947c:	e7b9      	b.n	80093f2 <scalbnf+0x1e>
 800947e:	bf00      	nop
 8009480:	ffff3cb0 	.word	0xffff3cb0
 8009484:	4c000000 	.word	0x4c000000
 8009488:	7149f2ca 	.word	0x7149f2ca
 800948c:	0da24260 	.word	0x0da24260
 8009490:	33000000 	.word	0x33000000

08009494 <copysignf>:
 8009494:	ee10 3a10 	vmov	r3, s0
 8009498:	ee10 2a90 	vmov	r2, s1
 800949c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80094a4:	4313      	orrs	r3, r2
 80094a6:	ee00 3a10 	vmov	s0, r3
 80094aa:	4770      	bx	lr

080094ac <_init>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	bf00      	nop
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr

080094b8 <_fini>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	bf00      	nop
 80094bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094be:	bc08      	pop	{r3}
 80094c0:	469e      	mov	lr, r3
 80094c2:	4770      	bx	lr
