
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009114  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  080092a8  080092a8  000192a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab8  08009ab8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009ab8  08009ab8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ab8  08009ab8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000078  08009b38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08009b38  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dd6  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e0  00000000  00000000  00039e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  0003cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aea2  00000000  00000000  0003f678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130c5  00000000  00000000  0006a51a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001068f1  00000000  00000000  0007d5df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00183ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c98  00000000  00000000  00183f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800928c 	.word	0x0800928c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800928c 	.word	0x0800928c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f003 fd43 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000bfa:	200a      	movs	r0, #10
 8000bfc:	f002 f88c 	bl	8002d18 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f003 fd39 	bl	8004680 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000c0e:	4b65      	ldr	r3, [pc, #404]	; (8000da4 <ILI9488_Init+0x1bc>)
 8000c10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c14:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000c16:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <ILI9488_Init+0x1c0>)
 8000c18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c1c:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 8000c1e:	20e0      	movs	r0, #224	; 0xe0
 8000c20:	f000 fa5a 	bl	80010d8 <writecommand>
	writedata(0x00);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fadb 	bl	80011e0 <writedata>
	writedata(0x03);
 8000c2a:	2003      	movs	r0, #3
 8000c2c:	f000 fad8 	bl	80011e0 <writedata>
	writedata(0x09);
 8000c30:	2009      	movs	r0, #9
 8000c32:	f000 fad5 	bl	80011e0 <writedata>
	writedata(0x08);
 8000c36:	2008      	movs	r0, #8
 8000c38:	f000 fad2 	bl	80011e0 <writedata>
	writedata(0x16);
 8000c3c:	2016      	movs	r0, #22
 8000c3e:	f000 facf 	bl	80011e0 <writedata>
	writedata(0x0A);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 facc 	bl	80011e0 <writedata>
	writedata(0x3F);
 8000c48:	203f      	movs	r0, #63	; 0x3f
 8000c4a:	f000 fac9 	bl	80011e0 <writedata>
	writedata(0x78);
 8000c4e:	2078      	movs	r0, #120	; 0x78
 8000c50:	f000 fac6 	bl	80011e0 <writedata>
	writedata(0x4C);
 8000c54:	204c      	movs	r0, #76	; 0x4c
 8000c56:	f000 fac3 	bl	80011e0 <writedata>
	writedata(0x09);
 8000c5a:	2009      	movs	r0, #9
 8000c5c:	f000 fac0 	bl	80011e0 <writedata>
	writedata(0x0A);
 8000c60:	200a      	movs	r0, #10
 8000c62:	f000 fabd 	bl	80011e0 <writedata>
	writedata(0x08);
 8000c66:	2008      	movs	r0, #8
 8000c68:	f000 faba 	bl	80011e0 <writedata>
	writedata(0x16);
 8000c6c:	2016      	movs	r0, #22
 8000c6e:	f000 fab7 	bl	80011e0 <writedata>
	writedata(0x1A);
 8000c72:	201a      	movs	r0, #26
 8000c74:	f000 fab4 	bl	80011e0 <writedata>
	writedata(0x0F);
 8000c78:	200f      	movs	r0, #15
 8000c7a:	f000 fab1 	bl	80011e0 <writedata>

	writecommand(0XE1);
 8000c7e:	20e1      	movs	r0, #225	; 0xe1
 8000c80:	f000 fa2a 	bl	80010d8 <writecommand>
	writedata(0x00);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 faab 	bl	80011e0 <writedata>
	writedata(0x16);
 8000c8a:	2016      	movs	r0, #22
 8000c8c:	f000 faa8 	bl	80011e0 <writedata>
	writedata(0x19);
 8000c90:	2019      	movs	r0, #25
 8000c92:	f000 faa5 	bl	80011e0 <writedata>
	writedata(0x03);
 8000c96:	2003      	movs	r0, #3
 8000c98:	f000 faa2 	bl	80011e0 <writedata>
	writedata(0x0F);
 8000c9c:	200f      	movs	r0, #15
 8000c9e:	f000 fa9f 	bl	80011e0 <writedata>
	writedata(0x05);
 8000ca2:	2005      	movs	r0, #5
 8000ca4:	f000 fa9c 	bl	80011e0 <writedata>
	writedata(0x32);
 8000ca8:	2032      	movs	r0, #50	; 0x32
 8000caa:	f000 fa99 	bl	80011e0 <writedata>
	writedata(0x45);
 8000cae:	2045      	movs	r0, #69	; 0x45
 8000cb0:	f000 fa96 	bl	80011e0 <writedata>
	writedata(0x46);
 8000cb4:	2046      	movs	r0, #70	; 0x46
 8000cb6:	f000 fa93 	bl	80011e0 <writedata>
	writedata(0x04);
 8000cba:	2004      	movs	r0, #4
 8000cbc:	f000 fa90 	bl	80011e0 <writedata>
	writedata(0x0E);
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f000 fa8d 	bl	80011e0 <writedata>
	writedata(0x0D);
 8000cc6:	200d      	movs	r0, #13
 8000cc8:	f000 fa8a 	bl	80011e0 <writedata>
	writedata(0x35);
 8000ccc:	2035      	movs	r0, #53	; 0x35
 8000cce:	f000 fa87 	bl	80011e0 <writedata>
	writedata(0x37);
 8000cd2:	2037      	movs	r0, #55	; 0x37
 8000cd4:	f000 fa84 	bl	80011e0 <writedata>
	writedata(0x0F);
 8000cd8:	200f      	movs	r0, #15
 8000cda:	f000 fa81 	bl	80011e0 <writedata>

	writecommand(0XC0);      //Power Control 1
 8000cde:	20c0      	movs	r0, #192	; 0xc0
 8000ce0:	f000 f9fa 	bl	80010d8 <writecommand>
	writedata(0x17);    //Vreg1out
 8000ce4:	2017      	movs	r0, #23
 8000ce6:	f000 fa7b 	bl	80011e0 <writedata>
	writedata(0x15);    //Verg2out
 8000cea:	2015      	movs	r0, #21
 8000cec:	f000 fa78 	bl	80011e0 <writedata>

	writecommand(0xC1);      //Power Control 2
 8000cf0:	20c1      	movs	r0, #193	; 0xc1
 8000cf2:	f000 f9f1 	bl	80010d8 <writecommand>
	writedata(0x41);    //VGH,VGL
 8000cf6:	2041      	movs	r0, #65	; 0x41
 8000cf8:	f000 fa72 	bl	80011e0 <writedata>

	writecommand(0xC5);      //Power Control 3
 8000cfc:	20c5      	movs	r0, #197	; 0xc5
 8000cfe:	f000 f9eb 	bl	80010d8 <writecommand>
	writedata(0x00);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fa6c 	bl	80011e0 <writedata>
	writedata(0x12);    //Vcom
 8000d08:	2012      	movs	r0, #18
 8000d0a:	f000 fa69 	bl	80011e0 <writedata>
	writedata(0x80);
 8000d0e:	2080      	movs	r0, #128	; 0x80
 8000d10:	f000 fa66 	bl	80011e0 <writedata>

	writecommand(0x36);      //Memory Access
 8000d14:	2036      	movs	r0, #54	; 0x36
 8000d16:	f000 f9df 	bl	80010d8 <writecommand>
	writedata(0x48);
 8000d1a:	2048      	movs	r0, #72	; 0x48
 8000d1c:	f000 fa60 	bl	80011e0 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 8000d20:	2036      	movs	r0, #54	; 0x36
 8000d22:	f000 f9d9 	bl	80010d8 <writecommand>
	writedata(0x66); 	  //18 bit
 8000d26:	2066      	movs	r0, #102	; 0x66
 8000d28:	f000 fa5a 	bl	80011e0 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 8000d2c:	20b0      	movs	r0, #176	; 0xb0
 8000d2e:	f000 f9d3 	bl	80010d8 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000d32:	2080      	movs	r0, #128	; 0x80
 8000d34:	f000 fa54 	bl	80011e0 <writedata>

	writecommand(0xB1);      //Frame rate
 8000d38:	20b1      	movs	r0, #177	; 0xb1
 8000d3a:	f000 f9cd 	bl	80010d8 <writecommand>
	writedata(0xA0);    //60Hz
 8000d3e:	20a0      	movs	r0, #160	; 0xa0
 8000d40:	f000 fa4e 	bl	80011e0 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 8000d44:	20b4      	movs	r0, #180	; 0xb4
 8000d46:	f000 f9c7 	bl	80010d8 <writecommand>
	writedata(0x02);    //2-dot
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 fa48 	bl	80011e0 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000d50:	20b6      	movs	r0, #182	; 0xb6
 8000d52:	f000 f9c1 	bl	80010d8 <writecommand>

	writedata(0x02);    //MCU
 8000d56:	2002      	movs	r0, #2
 8000d58:	f000 fa42 	bl	80011e0 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f000 fa3f 	bl	80011e0 <writedata>

	writecommand(0XE9);      // Set Image Functio
 8000d62:	20e9      	movs	r0, #233	; 0xe9
 8000d64:	f000 f9b8 	bl	80010d8 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fa39 	bl	80011e0 <writedata>

	writecommand(0xF7);      // Adjust Control
 8000d6e:	20f7      	movs	r0, #247	; 0xf7
 8000d70:	f000 f9b2 	bl	80010d8 <writecommand>
	writedata(0xA9);
 8000d74:	20a9      	movs	r0, #169	; 0xa9
 8000d76:	f000 fa33 	bl	80011e0 <writedata>
	writedata(0x51);
 8000d7a:	2051      	movs	r0, #81	; 0x51
 8000d7c:	f000 fa30 	bl	80011e0 <writedata>
	writedata(0x2C);
 8000d80:	202c      	movs	r0, #44	; 0x2c
 8000d82:	f000 fa2d 	bl	80011e0 <writedata>
	writedata(0x82);    // D7 stream, loose
 8000d86:	2082      	movs	r0, #130	; 0x82
 8000d88:	f000 fa2a 	bl	80011e0 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 8000d8c:	2011      	movs	r0, #17
 8000d8e:	f000 f9a3 	bl	80010d8 <writecommand>

	HAL_Delay(120);
 8000d92:	2078      	movs	r0, #120	; 0x78
 8000d94:	f001 ffc0 	bl	8002d18 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000d98:	2029      	movs	r0, #41	; 0x29
 8000d9a:	f000 f99d 	bl	80010d8 <writecommand>


}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000ac 	.word	0x200000ac
 8000da8:	200000b0 	.word	0x200000b0

08000dac <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	461a      	mov	r2, r3
 8000dba:	4623      	mov	r3, r4
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000dca:	202a      	movs	r0, #42	; 0x2a
 8000dcc:	f000 f984 	bl	80010d8 <writecommand>
	writedata(x0 >> 8);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 fa01 	bl	80011e0 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f9fc 	bl	80011e0 <writedata>
	writedata(x1 >> 8);
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	0a1b      	lsrs	r3, r3, #8
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f9f5 	bl	80011e0 <writedata>
	writedata(x1 & 0xFF);     // XEND
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f9f0 	bl	80011e0 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000e00:	202b      	movs	r0, #43	; 0x2b
 8000e02:	f000 f969 	bl	80010d8 <writecommand>
	writedata(y0 >> 8);
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f9e6 	bl	80011e0 <writedata>
	writedata(y0 & 0xff);     // YSTART
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f9e1 	bl	80011e0 <writedata>
	writedata(y1 >> 8);
 8000e1e:	883b      	ldrh	r3, [r7, #0]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f9da 	bl	80011e0 <writedata>
	writedata(y1 & 0xff);     // YEND
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f9d5 	bl	80011e0 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000e36:	202c      	movs	r0, #44	; 0x2c
 8000e38:	f000 f94e 	bl	80010d8 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <setAddrWindow+0xb0>)
 8000e44:	f003 fc1c 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <setAddrWindow+0xb0>)
 8000e4e:	f003 fc17 	bl	8004680 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	48000800 	.word	0x48000800

08000e60 <drawPixel>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}
void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	80bb      	strh	r3, [r7, #4]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db31      	blt.n	8000ede <drawPixel+0x7e>
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <drawPixel+0x88>)
 8000e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	da2a      	bge.n	8000ede <drawPixel+0x7e>
 8000e88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db26      	blt.n	8000ede <drawPixel+0x7e>
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <drawPixel+0x8c>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	da1f      	bge.n	8000ede <drawPixel+0x7e>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000e9e:	88f8      	ldrh	r0, [r7, #6]
 8000ea0:	88b9      	ldrh	r1, [r7, #4]
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	f7ff ff7d 	bl	8000dac <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	480e      	ldr	r0, [pc, #56]	; (8000ef0 <drawPixel+0x90>)
 8000eb8:	f003 fbe2 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <drawPixel+0x90>)
 8000ec4:	f003 fbdc 	bl	8004680 <HAL_GPIO_WritePin>
	write16BitColor(color);
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f928 	bl	8001120 <write16BitColor>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <drawPixel+0x90>)
 8000ed8:	f003 fbd2 	bl	8004680 <HAL_GPIO_WritePin>
 8000edc:	e000      	b.n	8000ee0 <drawPixel+0x80>
		return;
 8000ede:	bf00      	nop

}
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000ac 	.word	0x200000ac
 8000eec:	200000b0 	.word	0x200000b0
 8000ef0:	48000800 	.word	0x48000800

08000ef4 <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	4623      	mov	r3, r4
 8000f04:	80fb      	strh	r3, [r7, #6]
 8000f06:	4603      	mov	r3, r0
 8000f08:	80bb      	strh	r3, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <fillRect+0x128>)
 8000f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	da78      	bge.n	8001012 <fillRect+0x11e>
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <fillRect+0x12c>)
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f26:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	da71      	bge.n	8001012 <fillRect+0x11e>
		return;
	if ((x + w - 1) >= _width)
 8000f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f36:	4413      	add	r3, r2
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a38      	ldr	r2, [pc, #224]	; (800101c <fillRect+0x128>)
 8000f3c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f40:	4293      	cmp	r3, r2
 8000f42:	db07      	blt.n	8000f54 <fillRect+0x60>
		w = _width - x;
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <fillRect+0x128>)
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 8000f54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f58:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <fillRect+0x12c>)
 8000f62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000f66:	4293      	cmp	r3, r2
 8000f68:	db07      	blt.n	8000f7a <fillRect+0x86>
		h = _height - y;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <fillRect+0x12c>)
 8000f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	88bb      	ldrh	r3, [r7, #4]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000f7a:	88f8      	ldrh	r0, [r7, #6]
 8000f7c:	88b9      	ldrh	r1, [r7, #4]
 8000f7e:	88fa      	ldrh	r2, [r7, #6]
 8000f80:	887b      	ldrh	r3, [r7, #2]
 8000f82:	4413      	add	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	3b01      	subs	r3, #1
 8000f88:	b29c      	uxth	r4, r3
 8000f8a:	88ba      	ldrh	r2, [r7, #4]
 8000f8c:	883b      	ldrh	r3, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4622      	mov	r2, r4
 8000f98:	f7ff ff08 	bl	8000dac <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2110      	movs	r1, #16
 8000fa0:	4820      	ldr	r0, [pc, #128]	; (8001024 <fillRect+0x130>)
 8000fa2:	f003 fb6d 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fac:	481d      	ldr	r0, [pc, #116]	; (8001024 <fillRect+0x130>)
 8000fae:	f003 fb67 	bl	8004680 <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	80bb      	strh	r3, [r7, #4]
 8000fb6:	e016      	b.n	8000fe6 <fillRect+0xf2>
		for (x = w; x > 0; x--) {
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	e009      	b.n	8000fd2 <fillRect+0xde>

			write16BitColor(color);
 8000fbe:	8b3b      	ldrh	r3, [r7, #24]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f8ad 	bl	8001120 <write16BitColor>
		for (x = w; x > 0; x--) {
 8000fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	80fb      	strh	r3, [r7, #6]
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dcf1      	bgt.n	8000fbe <fillRect+0xca>
	for (y = h; y > 0; y--) {
 8000fda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dce4      	bgt.n	8000fb8 <fillRect+0xc4>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <fillRect+0x130>)
 8000ff6:	f003 fb43 	bl	8004680 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <fillRect+0x130>)
 8001000:	f003 fb3e 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <fillRect+0x130>)
 800100c:	f003 fb38 	bl	8004680 <HAL_GPIO_WritePin>
 8001010:	e000      	b.n	8001014 <fillRect+0x120>
		return;
 8001012:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
 800101a:	bf00      	nop
 800101c:	200000ac 	.word	0x200000ac
 8001020:	200000b0 	.word	0x200000b0
 8001024:	48000800 	.word	0x48000800

08001028 <setRotation>:
void setRotation(uint8_t r)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 8001032:	2036      	movs	r0, #54	; 0x36
 8001034:	f000 f850 	bl	80010d8 <writecommand>
	rotation = r % 4; // can't be higher than 3
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <setRotation+0xa4>)
 8001042:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <setRotation+0xa4>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d83b      	bhi.n	80010c4 <setRotation+0x9c>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <setRotation+0x2c>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001065 	.word	0x08001065
 8001058:	0800107d 	.word	0x0800107d
 800105c:	08001095 	.word	0x08001095
 8001060:	080010ad 	.word	0x080010ad
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8001064:	2048      	movs	r0, #72	; 0x48
 8001066:	f000 f8bb 	bl	80011e0 <writedata>
		_width = ILI9488_TFTWIDTH;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <setRotation+0xa8>)
 800106c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001070:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <setRotation+0xac>)
 8001074:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001078:	801a      	strh	r2, [r3, #0]
		break;
 800107a:	e023      	b.n	80010c4 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 800107c:	2028      	movs	r0, #40	; 0x28
 800107e:	f000 f8af 	bl	80011e0 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <setRotation+0xa8>)
 8001084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001088:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <setRotation+0xac>)
 800108c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001090:	801a      	strh	r2, [r3, #0]
		break;
 8001092:	e017      	b.n	80010c4 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001094:	2088      	movs	r0, #136	; 0x88
 8001096:	f000 f8a3 	bl	80011e0 <writedata>
		_width = ILI9488_TFTWIDTH;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <setRotation+0xa8>)
 800109c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010a0:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <setRotation+0xac>)
 80010a4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010a8:	801a      	strh	r2, [r3, #0]
		break;
 80010aa:	e00b      	b.n	80010c4 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80010ac:	20e8      	movs	r0, #232	; 0xe8
 80010ae:	f000 f897 	bl	80011e0 <writedata>
		_width = ILI9488_TFTHEIGHT;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <setRotation+0xa8>)
 80010b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010b8:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <setRotation+0xac>)
 80010bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010c0:	801a      	strh	r2, [r3, #0]
		break;
 80010c2:	bf00      	nop
	}

}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	200000a8 	.word	0x200000a8
 80010d0:	200000ac 	.word	0x200000ac
 80010d4:	200000b0 	.word	0x200000b0

080010d8 <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2110      	movs	r1, #16
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <writecommand+0x40>)
 80010e8:	f003 faca 	bl	8004680 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <writecommand+0x40>)
 80010f4:	f003 fac4 	bl	8004680 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80010f8:	1df9      	adds	r1, r7, #7
 80010fa:	2301      	movs	r3, #1
 80010fc:	2201      	movs	r2, #1
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <writecommand+0x44>)
 8001100:	f004 fe3f 	bl	8005d82 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <writecommand+0x40>)
 800110c:	f003 fab8 	bl	8004680 <HAL_GPIO_WritePin>

}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	48000800 	.word	0x48000800
 800111c:	200001c8 	.word	0x200001c8

08001120 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	0adb      	lsrs	r3, r3, #11
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	115b      	asrs	r3, r3, #5
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	b2db      	uxtb	r3, r3
 800114c:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	461a      	mov	r2, r3
 8001152:	4613      	mov	r3, r2
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <write16BitColor+0xb4>)
 800115a:	fb82 1203 	smull	r1, r2, r2, r3
 800115e:	441a      	add	r2, r3
 8001160:	1112      	asrs	r2, r2, #4
 8001162:	17db      	asrs	r3, r3, #31
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	461a      	mov	r2, r3
 800116e:	4613      	mov	r3, r2
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	1a9b      	subs	r3, r3, r2
 8001174:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <write16BitColor+0xb8>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	441a      	add	r2, r3
 800117c:	1152      	asrs	r2, r2, #5
 800117e:	17db      	asrs	r3, r3, #31
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001186:	7b7b      	ldrb	r3, [r7, #13]
 8001188:	461a      	mov	r2, r3
 800118a:	4613      	mov	r3, r2
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <write16BitColor+0xb4>)
 8001192:	fb82 1203 	smull	r1, r2, r2, r3
 8001196:	441a      	add	r2, r3
 8001198:	1112      	asrs	r2, r2, #4
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 80011a2:	f107 010f 	add.w	r1, r7, #15
 80011a6:	2301      	movs	r3, #1
 80011a8:	2201      	movs	r2, #1
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <write16BitColor+0xbc>)
 80011ac:	f004 fde9 	bl	8005d82 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 80011b0:	f107 010e 	add.w	r1, r7, #14
 80011b4:	2301      	movs	r3, #1
 80011b6:	2201      	movs	r2, #1
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <write16BitColor+0xbc>)
 80011ba:	f004 fde2 	bl	8005d82 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 80011be:	f107 010d 	add.w	r1, r7, #13
 80011c2:	2301      	movs	r3, #1
 80011c4:	2201      	movs	r2, #1
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <write16BitColor+0xbc>)
 80011c8:	f004 fddb 	bl	8005d82 <HAL_SPI_Transmit>


}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	84210843 	.word	0x84210843
 80011d8:	82082083 	.word	0x82082083
 80011dc:	200001c8 	.word	0x200001c8

080011e0 <writedata>:
void writedata(uint8_t d)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	480c      	ldr	r0, [pc, #48]	; (8001220 <writedata+0x40>)
 80011f0:	f003 fa46 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <writedata+0x40>)
 80011fc:	f003 fa40 	bl	8004680 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8001200:	1df9      	adds	r1, r7, #7
 8001202:	2301      	movs	r3, #1
 8001204:	2201      	movs	r2, #1
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <writedata+0x44>)
 8001208:	f004 fdbb 	bl	8005d82 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <writedata+0x40>)
 8001214:	f003 fa34 	bl	8004680 <HAL_GPIO_WritePin>

}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48000800 	.word	0x48000800
 8001224:	200001c8 	.word	0x200001c8

08001228 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	80fb      	strh	r3, [r7, #6]
 8001234:	466b      	mov	r3, sp
 8001236:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001244:	4293      	cmp	r3, r2
 8001246:	d802      	bhi.n	800124e <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
 800124c:	e002      	b.n	8001254 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 800124e:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2110      	movs	r1, #16
 8001258:	4867      	ldr	r0, [pc, #412]	; (80013f8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 800125a:	f003 fa11 	bl	8004680 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001264:	4864      	ldr	r0, [pc, #400]	; (80013f8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001266:	f003 fa0b 	bl	8004680 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	0adb      	lsrs	r3, r3, #11
 800126e:	b29b      	uxth	r3, r3
 8001270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	115b      	asrs	r3, r3, #5
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800127e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 8001282:	88fb      	ldrh	r3, [r7, #6]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 800128e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001292:	4613      	mov	r3, r2
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	4a58      	ldr	r2, [pc, #352]	; (80013fc <ILI9341_Draw_Colour_Burst+0x1d4>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	441a      	add	r2, r3
 80012a0:	1112      	asrs	r2, r2, #4
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 80012aa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80012ae:	4613      	mov	r3, r2
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	4a52      	ldr	r2, [pc, #328]	; (8001400 <ILI9341_Draw_Colour_Burst+0x1d8>)
 80012b6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ba:	441a      	add	r2, r3
 80012bc:	1152      	asrs	r2, r2, #5
 80012be:	17db      	asrs	r3, r3, #31
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 80012c6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80012ca:	4613      	mov	r3, r2
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <ILI9341_Draw_Colour_Burst+0x1d4>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	1112      	asrs	r2, r2, #4
 80012da:	17db      	asrs	r3, r3, #31
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 80012e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e4:	4603      	mov	r3, r0
 80012e6:	3b01      	subs	r3, #1
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	4601      	mov	r1, r0
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	f04f 0300 	mov.w	r3, #0
 80012f4:	f04f 0400 	mov.w	r4, #0
 80012f8:	00d4      	lsls	r4, r2, #3
 80012fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80012fe:	00cb      	lsls	r3, r1, #3
 8001300:	4601      	mov	r1, r0
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	f04f 0400 	mov.w	r4, #0
 800130e:	00d4      	lsls	r4, r2, #3
 8001310:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001314:	00cb      	lsls	r3, r1, #3
 8001316:	1dc3      	adds	r3, r0, #7
 8001318:	08db      	lsrs	r3, r3, #3
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	ebad 0d03 	sub.w	sp, sp, r3
 8001320:	466b      	mov	r3, sp
 8001322:	3300      	adds	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	e014      	b.n	8001356 <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	4413      	add	r3, r2
 8001332:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001336:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 8001338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133a:	3301      	adds	r3, #1
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001342:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	3302      	adds	r3, #2
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800134e:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	3303      	adds	r3, #3
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
 8001356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	429a      	cmp	r2, r3
 800135c:	d3e6      	bcc.n	800132c <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001376:	fbb3 f2f2 	udiv	r2, r3, r2
 800137a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800137c:	fb01 f202 	mul.w	r2, r1, r2
 8001380:	1a9b      	subs	r3, r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d018      	beq.n	80013bc <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	e011      	b.n	80013b4 <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139a:	b292      	uxth	r2, r2
 800139c:	4619      	mov	r1, r3
 800139e:	481a      	ldr	r0, [pc, #104]	; (8001408 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80013a0:	f004 fe5e 	bl	8006060 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 80013a4:	bf00      	nop
 80013a6:	4b17      	ldr	r3, [pc, #92]	; (8001404 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0fb      	beq.n	80013a6 <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	3301      	adds	r3, #1
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3e9      	bcc.n	8001390 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	b292      	uxth	r2, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	; (8001408 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80013d2:	f004 fe45 	bl	8006060 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 80013d6:	bf00      	nop
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0fb      	beq.n	80013d8 <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <ILI9341_Draw_Colour_Burst+0x1d0>)
 80013e8:	f003 f94a 	bl	8004680 <HAL_GPIO_WritePin>
 80013ec:	46ad      	mov	sp, r5
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bdb0      	pop	{r4, r5, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000800 	.word	0x48000800
 80013fc:	84210843 	.word	0x84210843
 8001400:	82082083 	.word	0x82082083
 8001404:	20000000 	.word	0x20000000
 8001408:	200001c8 	.word	0x200001c8

0800140c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 8001416:	f240 133f 	movw	r3, #319	; 0x13f
 800141a:	f240 12df 	movw	r2, #479	; 0x1df
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fcc3 	bl	8000dac <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fefb 	bl	8001228 <ILI9341_Draw_Colour_Burst>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b08b      	sub	sp, #44	; 0x2c
 800143e:	af02      	add	r7, sp, #8
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	4603      	mov	r3, r0
 8001446:	81fb      	strh	r3, [r7, #14]
 8001448:	460b      	mov	r3, r1
 800144a:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	777b      	strb	r3, [r7, #29]
 800145c:	2300      	movs	r3, #0
 800145e:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001464:	2300      	movs	r3, #0
 8001466:	763b      	strb	r3, [r7, #24]
 8001468:	e09b      	b.n	80015a2 <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 800146a:	2300      	movs	r3, #0
 800146c:	767b      	strb	r3, [r7, #25]
 800146e:	e056      	b.n	800151e <LCD_Char+0xe4>
		{
			if (bit == 0)
 8001470:	7f3b      	ldrb	r3, [r7, #28]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001476:	8bfb      	ldrh	r3, [r7, #30]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	83fa      	strh	r2, [r7, #30]
 800147c:	461a      	mov	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 800148a:	7f7a      	ldrb	r2, [r7, #29]
 800148c:	7f3b      	ldrb	r3, [r7, #28]
 800148e:	4013      	ands	r3, r2
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <LCD_Char+0x64>
 8001496:	8b7b      	ldrh	r3, [r7, #26]
 8001498:	3301      	adds	r3, #1
 800149a:	837b      	strh	r3, [r7, #26]
 800149c:	e039      	b.n	8001512 <LCD_Char+0xd8>
			else if (set_pixels > 0)
 800149e:	8b7b      	ldrh	r3, [r7, #26]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d036      	beq.n	8001512 <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80014aa:	461a      	mov	r2, r3
 80014ac:	7e7b      	ldrb	r3, [r7, #25]
 80014ae:	441a      	add	r2, r3
 80014b0:	8b7b      	ldrh	r3, [r7, #26]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	fb12 f303 	smulbb	r3, r2, r3
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b218      	sxth	r0, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80014d0:	461a      	mov	r2, r3
 80014d2:	7e3b      	ldrb	r3, [r7, #24]
 80014d4:	4413      	add	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014dc:	b29b      	uxth	r3, r3
 80014de:	fb12 f303 	smulbb	r3, r2, r3
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	89bb      	ldrh	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b219      	sxth	r1, r3
 80014ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	8b7a      	ldrh	r2, [r7, #26]
 80014f4:	fb12 f303 	smulbb	r3, r2, r3
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001500:	b21c      	sxth	r4, r3
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	b29b      	uxth	r3, r3
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4623      	mov	r3, r4
 800150a:	f7ff fcf3 	bl	8000ef4 <fillRect>
				set_pixels = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001512:	7f3b      	ldrb	r3, [r7, #28]
 8001514:	085b      	lsrs	r3, r3, #1
 8001516:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001518:	7e7b      	ldrb	r3, [r7, #25]
 800151a:	3301      	adds	r3, #1
 800151c:	767b      	strb	r3, [r7, #25]
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	789b      	ldrb	r3, [r3, #2]
 8001522:	7e7a      	ldrb	r2, [r7, #25]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3a3      	bcc.n	8001470 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001528:	8b7b      	ldrh	r3, [r7, #26]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d036      	beq.n	800159c <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001534:	461a      	mov	r2, r3
 8001536:	7e7b      	ldrb	r3, [r7, #25]
 8001538:	441a      	add	r2, r3
 800153a:	8b7b      	ldrh	r3, [r7, #26]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	b29a      	uxth	r2, r3
 8001540:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001544:	b29b      	uxth	r3, r3
 8001546:	fb12 f303 	smulbb	r3, r2, r3
 800154a:	b29a      	uxth	r2, r3
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	b218      	sxth	r0, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800155a:	461a      	mov	r2, r3
 800155c:	7e3b      	ldrb	r3, [r7, #24]
 800155e:	4413      	add	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001566:	b29b      	uxth	r3, r3
 8001568:	fb12 f303 	smulbb	r3, r2, r3
 800156c:	b29a      	uxth	r2, r3
 800156e:	89bb      	ldrh	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	b29b      	uxth	r3, r3
 8001574:	b219      	sxth	r1, r3
 8001576:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800157a:	b29b      	uxth	r3, r3
 800157c:	8b7a      	ldrh	r2, [r7, #26]
 800157e:	fb12 f303 	smulbb	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21a      	sxth	r2, r3
 8001586:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800158a:	b21c      	sxth	r4, r3
 800158c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800158e:	b29b      	uxth	r3, r3
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	f7ff fcae 	bl	8000ef4 <fillRect>
			set_pixels = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 800159c:	7e3b      	ldrb	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	763b      	strb	r3, [r7, #24]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	78db      	ldrb	r3, [r3, #3]
 80015a6:	7e3a      	ldrb	r2, [r7, #24]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f4ff af5e 	bcc.w	800146a <LCD_Char+0x30>
		}
	}
}
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}

080015b6 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80015b6:	b590      	push	{r4, r7, lr}
 80015b8:	b08f      	sub	sp, #60	; 0x3c
 80015ba:	af02      	add	r7, sp, #8
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	4603      	mov	r3, r0
 80015c2:	81fb      	strh	r3, [r7, #14]
 80015c4:	460b      	mov	r3, r1
 80015c6:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80015c8:	89fb      	ldrh	r3, [r7, #14]
 80015ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	220c      	movs	r2, #12
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 f925 	bl	8007828 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80015de:	2300      	movs	r3, #0
 80015e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80015e2:	e056      	b.n	8001692 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80015e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 80015f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80015f4:	2b0a      	cmp	r3, #10
 80015f6:	d10f      	bne.n	8001618 <LCD_Font+0x62>
		{
			cursor_x = x;
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80015fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001600:	b29a      	uxth	r2, r3
 8001602:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001606:	b29b      	uxth	r3, r3
 8001608:	fb12 f303 	smulbb	r3, r2, r3
 800160c:	b29a      	uxth	r2, r3
 800160e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001610:	4413      	add	r3, r2
 8001612:	b29b      	uxth	r3, r3
 8001614:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001616:	e039      	b.n	800168c <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800161c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001620:	429a      	cmp	r2, r3
 8001622:	d333      	bcc.n	800168c <LCD_Font+0xd6>
 8001624:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001628:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800162c:	429a      	cmp	r2, r3
 800162e:	d82d      	bhi.n	800168c <LCD_Font+0xd6>
 8001630:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001634:	2b0d      	cmp	r3, #13
 8001636:	d029      	beq.n	800168c <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800163e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	18d1      	adds	r1, r2, r3
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2208      	movs	r2, #8
 800164e:	4618      	mov	r0, r3
 8001650:	f006 f8ea 	bl	8007828 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001654:	f107 041c 	add.w	r4, r7, #28
 8001658:	f107 0214 	add.w	r2, r7, #20
 800165c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001660:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4623      	mov	r3, r4
 8001670:	f7ff fee3 	bl	800143a <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001674:	7e3b      	ldrb	r3, [r7, #24]
 8001676:	b29a      	uxth	r2, r3
 8001678:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800167c:	b29b      	uxth	r3, r3
 800167e:	fb12 f303 	smulbb	r3, r2, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001686:	4413      	add	r3, r2
 8001688:	b29b      	uxth	r3, r3
 800168a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800168c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800168e:	3301      	adds	r3, #1
 8001690:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001692:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7fe fd9b 	bl	80001d0 <strlen>
 800169a:	4603      	mov	r3, r0
 800169c:	429c      	cmp	r4, r3
 800169e:	d3a1      	bcc.n	80015e4 <LCD_Font+0x2e>
		}
	}
}
 80016a0:	bf00      	nop
 80016a2:	3734      	adds	r7, #52	; 0x34
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
 80016c8:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016cc:	4a2f      	ldr	r2, [pc, #188]	; (800178c <MX_ADC1_Init+0xe4>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016ea:	2204      	movs	r2, #4
 80016ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <MX_ADC1_Init+0xe0>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_ADC1_Init+0xe0>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170e:	4b1e      	ldr	r3, [pc, #120]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001710:	2200      	movs	r2, #0
 8001712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001716:	2201      	movs	r2, #1
 8001718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_ADC1_Init+0xe0>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800172a:	4817      	ldr	r0, [pc, #92]	; (8001788 <MX_ADC1_Init+0xe0>)
 800172c:	f001 fca2 	bl	8003074 <HAL_ADC_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001736:	f000 fbab 	bl	8001e90 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	4810      	ldr	r0, [pc, #64]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001746:	f002 f9fd 	bl	8003b44 <HAL_ADCEx_MultiModeConfigChannel>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001750:	f000 fb9e 	bl	8001e90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_ADC1_Init+0xe8>)
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001758:	2306      	movs	r3, #6
 800175a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001760:	237f      	movs	r3, #127	; 0x7f
 8001762:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001764:	2304      	movs	r3, #4
 8001766:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_ADC1_Init+0xe0>)
 8001772:	f001 fdd3 	bl	800331c <HAL_ADC_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800177c:	f000 fb88 	bl	8001e90 <Error_Handler>
  }

}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	; 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000b8 	.word	0x200000b8
 800178c:	50040000 	.word	0x50040000
 8001790:	08600004 	.word	0x08600004

08001794 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <HAL_ADC_MspInit+0xc8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d14e      	bne.n	8001854 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4b27      	ldr	r3, [pc, #156]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_ADC_MspInit+0xcc>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 80017e6:	2302      	movs	r3, #2
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017ea:	230b      	movs	r3, #11
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	481a      	ldr	r0, [pc, #104]	; (8001864 <HAL_ADC_MspInit+0xd0>)
 80017fa:	f002 fd99 	bl	8004330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001800:	4a1a      	ldr	r2, [pc, #104]	; (800186c <HAL_ADC_MspInit+0xd8>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b14      	ldr	r3, [pc, #80]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 800181e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001822:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001838:	480b      	ldr	r0, [pc, #44]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 800183a:	f002 fb41 	bl	8003ec0 <HAL_DMA_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8001844:	f000 fb24 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 800184c:	64da      	str	r2, [r3, #76]	; 0x4c
 800184e:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_ADC_MspInit+0xd4>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	50040000 	.word	0x50040000
 8001860:	40021000 	.word	0x40021000
 8001864:	48000800 	.word	0x48000800
 8001868:	2000011c 	.word	0x2000011c
 800186c:	40020430 	.word	0x40020430

08001870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_DMA_Init+0x60>)
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <MX_DMA_Init+0x60>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6493      	str	r3, [r2, #72]	; 0x48
 8001882:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MX_DMA_Init+0x60>)
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <MX_DMA_Init+0x60>)
 8001890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <MX_DMA_Init+0x60>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	6493      	str	r3, [r2, #72]	; 0x48
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <MX_DMA_Init+0x60>)
 800189c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	200d      	movs	r0, #13
 80018ac:	f002 fad1 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80018b0:	200d      	movs	r0, #13
 80018b2:	f002 faea 	bl	8003e8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	203a      	movs	r0, #58	; 0x3a
 80018bc:	f002 fac9 	bl	8003e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80018c0:	203a      	movs	r0, #58	; 0x3a
 80018c2:	f002 fae2 	bl	8003e8a <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000

080018d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <MX_GPIO_Init+0x138>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <MX_GPIO_Init+0x138>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f6:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <MX_GPIO_Init+0x138>)
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <MX_GPIO_Init+0x138>)
 8001904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001906:	4a41      	ldr	r2, [pc, #260]	; (8001a0c <MX_GPIO_Init+0x138>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <MX_GPIO_Init+0x138>)
 8001910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <MX_GPIO_Init+0x138>)
 800191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191e:	4a3b      	ldr	r2, [pc, #236]	; (8001a0c <MX_GPIO_Init+0x138>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <MX_GPIO_Init+0x138>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f002 fea0 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001946:	4832      	ldr	r0, [pc, #200]	; (8001a10 <MX_GPIO_Init+0x13c>)
 8001948:	f002 fe9a 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001952:	4830      	ldr	r0, [pc, #192]	; (8001a14 <MX_GPIO_Init+0x140>)
 8001954:	f002 fe94 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800195c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <MX_GPIO_Init+0x144>)
 8001960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4828      	ldr	r0, [pc, #160]	; (8001a10 <MX_GPIO_Init+0x13c>)
 800196e:	f002 fcdf 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001972:	2301      	movs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	4822      	ldr	r0, [pc, #136]	; (8001a10 <MX_GPIO_Init+0x13c>)
 8001986:	f002 fcd3 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800198a:	2320      	movs	r3, #32
 800198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198e:	2301      	movs	r3, #1
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f002 fcc4 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 80019a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MX_GPIO_Init+0x13c>)
 80019c2:	f002 fcb5 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_GPIO_Init+0x140>)
 80019e0:	f002 fca6 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4619      	mov	r1, r3
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a00:	f002 fc96 	bl	8004330 <HAL_GPIO_Init>

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000800 	.word	0x48000800
 8001a14:	48000400 	.word	0x48000400
 8001a18:	10210000 	.word	0x10210000

08001a1c <drawGrid>:
 *      Author: Dominik
 */

#include "lcd.h"

void drawGrid(){
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
	// vertical lines
	for(int i = 0; i < 480; i+=60){
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	e015      	b.n	8001a54 <drawGrid+0x38>
		for(int j = 20; j < 320; j+=2)
 8001a28:	2314      	movs	r3, #20
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e00b      	b.n	8001a46 <drawGrid+0x2a>
			drawPixel(i, j, ILI9488_DARKGREY);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	b211      	sxth	r1, r2
 8001a36:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff fa10 	bl	8000e60 <drawPixel>
		for(int j = 20; j < 320; j+=2)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	3302      	adds	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a4c:	dbef      	blt.n	8001a2e <drawGrid+0x12>
	for(int i = 0; i < 480; i+=60){
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	333c      	adds	r3, #60	; 0x3c
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001a5a:	dbe5      	blt.n	8001a28 <drawGrid+0xc>
	}
	for(int j = 20; j < 320; j+=2)
 8001a5c:	2314      	movs	r3, #20
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e00b      	b.n	8001a7a <drawGrid+0x5e>
				drawPixel(479, j, ILI9488_DARKGREY);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f240 10df 	movw	r0, #479	; 0x1df
 8001a70:	f7ff f9f6 	bl	8000e60 <drawPixel>
	for(int j = 20; j < 320; j+=2)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3302      	adds	r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a80:	dbef      	blt.n	8001a62 <drawGrid+0x46>

	// horizontal lines
	for(int i = 20; i < 320; i+=60){
 8001a82:	2314      	movs	r3, #20
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	e015      	b.n	8001ab4 <drawGrid+0x98>
		for(int j = 0; j < 480; j+=2)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	e00b      	b.n	8001aa6 <drawGrid+0x8a>
			drawPixel(j, i, ILI9488_DARKGREY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	b211      	sxth	r1, r2
 8001a96:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9e0 	bl	8000e60 <drawPixel>
		for(int j = 0; j < 480; j+=2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001aac:	dbef      	blt.n	8001a8e <drawGrid+0x72>
	for(int i = 20; i < 320; i+=60){
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	333c      	adds	r3, #60	; 0x3c
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001aba:	dbe5      	blt.n	8001a88 <drawGrid+0x6c>
	}
	for(int j = 0; j < 480; j+=2)
 8001abc:	2300      	movs	r3, #0
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	e00b      	b.n	8001ada <drawGrid+0xbe>
				drawPixel(j, 319, ILI9488_DARKGREY);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001aca:	f240 113f 	movw	r1, #319	; 0x13f
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f9c6 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 480; j+=2)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ae0:	dbef      	blt.n	8001ac2 <drawGrid+0xa6>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_SPI_TxCpltCallback+0x1c>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	00000000 	.word	0x00000000

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	f5ad 6d37 	sub.w	sp, sp, #2928	; 0xb70
 8001b16:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  oscilloscope_channel CH1;
  oscilloscope_channel_init(&CH1);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f9be 	bl	8001e9e <oscilloscope_channel_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b22:	f001 f87d 	bl	8002c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b26:	f000 f92d 	bl	8001d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f7ff fed3 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b2e:	f7ff fe9f 	bl	8001870 <MX_DMA_Init>
  MX_SPI1_Init();
 8001b32:	f000 fc95 	bl	8002460 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001b36:	f000 fcd1 	bl	80024dc <MX_SPI2_Init>
  MX_TIM3_Init();
 8001b3a:	f000 ff27 	bl	800298c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001b3e:	f7ff fdb3 	bl	80016a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b42:	f000 fec9 	bl	80028d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CH1.waveform , MEMORY_DEPTH);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b46:	213c      	movs	r1, #60	; 0x3c
 8001b48:	4885      	ldr	r0, [pc, #532]	; (8001d60 <main+0x250>)
 8001b4a:	f005 f887 	bl	8006c5c <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001b4e:	210c      	movs	r1, #12
 8001b50:	4884      	ldr	r0, [pc, #528]	; (8001d64 <main+0x254>)
 8001b52:	f004 fed7 	bl	8006904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b56:	2108      	movs	r1, #8
 8001b58:	4882      	ldr	r0, [pc, #520]	; (8001d64 <main+0x254>)
 8001b5a:	f004 fed3 	bl	8006904 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LCD_BRIGHTNESS); // 0-1000
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <main+0x254>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200); // 0-1000
 8001b68:	4b7e      	ldr	r3, [pc, #504]	; (8001d64 <main+0x254>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	22c8      	movs	r2, #200	; 0xc8
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  ILI9488_Init();
 8001b70:	f7ff f83a 	bl	8000be8 <ILI9488_Init>
  setRotation(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff fa57 	bl	8001028 <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fc46 	bl	800140c <ILI9341_Fill_Screen>
  drawGrid();
 8001b80:	f7ff ff4c 	bl	8001a1c <drawGrid>

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001b84:	2312      	movs	r3, #18
 8001b86:	f240 12db 	movw	r2, #475	; 0x1db
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001b90:	f7ff f90c 	bl	8000dac <setAddrWindow>
  ILI9341_Draw_Colour_Burst(YELLOW, 35 * 18);
 8001b94:	f240 2176 	movw	r1, #630	; 0x276
 8001b98:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001b9c:	f7ff fb44 	bl	8001228 <ILI9341_Draw_Colour_Burst>
  LCD_Font(466, 15, "2", _Open_Sans_Bold_12  , 1, BLACK);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <main+0x258>)
 8001baa:	4a70      	ldr	r2, [pc, #448]	; (8001d6c <main+0x25c>)
 8001bac:	210f      	movs	r1, #15
 8001bae:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001bb2:	f7ff fd00 	bl	80015b6 <LCD_Font>

  HAL_Delay(500);
 8001bb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bba:	f001 f8ad 	bl	8002d18 <HAL_Delay>

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	f240 12db 	movw	r2, #475	; 0x1db
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001bca:	f7ff f8ef 	bl	8000dac <setAddrWindow>
  ILI9341_Draw_Colour_Burst(GREEN, 35 * 18);
 8001bce:	f240 2176 	movw	r1, #630	; 0x276
 8001bd2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001bd6:	f7ff fb27 	bl	8001228 <ILI9341_Draw_Colour_Burst>
  LCD_Font(440, 15, "Ch:", _Open_Sans_Bold_12  , 1, WHITE);
 8001bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b60      	ldr	r3, [pc, #384]	; (8001d68 <main+0x258>)
 8001be6:	4a62      	ldr	r2, [pc, #392]	; (8001d70 <main+0x260>)
 8001be8:	210f      	movs	r1, #15
 8001bea:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8001bee:	f7ff fce2 	bl	80015b6 <LCD_Font>
  LCD_Font(466, 15, "1", _Open_Sans_Bold_12  , 1, BLACK);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <main+0x258>)
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <main+0x264>)
 8001bfe:	210f      	movs	r1, #15
 8001c00:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001c04:	f7ff fcd7 	bl	80015b6 <LCD_Font>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int faza = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
	  setAddrWindow(10, 10, 10+300-1, 10+150-1);
	  ILI9341_Draw_Colour_Burst(RED, 300 * 150);
	  HAL_Delay(1000);
	  */

	  for(int i = 0; i < 480; ++i){
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001c14:	e048      	b.n	8001ca8 <main+0x198>
	  	CH1.waveform[i] = 2000*sin(0.05*i + faza*0.1) + 2000;
 8001c16:	f8d7 0b60 	ldr.w	r0, [r7, #2912]	; 0xb60
 8001c1a:	f7fe fc83 	bl	8000524 <__aeabi_i2d>
 8001c1e:	a34c      	add	r3, pc, #304	; (adr r3, 8001d50 <main+0x240>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fce8 	bl	80005f8 <__aeabi_dmul>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	460c      	mov	r4, r1
 8001c2c:	4625      	mov	r5, r4
 8001c2e:	461c      	mov	r4, r3
 8001c30:	f8d7 0b64 	ldr.w	r0, [r7, #2916]	; 0xb64
 8001c34:	f7fe fc76 	bl	8000524 <__aeabi_i2d>
 8001c38:	a347      	add	r3, pc, #284	; (adr r3, 8001d58 <main+0x248>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcdb 	bl	80005f8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fb1f 	bl	800028c <__adddf3>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460c      	mov	r4, r1
 8001c52:	ec44 3b17 	vmov	d7, r3, r4
 8001c56:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5a:	eef0 0a67 	vmov.f32	s1, s15
 8001c5e:	f006 f9f3 	bl	8008048 <sin>
 8001c62:	ec51 0b10 	vmov	r0, r1, d0
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <main+0x268>)
 8001c6c:	f7fe fcc4 	bl	80005f8 <__aeabi_dmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	4618      	mov	r0, r3
 8001c76:	4621      	mov	r1, r4
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <main+0x268>)
 8001c7e:	f7fe fb05 	bl	800028c <__adddf3>
 8001c82:	4603      	mov	r3, r0
 8001c84:	460c      	mov	r4, r1
 8001c86:	4618      	mov	r0, r3
 8001c88:	4621      	mov	r1, r4
 8001c8a:	f7fe ff8d 	bl	8000ba8 <__aeabi_d2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b299      	uxth	r1, r3
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	f8d7 2b60 	ldr.w	r2, [r7, #2912]	; 0xb60
 8001c9a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for(int i = 0; i < 480; ++i){
 8001c9e:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001ca8:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001cac:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001cb0:	dbb1      	blt.n	8001c16 <main+0x106>
	    }
	  faza++;
 8001cb2:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
	  draw_waveform(& CH1);
 8001cbc:	f107 0318 	add.w	r3, r7, #24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fa81 	bl	80021c8 <draw_waveform>

	  sprintf(buf,"Vpp=%d", calculate_peak_to_peak(CH1.waveform));
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f8fd 	bl	8001eca <calculate_peak_to_peak>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4929      	ldr	r1, [pc, #164]	; (8001d7c <main+0x26c>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f005 fdba 	bl	8007850 <siprintf>
	  setAddrWindow(39, 1, 39+35-1, 1+18-1);
 8001cdc:	2312      	movs	r3, #18
 8001cde:	2249      	movs	r2, #73	; 0x49
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2027      	movs	r0, #39	; 0x27
 8001ce4:	f7ff f862 	bl	8000dac <setAddrWindow>
	  ILI9341_Draw_Colour_Burst(RED, 35 * 18);
 8001ce8:	f240 2176 	movw	r1, #630	; 0x276
 8001cec:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001cf0:	f7ff fa9a 	bl	8001228 <ILI9341_Draw_Colour_Burst>
	  LCD_Font(5, 15, buf, _Open_Sans_Bold_12  , 1, WHITE);
 8001cf4:	1d3a      	adds	r2, r7, #4
 8001cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <main+0x258>)
 8001d02:	210f      	movs	r1, #15
 8001d04:	2005      	movs	r0, #5
 8001d06:	f7ff fc56 	bl	80015b6 <LCD_Font>

	  sprintf(buf,"Vrms=%d", calculate_RMS(CH1.waveform));
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f91a 	bl	8001f48 <calculate_RMS>
 8001d14:	4602      	mov	r2, r0
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	4919      	ldr	r1, [pc, #100]	; (8001d80 <main+0x270>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fd98 	bl	8007850 <siprintf>
	  setAddrWindow(122, 1, 122+35-1, 1+18-1);
 8001d20:	2312      	movs	r3, #18
 8001d22:	229c      	movs	r2, #156	; 0x9c
 8001d24:	2101      	movs	r1, #1
 8001d26:	207a      	movs	r0, #122	; 0x7a
 8001d28:	f7ff f840 	bl	8000dac <setAddrWindow>
	  ILI9341_Draw_Colour_Burst(RED, 35 * 18);
 8001d2c:	f240 2176 	movw	r1, #630	; 0x276
 8001d30:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d34:	f7ff fa78 	bl	8001228 <ILI9341_Draw_Colour_Burst>
	  LCD_Font(80, 15, buf, _Open_Sans_Bold_12  , 1, WHITE);
 8001d38:	1d3a      	adds	r2, r7, #4
 8001d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <main+0x258>)
 8001d46:	210f      	movs	r1, #15
 8001d48:	2050      	movs	r0, #80	; 0x50
 8001d4a:	f7ff fc34 	bl	80015b6 <LCD_Font>
	  for(int i = 0; i < 480; ++i){
 8001d4e:	e75e      	b.n	8001c0e <main+0xfe>
 8001d50:	9999999a 	.word	0x9999999a
 8001d54:	3fa99999 	.word	0x3fa99999
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fb99999 	.word	0x3fb99999
 8001d60:	200002c0 	.word	0x200002c0
 8001d64:	20000274 	.word	0x20000274
 8001d68:	0800985c 	.word	0x0800985c
 8001d6c:	080092a8 	.word	0x080092a8
 8001d70:	080092ac 	.word	0x080092ac
 8001d74:	080092b0 	.word	0x080092b0
 8001d78:	409f4000 	.word	0x409f4000
 8001d7c:	080092b4 	.word	0x080092b4
 8001d80:	080092bc 	.word	0x080092bc

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b0b8      	sub	sp, #224	; 0xe0
 8001d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8e:	2244      	movs	r2, #68	; 0x44
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f005 fd53 	bl	800783e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	463b      	mov	r3, r7
 8001daa:	2288      	movs	r2, #136	; 0x88
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fd45 	bl	800783e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001dda:	230a      	movs	r3, #10
 8001ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001de0:	2307      	movs	r3, #7
 8001de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dec:	2302      	movs	r3, #2
 8001dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fcbe 	bl	8004778 <HAL_RCC_OscConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e02:	f000 f845 	bl	8001e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e06:	230f      	movs	r3, #15
 8001e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e24:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e28:	2104      	movs	r1, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f88a 	bl	8004f44 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e36:	f000 f82b 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e3e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001e44:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001e46:	2302      	movs	r3, #2
 8001e48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e52:	2307      	movs	r3, #7
 8001e54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e62:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fa38 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001e72:	f000 f80d 	bl	8001e90 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e7a:	f002 fc27 	bl	80046cc <HAL_PWREx_ControlVoltageScaling>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001e84:	f000 f804 	bl	8001e90 <Error_Handler>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	37e0      	adds	r7, #224	; 0xe0
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <oscilloscope_channel_init>:
 *      Author: Dominik
 */

#include "oscilloscope.h"

void oscilloscope_channel_init(oscilloscope_channel* ch){
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	ch->x_offset = 0;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
	ch->y_offset = 0;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
	ch->y_scale = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <calculate_peak_to_peak>:


int calculate_peak_to_peak(int16_t waveform[MEMORY_DEPTH]){
 8001eca:	b480      	push	{r7}
 8001ecc:	b087      	sub	sp, #28
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	uint32_t max=0, min=4096;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eda:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e024      	b.n	8001f2c <calculate_peak_to_peak+0x62>
		if(waveform[i]<min)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d906      	bls.n	8001f04 <calculate_peak_to_peak+0x3a>
			min=waveform[i];
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	613b      	str	r3, [r7, #16]
		if(waveform[i]>max)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d206      	bcs.n	8001f26 <calculate_peak_to_peak+0x5c>
			max=waveform[i];
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f24:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f32:	dbd6      	blt.n	8001ee2 <calculate_peak_to_peak+0x18>
	}
	return max-min;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <calculate_RMS>:

int calculate_RMS(int16_t waveform[MEMORY_DEPTH]) {
 8001f48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001f4c:	b08a      	sub	sp, #40	; 0x28
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
    int64_t sum_of_squares = 0;
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	f04f 0400 	mov.w	r4, #0
 8001f5a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    for (int i = 0; i < MEMORY_DEPTH; ++i) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e01c      	b.n	8001f9e <calculate_RMS+0x56>
        sum_of_squares += (int32_t)waveform[i] * waveform[i];
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	4619      	mov	r1, r3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7e:	fb03 f301 	mul.w	r3, r3, r1
 8001f82:	469b      	mov	fp, r3
 8001f84:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001f88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001f8c:	eb1b 0301 	adds.w	r3, fp, r1
 8001f90:	eb4c 0402 	adc.w	r4, ip, r2
 8001f94:	e9c7 3408 	strd	r3, r4, [r7, #32]
    for (int i = 0; i < MEMORY_DEPTH; ++i) {
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001fa4:	dbde      	blt.n	8001f64 <calculate_RMS+0x1c>
    }
    double mean_of_squares = (double)sum_of_squares / MEMORY_DEPTH;
 8001fa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001faa:	f7fe faf7 	bl	800059c <__aeabi_l2d>
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <calculate_RMS+0x98>)
 8001fb4:	f7fe fc4a 	bl	800084c <__aeabi_ddiv>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double rms = sqrt(mean_of_squares);
 8001fc0:	ed97 0b04 	vldr	d0, [r7, #16]
 8001fc4:	f006 f888 	bl	80080d8 <sqrt>
 8001fc8:	ed87 0b02 	vstr	d0, [r7, #8]
    return (int)rms;
 8001fcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd0:	f7fe fdc2 	bl	8000b58 <__aeabi_d2iz>
 8001fd4:	4603      	mov	r3, r0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8001fe0:	407e0000 	.word	0x407e0000

08001fe4 <erase_waveform>:

void erase_waveform(uint16_t waveform[MEMORY_DEPTH], uint32_t x){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 480; ++i){
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e0db      	b.n	80021ac <erase_waveform+0x1c8>
			drawPixel(i, CANVA_MIDDLE_V - x - waveform[i]/40, BLACK);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	b218      	sxth	r0, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	4a6f      	ldr	r2, [pc, #444]	; (80021c0 <erase_waveform+0x1dc>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	b29b      	uxth	r3, r3
 800200c:	425b      	negs	r3, r3
 800200e:	b29a      	uxth	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	33aa      	adds	r3, #170	; 0xaa
 800201a:	b29b      	uxth	r3, r3
 800201c:	b21b      	sxth	r3, r3
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe ff1d 	bl	8000e60 <drawPixel>
		if((i%2==0) || (i ==479)){
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d004      	beq.n	800203a <erase_waveform+0x56>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f240 12df 	movw	r2, #479	; 0x1df
 8002036:	4293      	cmp	r3, r2
 8002038:	d176      	bne.n	8002128 <erase_waveform+0x144>
			if(((CANVA_MIDDLE_V - x - waveform[i]/40) == 20) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <erase_waveform+0x1dc>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	b29b      	uxth	r3, r3
 800204e:	425a      	negs	r2, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8002058:	d04c      	beq.n	80020f4 <erase_waveform+0x110>
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 80) ||
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	4a56      	ldr	r2, [pc, #344]	; (80021c0 <erase_waveform+0x1dc>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	b29b      	uxth	r3, r3
 800206e:	425a      	negs	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	1ad3      	subs	r3, r2, r3
			if(((CANVA_MIDDLE_V - x - waveform[i]/40) == 20) ||
 8002074:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8002078:	d03c      	beq.n	80020f4 <erase_waveform+0x110>
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 140) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	4a4e      	ldr	r2, [pc, #312]	; (80021c0 <erase_waveform+0x1dc>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	b29b      	uxth	r3, r3
 800208e:	425a      	negs	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	1ad3      	subs	r3, r2, r3
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 80) ||
 8002094:	f113 0f1e 	cmn.w	r3, #30
 8002098:	d02c      	beq.n	80020f4 <erase_waveform+0x110>
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 200) ||
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	4a46      	ldr	r2, [pc, #280]	; (80021c0 <erase_waveform+0x1dc>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	425a      	negs	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	1ad3      	subs	r3, r2, r3
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 140) ||
 80020b4:	2b1e      	cmp	r3, #30
 80020b6:	d01d      	beq.n	80020f4 <erase_waveform+0x110>
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 260) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	4a3f      	ldr	r2, [pc, #252]	; (80021c0 <erase_waveform+0x1dc>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	095b      	lsrs	r3, r3, #5
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	425a      	negs	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	1ad3      	subs	r3, r2, r3
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 200) ||
 80020d2:	2b5a      	cmp	r3, #90	; 0x5a
 80020d4:	d00e      	beq.n	80020f4 <erase_waveform+0x110>
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 319)){
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	4a37      	ldr	r2, [pc, #220]	; (80021c0 <erase_waveform+0x1dc>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	425a      	negs	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	1ad3      	subs	r3, r2, r3
			   ((CANVA_MIDDLE_V - x - waveform[i]/40) == 260) ||
 80020f0:	2b95      	cmp	r3, #149	; 0x95
 80020f2:	d119      	bne.n	8002128 <erase_waveform+0x144>
				drawPixel(i, CANVA_MIDDLE_V - x - waveform[i]/40, ILI9488_DARKGREY);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	b218      	sxth	r0, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	4a2f      	ldr	r2, [pc, #188]	; (80021c0 <erase_waveform+0x1dc>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	b29b      	uxth	r3, r3
 800210c:	425b      	negs	r3, r3
 800210e:	b29a      	uxth	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29b      	uxth	r3, r3
 8002118:	33aa      	adds	r3, #170	; 0xaa
 800211a:	b29b      	uxth	r3, r3
 800211c:	b21b      	sxth	r3, r3
 800211e:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8002122:	4619      	mov	r1, r3
 8002124:	f7fe fe9c 	bl	8000e60 <drawPixel>
			}
		}
		if((i%60==0) || (i ==479)){
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <erase_waveform+0x1e0>)
 800212c:	fb83 1302 	smull	r1, r3, r3, r2
 8002130:	4413      	add	r3, r2
 8002132:	1159      	asrs	r1, r3, #5
 8002134:	17d3      	asrs	r3, r2, #31
 8002136:	1ac9      	subs	r1, r1, r3
 8002138:	460b      	mov	r3, r1
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a5b      	subs	r3, r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	1ad1      	subs	r1, r2, r3
 8002142:	2900      	cmp	r1, #0
 8002144:	d004      	beq.n	8002150 <erase_waveform+0x16c>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f240 12df 	movw	r2, #479	; 0x1df
 800214c:	4293      	cmp	r3, r2
 800214e:	d12a      	bne.n	80021a6 <erase_waveform+0x1c2>
			if(((LCD_HEIGHT/2 - x - waveform[i]/40) % 2) == 0){
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <erase_waveform+0x1dc>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b29b      	uxth	r3, r3
 8002164:	425a      	negs	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d119      	bne.n	80021a6 <erase_waveform+0x1c2>
				drawPixel(i, CANVA_MIDDLE_V - x - waveform[i]/40, ILI9488_DARKGREY);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	b218      	sxth	r0, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <erase_waveform+0x1dc>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b29b      	uxth	r3, r3
 800218a:	425b      	negs	r3, r3
 800218c:	b29a      	uxth	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	b29b      	uxth	r3, r3
 8002196:	33aa      	adds	r3, #170	; 0xaa
 8002198:	b29b      	uxth	r3, r3
 800219a:	b21b      	sxth	r3, r3
 800219c:	f647 32ef 	movw	r2, #31727	; 0x7bef
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fe5d 	bl	8000e60 <drawPixel>
	for(int i = 0; i < 480; ++i){
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021b2:	f6ff af1f 	blt.w	8001ff4 <erase_waveform+0x10>
			}
		}
	  }
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	88888889 	.word	0x88888889

080021c8 <draw_waveform>:

void draw_waveform(oscilloscope_channel* ch){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	erase_waveform(ch->waveform_display_previous, ch->x_offset);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f203 7286 	addw	r2, r3, #1926	; 0x786
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f7ff ff00 	bl	8001fe4 <erase_waveform>


	// erase marker 0
	for(int j = 0; j < 5; ++j){
 80021e4:	2300      	movs	r3, #0
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
 80021e8:	e010      	b.n	800220c <draw_waveform+0x44>
		drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 2, BLACK);
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	b218      	sxth	r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f1c3 03a8 	rsb	r3, r3, #168	; 0xa8
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	2200      	movs	r2, #0
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fe2d 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 5; ++j){
 8002206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002208:	3301      	adds	r3, #1
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	2b04      	cmp	r3, #4
 8002210:	ddeb      	ble.n	80021ea <draw_waveform+0x22>
	}
	for(int j = 0; j < 6; ++j){
 8002212:	2300      	movs	r3, #0
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
 8002216:	e010      	b.n	800223a <draw_waveform+0x72>
		drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 1, BLACK);
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	b218      	sxth	r0, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002222:	b29b      	uxth	r3, r3
 8002224:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 8002228:	b29b      	uxth	r3, r3
 800222a:	b21b      	sxth	r3, r3
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fe16 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 6; ++j){
 8002234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002236:	3301      	adds	r3, #1
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	2b05      	cmp	r3, #5
 800223e:	ddeb      	ble.n	8002218 <draw_waveform+0x50>
	}
	for(int j = 0; j < 7; ++j){
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002244:	e010      	b.n	8002268 <draw_waveform+0xa0>
		drawPixel(j, CANVA_MIDDLE_V - ch->x_offset, BLACK);
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	b218      	sxth	r0, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002250:	b29b      	uxth	r3, r3
 8002252:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8002256:	b29b      	uxth	r3, r3
 8002258:	b21b      	sxth	r3, r3
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fdff 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 7; ++j){
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	3301      	adds	r3, #1
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	2b06      	cmp	r3, #6
 800226c:	ddeb      	ble.n	8002246 <draw_waveform+0x7e>
	}
	for(int j = 0; j < 6; ++j){
 800226e:	2300      	movs	r3, #0
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
 8002272:	e010      	b.n	8002296 <draw_waveform+0xce>
		drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 1, BLACK);
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	b218      	sxth	r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800227e:	b29b      	uxth	r3, r3
 8002280:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
 8002284:	b29b      	uxth	r3, r3
 8002286:	b21b      	sxth	r3, r3
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fde8 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 6; ++j){
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	3301      	adds	r3, #1
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	2b05      	cmp	r3, #5
 800229a:	ddeb      	ble.n	8002274 <draw_waveform+0xac>
	}
	for(int j = 0; j < 5; ++j){
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	e010      	b.n	80022c4 <draw_waveform+0xfc>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, BLACK);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	b218      	sxth	r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fdd1 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 5; ++j){
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	ddeb      	ble.n	80022a2 <draw_waveform+0xda>
	}

	ch->x_offset = htim1.Instance->CNT;
 80022ca:	4b63      	ldr	r3, [pc, #396]	; (8002458 <draw_waveform+0x290>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0

		for(int i = 0; i < 480; ++i){
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
 80022dc:	e03b      	b.n	8002356 <draw_waveform+0x18e>
			ch->waveform_display[i] = ch->waveform[i];
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a3a      	ldr	r2, [r7, #32]
 80022e2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	460a      	mov	r2, r1
 80022f4:	80da      	strh	r2, [r3, #6]
			drawPixel(i, CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40, GREEN);
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	b218      	sxth	r0, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002300:	b29b      	uxth	r3, r3
 8002302:	425b      	negs	r3, r3
 8002304:	b29a      	uxth	r2, r3
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	440b      	add	r3, r1
 8002312:	88db      	ldrh	r3, [r3, #6]
 8002314:	4951      	ldr	r1, [pc, #324]	; (800245c <draw_waveform+0x294>)
 8002316:	fba1 1303 	umull	r1, r3, r1, r3
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	b29b      	uxth	r3, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	33aa      	adds	r3, #170	; 0xaa
 8002324:	b29b      	uxth	r3, r3
 8002326:	b21b      	sxth	r3, r3
 8002328:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fd97 	bl	8000e60 <drawPixel>
			ch->waveform_display_previous[i] = ch->waveform_display[i];
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	88d9      	ldrh	r1, [r3, #6]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	460a      	mov	r2, r1
 800234e:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < 480; ++i){
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	3301      	adds	r3, #1
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800235c:	dbbf      	blt.n	80022de <draw_waveform+0x116>
		}
	// draw marker 0
	for(int j = 0; j < 5; ++j){
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e011      	b.n	8002388 <draw_waveform+0x1c0>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 2, GREEN);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	b218      	sxth	r0, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800236e:	b29b      	uxth	r3, r3
 8002370:	f1c3 03a8 	rsb	r3, r3, #168	; 0xa8
 8002374:	b29b      	uxth	r3, r3
 8002376:	b21b      	sxth	r3, r3
 8002378:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fd6f 	bl	8000e60 <drawPixel>
	for(int j = 0; j < 5; ++j){
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b04      	cmp	r3, #4
 800238c:	ddea      	ble.n	8002364 <draw_waveform+0x19c>
		}
		for(int j = 0; j < 6; ++j){
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e011      	b.n	80023b8 <draw_waveform+0x1f0>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 1, GREEN);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	b218      	sxth	r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800239e:	b29b      	uxth	r3, r3
 80023a0:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fd57 	bl	8000e60 <drawPixel>
		for(int j = 0; j < 6; ++j){
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	3301      	adds	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	ddea      	ble.n	8002394 <draw_waveform+0x1cc>
		}
		for(int j = 0; j < 7; ++j){
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e011      	b.n	80023e8 <draw_waveform+0x220>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset, GREEN);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	b218      	sxth	r0, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80023dc:	4619      	mov	r1, r3
 80023de:	f7fe fd3f 	bl	8000e60 <drawPixel>
		for(int j = 0; j < 7; ++j){
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3301      	adds	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	ddea      	ble.n	80023c4 <draw_waveform+0x1fc>
		}
		for(int j = 0; j < 6; ++j){
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e011      	b.n	8002418 <draw_waveform+0x250>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 1, GREEN);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	b218      	sxth	r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
 8002404:	b29b      	uxth	r3, r3
 8002406:	b21b      	sxth	r3, r3
 8002408:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800240c:	4619      	mov	r1, r3
 800240e:	f7fe fd27 	bl	8000e60 <drawPixel>
		for(int j = 0; j < 6; ++j){
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	3301      	adds	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b05      	cmp	r3, #5
 800241c:	ddea      	ble.n	80023f4 <draw_waveform+0x22c>
		}
		for(int j = 0; j < 5; ++j){
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	e011      	b.n	8002448 <draw_waveform+0x280>
				drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, GREEN);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	b218      	sxth	r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800242e:	b29b      	uxth	r3, r3
 8002430:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 8002434:	b29b      	uxth	r3, r3
 8002436:	b21b      	sxth	r3, r3
 8002438:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800243c:	4619      	mov	r1, r3
 800243e:	f7fe fd0f 	bl	8000e60 <drawPixel>
		for(int j = 0; j < 5; ++j){
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3301      	adds	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b04      	cmp	r3, #4
 800244c:	ddea      	ble.n	8002424 <draw_waveform+0x25c>
		}
}
 800244e:	bf00      	nop
 8002450:	3738      	adds	r7, #56	; 0x38
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200002c0 	.word	0x200002c0
 800245c:	cccccccd 	.word	0xcccccccd

08002460 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <MX_SPI1_Init+0x74>)
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <MX_SPI1_Init+0x78>)
 8002468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800246a:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <MX_SPI1_Init+0x74>)
 800246c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <MX_SPI1_Init+0x74>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <MX_SPI1_Init+0x74>)
 800247a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800247e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <MX_SPI1_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <MX_SPI1_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <MX_SPI1_Init+0x74>)
 800248e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002492:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <MX_SPI1_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <MX_SPI1_Init+0x74>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a0:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024ae:	2207      	movs	r2, #7
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024ba:	2208      	movs	r2, #8
 80024bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024be:	4805      	ldr	r0, [pc, #20]	; (80024d4 <MX_SPI1_Init+0x74>)
 80024c0:	f003 fbbc 	bl	8005c3c <HAL_SPI_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024ca:	f7ff fce1 	bl	8001e90 <Error_Handler>
  }

}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200001c8 	.word	0x200001c8
 80024d8:	40013000 	.word	0x40013000

080024dc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <MX_SPI2_Init+0x74>)
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <MX_SPI2_Init+0x78>)
 80024e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_SPI2_Init+0x74>)
 80024e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <MX_SPI2_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <MX_SPI2_Init+0x74>)
 80024f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fc:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_SPI2_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <MX_SPI2_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <MX_SPI2_Init+0x74>)
 800250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <MX_SPI2_Init+0x74>)
 8002512:	2218      	movs	r2, #24
 8002514:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_SPI2_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <MX_SPI2_Init+0x74>)
 800251e:	2200      	movs	r2, #0
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002522:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MX_SPI2_Init+0x74>)
 8002524:	2200      	movs	r2, #0
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <MX_SPI2_Init+0x74>)
 800252a:	2207      	movs	r2, #7
 800252c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800252e:	4b08      	ldr	r3, [pc, #32]	; (8002550 <MX_SPI2_Init+0x74>)
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <MX_SPI2_Init+0x74>)
 8002536:	2208      	movs	r2, #8
 8002538:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800253a:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_SPI2_Init+0x74>)
 800253c:	f003 fb7e 	bl	8005c3c <HAL_SPI_Init>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002546:	f7ff fca3 	bl	8001e90 <Error_Handler>
  }

}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000164 	.word	0x20000164
 8002554:	40003800 	.word	0x40003800

08002558 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_SPI_MspInit+0x1ac>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d176      	bne.n	8002668 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	4a62      	ldr	r2, [pc, #392]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002584:	6613      	str	r3, [r2, #96]	; 0x60
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4a5c      	ldr	r2, [pc, #368]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800259e:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	4a56      	ldr	r2, [pc, #344]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80025b0:	f043 0302 	orr.w	r3, r3, #2
 80025b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025d2:	2305      	movs	r3, #5
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025da:	4619      	mov	r1, r3
 80025dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e0:	f001 fea6 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025e4:	2308      	movs	r3, #8
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f4:	2305      	movs	r3, #5
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025fc:	4619      	mov	r1, r3
 80025fe:	4843      	ldr	r0, [pc, #268]	; (800270c <HAL_SPI_MspInit+0x1b4>)
 8002600:	f001 fe96 	bl	8004330 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002606:	4a43      	ldr	r2, [pc, #268]	; (8002714 <HAL_SPI_MspInit+0x1bc>)
 8002608:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800260a:	4b41      	ldr	r3, [pc, #260]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 800260c:	2201      	movs	r2, #1
 800260e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002610:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002612:	2210      	movs	r2, #16
 8002614:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002624:	2200      	movs	r2, #0
 8002626:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800262e:	4b38      	ldr	r3, [pc, #224]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002630:	2200      	movs	r2, #0
 8002632:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 800263c:	f001 fc40 	bl	8003ec0 <HAL_DMA_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8002646:	f7ff fc23 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
 8002650:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <HAL_SPI_MspInit+0x1b8>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2023      	movs	r0, #35	; 0x23
 800265c:	f001 fbf9 	bl	8003e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002660:	2023      	movs	r0, #35	; 0x23
 8002662:	f001 fc12 	bl	8003e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002666:	e049      	b.n	80026fc <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_SPI_MspInit+0x1c0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d144      	bne.n	80026fc <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002672:	4b25      	ldr	r3, [pc, #148]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
 800267e:	4b22      	ldr	r3, [pc, #136]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	4a1e      	ldr	r2, [pc, #120]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	4b19      	ldr	r3, [pc, #100]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a18      	ldr	r2, [pc, #96]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_SPI_MspInit+0x1b0>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026ba:	230c      	movs	r3, #12
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026ca:	2305      	movs	r3, #5
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4811      	ldr	r0, [pc, #68]	; (800271c <HAL_SPI_MspInit+0x1c4>)
 80026d6:	f001 fe2b 	bl	8004330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026ec:	2305      	movs	r3, #5
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	4619      	mov	r1, r3
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <HAL_SPI_MspInit+0x1b4>)
 80026f8:	f001 fe1a 	bl	8004330 <HAL_GPIO_Init>
}
 80026fc:	bf00      	nop
 80026fe:	3738      	adds	r7, #56	; 0x38
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40013000 	.word	0x40013000
 8002708:	40021000 	.word	0x40021000
 800270c:	48000400 	.word	0x48000400
 8002710:	2000022c 	.word	0x2000022c
 8002714:	40020030 	.word	0x40020030
 8002718:	40003800 	.word	0x40003800
 800271c:	48000800 	.word	0x48000800

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <HAL_MspInit+0x44>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_MspInit+0x44>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6613      	str	r3, [r2, #96]	; 0x60
 8002732:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_MspInit+0x44>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <HAL_MspInit+0x44>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_MspInit+0x44>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6593      	str	r3, [r2, #88]	; 0x58
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_MspInit+0x44>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000

08002768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f000 fa8c 	bl	8002cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <DMA1_Channel3_IRQHandler+0x10>)
 80027ca:	f001 fcd2 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2000022c 	.word	0x2000022c

080027d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <SPI1_IRQHandler+0x10>)
 80027de:	f003 fd33 	bl	8006248 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200001c8 	.word	0x200001c8

080027ec <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <DMA2_Channel3_IRQHandler+0x10>)
 80027f2:	f001 fcbe 	bl	8004172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2000011c 	.word	0x2000011c

08002800 <_sbrk>:
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <_sbrk+0x5c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <_sbrk+0x60>)
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d102      	bne.n	8002822 <_sbrk+0x22>
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <_sbrk+0x64>)
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <_sbrk+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	429a      	cmp	r2, r3
 800282e:	d207      	bcs.n	8002840 <_sbrk+0x40>
 8002830:	f004 ffd0 	bl	80077d4 <__errno>
 8002834:	4602      	mov	r2, r0
 8002836:	230c      	movs	r3, #12
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e009      	b.n	8002854 <_sbrk+0x54>
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b07      	ldr	r3, [pc, #28]	; (8002864 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	4a05      	ldr	r2, [pc, #20]	; (8002864 <_sbrk+0x64>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20018000 	.word	0x20018000
 8002860:	00000400 	.word	0x00000400
 8002864:	20000094 	.word	0x20000094
 8002868:	20000318 	.word	0x20000318

0800286c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <SystemInit+0x64>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <SystemInit+0x64>)
 8002878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800287c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <SystemInit+0x68>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <SystemInit+0x68>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <SystemInit+0x68>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <SystemInit+0x68>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <SystemInit+0x68>)
 8002898:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800289c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <SystemInit+0x68>)
 80028a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <SystemInit+0x68>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <SystemInit+0x68>)
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <SystemInit+0x68>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <SystemInit+0x64>)
 80028be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028c2:	609a      	str	r2, [r3, #8]
#endif
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00
 80028d4:	40021000 	.word	0x40021000

080028d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f004 ffa9 	bl	800783e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ec:	463b      	mov	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80028f6:	4b23      	ldr	r3, [pc, #140]	; (8002984 <MX_TIM1_Init+0xac>)
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <MX_TIM1_Init+0xb0>)
 80028fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <MX_TIM1_Init+0xac>)
 80028fe:	2200      	movs	r2, #0
 8002900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <MX_TIM1_Init+0xac>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <MX_TIM1_Init+0xac>)
 800290a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <MX_TIM1_Init+0xac>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <MX_TIM1_Init+0xac>)
 8002918:	2200      	movs	r2, #0
 800291a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <MX_TIM1_Init+0xac>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002922:	2303      	movs	r3, #3
 8002924:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800292a:	2301      	movs	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800293a:	2301      	movs	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002946:	f107 030c 	add.w	r3, r7, #12
 800294a:	4619      	mov	r1, r3
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <MX_TIM1_Init+0xac>)
 800294e:	f004 f8df 	bl	8006b10 <HAL_TIM_Encoder_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002958:	f7ff fa9a 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295c:	2300      	movs	r3, #0
 800295e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002968:	463b      	mov	r3, r7
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_TIM1_Init+0xac>)
 800296e:	f004 fea9 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002978:	f7ff fa8a 	bl	8001e90 <Error_Handler>
  }

}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	; 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200002c0 	.word	0x200002c0
 8002988:	40012c00 	.word	0x40012c00

0800298c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299e:	463b      	mov	r3, r7
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	615a      	str	r2, [r3, #20]
 80029ae:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <MX_TIM3_Init+0xc8>)
 80029b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80029b6:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029b8:	224f      	movs	r2, #79	; 0x4f
 80029ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029c2:	4b23      	ldr	r3, [pc, #140]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029d0:	4b1f      	ldr	r3, [pc, #124]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029d6:	481e      	ldr	r0, [pc, #120]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029d8:	f003 ff3c 	bl	8006854 <HAL_TIM_PWM_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80029e2:	f7ff fa55 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	4816      	ldr	r0, [pc, #88]	; (8002a50 <MX_TIM3_Init+0xc4>)
 80029f6:	f004 fe65 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002a00:	f7ff fa46 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a04:	2360      	movs	r3, #96	; 0x60
 8002a06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a14:	463b      	mov	r3, r7
 8002a16:	2208      	movs	r2, #8
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <MX_TIM3_Init+0xc4>)
 8002a1c:	f004 f9ac 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002a26:	f7ff fa33 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4807      	ldr	r0, [pc, #28]	; (8002a50 <MX_TIM3_Init+0xc4>)
 8002a32:	f004 f9a1 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a3c:	f7ff fa28 	bl	8001e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002a40:	4803      	ldr	r0, [pc, #12]	; (8002a50 <MX_TIM3_Init+0xc4>)
 8002a42:	f000 f86d 	bl	8002b20 <HAL_TIM_MspPostInit>

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000274 	.word	0x20000274
 8002a54:	40000400 	.word	0x40000400

08002a58 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d129      	bne.n	8002ace <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a84:	6613      	str	r3, [r2, #96]	; 0x60
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_TIM_Encoder_MspInit+0x84>)
 8002aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f001 fc31 	bl	8004330 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40021000 	.word	0x40021000

08002ae0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_TIM_PWM_MspInit+0x38>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d10b      	bne.n	8002b0a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af2:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_TIM_MspPostInit+0x9c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d138      	bne.n	8002bb4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <HAL_TIM_MspPostInit+0xa0>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GEN_OUT_Pin;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b82:	2302      	movs	r3, #2
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GEN_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b86:	f107 0314 	add.w	r3, r7, #20
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <HAL_TIM_MspPostInit+0xa4>)
 8002b8e:	f001 fbcf 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8002b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4806      	ldr	r0, [pc, #24]	; (8002bc8 <HAL_TIM_MspPostInit+0xa8>)
 8002bb0:	f001 fbbe 	bl	8004330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002bb4:	bf00      	nop
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	48000800 	.word	0x48000800

08002bcc <Reset_Handler>:
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c04 <LoopForever+0x2>
 8002bd0:	f7ff fe4c 	bl	800286c <SystemInit>
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	e003      	b.n	8002be0 <LoopCopyDataInit>

08002bd8 <CopyDataInit>:
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <LoopForever+0x6>)
 8002bda:	585b      	ldr	r3, [r3, r1]
 8002bdc:	5043      	str	r3, [r0, r1]
 8002bde:	3104      	adds	r1, #4

08002be0 <LoopCopyDataInit>:
 8002be0:	480a      	ldr	r0, [pc, #40]	; (8002c0c <LoopForever+0xa>)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <LoopForever+0xe>)
 8002be4:	1842      	adds	r2, r0, r1
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d3f6      	bcc.n	8002bd8 <CopyDataInit>
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopForever+0x12>)
 8002bec:	e002      	b.n	8002bf4 <LoopFillZerobss>

08002bee <FillZerobss>:
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f842 3b04 	str.w	r3, [r2], #4

08002bf4 <LoopFillZerobss>:
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <LoopForever+0x16>)
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3f9      	bcc.n	8002bee <FillZerobss>
 8002bfa:	f004 fdf1 	bl	80077e0 <__libc_init_array>
 8002bfe:	f7fe ff87 	bl	8001b10 <main>

08002c02 <LoopForever>:
 8002c02:	e7fe      	b.n	8002c02 <LoopForever>
 8002c04:	20018000 	.word	0x20018000
 8002c08:	08009ac0 	.word	0x08009ac0
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	20000078 	.word	0x20000078
 8002c14:	20000078 	.word	0x20000078
 8002c18:	20000314 	.word	0x20000314

08002c1c <ADC1_2_IRQHandler>:
 8002c1c:	e7fe      	b.n	8002c1c <ADC1_2_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_Init+0x3c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_Init+0x3c>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c36:	2003      	movs	r0, #3
 8002c38:	f001 f900 	bl	8003e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f000 f80f 	bl	8002c60 <HAL_InitTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	e001      	b.n	8002c52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c4e:	f7ff fd67 	bl	8002720 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c52:	79fb      	ldrb	r3, [r7, #7]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40022000 	.word	0x40022000

08002c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_InitTick+0x6c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_InitTick+0x70>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <HAL_InitTick+0x6c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 f90b 	bl	8003ea6 <HAL_SYSTICK_Config>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10f      	bne.n	8002cb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d809      	bhi.n	8002cb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	f001 f8d5 	bl	8003e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <HAL_InitTick+0x74>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	e007      	b.n	8002cc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e004      	b.n	8002cc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e001      	b.n	8002cc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	20000008 	.word	0x20000008

08002cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_IncTick+0x20>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_IncTick+0x24>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <HAL_IncTick+0x24>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2000000c 	.word	0x2000000c
 8002cfc:	2000030c 	.word	0x2000030c

08002d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return uwTick;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_GetTick+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	2000030c 	.word	0x2000030c

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff ffee 	bl	8002d00 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_Delay+0x40>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffde 	bl	8002d00 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3360      	adds	r3, #96	; 0x60
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <LL_ADC_SetOffset+0x44>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	03fff000 	.word	0x03fff000

08002e0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3360      	adds	r3, #96	; 0x60
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b087      	sub	sp, #28
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3330      	adds	r3, #48	; 0x30
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	4413      	add	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	211f      	movs	r1, #31
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	f003 011f 	and.w	r1, r3, #31
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eba:	bf00      	nop
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	0e5b      	lsrs	r3, r3, #25
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	4413      	add	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	0d1b      	lsrs	r3, r3, #20
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	2107      	movs	r1, #7
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	0d1b      	lsrs	r3, r3, #20
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f10:	bf00      	nop
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0318 	and.w	r3, r3, #24
 8002f3e:	4908      	ldr	r1, [pc, #32]	; (8002f60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f40:	40d9      	lsrs	r1, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	400b      	ands	r3, r1
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	0007ffff 	.word	0x0007ffff

08002f64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6093      	str	r3, [r2, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d101      	bne.n	8002fa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fec:	d101      	bne.n	8002ff2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsEnabled+0x18>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsEnabled+0x1a>
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d101      	bne.n	800303e <LL_ADC_REG_IsConversionOngoing+0x18>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d101      	bne.n	8003064 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e134      	b.n	80032f8 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fe fb79 	bl	8001794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff67 	bl	8002f88 <LL_ADC_IsDeepPowerDownEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff4d 	bl	8002f64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff ff82 	bl	8002fd8 <LL_ADC_IsInternalRegulatorEnabled>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d113      	bne.n	8003102 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff66 	bl	8002fb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030e4:	4b86      	ldr	r3, [pc, #536]	; (8003300 <HAL_ADC_Init+0x28c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	4a86      	ldr	r2, [pc, #536]	; (8003304 <HAL_ADC_Init+0x290>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff66 	bl	8002fd8 <LL_ADC_IsInternalRegulatorEnabled>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff77 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003138:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f040 80cf 	bne.w	80032e6 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80cb 	bne.w	80032e6 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003158:	f043 0202 	orr.w	r2, r3, #2
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff4b 	bl	8003000 <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d115      	bne.n	800319c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003170:	4865      	ldr	r0, [pc, #404]	; (8003308 <HAL_ADC_Init+0x294>)
 8003172:	f7ff ff45 	bl	8003000 <LL_ADC_IsEnabled>
 8003176:	4604      	mov	r4, r0
 8003178:	4864      	ldr	r0, [pc, #400]	; (800330c <HAL_ADC_Init+0x298>)
 800317a:	f7ff ff41 	bl	8003000 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	431c      	orrs	r4, r3
 8003182:	4863      	ldr	r0, [pc, #396]	; (8003310 <HAL_ADC_Init+0x29c>)
 8003184:	f7ff ff3c 	bl	8003000 <LL_ADC_IsEnabled>
 8003188:	4603      	mov	r3, r0
 800318a:	4323      	orrs	r3, r4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4619      	mov	r1, r3
 8003196:	485f      	ldr	r0, [pc, #380]	; (8003314 <HAL_ADC_Init+0x2a0>)
 8003198:	f7ff fde0 	bl	8002d5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e5b      	ldrb	r3, [r3, #25]
 80031a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_ADC_Init+0x2a4>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	430b      	orrs	r3, r1
 8003206:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff0a 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003212:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff17 	bl	800304c <LL_ADC_INJ_IsConversionOngoing>
 800321e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d13d      	bne.n	80032a2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13a      	bne.n	80032a2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003230:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003238:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	430b      	orrs	r3, r1
 8003254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800325c:	2b01      	cmp	r3, #1
 800325e:	d118      	bne.n	8003292 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003282:	430a      	orrs	r2, r1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	e007      	b.n	80032a2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10c      	bne.n	80032c4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f023 010f 	bic.w	r1, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
 80032c2:	e007      	b.n	80032d4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020f 	bic.w	r2, r2, #15
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f023 0303 	bic.w	r3, r3, #3
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
 80032e4:	e007      	b.n	80032f6 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3724      	adds	r7, #36	; 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd90      	pop	{r4, r7, pc}
 8003300:	20000004 	.word	0x20000004
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	50040000 	.word	0x50040000
 800330c:	50040100 	.word	0x50040100
 8003310:	50040200 	.word	0x50040200
 8003314:	50040300 	.word	0x50040300
 8003318:	fff0c007 	.word	0xfff0c007

0800331c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b0b6      	sub	sp, #216	; 0xd8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_ConfigChannel+0x22>
 800333a:	2302      	movs	r3, #2
 800333c:	e3c6      	b.n	8003acc <HAL_ADC_ConfigChannel+0x7b0>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fe6b 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	f040 83a7 	bne.w	8003aa6 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d824      	bhi.n	80033aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	3b02      	subs	r3, #2
 8003366:	2b03      	cmp	r3, #3
 8003368:	d81b      	bhi.n	80033a2 <HAL_ADC_ConfigChannel+0x86>
 800336a:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <HAL_ADC_ConfigChannel+0x54>)
 800336c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003370:	08003381 	.word	0x08003381
 8003374:	08003389 	.word	0x08003389
 8003378:	08003391 	.word	0x08003391
 800337c:	08003399 	.word	0x08003399
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	220c      	movs	r2, #12
 8003384:	605a      	str	r2, [r3, #4]
          break;
 8003386:	e011      	b.n	80033ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2212      	movs	r2, #18
 800338c:	605a      	str	r2, [r3, #4]
          break;
 800338e:	e00d      	b.n	80033ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2218      	movs	r2, #24
 8003394:	605a      	str	r2, [r3, #4]
          break;
 8003396:	e009      	b.n	80033ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800339e:	605a      	str	r2, [r3, #4]
          break;
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2206      	movs	r2, #6
 80033a6:	605a      	str	r2, [r3, #4]
          break;
 80033a8:	e000      	b.n	80033ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80033aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f7ff fd58 	bl	8002e6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fe2f 	bl	8003026 <LL_ADC_REG_IsConversionOngoing>
 80033c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fe3b 	bl	800304c <LL_ADC_INJ_IsConversionOngoing>
 80033d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 81a6 	bne.w	8003730 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 81a1 	bne.w	8003730 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7ff fd63 	bl	8002ec6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00a      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003432:	f7ff fcc7 	bl	8002dc4 <LL_ADC_SetOffset>
 8003436:	e17b      	b.n	8003730 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fce4 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x148>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fcd9 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 800345a:	4603      	mov	r3, r0
 800345c:	0e9b      	lsrs	r3, r3, #26
 800345e:	f003 021f 	and.w	r2, r3, #31
 8003462:	e01e      	b.n	80034a2 <HAL_ADC_ConfigChannel+0x186>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fcce 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 8003470:	4603      	mov	r3, r0
 8003472:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800348a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x19e>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	e018      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d0>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80034de:	2320      	movs	r3, #32
 80034e0:	e004      	b.n	80034ec <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80034e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d106      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fc9d 	bl	8002e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fc81 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_ADC_ConfigChannel+0x20e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fc76 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 8003520:	4603      	mov	r3, r0
 8003522:	0e9b      	lsrs	r3, r3, #26
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	e01e      	b.n	8003568 <HAL_ADC_ConfigChannel+0x24c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fc6b 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003548:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800354c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e004      	b.n	8003566 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800355c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x264>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	e018      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x296>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800358c:	fa93 f3a3 	rbit	r3, r3
 8003590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003594:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800359c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80035a4:	2320      	movs	r3, #32
 80035a6:	e004      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80035a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ac:	fab3 f383 	clz	r3, r3
 80035b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d106      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fc3a 	bl	8002e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2102      	movs	r1, #2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fc1e 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2d4>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2102      	movs	r1, #2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fc13 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 80035e6:	4603      	mov	r3, r0
 80035e8:	0e9b      	lsrs	r3, r3, #26
 80035ea:	f003 021f 	and.w	r2, r3, #31
 80035ee:	e01e      	b.n	800362e <HAL_ADC_ConfigChannel+0x312>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fc08 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800360e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003616:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800361e:	2320      	movs	r3, #32
 8003620:	e004      	b.n	800362c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x32a>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	0e9b      	lsrs	r3, r3, #26
 8003640:	f003 031f 	and.w	r3, r3, #31
 8003644:	e016      	b.n	8003674 <HAL_ADC_ConfigChannel+0x358>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800365a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800365e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e004      	b.n	8003674 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800366a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003674:	429a      	cmp	r2, r3
 8003676:	d106      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	2102      	movs	r1, #2
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff fbd9 	bl	8002e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2103      	movs	r1, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fbbd 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x396>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2103      	movs	r1, #3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fbb2 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	e017      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x3c6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2103      	movs	r1, #3
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fba7 	bl	8002e0c <LL_ADC_GetOffsetChannel>
 80036be:	4603      	mov	r3, r0
 80036c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036cc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80036d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x3de>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	e011      	b.n	800371e <HAL_ADC_ConfigChannel+0x402>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003712:	2320      	movs	r3, #32
 8003714:	e003      	b.n	800371e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800371e:	429a      	cmp	r2, r3
 8003720:	d106      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	2103      	movs	r1, #3
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fb84 	bl	8002e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fc63 	bl	8003000 <LL_ADC_IsEnabled>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 813f 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	461a      	mov	r2, r3
 8003750:	f7ff fbe4 	bl	8002f1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a8e      	ldr	r2, [pc, #568]	; (8003994 <HAL_ADC_ConfigChannel+0x678>)
 800375a:	4293      	cmp	r3, r2
 800375c:	f040 8130 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x46c>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2b09      	cmp	r3, #9
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e019      	b.n	80037bc <HAL_ADC_ConfigChannel+0x4a0>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003798:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800379a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80037a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	bf94      	ite	ls
 80037b6:	2301      	movls	r3, #1
 80037b8:	2300      	movhi	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d079      	beq.n	80038b4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x4c0>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	3301      	adds	r3, #1
 80037d4:	069b      	lsls	r3, r3, #26
 80037d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037da:	e015      	b.n	8003808 <HAL_ADC_ConfigChannel+0x4ec>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e4:	fa93 f3a3 	rbit	r3, r3
 80037e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80037f4:	2320      	movs	r3, #32
 80037f6:	e003      	b.n	8003800 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80037f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	069b      	lsls	r3, r3, #26
 8003804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x50c>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	3301      	adds	r3, #1
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	e017      	b.n	8003858 <HAL_ADC_ConfigChannel+0x53c>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e003      	b.n	800384c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2101      	movs	r1, #1
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	ea42 0103 	orr.w	r1, r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10a      	bne.n	800387e <HAL_ADC_ConfigChannel+0x562>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	3301      	adds	r3, #1
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	051b      	lsls	r3, r3, #20
 800387c:	e018      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x594>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e003      	b.n	80038a2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800389a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038b0:	430b      	orrs	r3, r1
 80038b2:	e080      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d107      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x5b4>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	3301      	adds	r3, #1
 80038c8:	069b      	lsls	r3, r3, #26
 80038ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ce:	e015      	b.n	80038fc <HAL_ADC_ConfigChannel+0x5e0>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e003      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80038ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_ADC_ConfigChannel+0x600>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	0e9b      	lsrs	r3, r3, #26
 800390e:	3301      	adds	r3, #1
 8003910:	f003 031f 	and.w	r3, r3, #31
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	e017      	b.n	800394c <HAL_ADC_ConfigChannel+0x630>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	61fb      	str	r3, [r7, #28]
  return result;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003934:	2320      	movs	r3, #32
 8003936:	e003      	b.n	8003940 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	fab3 f383 	clz	r3, r3
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3301      	adds	r3, #1
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	ea42 0103 	orr.w	r1, r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x65c>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	3301      	adds	r3, #1
 8003964:	f003 021f 	and.w	r2, r3, #31
 8003968:	4613      	mov	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	3b1e      	subs	r3, #30
 8003970:	051b      	lsls	r3, r3, #20
 8003972:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003976:	e01d      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x698>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	613b      	str	r3, [r7, #16]
  return result;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003990:	2320      	movs	r3, #32
 8003992:	e005      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x684>
 8003994:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	3301      	adds	r3, #1
 80039a2:	f003 021f 	and.w	r2, r3, #31
 80039a6:	4613      	mov	r3, r2
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4413      	add	r3, r2
 80039ac:	3b1e      	subs	r3, #30
 80039ae:	051b      	lsls	r3, r3, #20
 80039b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b4:	430b      	orrs	r3, r1
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	6892      	ldr	r2, [r2, #8]
 80039ba:	4619      	mov	r1, r3
 80039bc:	f7ff fa83 	bl	8002ec6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_ADC_ConfigChannel+0x7b8>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d079      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039cc:	4842      	ldr	r0, [pc, #264]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7bc>)
 80039ce:	f7ff f9eb 	bl	8002da8 <LL_ADC_GetCommonPathInternalCh>
 80039d2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a40      	ldr	r2, [pc, #256]	; (8003adc <HAL_ADC_ConfigChannel+0x7c0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d12b      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d125      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a3b      	ldr	r2, [pc, #236]	; (8003ae0 <HAL_ADC_ConfigChannel+0x7c4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_ADC_ConfigChannel+0x6e4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a3a      	ldr	r2, [pc, #232]	; (8003ae4 <HAL_ADC_ConfigChannel+0x7c8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d15c      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4833      	ldr	r0, [pc, #204]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a0c:	f7ff f9b9 	bl	8002d82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003a10:	4b35      	ldr	r3, [pc, #212]	; (8003ae8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	4a35      	ldr	r2, [pc, #212]	; (8003aec <HAL_ADC_ConfigChannel+0x7d0>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099a      	lsrs	r2, r3, #6
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a28:	e002      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f9      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a36:	e040      	b.n	8003aba <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d118      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x758>
 8003a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d112      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x746>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d12d      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	481a      	ldr	r0, [pc, #104]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003a6e:	f7ff f988 	bl	8002d82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a72:	e024      	b.n	8003abe <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d120      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11a      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d115      	bne.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	480e      	ldr	r0, [pc, #56]	; (8003ad8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003aa0:	f7ff f96f 	bl	8002d82 <LL_ADC_SetCommonPathInternalCh>
 8003aa4:	e00c      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003ab8:	e002      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003abe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	37d8      	adds	r7, #216	; 0xd8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	80080000 	.word	0x80080000
 8003ad8:	50040300 	.word	0x50040300
 8003adc:	c7520000 	.word	0xc7520000
 8003ae0:	50040000 	.word	0x50040000
 8003ae4:	50040200 	.word	0x50040200
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	053e2d63 	.word	0x053e2d63
 8003af0:	cb840000 	.word	0xcb840000
 8003af4:	80000001 	.word	0x80000001

08003af8 <LL_ADC_IsEnabled>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <LL_ADC_IsEnabled+0x18>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <LL_ADC_IsEnabled+0x1a>
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d101      	bne.n	8003b36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b09f      	sub	sp, #124	; 0x7c
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e08f      	b.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a47      	ldr	r2, [pc, #284]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d102      	bne.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003b74:	4b46      	ldr	r3, [pc, #280]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	e001      	b.n	8003b7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e072      	b.n	8003c82 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ffbd 	bl	8003b1e <LL_ADC_REG_IsConversionOngoing>
 8003ba4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ffb7 	bl	8003b1e <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d154      	bne.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d151      	bne.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bbc:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003bbe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d02c      	beq.n	8003c22 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bda:	035b      	lsls	r3, r3, #13
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	431a      	orrs	r2, r3
 8003be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be4:	4829      	ldr	r0, [pc, #164]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003be6:	f7ff ff87 	bl	8003af8 <LL_ADC_IsEnabled>
 8003bea:	4604      	mov	r4, r0
 8003bec:	4828      	ldr	r0, [pc, #160]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003bee:	f7ff ff83 	bl	8003af8 <LL_ADC_IsEnabled>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	431c      	orrs	r4, r3
 8003bf6:	4828      	ldr	r0, [pc, #160]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003bf8:	f7ff ff7e 	bl	8003af8 <LL_ADC_IsEnabled>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4323      	orrs	r3, r4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d137      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6811      	ldr	r1, [r2, #0]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	6892      	ldr	r2, [r2, #8]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c20:	e028      	b.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2e:	4817      	ldr	r0, [pc, #92]	; (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003c30:	f7ff ff62 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c34:	4604      	mov	r4, r0
 8003c36:	4816      	ldr	r0, [pc, #88]	; (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003c38:	f7ff ff5e 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	431c      	orrs	r4, r3
 8003c40:	4815      	ldr	r0, [pc, #84]	; (8003c98 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003c42:	f7ff ff59 	bl	8003af8 <LL_ADC_IsEnabled>
 8003c46:	4603      	mov	r3, r0
 8003c48:	4323      	orrs	r3, r4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d112      	bne.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c56:	f023 030f 	bic.w	r3, r3, #15
 8003c5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c5c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c5e:	e009      	b.n	8003c74 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c72:	e000      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c7e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	377c      	adds	r7, #124	; 0x7c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	50040000 	.word	0x50040000
 8003c90:	50040100 	.word	0x50040100
 8003c94:	50040300 	.word	0x50040300
 8003c98:	50040200 	.word	0x50040200

08003c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cac:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cce:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	60d3      	str	r3, [r2, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	e000ed00 	.word	0xe000ed00

08003ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce8:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <__NVIC_GetPriorityGrouping+0x18>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f003 0307 	and.w	r3, r3, #7
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	4603      	mov	r3, r0
 8003d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	db0b      	blt.n	8003d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	f003 021f 	and.w	r2, r3, #31
 8003d18:	4907      	ldr	r1, [pc, #28]	; (8003d38 <__NVIC_EnableIRQ+0x38>)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	2001      	movs	r0, #1
 8003d22:	fa00 f202 	lsl.w	r2, r0, r2
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100

08003d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	db0a      	blt.n	8003d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	490c      	ldr	r1, [pc, #48]	; (8003d88 <__NVIC_SetPriority+0x4c>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	440b      	add	r3, r1
 8003d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d64:	e00a      	b.n	8003d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	4908      	ldr	r1, [pc, #32]	; (8003d8c <__NVIC_SetPriority+0x50>)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	3b04      	subs	r3, #4
 8003d74:	0112      	lsls	r2, r2, #4
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	440b      	add	r3, r1
 8003d7a:	761a      	strb	r2, [r3, #24]
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000e100 	.word	0xe000e100
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f1c3 0307 	rsb	r3, r3, #7
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	bf28      	it	cs
 8003dae:	2304      	movcs	r3, #4
 8003db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3304      	adds	r3, #4
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d902      	bls.n	8003dc0 <NVIC_EncodePriority+0x30>
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3b03      	subs	r3, #3
 8003dbe:	e000      	b.n	8003dc2 <NVIC_EncodePriority+0x32>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43da      	mvns	r2, r3
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43d9      	mvns	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	4313      	orrs	r3, r2
         );
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3724      	adds	r7, #36	; 0x24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e08:	d301      	bcc.n	8003e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e00f      	b.n	8003e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <SysTick_Config+0x40>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e16:	210f      	movs	r1, #15
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	f7ff ff8e 	bl	8003d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <SysTick_Config+0x40>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e26:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <SysTick_Config+0x40>)
 8003e28:	2207      	movs	r2, #7
 8003e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000e010 	.word	0xe000e010

08003e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff29 	bl	8003c9c <__NVIC_SetPriorityGrouping>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b086      	sub	sp, #24
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e64:	f7ff ff3e 	bl	8003ce4 <__NVIC_GetPriorityGrouping>
 8003e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ff8e 	bl	8003d90 <NVIC_EncodePriority>
 8003e74:	4602      	mov	r2, r0
 8003e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff ff5d 	bl	8003d3c <__NVIC_SetPriority>
}
 8003e82:	bf00      	nop
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff31 	bl	8003d00 <__NVIC_EnableIRQ>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ffa2 	bl	8003df8 <SysTick_Config>
 8003eb4:	4603      	mov	r3, r0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e098      	b.n	8004004 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <HAL_DMA_Init+0x150>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d80f      	bhi.n	8003efe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b4b      	ldr	r3, [pc, #300]	; (8004014 <HAL_DMA_Init+0x154>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a4b      	ldr	r2, [pc, #300]	; (8004018 <HAL_DMA_Init+0x158>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	009a      	lsls	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a48      	ldr	r2, [pc, #288]	; (800401c <HAL_DMA_Init+0x15c>)
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40
 8003efc:	e00e      	b.n	8003f1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b46      	ldr	r3, [pc, #280]	; (8004020 <HAL_DMA_Init+0x160>)
 8003f06:	4413      	add	r3, r2
 8003f08:	4a43      	ldr	r2, [pc, #268]	; (8004018 <HAL_DMA_Init+0x158>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	091b      	lsrs	r3, r3, #4
 8003f10:	009a      	lsls	r2, r3, #2
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a42      	ldr	r2, [pc, #264]	; (8004024 <HAL_DMA_Init+0x164>)
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f76:	d039      	beq.n	8003fec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	4a27      	ldr	r2, [pc, #156]	; (800401c <HAL_DMA_Init+0x15c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d11a      	bne.n	8003fb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_DMA_Init+0x168>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	f003 031c 	and.w	r3, r3, #28
 8003f8e:	210f      	movs	r1, #15
 8003f90:	fa01 f303 	lsl.w	r3, r1, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	4924      	ldr	r1, [pc, #144]	; (8004028 <HAL_DMA_Init+0x168>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f9c:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_DMA_Init+0x168>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f003 031c 	and.w	r3, r3, #28
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	491d      	ldr	r1, [pc, #116]	; (8004028 <HAL_DMA_Init+0x168>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
 8003fb6:	e019      	b.n	8003fec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <HAL_DMA_Init+0x16c>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f003 031c 	and.w	r3, r3, #28
 8003fc4:	210f      	movs	r1, #15
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	4917      	ldr	r1, [pc, #92]	; (800402c <HAL_DMA_Init+0x16c>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <HAL_DMA_Init+0x16c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	f003 031c 	and.w	r3, r3, #28
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	4911      	ldr	r1, [pc, #68]	; (800402c <HAL_DMA_Init+0x16c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40020407 	.word	0x40020407
 8004014:	bffdfff8 	.word	0xbffdfff8
 8004018:	cccccccd 	.word	0xcccccccd
 800401c:	40020000 	.word	0x40020000
 8004020:	bffdfbf8 	.word	0xbffdfbf8
 8004024:	40020400 	.word	0x40020400
 8004028:	400200a8 	.word	0x400200a8
 800402c:	400204a8 	.word	0x400204a8

08004030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Start_IT+0x20>
 800404c:	2302      	movs	r3, #2
 800404e:	e04b      	b.n	80040e8 <HAL_DMA_Start_IT+0xb8>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d13a      	bne.n	80040da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f921 	bl	80042d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 020e 	orr.w	r2, r2, #14
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e00f      	b.n	80040c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 020a 	orr.w	r2, r2, #10
 80040c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e005      	b.n	80040e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
 80040e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d005      	beq.n	8004114 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
 8004112:	e029      	b.n	8004168 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 020e 	bic.w	r2, r2, #14
 8004122:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004138:	f003 021c 	and.w	r2, r3, #28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f202 	lsl.w	r2, r1, r2
 8004146:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
    }
  }
  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f003 031c 	and.w	r3, r3, #28
 8004192:	2204      	movs	r2, #4
 8004194:	409a      	lsls	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d026      	beq.n	80041ec <HAL_DMA_IRQHandler+0x7a>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f003 0304 	and.w	r3, r3, #4
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d021      	beq.n	80041ec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d107      	bne.n	80041c6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0204 	bic.w	r2, r2, #4
 80041c4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f003 021c 	and.w	r2, r3, #28
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2104      	movs	r1, #4
 80041d4:	fa01 f202 	lsl.w	r2, r1, r2
 80041d8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d071      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80041ea:	e06c      	b.n	80042c6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f003 031c 	and.w	r3, r3, #28
 80041f4:	2202      	movs	r2, #2
 80041f6:	409a      	lsls	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d02e      	beq.n	800425e <HAL_DMA_IRQHandler+0xec>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d029      	beq.n	800425e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 020a 	bic.w	r2, r2, #10
 8004226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f003 021c 	and.w	r2, r3, #28
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	2102      	movs	r1, #2
 800423e:	fa01 f202 	lsl.w	r2, r1, r2
 8004242:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d038      	beq.n	80042c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800425c:	e033      	b.n	80042c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f003 031c 	and.w	r3, r3, #28
 8004266:	2208      	movs	r2, #8
 8004268:	409a      	lsls	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x156>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d025      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 020e 	bic.w	r2, r2, #14
 800428a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	f003 021c 	and.w	r2, r3, #28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
}
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e2:	f003 021c 	and.w	r2, r3, #28
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b10      	cmp	r3, #16
 8004300:	d108      	bne.n	8004314 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004312:	e007      	b.n	8004324 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	60da      	str	r2, [r3, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800433e:	e17f      	b.n	8004640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 8171 	beq.w	800463a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d00b      	beq.n	8004378 <HAL_GPIO_Init+0x48>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d007      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800436c:	2b11      	cmp	r3, #17
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b12      	cmp	r3, #18
 8004376:	d130      	bne.n	80043da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4313      	orrs	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043ae:	2201      	movs	r2, #1
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 0201 	and.w	r2, r3, #1
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d118      	bne.n	8004418 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80043ec:	2201      	movs	r2, #1
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	08db      	lsrs	r3, r3, #3
 8004402:	f003 0201 	and.w	r2, r3, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x128>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b12      	cmp	r3, #18
 8004456:	d123      	bne.n	80044a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	08da      	lsrs	r2, r3, #3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3208      	adds	r2, #8
 8004460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	220f      	movs	r2, #15
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	43db      	mvns	r3, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4013      	ands	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	08da      	lsrs	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3208      	adds	r2, #8
 800449a:	6939      	ldr	r1, [r7, #16]
 800449c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	2203      	movs	r2, #3
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80ac 	beq.w	800463a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e2:	4b5e      	ldr	r3, [pc, #376]	; (800465c <HAL_GPIO_Init+0x32c>)
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	4a5d      	ldr	r2, [pc, #372]	; (800465c <HAL_GPIO_Init+0x32c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6613      	str	r3, [r2, #96]	; 0x60
 80044ee:	4b5b      	ldr	r3, [pc, #364]	; (800465c <HAL_GPIO_Init+0x32c>)
 80044f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044fa:	4a59      	ldr	r2, [pc, #356]	; (8004660 <HAL_GPIO_Init+0x330>)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3302      	adds	r3, #2
 8004502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	220f      	movs	r2, #15
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004524:	d025      	beq.n	8004572 <HAL_GPIO_Init+0x242>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a4e      	ldr	r2, [pc, #312]	; (8004664 <HAL_GPIO_Init+0x334>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01f      	beq.n	800456e <HAL_GPIO_Init+0x23e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a4d      	ldr	r2, [pc, #308]	; (8004668 <HAL_GPIO_Init+0x338>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d019      	beq.n	800456a <HAL_GPIO_Init+0x23a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a4c      	ldr	r2, [pc, #304]	; (800466c <HAL_GPIO_Init+0x33c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_GPIO_Init+0x236>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4b      	ldr	r2, [pc, #300]	; (8004670 <HAL_GPIO_Init+0x340>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00d      	beq.n	8004562 <HAL_GPIO_Init+0x232>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a4a      	ldr	r2, [pc, #296]	; (8004674 <HAL_GPIO_Init+0x344>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <HAL_GPIO_Init+0x22e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a49      	ldr	r2, [pc, #292]	; (8004678 <HAL_GPIO_Init+0x348>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_GPIO_Init+0x22a>
 8004556:	2306      	movs	r3, #6
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455a:	2307      	movs	r3, #7
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x244>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x244>
 8004572:	2300      	movs	r3, #0
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004584:	4936      	ldr	r1, [pc, #216]	; (8004660 <HAL_GPIO_Init+0x330>)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004592:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_GPIO_Init+0x34c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43db      	mvns	r3, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045b6:	4a31      	ldr	r2, [pc, #196]	; (800467c <HAL_GPIO_Init+0x34c>)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80045bc:	4b2f      	ldr	r3, [pc, #188]	; (800467c <HAL_GPIO_Init+0x34c>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e0:	4a26      	ldr	r2, [pc, #152]	; (800467c <HAL_GPIO_Init+0x34c>)
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045e6:	4b25      	ldr	r3, [pc, #148]	; (800467c <HAL_GPIO_Init+0x34c>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4013      	ands	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800460a:	4a1c      	ldr	r2, [pc, #112]	; (800467c <HAL_GPIO_Init+0x34c>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004610:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_GPIO_Init+0x34c>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <HAL_GPIO_Init+0x34c>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	3301      	adds	r3, #1
 800463e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f ae78 	bne.w	8004340 <HAL_GPIO_Init+0x10>
  }
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40021000 	.word	0x40021000
 8004660:	40010000 	.word	0x40010000
 8004664:	48000400 	.word	0x48000400
 8004668:	48000800 	.word	0x48000800
 800466c:	48000c00 	.word	0x48000c00
 8004670:	48001000 	.word	0x48001000
 8004674:	48001400 	.word	0x48001400
 8004678:	48001800 	.word	0x48001800
 800467c:	40010400 	.word	0x40010400

08004680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004690:	787b      	ldrb	r3, [r7, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800469c:	e002      	b.n	80046a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40007000 	.word	0x40007000

080046cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d130      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046dc:	4b23      	ldr	r3, [pc, #140]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d038      	beq.n	800475c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ea:	4b20      	ldr	r3, [pc, #128]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f2:	4a1e      	ldr	r2, [pc, #120]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fa:	4b1d      	ldr	r3, [pc, #116]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2232      	movs	r2, #50	; 0x32
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0c9b      	lsrs	r3, r3, #18
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004710:	e002      	b.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	3b01      	subs	r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004724:	d102      	bne.n	800472c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f2      	bne.n	8004712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004738:	d110      	bne.n	800475c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e00f      	b.n	800475e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800473e:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474a:	d007      	beq.n	800475c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800474c:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004754:	4a05      	ldr	r2, [pc, #20]	; (800476c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	40007000 	.word	0x40007000
 8004770:	20000004 	.word	0x20000004
 8004774:	431bde83 	.word	0x431bde83

08004778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e3d4      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800478a:	4ba1      	ldr	r3, [pc, #644]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 030c 	and.w	r3, r3, #12
 8004792:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004794:	4b9e      	ldr	r3, [pc, #632]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0303 	and.w	r3, r3, #3
 800479c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80e4 	beq.w	8004974 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d007      	beq.n	80047c2 <HAL_RCC_OscConfig+0x4a>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0c      	cmp	r3, #12
 80047b6:	f040 808b 	bne.w	80048d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f040 8087 	bne.w	80048d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c2:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_RCC_OscConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e3ac      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1a      	ldr	r2, [r3, #32]
 80047de:	4b8c      	ldr	r3, [pc, #560]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d004      	beq.n	80047f4 <HAL_RCC_OscConfig+0x7c>
 80047ea:	4b89      	ldr	r3, [pc, #548]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f2:	e005      	b.n	8004800 <HAL_RCC_OscConfig+0x88>
 80047f4:	4b86      	ldr	r3, [pc, #536]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004800:	4293      	cmp	r3, r2
 8004802:	d223      	bcs.n	800484c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd07 	bl	800521c <RCC_SetFlashLatencyFromMSIRange>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e38d      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004818:	4b7d      	ldr	r3, [pc, #500]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7c      	ldr	r2, [pc, #496]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	4977      	ldr	r1, [pc, #476]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004836:	4b76      	ldr	r3, [pc, #472]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	4972      	ldr	r1, [pc, #456]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004846:	4313      	orrs	r3, r2
 8004848:	604b      	str	r3, [r1, #4]
 800484a:	e025      	b.n	8004898 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484c:	4b70      	ldr	r3, [pc, #448]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6f      	ldr	r2, [pc, #444]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004852:	f043 0308 	orr.w	r3, r3, #8
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b6d      	ldr	r3, [pc, #436]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	496a      	ldr	r1, [pc, #424]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486a:	4b69      	ldr	r3, [pc, #420]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	4965      	ldr	r1, [pc, #404]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fcc7 	bl	800521c <RCC_SetFlashLatencyFromMSIRange>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e34d      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004898:	f000 fc36 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 800489c:	4601      	mov	r1, r0
 800489e:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x29c>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa21 f303 	lsr.w	r3, r1, r3
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_OscConfig+0x2a0>)
 80048b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048b8:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_RCC_OscConfig+0x2a4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe f9cf 	bl	8002c60 <HAL_InitTick>
 80048c2:	4603      	mov	r3, r0
 80048c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d052      	beq.n	8004972 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	e331      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d032      	beq.n	800493e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048d8:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a4c      	ldr	r2, [pc, #304]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fa0c 	bl	8002d00 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ec:	f7fe fa08 	bl	8002d00 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e31a      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048fe:	4b44      	ldr	r3, [pc, #272]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a40      	ldr	r2, [pc, #256]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004910:	f043 0308 	orr.w	r3, r3, #8
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	493b      	ldr	r1, [pc, #236]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004928:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	4936      	ldr	r1, [pc, #216]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
 800493c:	e01a      	b.n	8004974 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800493e:	4b34      	ldr	r3, [pc, #208]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800494a:	f7fe f9d9 	bl	8002d00 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004952:	f7fe f9d5 	bl	8002d00 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e2e7      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004964:	4b2a      	ldr	r3, [pc, #168]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCC_OscConfig+0x1da>
 8004970:	e000      	b.n	8004974 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004972:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d074      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b08      	cmp	r3, #8
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x21a>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d10e      	bne.n	80049aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d10b      	bne.n	80049aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004992:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d064      	beq.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d160      	bne.n	8004a68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e2c4      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x24a>
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e01d      	b.n	80049fe <HAL_RCC_OscConfig+0x286>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x26e>
 80049cc:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0f      	ldr	r2, [pc, #60]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x286>
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <HAL_RCC_OscConfig+0x298>)
 80049f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01c      	beq.n	8004a40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fe f97b 	bl	8002d00 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0c:	e011      	b.n	8004a32 <HAL_RCC_OscConfig+0x2ba>
 8004a0e:	bf00      	nop
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08009868 	.word	0x08009868
 8004a18:	20000004 	.word	0x20000004
 8004a1c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fe f96e 	bl	8002d00 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e280      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a32:	4baf      	ldr	r3, [pc, #700]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x2a8>
 8004a3e:	e014      	b.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a40:	f7fe f95e 	bl	8002d00 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fe f95a 	bl	8002d00 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e26c      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5a:	4ba5      	ldr	r3, [pc, #660]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x2d0>
 8004a66:	e000      	b.n	8004a6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d060      	beq.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x310>
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	2b0c      	cmp	r3, #12
 8004a80:	d119      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d116      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	4b99      	ldr	r3, [pc, #612]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x328>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e249      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b93      	ldr	r3, [pc, #588]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	4990      	ldr	r1, [pc, #576]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	e040      	b.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d023      	beq.n	8004b06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abe:	4b8c      	ldr	r3, [pc, #560]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a8b      	ldr	r2, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aca:	f7fe f919 	bl	8002d00 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7fe f915 	bl	8002d00 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e227      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae4:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0f0      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af0:	4b7f      	ldr	r3, [pc, #508]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	497c      	ldr	r1, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
 8004b04:	e018      	b.n	8004b38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b06:	4b7a      	ldr	r3, [pc, #488]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a79      	ldr	r2, [pc, #484]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b12:	f7fe f8f5 	bl	8002d00 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1a:	f7fe f8f1 	bl	8002d00 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e203      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2c:	4b70      	ldr	r3, [pc, #448]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d03c      	beq.n	8004bbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01c      	beq.n	8004b86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4c:	4b68      	ldr	r3, [pc, #416]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	4a67      	ldr	r2, [pc, #412]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5c:	f7fe f8d0 	bl	8002d00 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b64:	f7fe f8cc 	bl	8002d00 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1de      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b76:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0ef      	beq.n	8004b64 <HAL_RCC_OscConfig+0x3ec>
 8004b84:	e01b      	b.n	8004bbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b86:	4b5a      	ldr	r3, [pc, #360]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8c:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b96:	f7fe f8b3 	bl	8002d00 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9e:	f7fe f8af 	bl	8002d00 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1c1      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ef      	bne.n	8004b9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80a6 	beq.w	8004d18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd0:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bdc:	4b44      	ldr	r3, [pc, #272]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	4a43      	ldr	r2, [pc, #268]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	; 0x58
 8004be8:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	; (8004cf4 <HAL_RCC_OscConfig+0x57c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d118      	bne.n	8004c36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c04:	4b3b      	ldr	r3, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x57c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <HAL_RCC_OscConfig+0x57c>)
 8004c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c10:	f7fe f876 	bl	8002d00 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c18:	f7fe f872 	bl	8002d00 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e184      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2a:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCC_OscConfig+0x57c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCC_OscConfig+0x4d8>
 8004c3e:	4b2c      	ldr	r3, [pc, #176]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c4e:	e024      	b.n	8004c9a <HAL_RCC_OscConfig+0x522>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d110      	bne.n	8004c7a <HAL_RCC_OscConfig+0x502>
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	4a24      	ldr	r2, [pc, #144]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c60:	f043 0304 	orr.w	r3, r3, #4
 8004c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a20      	ldr	r2, [pc, #128]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c78:	e00f      	b.n	8004c9a <HAL_RCC_OscConfig+0x522>
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c82:	f023 0301 	bic.w	r3, r3, #1
 8004c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8a:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fe f82d 	bl	8002d00 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca8:	e00a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004caa:	f7fe f829 	bl	8002d00 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e139      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x578>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0ed      	beq.n	8004caa <HAL_RCC_OscConfig+0x532>
 8004cce:	e01a      	b.n	8004d06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd0:	f7fe f816 	bl	8002d00 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd6:	e00f      	b.n	8004cf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd8:	f7fe f812 	bl	8002d00 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d906      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e122      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cf8:	4b90      	ldr	r3, [pc, #576]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e8      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d0c:	4b8b      	ldr	r3, [pc, #556]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	4a8a      	ldr	r2, [pc, #552]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8108 	beq.w	8004f32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	f040 80d0 	bne.w	8004ecc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d2c:	4b83      	ldr	r3, [pc, #524]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 0203 	and.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d130      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d127      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d11f      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d6c:	2a07      	cmp	r2, #7
 8004d6e:	bf14      	ite	ne
 8004d70:	2201      	movne	r2, #1
 8004d72:	2200      	moveq	r2, #0
 8004d74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d109      	bne.n	8004da2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d06e      	beq.n	8004e80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d069      	beq.n	8004e7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004da8:	4b64      	ldr	r3, [pc, #400]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004db4:	4b61      	ldr	r3, [pc, #388]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b7      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004dc4:	4b5d      	ldr	r3, [pc, #372]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5c      	ldr	r2, [pc, #368]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd0:	f7fd ff96 	bl	8002d00 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fd ff92 	bl	8002d00 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0a4      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dea:	4b54      	ldr	r3, [pc, #336]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df6:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	4b51      	ldr	r3, [pc, #324]	; (8004f40 <HAL_RCC_OscConfig+0x7c8>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e10:	0212      	lsls	r2, r2, #8
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e18:	0852      	lsrs	r2, r2, #1
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	0552      	lsls	r2, r2, #21
 8004e1e:	4311      	orrs	r1, r2
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e24:	0852      	lsrs	r2, r2, #1
 8004e26:	3a01      	subs	r2, #1
 8004e28:	0652      	lsls	r2, r2, #25
 8004e2a:	4311      	orrs	r1, r2
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e30:	0912      	lsrs	r2, r2, #4
 8004e32:	0452      	lsls	r2, r2, #17
 8004e34:	430a      	orrs	r2, r1
 8004e36:	4941      	ldr	r1, [pc, #260]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e3c:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a3e      	ldr	r2, [pc, #248]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e48:	4b3c      	ldr	r3, [pc, #240]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4a3b      	ldr	r2, [pc, #236]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e54:	f7fd ff54 	bl	8002d00 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd ff50 	bl	8002d00 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e062      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e6e:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e7a:	e05a      	b.n	8004f32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e059      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e80:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d152      	bne.n	8004f32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e8c:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e98:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4a27      	ldr	r2, [pc, #156]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ea4:	f7fd ff2c 	bl	8002d00 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd ff28 	bl	8002d00 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e03a      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebe:	4b1f      	ldr	r3, [pc, #124]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x734>
 8004eca:	e032      	b.n	8004f32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d02d      	beq.n	8004f2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a19      	ldr	r2, [pc, #100]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004edc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004ede:	4b17      	ldr	r3, [pc, #92]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d105      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	4a10      	ldr	r2, [pc, #64]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004efc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd fefb 	bl	8002d00 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fef7 	bl	8002d00 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e009      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_OscConfig+0x7c4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x796>
 8004f2c:	e001      	b.n	8004f32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	f99d808c 	.word	0xf99d808c

08004f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0c8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d910      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b63      	ldr	r3, [pc, #396]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 0207 	bic.w	r2, r3, #7
 8004f6e:	4961      	ldr	r1, [pc, #388]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b5f      	ldr	r3, [pc, #380]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0b0      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d04c      	beq.n	800502e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9c:	4b56      	ldr	r3, [pc, #344]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d121      	bne.n	8004fec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e09e      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb4:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d115      	bne.n	8004fec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e092      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fcc:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d109      	bne.n	8004fec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e086      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fdc:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e07e      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fec:	4b42      	ldr	r3, [pc, #264]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 0203 	bic.w	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	493f      	ldr	r1, [pc, #252]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffe:	f7fd fe7f 	bl	8002d00 <HAL_GetTick>
 8005002:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005004:	e00a      	b.n	800501c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005006:	f7fd fe7b 	bl	8002d00 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	4293      	cmp	r3, r2
 8005016:	d901      	bls.n	800501c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e066      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501c:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 020c 	and.w	r2, r3, #12
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	429a      	cmp	r2, r3
 800502c:	d1eb      	bne.n	8005006 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	492c      	ldr	r1, [pc, #176]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800504c:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d210      	bcs.n	800507c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 0207 	bic.w	r2, r3, #7
 8005062:	4924      	ldr	r1, [pc, #144]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <HAL_RCC_ClockConfig+0x1b0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e036      	b.n	80050ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4918      	ldr	r1, [pc, #96]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4910      	ldr	r1, [pc, #64]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ba:	f000 f825 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050be:	4601      	mov	r1, r0
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_RCC_ClockConfig+0x1b4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <HAL_RCC_ClockConfig+0x1b8>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	f003 031f 	and.w	r3, r3, #31
 80050d2:	fa21 f303 	lsr.w	r3, r1, r3
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050da:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fd fdbe 	bl	8002c60 <HAL_InitTick>
 80050e4:	4603      	mov	r3, r0
 80050e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80050e8:	7afb      	ldrb	r3, [r7, #11]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40022000 	.word	0x40022000
 80050f8:	40021000 	.word	0x40021000
 80050fc:	08009868 	.word	0x08009868
 8005100:	20000004 	.word	0x20000004
 8005104:	20000008 	.word	0x20000008

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	b480      	push	{r7}
 800510a:	b089      	sub	sp, #36	; 0x24
 800510c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005116:	4b3d      	ldr	r3, [pc, #244]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005120:	4b3a      	ldr	r3, [pc, #232]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d005      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x34>
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b0c      	cmp	r3, #12
 8005134:	d121      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d11e      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800513c:	4b33      	ldr	r3, [pc, #204]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005148:	4b30      	ldr	r3, [pc, #192]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	0a1b      	lsrs	r3, r3, #8
 8005150:	f003 030f 	and.w	r3, r3, #15
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e005      	b.n	8005164 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005158:	4b2c      	ldr	r3, [pc, #176]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <HAL_RCC_GetSysClockFreq+0x108>)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d102      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e004      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d101      	bne.n	8005190 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800518c:	4b22      	ldr	r3, [pc, #136]	; (8005218 <HAL_RCC_GetSysClockFreq+0x110>)
 800518e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b0c      	cmp	r3, #12
 8005194:	d133      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d002      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0xa4>
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d003      	beq.n	80051b2 <HAL_RCC_GetSysClockFreq+0xaa>
 80051aa:	e005      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ae:	617b      	str	r3, [r7, #20]
      break;
 80051b0:	e005      	b.n	80051be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <HAL_RCC_GetSysClockFreq+0x110>)
 80051b4:	617b      	str	r3, [r7, #20]
      break;
 80051b6:	e002      	b.n	80051be <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	617b      	str	r3, [r7, #20]
      break;
 80051bc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051be:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	091b      	lsrs	r3, r3, #4
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	3301      	adds	r3, #1
 80051ca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	0a1b      	lsrs	r3, r3, #8
 80051d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	fb02 f203 	mul.w	r2, r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_GetSysClockFreq+0x104>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	0e5b      	lsrs	r3, r3, #25
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051fe:	69bb      	ldr	r3, [r7, #24]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3724      	adds	r7, #36	; 0x24
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40021000 	.word	0x40021000
 8005210:	08009878 	.word	0x08009878
 8005214:	00f42400 	.word	0x00f42400
 8005218:	007a1200 	.word	0x007a1200

0800521c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005224:	2300      	movs	r3, #0
 8005226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005228:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005234:	f7ff fa3c 	bl	80046b0 <HAL_PWREx_GetVoltageRange>
 8005238:	6178      	str	r0, [r7, #20]
 800523a:	e014      	b.n	8005266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800523c:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	4a24      	ldr	r2, [pc, #144]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005246:	6593      	str	r3, [r2, #88]	; 0x58
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005254:	f7ff fa2c 	bl	80046b0 <HAL_PWREx_GetVoltageRange>
 8005258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800525a:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526c:	d10b      	bne.n	8005286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b80      	cmp	r3, #128	; 0x80
 8005272:	d919      	bls.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2ba0      	cmp	r3, #160	; 0xa0
 8005278:	d902      	bls.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800527a:	2302      	movs	r3, #2
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e013      	b.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005280:	2301      	movs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	e010      	b.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d902      	bls.n	8005292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800528c:	2303      	movs	r3, #3
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	e00a      	b.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d102      	bne.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005298:	2302      	movs	r3, #2
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	e004      	b.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b70      	cmp	r3, #112	; 0x70
 80052a2:	d101      	bne.n	80052a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052a4:	2301      	movs	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f023 0207 	bic.w	r2, r3, #7
 80052b0:	4909      	ldr	r1, [pc, #36]	; (80052d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d001      	beq.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40022000 	.word	0x40022000

080052dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052e4:	2300      	movs	r3, #0
 80052e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052e8:	2300      	movs	r3, #0
 80052ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d03f      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005300:	d01c      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005306:	d802      	bhi.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00e      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800530c:	e01f      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800530e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005312:	d003      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005314:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005318:	d01c      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800531a:	e018      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800531c:	4b85      	ldr	r3, [pc, #532]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a84      	ldr	r2, [pc, #528]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005326:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005328:	e015      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3304      	adds	r3, #4
 800532e:	2100      	movs	r1, #0
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fab9 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 8005336:	4603      	mov	r3, r0
 8005338:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800533a:	e00c      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3320      	adds	r3, #32
 8005340:	2100      	movs	r1, #0
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fba0 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800534c:	e003      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	74fb      	strb	r3, [r7, #19]
      break;
 8005352:	e000      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800535c:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536a:	4972      	ldr	r1, [pc, #456]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005372:	e001      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d03f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800538c:	d01c      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800538e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005392:	d802      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00e      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005398:	e01f      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800539a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800539e:	d003      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80053a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053a4:	d01c      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80053a6:	e018      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053a8:	4b62      	ldr	r3, [pc, #392]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	4a61      	ldr	r2, [pc, #388]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b4:	e015      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3304      	adds	r3, #4
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fa73 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053c6:	e00c      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3320      	adds	r3, #32
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb5a 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d8:	e003      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	74fb      	strb	r3, [r7, #19]
      break;
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80053e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e2:	7cfb      	ldrb	r3, [r7, #19]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053e8:	4b52      	ldr	r3, [pc, #328]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f6:	494f      	ldr	r1, [pc, #316]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053fe:	e001      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a0 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005412:	2300      	movs	r3, #0
 8005414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00d      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b41      	ldr	r3, [pc, #260]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	4a40      	ldr	r2, [pc, #256]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6593      	str	r3, [r2, #88]	; 0x58
 8005438:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005444:	2301      	movs	r3, #1
 8005446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005448:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800544e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005454:	f7fd fc54 	bl	8002d00 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800545a:	e009      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545c:	f7fd fc50 	bl	8002d00 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d902      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	74fb      	strb	r3, [r7, #19]
        break;
 800546e:	e005      	b.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0ef      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d15c      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005482:	4b2c      	ldr	r3, [pc, #176]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	429a      	cmp	r2, r3
 800549e:	d019      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054a0:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	4a20      	ldr	r2, [pc, #128]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054bc:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c2:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054cc:	4a19      	ldr	r2, [pc, #100]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fd fc0f 	bl	8002d00 <HAL_GetTick>
 80054e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054e4:	e00b      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fd fc0b 	bl	8002d00 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d902      	bls.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	74fb      	strb	r3, [r7, #19]
            break;
 80054fc:	e006      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ec      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10c      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005522:	4904      	ldr	r1, [pc, #16]	; (8005534 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800552a:	e009      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800552c:	7cfb      	ldrb	r3, [r7, #19]
 800552e:	74bb      	strb	r3, [r7, #18]
 8005530:	e006      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005532:	bf00      	nop
 8005534:	40021000 	.word	0x40021000
 8005538:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005540:	7c7b      	ldrb	r3, [r7, #17]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d105      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005546:	4b9e      	ldr	r3, [pc, #632]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	4a9d      	ldr	r2, [pc, #628]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800554c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005550:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555e:	4b98      	ldr	r3, [pc, #608]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005564:	f023 0203 	bic.w	r2, r3, #3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	4994      	ldr	r1, [pc, #592]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005580:	4b8f      	ldr	r3, [pc, #572]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005586:	f023 020c 	bic.w	r2, r3, #12
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	498c      	ldr	r1, [pc, #560]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055a2:	4b87      	ldr	r3, [pc, #540]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	4983      	ldr	r1, [pc, #524]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055c4:	4b7e      	ldr	r3, [pc, #504]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d2:	497b      	ldr	r1, [pc, #492]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055e6:	4b76      	ldr	r3, [pc, #472]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	4972      	ldr	r1, [pc, #456]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005608:	4b6d      	ldr	r3, [pc, #436]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800560e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005616:	496a      	ldr	r1, [pc, #424]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562a:	4b65      	ldr	r3, [pc, #404]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	4961      	ldr	r1, [pc, #388]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800564c:	4b5c      	ldr	r3, [pc, #368]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565a:	4959      	ldr	r1, [pc, #356]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800566e:	4b54      	ldr	r3, [pc, #336]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	4950      	ldr	r1, [pc, #320]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005690:	4b4b      	ldr	r3, [pc, #300]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005696:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	4948      	ldr	r1, [pc, #288]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056b2:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	493f      	ldr	r1, [pc, #252]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d028      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e2:	4937      	ldr	r1, [pc, #220]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f2:	d106      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f4:	4b32      	ldr	r3, [pc, #200]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a31      	ldr	r2, [pc, #196]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80056fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fe:	60d3      	str	r3, [r2, #12]
 8005700:	e011      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800570a:	d10c      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	2101      	movs	r1, #1
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f8c8 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005722:	7cfb      	ldrb	r3, [r7, #19]
 8005724:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d028      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005732:	4b23      	ldr	r3, [pc, #140]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005738:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	491f      	ldr	r1, [pc, #124]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005750:	d106      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800575c:	60d3      	str	r3, [r2, #12]
 800575e:	e011      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005768:	d10c      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3304      	adds	r3, #4
 800576e:	2101      	movs	r1, #1
 8005770:	4618      	mov	r0, r3
 8005772:	f000 f899 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d02b      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579e:	4908      	ldr	r1, [pc, #32]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ae:	d109      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057b0:	4b03      	ldr	r3, [pc, #12]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4a02      	ldr	r2, [pc, #8]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80057b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ba:	60d3      	str	r3, [r2, #12]
 80057bc:	e014      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80057be:	bf00      	nop
 80057c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	2101      	movs	r1, #1
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 f867 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d02f      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057f4:	4b2b      	ldr	r3, [pc, #172]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005802:	4928      	ldr	r1, [pc, #160]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005812:	d10d      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3304      	adds	r3, #4
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f844 	bl	80058a8 <RCCEx_PLLSAI1_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005824:	7cfb      	ldrb	r3, [r7, #19]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	74bb      	strb	r3, [r7, #18]
 800582e:	e011      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005838:	d10c      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3320      	adds	r3, #32
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f921 	bl	8005a88 <RCCEx_PLLSAI2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800584a:	7cfb      	ldrb	r3, [r7, #19]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586e:	490d      	ldr	r1, [pc, #52]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005892:	4904      	ldr	r1, [pc, #16]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800589a:	7cbb      	ldrb	r3, [r7, #18]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3718      	adds	r7, #24
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000

080058a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b6:	4b73      	ldr	r3, [pc, #460]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d018      	beq.n	80058f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058c2:	4b70      	ldr	r3, [pc, #448]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f003 0203 	and.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d10d      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
       ||
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058da:	4b6a      	ldr	r3, [pc, #424]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
       ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d044      	beq.n	8005978 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	e041      	b.n	8005978 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d00c      	beq.n	8005916 <RCCEx_PLLSAI1_Config+0x6e>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d013      	beq.n	8005928 <RCCEx_PLLSAI1_Config+0x80>
 8005900:	2b01      	cmp	r3, #1
 8005902:	d120      	bne.n	8005946 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005904:	4b5f      	ldr	r3, [pc, #380]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11d      	bne.n	800594c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005914:	e01a      	b.n	800594c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005916:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005926:	e013      	b.n	8005950 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005928:	4b56      	ldr	r3, [pc, #344]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10f      	bne.n	8005954 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d109      	bne.n	8005954 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005944:	e006      	b.n	8005954 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	73fb      	strb	r3, [r7, #15]
      break;
 800594a:	e004      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800594c:	bf00      	nop
 800594e:	e002      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005954:	bf00      	nop
    }

    if(status == HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800595c:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6819      	ldr	r1, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	011b      	lsls	r3, r3, #4
 8005970:	430b      	orrs	r3, r1
 8005972:	4944      	ldr	r1, [pc, #272]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005974:	4313      	orrs	r3, r2
 8005976:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d17d      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800598a:	f7fd f9b9 	bl	8002d00 <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005990:	e009      	b.n	80059a6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005992:	f7fd f9b5 	bl	8002d00 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d902      	bls.n	80059a6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	73fb      	strb	r3, [r7, #15]
        break;
 80059a4:	e005      	b.n	80059b2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059a6:	4b37      	ldr	r3, [pc, #220]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ef      	bne.n	8005992 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d160      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d111      	bne.n	80059e2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059be:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6892      	ldr	r2, [r2, #8]
 80059ce:	0211      	lsls	r1, r2, #8
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68d2      	ldr	r2, [r2, #12]
 80059d4:	0912      	lsrs	r2, r2, #4
 80059d6:	0452      	lsls	r2, r2, #17
 80059d8:	430a      	orrs	r2, r1
 80059da:	492a      	ldr	r1, [pc, #168]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	610b      	str	r3, [r1, #16]
 80059e0:	e027      	b.n	8005a32 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d112      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e8:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	0211      	lsls	r1, r2, #8
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6912      	ldr	r2, [r2, #16]
 80059fe:	0852      	lsrs	r2, r2, #1
 8005a00:	3a01      	subs	r2, #1
 8005a02:	0552      	lsls	r2, r2, #21
 8005a04:	430a      	orrs	r2, r1
 8005a06:	491f      	ldr	r1, [pc, #124]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
 8005a0c:	e011      	b.n	8005a32 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6892      	ldr	r2, [r2, #8]
 8005a1e:	0211      	lsls	r1, r2, #8
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6952      	ldr	r2, [r2, #20]
 8005a24:	0852      	lsrs	r2, r2, #1
 8005a26:	3a01      	subs	r2, #1
 8005a28:	0652      	lsls	r2, r2, #25
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	4915      	ldr	r1, [pc, #84]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3e:	f7fd f95f 	bl	8002d00 <HAL_GetTick>
 8005a42:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a44:	e009      	b.n	8005a5a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a46:	f7fd f95b 	bl	8002d00 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d902      	bls.n	8005a5a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	73fb      	strb	r3, [r7, #15]
          break;
 8005a58:	e005      	b.n	8005a66 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a5a:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0ef      	beq.n	8005a46 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000

08005a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a96:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d018      	beq.n	8005ad4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005aa2:	4b65      	ldr	r3, [pc, #404]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0203 	and.w	r2, r3, #3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d10d      	bne.n	8005ace <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aba:	4b5f      	ldr	r3, [pc, #380]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
       ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d044      	beq.n	8005b58 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
 8005ad2:	e041      	b.n	8005b58 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d00c      	beq.n	8005af6 <RCCEx_PLLSAI2_Config+0x6e>
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d013      	beq.n	8005b08 <RCCEx_PLLSAI2_Config+0x80>
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d120      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ae4:	4b54      	ldr	r3, [pc, #336]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11d      	bne.n	8005b2c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af4:	e01a      	b.n	8005b2c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005af6:	4b50      	ldr	r3, [pc, #320]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d116      	bne.n	8005b30 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b06:	e013      	b.n	8005b30 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b08:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10f      	bne.n	8005b34 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b14:	4b48      	ldr	r3, [pc, #288]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b24:	e006      	b.n	8005b34 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2a:	e004      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b2c:	bf00      	nop
 8005b2e:	e002      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005b34:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10d      	bne.n	8005b58 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6819      	ldr	r1, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	430b      	orrs	r3, r1
 8005b52:	4939      	ldr	r1, [pc, #228]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d167      	bne.n	8005c2e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a35      	ldr	r2, [pc, #212]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b6a:	f7fd f8c9 	bl	8002d00 <HAL_GetTick>
 8005b6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b70:	e009      	b.n	8005b86 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b72:	f7fd f8c5 	bl	8002d00 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d902      	bls.n	8005b86 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	73fb      	strb	r3, [r7, #15]
        break;
 8005b84:	e005      	b.n	8005b92 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b86:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ef      	bne.n	8005b72 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d14a      	bne.n	8005c2e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d111      	bne.n	8005bc2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b9e:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6892      	ldr	r2, [r2, #8]
 8005bae:	0211      	lsls	r1, r2, #8
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	68d2      	ldr	r2, [r2, #12]
 8005bb4:	0912      	lsrs	r2, r2, #4
 8005bb6:	0452      	lsls	r2, r2, #17
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	491f      	ldr	r1, [pc, #124]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	614b      	str	r3, [r1, #20]
 8005bc0:	e011      	b.n	8005be6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	0211      	lsls	r1, r2, #8
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6912      	ldr	r2, [r2, #16]
 8005bd8:	0852      	lsrs	r2, r2, #1
 8005bda:	3a01      	subs	r2, #1
 8005bdc:	0652      	lsls	r2, r2, #25
 8005bde:	430a      	orrs	r2, r1
 8005be0:	4915      	ldr	r1, [pc, #84]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf2:	f7fd f885 	bl	8002d00 <HAL_GetTick>
 8005bf6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bf8:	e009      	b.n	8005c0e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bfa:	f7fd f881 	bl	8002d00 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d902      	bls.n	8005c0e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c0c:	e005      	b.n	8005c1a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0ef      	beq.n	8005bfa <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	4903      	ldr	r1, [pc, #12]	; (8005c38 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000

08005c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e095      	b.n	8005d7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d108      	bne.n	8005c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5e:	d009      	beq.n	8005c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	61da      	str	r2, [r3, #28]
 8005c66:	e005      	b.n	8005c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7fc fc62 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cb4:	d902      	bls.n	8005cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	e002      	b.n	8005cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cca:	d007      	beq.n	8005cdc <HAL_SPI_Init+0xa0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cd4:	d002      	beq.n	8005cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1e:	ea42 0103 	orr.w	r1, r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	f003 0204 	and.w	r2, r3, #4
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d58:	ea42 0103 	orr.w	r1, r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_SPI_Transmit+0x22>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e158      	b.n	8006056 <HAL_SPI_Transmit+0x2d4>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dac:	f7fc ffa8 	bl	8002d00 <HAL_GetTick>
 8005db0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc6:	e13d      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x52>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd8:	e134      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d10f      	bne.n	8005e46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d007      	beq.n	8005e64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e6c:	d94b      	bls.n	8005f06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0xfa>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d13e      	bne.n	8005efa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ea0:	e02b      	b.n	8005efa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d112      	bne.n	8005ed6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed4:	e011      	b.n	8005efa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed6:	f7fc ff13 	bl	8002d00 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d803      	bhi.n	8005eee <HAL_SPI_Transmit+0x16c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_Transmit+0x172>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef8:	e0a4      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ce      	bne.n	8005ea2 <HAL_SPI_Transmit+0x120>
 8005f04:	e07c      	b.n	8006000 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_SPI_Transmit+0x192>
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d170      	bne.n	8005ff6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d912      	bls.n	8005f44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b02      	subs	r3, #2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f42:	e058      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f6a:	e044      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d12b      	bne.n	8005fd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d912      	bls.n	8005faa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b02      	subs	r3, #2
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fa8:	e025      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd0:	e011      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd2:	f7fc fe95 	bl	8002d00 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d803      	bhi.n	8005fea <HAL_SPI_Transmit+0x268>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit+0x26e>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ff4:	e026      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1b5      	bne.n	8005f6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fbdf 	bl	80067c8 <SPI_EndRxTxTransaction>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e000      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006042:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006054:	7ffb      	ldrb	r3, [r7, #31]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	4613      	mov	r3, r2
 800606c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SPI_Transmit_DMA+0x20>
 800607c:	2302      	movs	r3, #2
 800607e:	e0d8      	b.n	8006232 <HAL_SPI_Transmit_DMA+0x1d2>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b01      	cmp	r3, #1
 8006092:	d002      	beq.n	800609a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006094:	2302      	movs	r3, #2
 8006096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006098:	e0c6      	b.n	8006228 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_SPI_Transmit_DMA+0x46>
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d102      	bne.n	80060ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060aa:	e0bd      	b.n	8006228 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2203      	movs	r2, #3
 80060b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060f6:	d10f      	bne.n	8006118 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006106:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006116:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611c:	4a47      	ldr	r2, [pc, #284]	; (800623c <HAL_SPI_Transmit_DMA+0x1dc>)
 800611e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006124:	4a46      	ldr	r2, [pc, #280]	; (8006240 <HAL_SPI_Transmit_DMA+0x1e0>)
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	4a45      	ldr	r2, [pc, #276]	; (8006244 <HAL_SPI_Transmit_DMA+0x1e4>)
 800612e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006134:	2200      	movs	r2, #0
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006146:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006150:	d82d      	bhi.n	80061ae <HAL_SPI_Transmit_DMA+0x14e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615c:	d127      	bne.n	80061ae <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006162:	b29b      	uxth	r3, r3
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10f      	bne.n	800618c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800617a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006180:	b29b      	uxth	r3, r3
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800618a:	e010      	b.n	80061ae <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800619a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3301      	adds	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	4619      	mov	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80061c6:	f7fd ff33 	bl	8004030 <HAL_DMA_Start_IT>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00c      	beq.n	80061ea <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d4:	f043 0210 	orr.w	r2, r3, #16
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061e8:	e01e      	b.n	8006228 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d007      	beq.n	8006208 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0220 	orr.w	r2, r2, #32
 8006216:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0202 	orr.w	r2, r2, #2
 8006226:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	08006517 	.word	0x08006517
 8006240:	08006471 	.word	0x08006471
 8006244:	08006533 	.word	0x08006533

08006248 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	099b      	lsrs	r3, r3, #6
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10f      	bne.n	800628c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	099b      	lsrs	r3, r3, #6
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
    return;
 800628a:	e0d8      	b.n	800643e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <HAL_SPI_IRQHandler+0x66>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	4798      	blx	r3
    return;
 80062ac:	e0c7      	b.n	800643e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10c      	bne.n	80062d4 <HAL_SPI_IRQHandler+0x8c>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	099b      	lsrs	r3, r3, #6
 80062be:	f003 0301 	and.w	r3, r3, #1
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	0a1b      	lsrs	r3, r3, #8
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80b5 	beq.w	800643e <HAL_SPI_IRQHandler+0x1f6>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	095b      	lsrs	r3, r3, #5
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80ae 	beq.w	800643e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	099b      	lsrs	r3, r3, #6
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d023      	beq.n	8006336 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d011      	beq.n	800631e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fe:	f043 0204 	orr.w	r2, r3, #4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	e00b      	b.n	8006336 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	693b      	ldr	r3, [r7, #16]
        return;
 8006334:	e083      	b.n	800643e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d014      	beq.n	800636c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006346:	f043 0201 	orr.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00c      	beq.n	8006392 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637c:	f043 0208 	orr.w	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	2b00      	cmp	r3, #0
 8006398:	d050      	beq.n	800643c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <HAL_SPI_IRQHandler+0x17e>
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d034      	beq.n	8006430 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0203 	bic.w	r2, r2, #3
 80063d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d011      	beq.n	8006402 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_SPI_IRQHandler+0x1fc>)
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fd fe80 	bl	80040f0 <HAL_DMA_Abort_IT>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d005      	beq.n	8006402 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <HAL_SPI_IRQHandler+0x1fc>)
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fe6a 	bl	80040f0 <HAL_DMA_Abort_IT>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800642e:	e003      	b.n	8006438 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f813 	bl	800645c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006436:	e000      	b.n	800643a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006438:	bf00      	nop
    return;
 800643a:	bf00      	nop
 800643c:	bf00      	nop
  }
}
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	08006573 	.word	0x08006573

08006448 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800647e:	f7fc fc3f 	bl	8002d00 <HAL_GetTick>
 8006482:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b20      	cmp	r3, #32
 8006490:	d03b      	beq.n	800650a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0220 	bic.w	r2, r2, #32
 80064a0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0202 	bic.w	r2, r2, #2
 80064b0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	2164      	movs	r1, #100	; 0x64
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f000 f986 	bl	80067c8 <SPI_EndRxTxTransaction>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006502:	6978      	ldr	r0, [r7, #20]
 8006504:	f7ff ffaa 	bl	800645c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006508:	e002      	b.n	8006510 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f7fb faee 	bl	8001aec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b084      	sub	sp, #16
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff ff8f 	bl	8006448 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685a      	ldr	r2, [r3, #4]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0203 	bic.w	r2, r2, #3
 800654e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006554:	f043 0210 	orr.w	r2, r3, #16
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff ff79 	bl	800645c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff ff64 	bl	800645c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065ac:	f7fc fba8 	bl	8002d00 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4413      	add	r3, r2
 80065ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065bc:	f7fc fba0 	bl	8002d00 <HAL_GetTick>
 80065c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065c2:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	015b      	lsls	r3, r3, #5
 80065c8:	0d1b      	lsrs	r3, r3, #20
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	fb02 f303 	mul.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065d2:	e054      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d050      	beq.n	800667e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065dc:	f7fc fb90 	bl	8002d00 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d902      	bls.n	80065f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d13d      	bne.n	800666e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660a:	d111      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006614:	d004      	beq.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661e:	d107      	bne.n	8006630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800662e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006638:	d10f      	bne.n	800665a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e017      	b.n	800669e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3b01      	subs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4013      	ands	r3, r2
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	429a      	cmp	r2, r3
 800669a:	d19b      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000004 	.word	0x20000004

080066ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066ba:	f7fc fb21 	bl	8002d00 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	4413      	add	r3, r2
 80066c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066ca:	f7fc fb19 	bl	8002d00 <HAL_GetTick>
 80066ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80066d0:	4b3c      	ldr	r3, [pc, #240]	; (80067c4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	00da      	lsls	r2, r3, #3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	0d1b      	lsrs	r3, r3, #20
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	fb02 f303 	mul.w	r3, r2, r3
 80066e6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80066e8:	e05f      	b.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80066f0:	d106      	bne.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x54>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d050      	beq.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006708:	f7fc fafa 	bl	8002d00 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	429a      	cmp	r2, r3
 8006716:	d902      	bls.n	800671e <SPI_WaitFifoStateUntilTimeout+0x72>
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d13d      	bne.n	800679a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800672c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006736:	d111      	bne.n	800675c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006740:	d004      	beq.n	800674c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674a:	d107      	bne.n	800675c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800675a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006764:	d10f      	bne.n	8006786 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e010      	b.n	80067bc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4013      	ands	r3, r2
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d197      	bne.n	80066ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3720      	adds	r7, #32
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000004 	.word	0x20000004

080067c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff ff63 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d007      	beq.n	80067fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f0:	f043 0220 	orr.w	r2, r3, #32
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e027      	b.n	800684c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2200      	movs	r2, #0
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff fec8 	bl	800659c <SPI_WaitFlagStateUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d007      	beq.n	8006822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006816:	f043 0220 	orr.w	r2, r3, #32
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e014      	b.n	800684c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2200      	movs	r2, #0
 800682a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f7ff ff3c 	bl	80066ac <SPI_WaitFifoStateUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683e:	f043 0220 	orr.w	r2, r3, #32
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e000      	b.n	800684c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e049      	b.n	80068fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc f930 	bl	8002ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f000 fb80 	bl	8006f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_TIM_PWM_Start+0x24>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	bf14      	ite	ne
 8006920:	2301      	movne	r3, #1
 8006922:	2300      	moveq	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e03c      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b04      	cmp	r3, #4
 800692c:	d109      	bne.n	8006942 <HAL_TIM_PWM_Start+0x3e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b01      	cmp	r3, #1
 8006938:	bf14      	ite	ne
 800693a:	2301      	movne	r3, #1
 800693c:	2300      	moveq	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e02f      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d109      	bne.n	800695c <HAL_TIM_PWM_Start+0x58>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b01      	cmp	r3, #1
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e022      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d109      	bne.n	8006976 <HAL_TIM_PWM_Start+0x72>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b01      	cmp	r3, #1
 800696c:	bf14      	ite	ne
 800696e:	2301      	movne	r3, #1
 8006970:	2300      	moveq	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	e015      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d109      	bne.n	8006990 <HAL_TIM_PWM_Start+0x8c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e008      	b.n	80069a2 <HAL_TIM_PWM_Start+0x9e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e09c      	b.n	8006ae4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0xb6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069b8:	e023      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xc6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069c8:	e01b      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d104      	bne.n	80069da <HAL_TIM_PWM_Start+0xd6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069d8:	e013      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b0c      	cmp	r3, #12
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_Start+0xe6>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069e8:	e00b      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_Start+0xf6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069f8:	e003      	b.n	8006a02 <HAL_TIM_PWM_Start+0xfe>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2201      	movs	r2, #1
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fe34 	bl	8007678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a35      	ldr	r2, [pc, #212]	; (8006aec <HAL_TIM_PWM_Start+0x1e8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d013      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x13e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a34      	ldr	r2, [pc, #208]	; (8006af0 <HAL_TIM_PWM_Start+0x1ec>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d00e      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x13e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a32      	ldr	r2, [pc, #200]	; (8006af4 <HAL_TIM_PWM_Start+0x1f0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d009      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x13e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a31      	ldr	r2, [pc, #196]	; (8006af8 <HAL_TIM_PWM_Start+0x1f4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <HAL_TIM_PWM_Start+0x13e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a2f      	ldr	r2, [pc, #188]	; (8006afc <HAL_TIM_PWM_Start+0x1f8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d101      	bne.n	8006a46 <HAL_TIM_PWM_Start+0x142>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <HAL_TIM_PWM_Start+0x144>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <HAL_TIM_PWM_Start+0x1e8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6e:	d018      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a22      	ldr	r2, [pc, #136]	; (8006b00 <HAL_TIM_PWM_Start+0x1fc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <HAL_TIM_PWM_Start+0x200>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <HAL_TIM_PWM_Start+0x204>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a17      	ldr	r2, [pc, #92]	; (8006af0 <HAL_TIM_PWM_Start+0x1ec>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x19e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_TIM_PWM_Start+0x1f0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d115      	bne.n	8006ace <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <HAL_TIM_PWM_Start+0x208>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d015      	beq.n	8006ae0 <HAL_TIM_PWM_Start+0x1dc>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aba:	d011      	beq.n	8006ae0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	e008      	b.n	8006ae0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e000      	b.n	8006ae2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40013400 	.word	0x40013400
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40014400 	.word	0x40014400
 8006afc:	40014800 	.word	0x40014800
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	00010007 	.word	0x00010007

08006b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e097      	b.n	8006c54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7fb ff8d 	bl	8002a58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006b54:	f023 0307 	bic.w	r3, r3, #7
 8006b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fa17 	bl	8006f98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bb0:	f023 030c 	bic.w	r3, r3, #12
 8006bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	011a      	lsls	r2, r3, #4
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	031b      	lsls	r3, r3, #12
 8006be0:	4313      	orrs	r3, r2
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	4313      	orrs	r3, r2
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3718      	adds	r7, #24
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d110      	bne.n	8006cae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d102      	bne.n	8006c98 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c92:	7b7b      	ldrb	r3, [r7, #13]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d001      	beq.n	8006c9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e068      	b.n	8006d6e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cac:	e031      	b.n	8006d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d110      	bne.n	8006cd6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d102      	bne.n	8006cc0 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cba:	7b3b      	ldrb	r3, [r7, #12]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d001      	beq.n	8006cc4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e054      	b.n	8006d6e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd4:	e01d      	b.n	8006d12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d108      	bne.n	8006cee <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d102      	bne.n	8006cee <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce8:	7b3b      	ldrb	r3, [r7, #12]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e03d      	b.n	8006d6e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2202      	movs	r2, #2
 8006d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_TIM_Encoder_Start+0xc2>
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d008      	beq.n	8006d2e <HAL_TIM_Encoder_Start+0xd2>
 8006d1c:	e00f      	b.n	8006d3e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2201      	movs	r2, #1
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fca6 	bl	8007678 <TIM_CCxChannelCmd>
      break;
 8006d2c:	e016      	b.n	8006d5c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2201      	movs	r2, #1
 8006d34:	2104      	movs	r1, #4
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fc9e 	bl	8007678 <TIM_CCxChannelCmd>
      break;
 8006d3c:	e00e      	b.n	8006d5c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2201      	movs	r2, #1
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fc96 	bl	8007678 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2201      	movs	r2, #1
 8006d52:	2104      	movs	r1, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 fc8f 	bl	8007678 <TIM_CCxChannelCmd>
      break;
 8006d5a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e0fd      	b.n	8006f8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b14      	cmp	r3, #20
 8006d9e:	f200 80f0 	bhi.w	8006f82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006f83 	.word	0x08006f83
 8006db0:	08006f83 	.word	0x08006f83
 8006db4:	08006f83 	.word	0x08006f83
 8006db8:	08006e3d 	.word	0x08006e3d
 8006dbc:	08006f83 	.word	0x08006f83
 8006dc0:	08006f83 	.word	0x08006f83
 8006dc4:	08006f83 	.word	0x08006f83
 8006dc8:	08006e7f 	.word	0x08006e7f
 8006dcc:	08006f83 	.word	0x08006f83
 8006dd0:	08006f83 	.word	0x08006f83
 8006dd4:	08006f83 	.word	0x08006f83
 8006dd8:	08006ebf 	.word	0x08006ebf
 8006ddc:	08006f83 	.word	0x08006f83
 8006de0:	08006f83 	.word	0x08006f83
 8006de4:	08006f83 	.word	0x08006f83
 8006de8:	08006f01 	.word	0x08006f01
 8006dec:	08006f83 	.word	0x08006f83
 8006df0:	08006f83 	.word	0x08006f83
 8006df4:	08006f83 	.word	0x08006f83
 8006df8:	08006f41 	.word	0x08006f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 f962 	bl	80070cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0208 	orr.w	r2, r2, #8
 8006e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699a      	ldr	r2, [r3, #24]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0204 	bic.w	r2, r2, #4
 8006e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6999      	ldr	r1, [r3, #24]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	619a      	str	r2, [r3, #24]
      break;
 8006e3a:	e0a3      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f9d2 	bl	80071ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6999      	ldr	r1, [r3, #24]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	021a      	lsls	r2, r3, #8
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	619a      	str	r2, [r3, #24]
      break;
 8006e7c:	e082      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fa3b 	bl	8007300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0208 	orr.w	r2, r2, #8
 8006e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0204 	bic.w	r2, r2, #4
 8006ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69d9      	ldr	r1, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	61da      	str	r2, [r3, #28]
      break;
 8006ebc:	e062      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 faa3 	bl	8007410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69d9      	ldr	r1, [r3, #28]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	021a      	lsls	r2, r3, #8
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	61da      	str	r2, [r3, #28]
      break;
 8006efe:	e041      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 faec 	bl	80074e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0208 	orr.w	r2, r2, #8
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0204 	bic.w	r2, r2, #4
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f3e:	e021      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fb30 	bl	80075ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	021a      	lsls	r2, r3, #8
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f80:	e000      	b.n	8006f84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006f82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop

08006f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a40      	ldr	r2, [pc, #256]	; (80070ac <TIM_Base_SetConfig+0x114>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d013      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d00f      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3d      	ldr	r2, [pc, #244]	; (80070b0 <TIM_Base_SetConfig+0x118>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3c      	ldr	r2, [pc, #240]	; (80070b4 <TIM_Base_SetConfig+0x11c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3b      	ldr	r2, [pc, #236]	; (80070b8 <TIM_Base_SetConfig+0x120>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_Base_SetConfig+0x40>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <TIM_Base_SetConfig+0x124>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d108      	bne.n	8006fea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2f      	ldr	r2, [pc, #188]	; (80070ac <TIM_Base_SetConfig+0x114>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01f      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff8:	d01b      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	; (80070b0 <TIM_Base_SetConfig+0x118>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d017      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2b      	ldr	r2, [pc, #172]	; (80070b4 <TIM_Base_SetConfig+0x11c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <TIM_Base_SetConfig+0x120>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00f      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a29      	ldr	r2, [pc, #164]	; (80070bc <TIM_Base_SetConfig+0x124>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00b      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a28      	ldr	r2, [pc, #160]	; (80070c0 <TIM_Base_SetConfig+0x128>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <TIM_Base_SetConfig+0x12c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d003      	beq.n	8007032 <TIM_Base_SetConfig+0x9a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a26      	ldr	r2, [pc, #152]	; (80070c8 <TIM_Base_SetConfig+0x130>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d108      	bne.n	8007044 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a10      	ldr	r2, [pc, #64]	; (80070ac <TIM_Base_SetConfig+0x114>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00f      	beq.n	8007090 <TIM_Base_SetConfig+0xf8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a12      	ldr	r2, [pc, #72]	; (80070bc <TIM_Base_SetConfig+0x124>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00b      	beq.n	8007090 <TIM_Base_SetConfig+0xf8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <TIM_Base_SetConfig+0x128>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d007      	beq.n	8007090 <TIM_Base_SetConfig+0xf8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <TIM_Base_SetConfig+0x12c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_Base_SetConfig+0xf8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a0f      	ldr	r2, [pc, #60]	; (80070c8 <TIM_Base_SetConfig+0x130>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d103      	bne.n	8007098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	615a      	str	r2, [r3, #20]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40013400 	.word	0x40013400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800

080070cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 0302 	bic.w	r3, r3, #2
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a2c      	ldr	r2, [pc, #176]	; (80071d8 <TIM_OC1_SetConfig+0x10c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00f      	beq.n	800714c <TIM_OC1_SetConfig+0x80>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a2b      	ldr	r2, [pc, #172]	; (80071dc <TIM_OC1_SetConfig+0x110>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00b      	beq.n	800714c <TIM_OC1_SetConfig+0x80>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <TIM_OC1_SetConfig+0x114>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d007      	beq.n	800714c <TIM_OC1_SetConfig+0x80>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a29      	ldr	r2, [pc, #164]	; (80071e4 <TIM_OC1_SetConfig+0x118>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_OC1_SetConfig+0x80>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <TIM_OC1_SetConfig+0x11c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10c      	bne.n	8007166 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0308 	bic.w	r3, r3, #8
 8007152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 0304 	bic.w	r3, r3, #4
 8007164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1b      	ldr	r2, [pc, #108]	; (80071d8 <TIM_OC1_SetConfig+0x10c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_OC1_SetConfig+0xc2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1a      	ldr	r2, [pc, #104]	; (80071dc <TIM_OC1_SetConfig+0x110>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_OC1_SetConfig+0xc2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <TIM_OC1_SetConfig+0x114>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_OC1_SetConfig+0xc2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <TIM_OC1_SetConfig+0x118>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_OC1_SetConfig+0xc2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <TIM_OC1_SetConfig+0x11c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d111      	bne.n	80071b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800719c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	621a      	str	r2, [r3, #32]
}
 80071cc:	bf00      	nop
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	40012c00 	.word	0x40012c00
 80071dc:	40013400 	.word	0x40013400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800

080071ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800721a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0320 	bic.w	r3, r3, #32
 800723a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a28      	ldr	r2, [pc, #160]	; (80072ec <TIM_OC2_SetConfig+0x100>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC2_SetConfig+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a27      	ldr	r2, [pc, #156]	; (80072f0 <TIM_OC2_SetConfig+0x104>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10d      	bne.n	8007274 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007272:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <TIM_OC2_SetConfig+0x100>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00f      	beq.n	800729c <TIM_OC2_SetConfig+0xb0>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1c      	ldr	r2, [pc, #112]	; (80072f0 <TIM_OC2_SetConfig+0x104>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00b      	beq.n	800729c <TIM_OC2_SetConfig+0xb0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <TIM_OC2_SetConfig+0x108>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <TIM_OC2_SetConfig+0xb0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <TIM_OC2_SetConfig+0x10c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_OC2_SetConfig+0xb0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a19      	ldr	r2, [pc, #100]	; (80072fc <TIM_OC2_SetConfig+0x110>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d113      	bne.n	80072c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40012c00 	.word	0x40012c00
 80072f0:	40013400 	.word	0x40013400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800

08007300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800734c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a27      	ldr	r2, [pc, #156]	; (80073fc <TIM_OC3_SetConfig+0xfc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_OC3_SetConfig+0x6a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a26      	ldr	r2, [pc, #152]	; (8007400 <TIM_OC3_SetConfig+0x100>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d10d      	bne.n	8007386 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <TIM_OC3_SetConfig+0xfc>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00f      	beq.n	80073ae <TIM_OC3_SetConfig+0xae>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <TIM_OC3_SetConfig+0x100>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00b      	beq.n	80073ae <TIM_OC3_SetConfig+0xae>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <TIM_OC3_SetConfig+0x104>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <TIM_OC3_SetConfig+0xae>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a19      	ldr	r2, [pc, #100]	; (8007408 <TIM_OC3_SetConfig+0x108>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_OC3_SetConfig+0xae>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <TIM_OC3_SetConfig+0x10c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d113      	bne.n	80073d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	621a      	str	r2, [r3, #32]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40013400 	.word	0x40013400
 8007404:	40014000 	.word	0x40014000
 8007408:	40014400 	.word	0x40014400
 800740c:	40014800 	.word	0x40014800

08007410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800743e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800745e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	031b      	lsls	r3, r3, #12
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <TIM_OC4_SetConfig+0xc0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00f      	beq.n	8007494 <TIM_OC4_SetConfig+0x84>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a17      	ldr	r2, [pc, #92]	; (80074d4 <TIM_OC4_SetConfig+0xc4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00b      	beq.n	8007494 <TIM_OC4_SetConfig+0x84>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <TIM_OC4_SetConfig+0xc8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d007      	beq.n	8007494 <TIM_OC4_SetConfig+0x84>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <TIM_OC4_SetConfig+0xcc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_OC4_SetConfig+0x84>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a14      	ldr	r2, [pc, #80]	; (80074e0 <TIM_OC4_SetConfig+0xd0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d109      	bne.n	80074a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	019b      	lsls	r3, r3, #6
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40012c00 	.word	0x40012c00
 80074d4:	40013400 	.word	0x40013400
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800

080074e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007528:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a17      	ldr	r2, [pc, #92]	; (8007598 <TIM_OC5_SetConfig+0xb4>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00f      	beq.n	800755e <TIM_OC5_SetConfig+0x7a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <TIM_OC5_SetConfig+0xb8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d00b      	beq.n	800755e <TIM_OC5_SetConfig+0x7a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <TIM_OC5_SetConfig+0xbc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d007      	beq.n	800755e <TIM_OC5_SetConfig+0x7a>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a14      	ldr	r2, [pc, #80]	; (80075a4 <TIM_OC5_SetConfig+0xc0>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d003      	beq.n	800755e <TIM_OC5_SetConfig+0x7a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <TIM_OC5_SetConfig+0xc4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d109      	bne.n	8007572 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	621a      	str	r2, [r3, #32]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	40012c00 	.word	0x40012c00
 800759c:	40013400 	.word	0x40013400
 80075a0:	40014000 	.word	0x40014000
 80075a4:	40014400 	.word	0x40014400
 80075a8:	40014800 	.word	0x40014800

080075ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	051b      	lsls	r3, r3, #20
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a18      	ldr	r2, [pc, #96]	; (8007664 <TIM_OC6_SetConfig+0xb8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00f      	beq.n	8007628 <TIM_OC6_SetConfig+0x7c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <TIM_OC6_SetConfig+0xbc>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d00b      	beq.n	8007628 <TIM_OC6_SetConfig+0x7c>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <TIM_OC6_SetConfig+0xc0>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d007      	beq.n	8007628 <TIM_OC6_SetConfig+0x7c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a15      	ldr	r2, [pc, #84]	; (8007670 <TIM_OC6_SetConfig+0xc4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC6_SetConfig+0x7c>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a14      	ldr	r2, [pc, #80]	; (8007674 <TIM_OC6_SetConfig+0xc8>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d109      	bne.n	800763c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800762e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	029b      	lsls	r3, r3, #10
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40013400 	.word	0x40013400
 800766c:	40014000 	.word	0x40014000
 8007670:	40014400 	.word	0x40014400
 8007674:	40014800 	.word	0x40014800

08007678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2201      	movs	r2, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	43db      	mvns	r3, r3
 800769a:	401a      	ands	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	fa01 f303 	lsl.w	r3, r1, r3
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e068      	b.n	80077ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a2e      	ldr	r2, [pc, #184]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01d      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d018      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d013      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1a      	ldr	r2, [pc, #104]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00e      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a18      	ldr	r2, [pc, #96]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d004      	beq.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a14      	ldr	r2, [pc, #80]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10c      	bne.n	800779c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	4313      	orrs	r3, r2
 8007792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40012c00 	.word	0x40012c00
 80077c0:	40013400 	.word	0x40013400
 80077c4:	40000400 	.word	0x40000400
 80077c8:	40000800 	.word	0x40000800
 80077cc:	40000c00 	.word	0x40000c00
 80077d0:	40014000 	.word	0x40014000

080077d4 <__errno>:
 80077d4:	4b01      	ldr	r3, [pc, #4]	; (80077dc <__errno+0x8>)
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20000010 	.word	0x20000010

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4e0d      	ldr	r6, [pc, #52]	; (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	; (800781c <__libc_init_array+0x3c>)
 80077e6:	1ba4      	subs	r4, r4, r6
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2500      	movs	r5, #0
 80077ec:	42a5      	cmp	r5, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4e0b      	ldr	r6, [pc, #44]	; (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	; (8007824 <__libc_init_array+0x44>)
 80077f4:	f001 fd4a 	bl	800928c <_init>
 80077f8:	1ba4      	subs	r4, r4, r6
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2500      	movs	r5, #0
 80077fe:	42a5      	cmp	r5, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007808:	4798      	blx	r3
 800780a:	3501      	adds	r5, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007812:	4798      	blx	r3
 8007814:	3501      	adds	r5, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08009ab8 	.word	0x08009ab8
 800781c:	08009ab8 	.word	0x08009ab8
 8007820:	08009ab8 	.word	0x08009ab8
 8007824:	08009abc 	.word	0x08009abc

08007828 <memcpy>:
 8007828:	b510      	push	{r4, lr}
 800782a:	1e43      	subs	r3, r0, #1
 800782c:	440a      	add	r2, r1
 800782e:	4291      	cmp	r1, r2
 8007830:	d100      	bne.n	8007834 <memcpy+0xc>
 8007832:	bd10      	pop	{r4, pc}
 8007834:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007838:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783c:	e7f7      	b.n	800782e <memcpy+0x6>

0800783e <memset>:
 800783e:	4402      	add	r2, r0
 8007840:	4603      	mov	r3, r0
 8007842:	4293      	cmp	r3, r2
 8007844:	d100      	bne.n	8007848 <memset+0xa>
 8007846:	4770      	bx	lr
 8007848:	f803 1b01 	strb.w	r1, [r3], #1
 800784c:	e7f9      	b.n	8007842 <memset+0x4>
	...

08007850 <siprintf>:
 8007850:	b40e      	push	{r1, r2, r3}
 8007852:	b500      	push	{lr}
 8007854:	b09c      	sub	sp, #112	; 0x70
 8007856:	ab1d      	add	r3, sp, #116	; 0x74
 8007858:	9002      	str	r0, [sp, #8]
 800785a:	9006      	str	r0, [sp, #24]
 800785c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007860:	4809      	ldr	r0, [pc, #36]	; (8007888 <siprintf+0x38>)
 8007862:	9107      	str	r1, [sp, #28]
 8007864:	9104      	str	r1, [sp, #16]
 8007866:	4909      	ldr	r1, [pc, #36]	; (800788c <siprintf+0x3c>)
 8007868:	f853 2b04 	ldr.w	r2, [r3], #4
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	6800      	ldr	r0, [r0, #0]
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	a902      	add	r1, sp, #8
 8007874:	f000 f866 	bl	8007944 <_svfiprintf_r>
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	b01c      	add	sp, #112	; 0x70
 8007880:	f85d eb04 	ldr.w	lr, [sp], #4
 8007884:	b003      	add	sp, #12
 8007886:	4770      	bx	lr
 8007888:	20000010 	.word	0x20000010
 800788c:	ffff0208 	.word	0xffff0208

08007890 <__ssputs_r>:
 8007890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007894:	688e      	ldr	r6, [r1, #8]
 8007896:	429e      	cmp	r6, r3
 8007898:	4682      	mov	sl, r0
 800789a:	460c      	mov	r4, r1
 800789c:	4690      	mov	r8, r2
 800789e:	4699      	mov	r9, r3
 80078a0:	d837      	bhi.n	8007912 <__ssputs_r+0x82>
 80078a2:	898a      	ldrh	r2, [r1, #12]
 80078a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078a8:	d031      	beq.n	800790e <__ssputs_r+0x7e>
 80078aa:	6825      	ldr	r5, [r4, #0]
 80078ac:	6909      	ldr	r1, [r1, #16]
 80078ae:	1a6f      	subs	r7, r5, r1
 80078b0:	6965      	ldr	r5, [r4, #20]
 80078b2:	2302      	movs	r3, #2
 80078b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80078bc:	f109 0301 	add.w	r3, r9, #1
 80078c0:	443b      	add	r3, r7
 80078c2:	429d      	cmp	r5, r3
 80078c4:	bf38      	it	cc
 80078c6:	461d      	movcc	r5, r3
 80078c8:	0553      	lsls	r3, r2, #21
 80078ca:	d530      	bpl.n	800792e <__ssputs_r+0x9e>
 80078cc:	4629      	mov	r1, r5
 80078ce:	f000 fb21 	bl	8007f14 <_malloc_r>
 80078d2:	4606      	mov	r6, r0
 80078d4:	b950      	cbnz	r0, 80078ec <__ssputs_r+0x5c>
 80078d6:	230c      	movs	r3, #12
 80078d8:	f8ca 3000 	str.w	r3, [sl]
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ec:	463a      	mov	r2, r7
 80078ee:	6921      	ldr	r1, [r4, #16]
 80078f0:	f7ff ff9a 	bl	8007828 <memcpy>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	6126      	str	r6, [r4, #16]
 8007902:	6165      	str	r5, [r4, #20]
 8007904:	443e      	add	r6, r7
 8007906:	1bed      	subs	r5, r5, r7
 8007908:	6026      	str	r6, [r4, #0]
 800790a:	60a5      	str	r5, [r4, #8]
 800790c:	464e      	mov	r6, r9
 800790e:	454e      	cmp	r6, r9
 8007910:	d900      	bls.n	8007914 <__ssputs_r+0x84>
 8007912:	464e      	mov	r6, r9
 8007914:	4632      	mov	r2, r6
 8007916:	4641      	mov	r1, r8
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	f000 fa93 	bl	8007e44 <memmove>
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	1b9b      	subs	r3, r3, r6
 8007922:	60a3      	str	r3, [r4, #8]
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	441e      	add	r6, r3
 8007928:	6026      	str	r6, [r4, #0]
 800792a:	2000      	movs	r0, #0
 800792c:	e7dc      	b.n	80078e8 <__ssputs_r+0x58>
 800792e:	462a      	mov	r2, r5
 8007930:	f000 fb4a 	bl	8007fc8 <_realloc_r>
 8007934:	4606      	mov	r6, r0
 8007936:	2800      	cmp	r0, #0
 8007938:	d1e2      	bne.n	8007900 <__ssputs_r+0x70>
 800793a:	6921      	ldr	r1, [r4, #16]
 800793c:	4650      	mov	r0, sl
 800793e:	f000 fa9b 	bl	8007e78 <_free_r>
 8007942:	e7c8      	b.n	80078d6 <__ssputs_r+0x46>

08007944 <_svfiprintf_r>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	461d      	mov	r5, r3
 800794a:	898b      	ldrh	r3, [r1, #12]
 800794c:	061f      	lsls	r7, r3, #24
 800794e:	b09d      	sub	sp, #116	; 0x74
 8007950:	4680      	mov	r8, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4616      	mov	r6, r2
 8007956:	d50f      	bpl.n	8007978 <_svfiprintf_r+0x34>
 8007958:	690b      	ldr	r3, [r1, #16]
 800795a:	b96b      	cbnz	r3, 8007978 <_svfiprintf_r+0x34>
 800795c:	2140      	movs	r1, #64	; 0x40
 800795e:	f000 fad9 	bl	8007f14 <_malloc_r>
 8007962:	6020      	str	r0, [r4, #0]
 8007964:	6120      	str	r0, [r4, #16]
 8007966:	b928      	cbnz	r0, 8007974 <_svfiprintf_r+0x30>
 8007968:	230c      	movs	r3, #12
 800796a:	f8c8 3000 	str.w	r3, [r8]
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
 8007972:	e0c8      	b.n	8007b06 <_svfiprintf_r+0x1c2>
 8007974:	2340      	movs	r3, #64	; 0x40
 8007976:	6163      	str	r3, [r4, #20]
 8007978:	2300      	movs	r3, #0
 800797a:	9309      	str	r3, [sp, #36]	; 0x24
 800797c:	2320      	movs	r3, #32
 800797e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007982:	2330      	movs	r3, #48	; 0x30
 8007984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007988:	9503      	str	r5, [sp, #12]
 800798a:	f04f 0b01 	mov.w	fp, #1
 800798e:	4637      	mov	r7, r6
 8007990:	463d      	mov	r5, r7
 8007992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007996:	b10b      	cbz	r3, 800799c <_svfiprintf_r+0x58>
 8007998:	2b25      	cmp	r3, #37	; 0x25
 800799a:	d13e      	bne.n	8007a1a <_svfiprintf_r+0xd6>
 800799c:	ebb7 0a06 	subs.w	sl, r7, r6
 80079a0:	d00b      	beq.n	80079ba <_svfiprintf_r+0x76>
 80079a2:	4653      	mov	r3, sl
 80079a4:	4632      	mov	r2, r6
 80079a6:	4621      	mov	r1, r4
 80079a8:	4640      	mov	r0, r8
 80079aa:	f7ff ff71 	bl	8007890 <__ssputs_r>
 80079ae:	3001      	adds	r0, #1
 80079b0:	f000 80a4 	beq.w	8007afc <_svfiprintf_r+0x1b8>
 80079b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b6:	4453      	add	r3, sl
 80079b8:	9309      	str	r3, [sp, #36]	; 0x24
 80079ba:	783b      	ldrb	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 809d 	beq.w	8007afc <_svfiprintf_r+0x1b8>
 80079c2:	2300      	movs	r3, #0
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	9307      	str	r3, [sp, #28]
 80079d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079d4:	931a      	str	r3, [sp, #104]	; 0x68
 80079d6:	462f      	mov	r7, r5
 80079d8:	2205      	movs	r2, #5
 80079da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079de:	4850      	ldr	r0, [pc, #320]	; (8007b20 <_svfiprintf_r+0x1dc>)
 80079e0:	f7f8 fbfe 	bl	80001e0 <memchr>
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	b9d0      	cbnz	r0, 8007a1e <_svfiprintf_r+0xda>
 80079e8:	06d9      	lsls	r1, r3, #27
 80079ea:	bf44      	itt	mi
 80079ec:	2220      	movmi	r2, #32
 80079ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079f2:	071a      	lsls	r2, r3, #28
 80079f4:	bf44      	itt	mi
 80079f6:	222b      	movmi	r2, #43	; 0x2b
 80079f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079fc:	782a      	ldrb	r2, [r5, #0]
 80079fe:	2a2a      	cmp	r2, #42	; 0x2a
 8007a00:	d015      	beq.n	8007a2e <_svfiprintf_r+0xea>
 8007a02:	9a07      	ldr	r2, [sp, #28]
 8007a04:	462f      	mov	r7, r5
 8007a06:	2000      	movs	r0, #0
 8007a08:	250a      	movs	r5, #10
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a10:	3b30      	subs	r3, #48	; 0x30
 8007a12:	2b09      	cmp	r3, #9
 8007a14:	d94d      	bls.n	8007ab2 <_svfiprintf_r+0x16e>
 8007a16:	b1b8      	cbz	r0, 8007a48 <_svfiprintf_r+0x104>
 8007a18:	e00f      	b.n	8007a3a <_svfiprintf_r+0xf6>
 8007a1a:	462f      	mov	r7, r5
 8007a1c:	e7b8      	b.n	8007990 <_svfiprintf_r+0x4c>
 8007a1e:	4a40      	ldr	r2, [pc, #256]	; (8007b20 <_svfiprintf_r+0x1dc>)
 8007a20:	1a80      	subs	r0, r0, r2
 8007a22:	fa0b f000 	lsl.w	r0, fp, r0
 8007a26:	4318      	orrs	r0, r3
 8007a28:	9004      	str	r0, [sp, #16]
 8007a2a:	463d      	mov	r5, r7
 8007a2c:	e7d3      	b.n	80079d6 <_svfiprintf_r+0x92>
 8007a2e:	9a03      	ldr	r2, [sp, #12]
 8007a30:	1d11      	adds	r1, r2, #4
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	9103      	str	r1, [sp, #12]
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	db01      	blt.n	8007a3e <_svfiprintf_r+0xfa>
 8007a3a:	9207      	str	r2, [sp, #28]
 8007a3c:	e004      	b.n	8007a48 <_svfiprintf_r+0x104>
 8007a3e:	4252      	negs	r2, r2
 8007a40:	f043 0302 	orr.w	r3, r3, #2
 8007a44:	9207      	str	r2, [sp, #28]
 8007a46:	9304      	str	r3, [sp, #16]
 8007a48:	783b      	ldrb	r3, [r7, #0]
 8007a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a4c:	d10c      	bne.n	8007a68 <_svfiprintf_r+0x124>
 8007a4e:	787b      	ldrb	r3, [r7, #1]
 8007a50:	2b2a      	cmp	r3, #42	; 0x2a
 8007a52:	d133      	bne.n	8007abc <_svfiprintf_r+0x178>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	9203      	str	r2, [sp, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bfb8      	it	lt
 8007a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a64:	3702      	adds	r7, #2
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	4d2e      	ldr	r5, [pc, #184]	; (8007b24 <_svfiprintf_r+0x1e0>)
 8007a6a:	7839      	ldrb	r1, [r7, #0]
 8007a6c:	2203      	movs	r2, #3
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f7f8 fbb6 	bl	80001e0 <memchr>
 8007a74:	b138      	cbz	r0, 8007a86 <_svfiprintf_r+0x142>
 8007a76:	2340      	movs	r3, #64	; 0x40
 8007a78:	1b40      	subs	r0, r0, r5
 8007a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007a7e:	9b04      	ldr	r3, [sp, #16]
 8007a80:	4303      	orrs	r3, r0
 8007a82:	3701      	adds	r7, #1
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	7839      	ldrb	r1, [r7, #0]
 8007a88:	4827      	ldr	r0, [pc, #156]	; (8007b28 <_svfiprintf_r+0x1e4>)
 8007a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a8e:	2206      	movs	r2, #6
 8007a90:	1c7e      	adds	r6, r7, #1
 8007a92:	f7f8 fba5 	bl	80001e0 <memchr>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d038      	beq.n	8007b0c <_svfiprintf_r+0x1c8>
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <_svfiprintf_r+0x1e8>)
 8007a9c:	bb13      	cbnz	r3, 8007ae4 <_svfiprintf_r+0x1a0>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	444b      	add	r3, r9
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	e76d      	b.n	800798e <_svfiprintf_r+0x4a>
 8007ab2:	fb05 3202 	mla	r2, r5, r2, r3
 8007ab6:	2001      	movs	r0, #1
 8007ab8:	460f      	mov	r7, r1
 8007aba:	e7a6      	b.n	8007a0a <_svfiprintf_r+0xc6>
 8007abc:	2300      	movs	r3, #0
 8007abe:	3701      	adds	r7, #1
 8007ac0:	9305      	str	r3, [sp, #20]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	250a      	movs	r5, #10
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007acc:	3a30      	subs	r2, #48	; 0x30
 8007ace:	2a09      	cmp	r2, #9
 8007ad0:	d903      	bls.n	8007ada <_svfiprintf_r+0x196>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0c8      	beq.n	8007a68 <_svfiprintf_r+0x124>
 8007ad6:	9105      	str	r1, [sp, #20]
 8007ad8:	e7c6      	b.n	8007a68 <_svfiprintf_r+0x124>
 8007ada:	fb05 2101 	mla	r1, r5, r1, r2
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	e7f0      	b.n	8007ac6 <_svfiprintf_r+0x182>
 8007ae4:	ab03      	add	r3, sp, #12
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4622      	mov	r2, r4
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <_svfiprintf_r+0x1ec>)
 8007aec:	a904      	add	r1, sp, #16
 8007aee:	4640      	mov	r0, r8
 8007af0:	f3af 8000 	nop.w
 8007af4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007af8:	4681      	mov	r9, r0
 8007afa:	d1d6      	bne.n	8007aaa <_svfiprintf_r+0x166>
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	065b      	lsls	r3, r3, #25
 8007b00:	f53f af35 	bmi.w	800796e <_svfiprintf_r+0x2a>
 8007b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b06:	b01d      	add	sp, #116	; 0x74
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	4622      	mov	r2, r4
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <_svfiprintf_r+0x1ec>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4640      	mov	r0, r8
 8007b18:	f000 f882 	bl	8007c20 <_printf_i>
 8007b1c:	e7ea      	b.n	8007af4 <_svfiprintf_r+0x1b0>
 8007b1e:	bf00      	nop
 8007b20:	080098a8 	.word	0x080098a8
 8007b24:	080098ae 	.word	0x080098ae
 8007b28:	080098b2 	.word	0x080098b2
 8007b2c:	00000000 	.word	0x00000000
 8007b30:	08007891 	.word	0x08007891

08007b34 <_printf_common>:
 8007b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	4691      	mov	r9, r2
 8007b3a:	461f      	mov	r7, r3
 8007b3c:	688a      	ldr	r2, [r1, #8]
 8007b3e:	690b      	ldr	r3, [r1, #16]
 8007b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bfb8      	it	lt
 8007b48:	4613      	movlt	r3, r2
 8007b4a:	f8c9 3000 	str.w	r3, [r9]
 8007b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b52:	4606      	mov	r6, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	b112      	cbz	r2, 8007b5e <_printf_common+0x2a>
 8007b58:	3301      	adds	r3, #1
 8007b5a:	f8c9 3000 	str.w	r3, [r9]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	0699      	lsls	r1, r3, #26
 8007b62:	bf42      	ittt	mi
 8007b64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b68:	3302      	addmi	r3, #2
 8007b6a:	f8c9 3000 	strmi.w	r3, [r9]
 8007b6e:	6825      	ldr	r5, [r4, #0]
 8007b70:	f015 0506 	ands.w	r5, r5, #6
 8007b74:	d107      	bne.n	8007b86 <_printf_common+0x52>
 8007b76:	f104 0a19 	add.w	sl, r4, #25
 8007b7a:	68e3      	ldr	r3, [r4, #12]
 8007b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	42ab      	cmp	r3, r5
 8007b84:	dc28      	bgt.n	8007bd8 <_printf_common+0xa4>
 8007b86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b8a:	6822      	ldr	r2, [r4, #0]
 8007b8c:	3300      	adds	r3, #0
 8007b8e:	bf18      	it	ne
 8007b90:	2301      	movne	r3, #1
 8007b92:	0692      	lsls	r2, r2, #26
 8007b94:	d42d      	bmi.n	8007bf2 <_printf_common+0xbe>
 8007b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	47c0      	blx	r8
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d020      	beq.n	8007be6 <_printf_common+0xb2>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	68e5      	ldr	r5, [r4, #12]
 8007ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8007bac:	f003 0306 	and.w	r3, r3, #6
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	bf08      	it	eq
 8007bb4:	1aad      	subeq	r5, r5, r2
 8007bb6:	68a3      	ldr	r3, [r4, #8]
 8007bb8:	6922      	ldr	r2, [r4, #16]
 8007bba:	bf0c      	ite	eq
 8007bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bc0:	2500      	movne	r5, #0
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	bfc4      	itt	gt
 8007bc6:	1a9b      	subgt	r3, r3, r2
 8007bc8:	18ed      	addgt	r5, r5, r3
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	341a      	adds	r4, #26
 8007bd0:	454d      	cmp	r5, r9
 8007bd2:	d11a      	bne.n	8007c0a <_printf_common+0xd6>
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e008      	b.n	8007bea <_printf_common+0xb6>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4652      	mov	r2, sl
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4630      	mov	r0, r6
 8007be0:	47c0      	blx	r8
 8007be2:	3001      	adds	r0, #1
 8007be4:	d103      	bne.n	8007bee <_printf_common+0xba>
 8007be6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	3501      	adds	r5, #1
 8007bf0:	e7c3      	b.n	8007b7a <_printf_common+0x46>
 8007bf2:	18e1      	adds	r1, r4, r3
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	2030      	movs	r0, #48	; 0x30
 8007bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bfc:	4422      	add	r2, r4
 8007bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c06:	3302      	adds	r3, #2
 8007c08:	e7c5      	b.n	8007b96 <_printf_common+0x62>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4630      	mov	r0, r6
 8007c12:	47c0      	blx	r8
 8007c14:	3001      	adds	r0, #1
 8007c16:	d0e6      	beq.n	8007be6 <_printf_common+0xb2>
 8007c18:	f109 0901 	add.w	r9, r9, #1
 8007c1c:	e7d8      	b.n	8007bd0 <_printf_common+0x9c>
	...

08007c20 <_printf_i>:
 8007c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c28:	460c      	mov	r4, r1
 8007c2a:	7e09      	ldrb	r1, [r1, #24]
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	296e      	cmp	r1, #110	; 0x6e
 8007c30:	4617      	mov	r7, r2
 8007c32:	4606      	mov	r6, r0
 8007c34:	4698      	mov	r8, r3
 8007c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c38:	f000 80b3 	beq.w	8007da2 <_printf_i+0x182>
 8007c3c:	d822      	bhi.n	8007c84 <_printf_i+0x64>
 8007c3e:	2963      	cmp	r1, #99	; 0x63
 8007c40:	d036      	beq.n	8007cb0 <_printf_i+0x90>
 8007c42:	d80a      	bhi.n	8007c5a <_printf_i+0x3a>
 8007c44:	2900      	cmp	r1, #0
 8007c46:	f000 80b9 	beq.w	8007dbc <_printf_i+0x19c>
 8007c4a:	2958      	cmp	r1, #88	; 0x58
 8007c4c:	f000 8083 	beq.w	8007d56 <_printf_i+0x136>
 8007c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c58:	e032      	b.n	8007cc0 <_printf_i+0xa0>
 8007c5a:	2964      	cmp	r1, #100	; 0x64
 8007c5c:	d001      	beq.n	8007c62 <_printf_i+0x42>
 8007c5e:	2969      	cmp	r1, #105	; 0x69
 8007c60:	d1f6      	bne.n	8007c50 <_printf_i+0x30>
 8007c62:	6820      	ldr	r0, [r4, #0]
 8007c64:	6813      	ldr	r3, [r2, #0]
 8007c66:	0605      	lsls	r5, r0, #24
 8007c68:	f103 0104 	add.w	r1, r3, #4
 8007c6c:	d52a      	bpl.n	8007cc4 <_printf_i+0xa4>
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6011      	str	r1, [r2, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da03      	bge.n	8007c7e <_printf_i+0x5e>
 8007c76:	222d      	movs	r2, #45	; 0x2d
 8007c78:	425b      	negs	r3, r3
 8007c7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c7e:	486f      	ldr	r0, [pc, #444]	; (8007e3c <_printf_i+0x21c>)
 8007c80:	220a      	movs	r2, #10
 8007c82:	e039      	b.n	8007cf8 <_printf_i+0xd8>
 8007c84:	2973      	cmp	r1, #115	; 0x73
 8007c86:	f000 809d 	beq.w	8007dc4 <_printf_i+0x1a4>
 8007c8a:	d808      	bhi.n	8007c9e <_printf_i+0x7e>
 8007c8c:	296f      	cmp	r1, #111	; 0x6f
 8007c8e:	d020      	beq.n	8007cd2 <_printf_i+0xb2>
 8007c90:	2970      	cmp	r1, #112	; 0x70
 8007c92:	d1dd      	bne.n	8007c50 <_printf_i+0x30>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	f043 0320 	orr.w	r3, r3, #32
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	e003      	b.n	8007ca6 <_printf_i+0x86>
 8007c9e:	2975      	cmp	r1, #117	; 0x75
 8007ca0:	d017      	beq.n	8007cd2 <_printf_i+0xb2>
 8007ca2:	2978      	cmp	r1, #120	; 0x78
 8007ca4:	d1d4      	bne.n	8007c50 <_printf_i+0x30>
 8007ca6:	2378      	movs	r3, #120	; 0x78
 8007ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cac:	4864      	ldr	r0, [pc, #400]	; (8007e40 <_printf_i+0x220>)
 8007cae:	e055      	b.n	8007d5c <_printf_i+0x13c>
 8007cb0:	6813      	ldr	r3, [r2, #0]
 8007cb2:	1d19      	adds	r1, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6011      	str	r1, [r2, #0]
 8007cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e08c      	b.n	8007dde <_printf_i+0x1be>
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6011      	str	r1, [r2, #0]
 8007cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ccc:	bf18      	it	ne
 8007cce:	b21b      	sxthne	r3, r3
 8007cd0:	e7cf      	b.n	8007c72 <_printf_i+0x52>
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	6825      	ldr	r5, [r4, #0]
 8007cd6:	1d18      	adds	r0, r3, #4
 8007cd8:	6010      	str	r0, [r2, #0]
 8007cda:	0628      	lsls	r0, r5, #24
 8007cdc:	d501      	bpl.n	8007ce2 <_printf_i+0xc2>
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	e002      	b.n	8007ce8 <_printf_i+0xc8>
 8007ce2:	0668      	lsls	r0, r5, #25
 8007ce4:	d5fb      	bpl.n	8007cde <_printf_i+0xbe>
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	4854      	ldr	r0, [pc, #336]	; (8007e3c <_printf_i+0x21c>)
 8007cea:	296f      	cmp	r1, #111	; 0x6f
 8007cec:	bf14      	ite	ne
 8007cee:	220a      	movne	r2, #10
 8007cf0:	2208      	moveq	r2, #8
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cf8:	6865      	ldr	r5, [r4, #4]
 8007cfa:	60a5      	str	r5, [r4, #8]
 8007cfc:	2d00      	cmp	r5, #0
 8007cfe:	f2c0 8095 	blt.w	8007e2c <_printf_i+0x20c>
 8007d02:	6821      	ldr	r1, [r4, #0]
 8007d04:	f021 0104 	bic.w	r1, r1, #4
 8007d08:	6021      	str	r1, [r4, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d13d      	bne.n	8007d8a <_printf_i+0x16a>
 8007d0e:	2d00      	cmp	r5, #0
 8007d10:	f040 808e 	bne.w	8007e30 <_printf_i+0x210>
 8007d14:	4665      	mov	r5, ip
 8007d16:	2a08      	cmp	r2, #8
 8007d18:	d10b      	bne.n	8007d32 <_printf_i+0x112>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	07db      	lsls	r3, r3, #31
 8007d1e:	d508      	bpl.n	8007d32 <_printf_i+0x112>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	6862      	ldr	r2, [r4, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	bfde      	ittt	le
 8007d28:	2330      	movle	r3, #48	; 0x30
 8007d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d32:	ebac 0305 	sub.w	r3, ip, r5
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	f8cd 8000 	str.w	r8, [sp]
 8007d3c:	463b      	mov	r3, r7
 8007d3e:	aa03      	add	r2, sp, #12
 8007d40:	4621      	mov	r1, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff fef6 	bl	8007b34 <_printf_common>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	d14d      	bne.n	8007de8 <_printf_i+0x1c8>
 8007d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d50:	b005      	add	sp, #20
 8007d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d56:	4839      	ldr	r0, [pc, #228]	; (8007e3c <_printf_i+0x21c>)
 8007d58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d5c:	6813      	ldr	r3, [r2, #0]
 8007d5e:	6821      	ldr	r1, [r4, #0]
 8007d60:	1d1d      	adds	r5, r3, #4
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6015      	str	r5, [r2, #0]
 8007d66:	060a      	lsls	r2, r1, #24
 8007d68:	d50b      	bpl.n	8007d82 <_printf_i+0x162>
 8007d6a:	07ca      	lsls	r2, r1, #31
 8007d6c:	bf44      	itt	mi
 8007d6e:	f041 0120 	orrmi.w	r1, r1, #32
 8007d72:	6021      	strmi	r1, [r4, #0]
 8007d74:	b91b      	cbnz	r3, 8007d7e <_printf_i+0x15e>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	f022 0220 	bic.w	r2, r2, #32
 8007d7c:	6022      	str	r2, [r4, #0]
 8007d7e:	2210      	movs	r2, #16
 8007d80:	e7b7      	b.n	8007cf2 <_printf_i+0xd2>
 8007d82:	064d      	lsls	r5, r1, #25
 8007d84:	bf48      	it	mi
 8007d86:	b29b      	uxthmi	r3, r3
 8007d88:	e7ef      	b.n	8007d6a <_printf_i+0x14a>
 8007d8a:	4665      	mov	r5, ip
 8007d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d90:	fb02 3311 	mls	r3, r2, r1, r3
 8007d94:	5cc3      	ldrb	r3, [r0, r3]
 8007d96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d1f5      	bne.n	8007d8c <_printf_i+0x16c>
 8007da0:	e7b9      	b.n	8007d16 <_printf_i+0xf6>
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	6825      	ldr	r5, [r4, #0]
 8007da6:	6961      	ldr	r1, [r4, #20]
 8007da8:	1d18      	adds	r0, r3, #4
 8007daa:	6010      	str	r0, [r2, #0]
 8007dac:	0628      	lsls	r0, r5, #24
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	d501      	bpl.n	8007db6 <_printf_i+0x196>
 8007db2:	6019      	str	r1, [r3, #0]
 8007db4:	e002      	b.n	8007dbc <_printf_i+0x19c>
 8007db6:	066a      	lsls	r2, r5, #25
 8007db8:	d5fb      	bpl.n	8007db2 <_printf_i+0x192>
 8007dba:	8019      	strh	r1, [r3, #0]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	4665      	mov	r5, ip
 8007dc2:	e7b9      	b.n	8007d38 <_printf_i+0x118>
 8007dc4:	6813      	ldr	r3, [r2, #0]
 8007dc6:	1d19      	adds	r1, r3, #4
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	681d      	ldr	r5, [r3, #0]
 8007dcc:	6862      	ldr	r2, [r4, #4]
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7f8 fa05 	bl	80001e0 <memchr>
 8007dd6:	b108      	cbz	r0, 8007ddc <_printf_i+0x1bc>
 8007dd8:	1b40      	subs	r0, r0, r5
 8007dda:	6060      	str	r0, [r4, #4]
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	2300      	movs	r3, #0
 8007de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007de6:	e7a7      	b.n	8007d38 <_printf_i+0x118>
 8007de8:	6923      	ldr	r3, [r4, #16]
 8007dea:	462a      	mov	r2, r5
 8007dec:	4639      	mov	r1, r7
 8007dee:	4630      	mov	r0, r6
 8007df0:	47c0      	blx	r8
 8007df2:	3001      	adds	r0, #1
 8007df4:	d0aa      	beq.n	8007d4c <_printf_i+0x12c>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	079b      	lsls	r3, r3, #30
 8007dfa:	d413      	bmi.n	8007e24 <_printf_i+0x204>
 8007dfc:	68e0      	ldr	r0, [r4, #12]
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	4298      	cmp	r0, r3
 8007e02:	bfb8      	it	lt
 8007e04:	4618      	movlt	r0, r3
 8007e06:	e7a3      	b.n	8007d50 <_printf_i+0x130>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	464a      	mov	r2, r9
 8007e0c:	4639      	mov	r1, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	47c0      	blx	r8
 8007e12:	3001      	adds	r0, #1
 8007e14:	d09a      	beq.n	8007d4c <_printf_i+0x12c>
 8007e16:	3501      	adds	r5, #1
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	9a03      	ldr	r2, [sp, #12]
 8007e1c:	1a9b      	subs	r3, r3, r2
 8007e1e:	42ab      	cmp	r3, r5
 8007e20:	dcf2      	bgt.n	8007e08 <_printf_i+0x1e8>
 8007e22:	e7eb      	b.n	8007dfc <_printf_i+0x1dc>
 8007e24:	2500      	movs	r5, #0
 8007e26:	f104 0919 	add.w	r9, r4, #25
 8007e2a:	e7f5      	b.n	8007e18 <_printf_i+0x1f8>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1ac      	bne.n	8007d8a <_printf_i+0x16a>
 8007e30:	7803      	ldrb	r3, [r0, #0]
 8007e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e3a:	e76c      	b.n	8007d16 <_printf_i+0xf6>
 8007e3c:	080098b9 	.word	0x080098b9
 8007e40:	080098ca 	.word	0x080098ca

08007e44 <memmove>:
 8007e44:	4288      	cmp	r0, r1
 8007e46:	b510      	push	{r4, lr}
 8007e48:	eb01 0302 	add.w	r3, r1, r2
 8007e4c:	d807      	bhi.n	8007e5e <memmove+0x1a>
 8007e4e:	1e42      	subs	r2, r0, #1
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d00a      	beq.n	8007e6a <memmove+0x26>
 8007e54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e5c:	e7f8      	b.n	8007e50 <memmove+0xc>
 8007e5e:	4283      	cmp	r3, r0
 8007e60:	d9f5      	bls.n	8007e4e <memmove+0xa>
 8007e62:	1881      	adds	r1, r0, r2
 8007e64:	1ad2      	subs	r2, r2, r3
 8007e66:	42d3      	cmn	r3, r2
 8007e68:	d100      	bne.n	8007e6c <memmove+0x28>
 8007e6a:	bd10      	pop	{r4, pc}
 8007e6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e74:	e7f7      	b.n	8007e66 <memmove+0x22>
	...

08007e78 <_free_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d045      	beq.n	8007f0c <_free_r+0x94>
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f0c      	subs	r4, r1, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	18e4      	addlt	r4, r4, r3
 8007e8c:	f000 f8d2 	bl	8008034 <__malloc_lock>
 8007e90:	4a1f      	ldr	r2, [pc, #124]	; (8007f10 <_free_r+0x98>)
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	4610      	mov	r0, r2
 8007e96:	b933      	cbnz	r3, 8007ea6 <_free_r+0x2e>
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	6014      	str	r4, [r2, #0]
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea2:	f000 b8c8 	b.w	8008036 <__malloc_unlock>
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	d90c      	bls.n	8007ec4 <_free_r+0x4c>
 8007eaa:	6821      	ldr	r1, [r4, #0]
 8007eac:	1862      	adds	r2, r4, r1
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	bf04      	itt	eq
 8007eb2:	681a      	ldreq	r2, [r3, #0]
 8007eb4:	685b      	ldreq	r3, [r3, #4]
 8007eb6:	6063      	str	r3, [r4, #4]
 8007eb8:	bf04      	itt	eq
 8007eba:	1852      	addeq	r2, r2, r1
 8007ebc:	6022      	streq	r2, [r4, #0]
 8007ebe:	6004      	str	r4, [r0, #0]
 8007ec0:	e7ec      	b.n	8007e9c <_free_r+0x24>
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	b10a      	cbz	r2, 8007ecc <_free_r+0x54>
 8007ec8:	42a2      	cmp	r2, r4
 8007eca:	d9fa      	bls.n	8007ec2 <_free_r+0x4a>
 8007ecc:	6819      	ldr	r1, [r3, #0]
 8007ece:	1858      	adds	r0, r3, r1
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d10b      	bne.n	8007eec <_free_r+0x74>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	4401      	add	r1, r0
 8007ed8:	1858      	adds	r0, r3, r1
 8007eda:	4282      	cmp	r2, r0
 8007edc:	6019      	str	r1, [r3, #0]
 8007ede:	d1dd      	bne.n	8007e9c <_free_r+0x24>
 8007ee0:	6810      	ldr	r0, [r2, #0]
 8007ee2:	6852      	ldr	r2, [r2, #4]
 8007ee4:	605a      	str	r2, [r3, #4]
 8007ee6:	4401      	add	r1, r0
 8007ee8:	6019      	str	r1, [r3, #0]
 8007eea:	e7d7      	b.n	8007e9c <_free_r+0x24>
 8007eec:	d902      	bls.n	8007ef4 <_free_r+0x7c>
 8007eee:	230c      	movs	r3, #12
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	e7d3      	b.n	8007e9c <_free_r+0x24>
 8007ef4:	6820      	ldr	r0, [r4, #0]
 8007ef6:	1821      	adds	r1, r4, r0
 8007ef8:	428a      	cmp	r2, r1
 8007efa:	bf04      	itt	eq
 8007efc:	6811      	ldreq	r1, [r2, #0]
 8007efe:	6852      	ldreq	r2, [r2, #4]
 8007f00:	6062      	str	r2, [r4, #4]
 8007f02:	bf04      	itt	eq
 8007f04:	1809      	addeq	r1, r1, r0
 8007f06:	6021      	streq	r1, [r4, #0]
 8007f08:	605c      	str	r4, [r3, #4]
 8007f0a:	e7c7      	b.n	8007e9c <_free_r+0x24>
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000098 	.word	0x20000098

08007f14 <_malloc_r>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	1ccd      	adds	r5, r1, #3
 8007f18:	f025 0503 	bic.w	r5, r5, #3
 8007f1c:	3508      	adds	r5, #8
 8007f1e:	2d0c      	cmp	r5, #12
 8007f20:	bf38      	it	cc
 8007f22:	250c      	movcc	r5, #12
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	4606      	mov	r6, r0
 8007f28:	db01      	blt.n	8007f2e <_malloc_r+0x1a>
 8007f2a:	42a9      	cmp	r1, r5
 8007f2c:	d903      	bls.n	8007f36 <_malloc_r+0x22>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	6033      	str	r3, [r6, #0]
 8007f32:	2000      	movs	r0, #0
 8007f34:	bd70      	pop	{r4, r5, r6, pc}
 8007f36:	f000 f87d 	bl	8008034 <__malloc_lock>
 8007f3a:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <_malloc_r+0xac>)
 8007f3c:	6814      	ldr	r4, [r2, #0]
 8007f3e:	4621      	mov	r1, r4
 8007f40:	b991      	cbnz	r1, 8007f68 <_malloc_r+0x54>
 8007f42:	4c20      	ldr	r4, [pc, #128]	; (8007fc4 <_malloc_r+0xb0>)
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	b91b      	cbnz	r3, 8007f50 <_malloc_r+0x3c>
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 f863 	bl	8008014 <_sbrk_r>
 8007f4e:	6020      	str	r0, [r4, #0]
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f000 f85e 	bl	8008014 <_sbrk_r>
 8007f58:	1c43      	adds	r3, r0, #1
 8007f5a:	d124      	bne.n	8007fa6 <_malloc_r+0x92>
 8007f5c:	230c      	movs	r3, #12
 8007f5e:	6033      	str	r3, [r6, #0]
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f868 	bl	8008036 <__malloc_unlock>
 8007f66:	e7e4      	b.n	8007f32 <_malloc_r+0x1e>
 8007f68:	680b      	ldr	r3, [r1, #0]
 8007f6a:	1b5b      	subs	r3, r3, r5
 8007f6c:	d418      	bmi.n	8007fa0 <_malloc_r+0x8c>
 8007f6e:	2b0b      	cmp	r3, #11
 8007f70:	d90f      	bls.n	8007f92 <_malloc_r+0x7e>
 8007f72:	600b      	str	r3, [r1, #0]
 8007f74:	50cd      	str	r5, [r1, r3]
 8007f76:	18cc      	adds	r4, r1, r3
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f000 f85c 	bl	8008036 <__malloc_unlock>
 8007f7e:	f104 000b 	add.w	r0, r4, #11
 8007f82:	1d23      	adds	r3, r4, #4
 8007f84:	f020 0007 	bic.w	r0, r0, #7
 8007f88:	1ac3      	subs	r3, r0, r3
 8007f8a:	d0d3      	beq.n	8007f34 <_malloc_r+0x20>
 8007f8c:	425a      	negs	r2, r3
 8007f8e:	50e2      	str	r2, [r4, r3]
 8007f90:	e7d0      	b.n	8007f34 <_malloc_r+0x20>
 8007f92:	428c      	cmp	r4, r1
 8007f94:	684b      	ldr	r3, [r1, #4]
 8007f96:	bf16      	itet	ne
 8007f98:	6063      	strne	r3, [r4, #4]
 8007f9a:	6013      	streq	r3, [r2, #0]
 8007f9c:	460c      	movne	r4, r1
 8007f9e:	e7eb      	b.n	8007f78 <_malloc_r+0x64>
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	6849      	ldr	r1, [r1, #4]
 8007fa4:	e7cc      	b.n	8007f40 <_malloc_r+0x2c>
 8007fa6:	1cc4      	adds	r4, r0, #3
 8007fa8:	f024 0403 	bic.w	r4, r4, #3
 8007fac:	42a0      	cmp	r0, r4
 8007fae:	d005      	beq.n	8007fbc <_malloc_r+0xa8>
 8007fb0:	1a21      	subs	r1, r4, r0
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f000 f82e 	bl	8008014 <_sbrk_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0cf      	beq.n	8007f5c <_malloc_r+0x48>
 8007fbc:	6025      	str	r5, [r4, #0]
 8007fbe:	e7db      	b.n	8007f78 <_malloc_r+0x64>
 8007fc0:	20000098 	.word	0x20000098
 8007fc4:	2000009c 	.word	0x2000009c

08007fc8 <_realloc_r>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	4607      	mov	r7, r0
 8007fcc:	4614      	mov	r4, r2
 8007fce:	460e      	mov	r6, r1
 8007fd0:	b921      	cbnz	r1, 8007fdc <_realloc_r+0x14>
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007fd8:	f7ff bf9c 	b.w	8007f14 <_malloc_r>
 8007fdc:	b922      	cbnz	r2, 8007fe8 <_realloc_r+0x20>
 8007fde:	f7ff ff4b 	bl	8007e78 <_free_r>
 8007fe2:	4625      	mov	r5, r4
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe8:	f000 f826 	bl	8008038 <_malloc_usable_size_r>
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d20f      	bcs.n	8008010 <_realloc_r+0x48>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f7ff ff8e 	bl	8007f14 <_malloc_r>
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d0f2      	beq.n	8007fe4 <_realloc_r+0x1c>
 8007ffe:	4631      	mov	r1, r6
 8008000:	4622      	mov	r2, r4
 8008002:	f7ff fc11 	bl	8007828 <memcpy>
 8008006:	4631      	mov	r1, r6
 8008008:	4638      	mov	r0, r7
 800800a:	f7ff ff35 	bl	8007e78 <_free_r>
 800800e:	e7e9      	b.n	8007fe4 <_realloc_r+0x1c>
 8008010:	4635      	mov	r5, r6
 8008012:	e7e7      	b.n	8007fe4 <_realloc_r+0x1c>

08008014 <_sbrk_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4c06      	ldr	r4, [pc, #24]	; (8008030 <_sbrk_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4605      	mov	r5, r0
 800801c:	4608      	mov	r0, r1
 800801e:	6023      	str	r3, [r4, #0]
 8008020:	f7fa fbee 	bl	8002800 <_sbrk>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_sbrk_r+0x1a>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	b103      	cbz	r3, 800802e <_sbrk_r+0x1a>
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20000310 	.word	0x20000310

08008034 <__malloc_lock>:
 8008034:	4770      	bx	lr

08008036 <__malloc_unlock>:
 8008036:	4770      	bx	lr

08008038 <_malloc_usable_size_r>:
 8008038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803c:	1f18      	subs	r0, r3, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfbc      	itt	lt
 8008042:	580b      	ldrlt	r3, [r1, r0]
 8008044:	18c0      	addlt	r0, r0, r3
 8008046:	4770      	bx	lr

08008048 <sin>:
 8008048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800804a:	ec51 0b10 	vmov	r0, r1, d0
 800804e:	4a20      	ldr	r2, [pc, #128]	; (80080d0 <sin+0x88>)
 8008050:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008054:	4293      	cmp	r3, r2
 8008056:	dc07      	bgt.n	8008068 <sin+0x20>
 8008058:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80080c8 <sin+0x80>
 800805c:	2000      	movs	r0, #0
 800805e:	f000 ff43 	bl	8008ee8 <__kernel_sin>
 8008062:	ec51 0b10 	vmov	r0, r1, d0
 8008066:	e007      	b.n	8008078 <sin+0x30>
 8008068:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <sin+0x8c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	dd09      	ble.n	8008082 <sin+0x3a>
 800806e:	ee10 2a10 	vmov	r2, s0
 8008072:	460b      	mov	r3, r1
 8008074:	f7f8 f908 	bl	8000288 <__aeabi_dsub>
 8008078:	ec41 0b10 	vmov	d0, r0, r1
 800807c:	b005      	add	sp, #20
 800807e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008082:	4668      	mov	r0, sp
 8008084:	f000 f884 	bl	8008190 <__ieee754_rem_pio2>
 8008088:	f000 0003 	and.w	r0, r0, #3
 800808c:	2801      	cmp	r0, #1
 800808e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008092:	ed9d 0b00 	vldr	d0, [sp]
 8008096:	d004      	beq.n	80080a2 <sin+0x5a>
 8008098:	2802      	cmp	r0, #2
 800809a:	d005      	beq.n	80080a8 <sin+0x60>
 800809c:	b970      	cbnz	r0, 80080bc <sin+0x74>
 800809e:	2001      	movs	r0, #1
 80080a0:	e7dd      	b.n	800805e <sin+0x16>
 80080a2:	f000 fb19 	bl	80086d8 <__kernel_cos>
 80080a6:	e7dc      	b.n	8008062 <sin+0x1a>
 80080a8:	2001      	movs	r0, #1
 80080aa:	f000 ff1d 	bl	8008ee8 <__kernel_sin>
 80080ae:	ec53 2b10 	vmov	r2, r3, d0
 80080b2:	ee10 0a10 	vmov	r0, s0
 80080b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80080ba:	e7dd      	b.n	8008078 <sin+0x30>
 80080bc:	f000 fb0c 	bl	80086d8 <__kernel_cos>
 80080c0:	e7f5      	b.n	80080ae <sin+0x66>
 80080c2:	bf00      	nop
 80080c4:	f3af 8000 	nop.w
	...
 80080d0:	3fe921fb 	.word	0x3fe921fb
 80080d4:	7fefffff 	.word	0x7fefffff

080080d8 <sqrt>:
 80080d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080dc:	ed2d 8b02 	vpush	{d8}
 80080e0:	b08b      	sub	sp, #44	; 0x2c
 80080e2:	ec55 4b10 	vmov	r4, r5, d0
 80080e6:	f000 fa45 	bl	8008574 <__ieee754_sqrt>
 80080ea:	4b26      	ldr	r3, [pc, #152]	; (8008184 <sqrt+0xac>)
 80080ec:	eeb0 8a40 	vmov.f32	s16, s0
 80080f0:	eef0 8a60 	vmov.f32	s17, s1
 80080f4:	f993 6000 	ldrsb.w	r6, [r3]
 80080f8:	1c73      	adds	r3, r6, #1
 80080fa:	d02a      	beq.n	8008152 <sqrt+0x7a>
 80080fc:	4622      	mov	r2, r4
 80080fe:	462b      	mov	r3, r5
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 fd12 	bl	8000b2c <__aeabi_dcmpun>
 8008108:	4607      	mov	r7, r0
 800810a:	bb10      	cbnz	r0, 8008152 <sqrt+0x7a>
 800810c:	f04f 0800 	mov.w	r8, #0
 8008110:	f04f 0900 	mov.w	r9, #0
 8008114:	4642      	mov	r2, r8
 8008116:	464b      	mov	r3, r9
 8008118:	4620      	mov	r0, r4
 800811a:	4629      	mov	r1, r5
 800811c:	f7f8 fcde 	bl	8000adc <__aeabi_dcmplt>
 8008120:	b1b8      	cbz	r0, 8008152 <sqrt+0x7a>
 8008122:	2301      	movs	r3, #1
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4b18      	ldr	r3, [pc, #96]	; (8008188 <sqrt+0xb0>)
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	9708      	str	r7, [sp, #32]
 800812c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008130:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008134:	b9b6      	cbnz	r6, 8008164 <sqrt+0x8c>
 8008136:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800813a:	4668      	mov	r0, sp
 800813c:	f001 f81c 	bl	8009178 <matherr>
 8008140:	b1d0      	cbz	r0, 8008178 <sqrt+0xa0>
 8008142:	9b08      	ldr	r3, [sp, #32]
 8008144:	b11b      	cbz	r3, 800814e <sqrt+0x76>
 8008146:	f7ff fb45 	bl	80077d4 <__errno>
 800814a:	9b08      	ldr	r3, [sp, #32]
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008152:	eeb0 0a48 	vmov.f32	s0, s16
 8008156:	eef0 0a68 	vmov.f32	s1, s17
 800815a:	b00b      	add	sp, #44	; 0x2c
 800815c:	ecbd 8b02 	vpop	{d8}
 8008160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008164:	4642      	mov	r2, r8
 8008166:	464b      	mov	r3, r9
 8008168:	4640      	mov	r0, r8
 800816a:	4649      	mov	r1, r9
 800816c:	f7f8 fb6e 	bl	800084c <__aeabi_ddiv>
 8008170:	2e02      	cmp	r6, #2
 8008172:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008176:	d1e0      	bne.n	800813a <sqrt+0x62>
 8008178:	f7ff fb2c 	bl	80077d4 <__errno>
 800817c:	2321      	movs	r3, #33	; 0x21
 800817e:	6003      	str	r3, [r0, #0]
 8008180:	e7df      	b.n	8008142 <sqrt+0x6a>
 8008182:	bf00      	nop
 8008184:	20000074 	.word	0x20000074
 8008188:	080098db 	.word	0x080098db
 800818c:	00000000 	.word	0x00000000

08008190 <__ieee754_rem_pio2>:
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	ec57 6b10 	vmov	r6, r7, d0
 8008198:	4bc3      	ldr	r3, [pc, #780]	; (80084a8 <__ieee754_rem_pio2+0x318>)
 800819a:	b08d      	sub	sp, #52	; 0x34
 800819c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80081a0:	4598      	cmp	r8, r3
 80081a2:	4604      	mov	r4, r0
 80081a4:	9704      	str	r7, [sp, #16]
 80081a6:	dc07      	bgt.n	80081b8 <__ieee754_rem_pio2+0x28>
 80081a8:	2200      	movs	r2, #0
 80081aa:	2300      	movs	r3, #0
 80081ac:	ed84 0b00 	vstr	d0, [r4]
 80081b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80081b4:	2500      	movs	r5, #0
 80081b6:	e027      	b.n	8008208 <__ieee754_rem_pio2+0x78>
 80081b8:	4bbc      	ldr	r3, [pc, #752]	; (80084ac <__ieee754_rem_pio2+0x31c>)
 80081ba:	4598      	cmp	r8, r3
 80081bc:	dc75      	bgt.n	80082aa <__ieee754_rem_pio2+0x11a>
 80081be:	9b04      	ldr	r3, [sp, #16]
 80081c0:	4dbb      	ldr	r5, [pc, #748]	; (80084b0 <__ieee754_rem_pio2+0x320>)
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	ee10 0a10 	vmov	r0, s0
 80081c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008470 <__ieee754_rem_pio2+0x2e0>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	4639      	mov	r1, r7
 80081d0:	dd36      	ble.n	8008240 <__ieee754_rem_pio2+0xb0>
 80081d2:	f7f8 f859 	bl	8000288 <__aeabi_dsub>
 80081d6:	45a8      	cmp	r8, r5
 80081d8:	4606      	mov	r6, r0
 80081da:	460f      	mov	r7, r1
 80081dc:	d018      	beq.n	8008210 <__ieee754_rem_pio2+0x80>
 80081de:	a3a6      	add	r3, pc, #664	; (adr r3, 8008478 <__ieee754_rem_pio2+0x2e8>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f7f8 f850 	bl	8000288 <__aeabi_dsub>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	e9c4 2300 	strd	r2, r3, [r4]
 80081f0:	4630      	mov	r0, r6
 80081f2:	4639      	mov	r1, r7
 80081f4:	f7f8 f848 	bl	8000288 <__aeabi_dsub>
 80081f8:	a39f      	add	r3, pc, #636	; (adr r3, 8008478 <__ieee754_rem_pio2+0x2e8>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f8 f843 	bl	8000288 <__aeabi_dsub>
 8008202:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008206:	2501      	movs	r5, #1
 8008208:	4628      	mov	r0, r5
 800820a:	b00d      	add	sp, #52	; 0x34
 800820c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008210:	a39b      	add	r3, pc, #620	; (adr r3, 8008480 <__ieee754_rem_pio2+0x2f0>)
 8008212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008216:	f7f8 f837 	bl	8000288 <__aeabi_dsub>
 800821a:	a39b      	add	r3, pc, #620	; (adr r3, 8008488 <__ieee754_rem_pio2+0x2f8>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	4606      	mov	r6, r0
 8008222:	460f      	mov	r7, r1
 8008224:	f7f8 f830 	bl	8000288 <__aeabi_dsub>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	e9c4 2300 	strd	r2, r3, [r4]
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 f828 	bl	8000288 <__aeabi_dsub>
 8008238:	a393      	add	r3, pc, #588	; (adr r3, 8008488 <__ieee754_rem_pio2+0x2f8>)
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	e7de      	b.n	80081fe <__ieee754_rem_pio2+0x6e>
 8008240:	f7f8 f824 	bl	800028c <__adddf3>
 8008244:	45a8      	cmp	r8, r5
 8008246:	4606      	mov	r6, r0
 8008248:	460f      	mov	r7, r1
 800824a:	d016      	beq.n	800827a <__ieee754_rem_pio2+0xea>
 800824c:	a38a      	add	r3, pc, #552	; (adr r3, 8008478 <__ieee754_rem_pio2+0x2e8>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f81b 	bl	800028c <__adddf3>
 8008256:	4602      	mov	r2, r0
 8008258:	460b      	mov	r3, r1
 800825a:	e9c4 2300 	strd	r2, r3, [r4]
 800825e:	4630      	mov	r0, r6
 8008260:	4639      	mov	r1, r7
 8008262:	f7f8 f811 	bl	8000288 <__aeabi_dsub>
 8008266:	a384      	add	r3, pc, #528	; (adr r3, 8008478 <__ieee754_rem_pio2+0x2e8>)
 8008268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826c:	f7f8 f80e 	bl	800028c <__adddf3>
 8008270:	f04f 35ff 	mov.w	r5, #4294967295
 8008274:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008278:	e7c6      	b.n	8008208 <__ieee754_rem_pio2+0x78>
 800827a:	a381      	add	r3, pc, #516	; (adr r3, 8008480 <__ieee754_rem_pio2+0x2f0>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f8 f804 	bl	800028c <__adddf3>
 8008284:	a380      	add	r3, pc, #512	; (adr r3, 8008488 <__ieee754_rem_pio2+0x2f8>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	4606      	mov	r6, r0
 800828c:	460f      	mov	r7, r1
 800828e:	f7f7 fffd 	bl	800028c <__adddf3>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	e9c4 2300 	strd	r2, r3, [r4]
 800829a:	4630      	mov	r0, r6
 800829c:	4639      	mov	r1, r7
 800829e:	f7f7 fff3 	bl	8000288 <__aeabi_dsub>
 80082a2:	a379      	add	r3, pc, #484	; (adr r3, 8008488 <__ieee754_rem_pio2+0x2f8>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	e7e0      	b.n	800826c <__ieee754_rem_pio2+0xdc>
 80082aa:	4b82      	ldr	r3, [pc, #520]	; (80084b4 <__ieee754_rem_pio2+0x324>)
 80082ac:	4598      	cmp	r8, r3
 80082ae:	f300 80d0 	bgt.w	8008452 <__ieee754_rem_pio2+0x2c2>
 80082b2:	f000 fed3 	bl	800905c <fabs>
 80082b6:	ec57 6b10 	vmov	r6, r7, d0
 80082ba:	ee10 0a10 	vmov	r0, s0
 80082be:	a374      	add	r3, pc, #464	; (adr r3, 8008490 <__ieee754_rem_pio2+0x300>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	4639      	mov	r1, r7
 80082c6:	f7f8 f997 	bl	80005f8 <__aeabi_dmul>
 80082ca:	2200      	movs	r2, #0
 80082cc:	4b7a      	ldr	r3, [pc, #488]	; (80084b8 <__ieee754_rem_pio2+0x328>)
 80082ce:	f7f7 ffdd 	bl	800028c <__adddf3>
 80082d2:	f7f8 fc41 	bl	8000b58 <__aeabi_d2iz>
 80082d6:	4605      	mov	r5, r0
 80082d8:	f7f8 f924 	bl	8000524 <__aeabi_i2d>
 80082dc:	a364      	add	r3, pc, #400	; (adr r3, 8008470 <__ieee754_rem_pio2+0x2e0>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e6:	f7f8 f987 	bl	80005f8 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f7 ffc9 	bl	8000288 <__aeabi_dsub>
 80082f6:	a360      	add	r3, pc, #384	; (adr r3, 8008478 <__ieee754_rem_pio2+0x2e8>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	4682      	mov	sl, r0
 80082fe:	468b      	mov	fp, r1
 8008300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008304:	f7f8 f978 	bl	80005f8 <__aeabi_dmul>
 8008308:	2d1f      	cmp	r5, #31
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	dc0c      	bgt.n	800832a <__ieee754_rem_pio2+0x19a>
 8008310:	1e6a      	subs	r2, r5, #1
 8008312:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <__ieee754_rem_pio2+0x32c>)
 8008314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008318:	4543      	cmp	r3, r8
 800831a:	d006      	beq.n	800832a <__ieee754_rem_pio2+0x19a>
 800831c:	4632      	mov	r2, r6
 800831e:	463b      	mov	r3, r7
 8008320:	4650      	mov	r0, sl
 8008322:	4659      	mov	r1, fp
 8008324:	f7f7 ffb0 	bl	8000288 <__aeabi_dsub>
 8008328:	e00e      	b.n	8008348 <__ieee754_rem_pio2+0x1b8>
 800832a:	4632      	mov	r2, r6
 800832c:	463b      	mov	r3, r7
 800832e:	4650      	mov	r0, sl
 8008330:	4659      	mov	r1, fp
 8008332:	f7f7 ffa9 	bl	8000288 <__aeabi_dsub>
 8008336:	ea4f 5328 	mov.w	r3, r8, asr #20
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	9a05      	ldr	r2, [sp, #20]
 800833e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b10      	cmp	r3, #16
 8008346:	dc02      	bgt.n	800834e <__ieee754_rem_pio2+0x1be>
 8008348:	e9c4 0100 	strd	r0, r1, [r4]
 800834c:	e039      	b.n	80083c2 <__ieee754_rem_pio2+0x232>
 800834e:	a34c      	add	r3, pc, #304	; (adr r3, 8008480 <__ieee754_rem_pio2+0x2f0>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008358:	f7f8 f94e 	bl	80005f8 <__aeabi_dmul>
 800835c:	4606      	mov	r6, r0
 800835e:	460f      	mov	r7, r1
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4650      	mov	r0, sl
 8008366:	4659      	mov	r1, fp
 8008368:	f7f7 ff8e 	bl	8000288 <__aeabi_dsub>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4680      	mov	r8, r0
 8008372:	4689      	mov	r9, r1
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	f7f7 ff86 	bl	8000288 <__aeabi_dsub>
 800837c:	4632      	mov	r2, r6
 800837e:	463b      	mov	r3, r7
 8008380:	f7f7 ff82 	bl	8000288 <__aeabi_dsub>
 8008384:	a340      	add	r3, pc, #256	; (adr r3, 8008488 <__ieee754_rem_pio2+0x2f8>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	4632      	mov	r2, r6
 8008398:	463b      	mov	r3, r7
 800839a:	f7f7 ff75 	bl	8000288 <__aeabi_dsub>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f7 ff6d 	bl	8000288 <__aeabi_dsub>
 80083ae:	9a05      	ldr	r2, [sp, #20]
 80083b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b31      	cmp	r3, #49	; 0x31
 80083b8:	dc20      	bgt.n	80083fc <__ieee754_rem_pio2+0x26c>
 80083ba:	e9c4 0100 	strd	r0, r1, [r4]
 80083be:	46c2      	mov	sl, r8
 80083c0:	46cb      	mov	fp, r9
 80083c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80083c6:	4650      	mov	r0, sl
 80083c8:	4642      	mov	r2, r8
 80083ca:	464b      	mov	r3, r9
 80083cc:	4659      	mov	r1, fp
 80083ce:	f7f7 ff5b 	bl	8000288 <__aeabi_dsub>
 80083d2:	463b      	mov	r3, r7
 80083d4:	4632      	mov	r2, r6
 80083d6:	f7f7 ff57 	bl	8000288 <__aeabi_dsub>
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80083e2:	f6bf af11 	bge.w	8008208 <__ieee754_rem_pio2+0x78>
 80083e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80083ea:	6063      	str	r3, [r4, #4]
 80083ec:	f8c4 8000 	str.w	r8, [r4]
 80083f0:	60a0      	str	r0, [r4, #8]
 80083f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f6:	60e3      	str	r3, [r4, #12]
 80083f8:	426d      	negs	r5, r5
 80083fa:	e705      	b.n	8008208 <__ieee754_rem_pio2+0x78>
 80083fc:	a326      	add	r3, pc, #152	; (adr r3, 8008498 <__ieee754_rem_pio2+0x308>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008406:	f7f8 f8f7 	bl	80005f8 <__aeabi_dmul>
 800840a:	4606      	mov	r6, r0
 800840c:	460f      	mov	r7, r1
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f7 ff37 	bl	8000288 <__aeabi_dsub>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4682      	mov	sl, r0
 8008420:	468b      	mov	fp, r1
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f7 ff2f 	bl	8000288 <__aeabi_dsub>
 800842a:	4632      	mov	r2, r6
 800842c:	463b      	mov	r3, r7
 800842e:	f7f7 ff2b 	bl	8000288 <__aeabi_dsub>
 8008432:	a31b      	add	r3, pc, #108	; (adr r3, 80084a0 <__ieee754_rem_pio2+0x310>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	4606      	mov	r6, r0
 800843a:	460f      	mov	r7, r1
 800843c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	4632      	mov	r2, r6
 8008446:	463b      	mov	r3, r7
 8008448:	f7f7 ff1e 	bl	8000288 <__aeabi_dsub>
 800844c:	4606      	mov	r6, r0
 800844e:	460f      	mov	r7, r1
 8008450:	e764      	b.n	800831c <__ieee754_rem_pio2+0x18c>
 8008452:	4b1b      	ldr	r3, [pc, #108]	; (80084c0 <__ieee754_rem_pio2+0x330>)
 8008454:	4598      	cmp	r8, r3
 8008456:	dd35      	ble.n	80084c4 <__ieee754_rem_pio2+0x334>
 8008458:	ee10 2a10 	vmov	r2, s0
 800845c:	463b      	mov	r3, r7
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f7 ff11 	bl	8000288 <__aeabi_dsub>
 8008466:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800846a:	e9c4 0100 	strd	r0, r1, [r4]
 800846e:	e6a1      	b.n	80081b4 <__ieee754_rem_pio2+0x24>
 8008470:	54400000 	.word	0x54400000
 8008474:	3ff921fb 	.word	0x3ff921fb
 8008478:	1a626331 	.word	0x1a626331
 800847c:	3dd0b461 	.word	0x3dd0b461
 8008480:	1a600000 	.word	0x1a600000
 8008484:	3dd0b461 	.word	0x3dd0b461
 8008488:	2e037073 	.word	0x2e037073
 800848c:	3ba3198a 	.word	0x3ba3198a
 8008490:	6dc9c883 	.word	0x6dc9c883
 8008494:	3fe45f30 	.word	0x3fe45f30
 8008498:	2e000000 	.word	0x2e000000
 800849c:	3ba3198a 	.word	0x3ba3198a
 80084a0:	252049c1 	.word	0x252049c1
 80084a4:	397b839a 	.word	0x397b839a
 80084a8:	3fe921fb 	.word	0x3fe921fb
 80084ac:	4002d97b 	.word	0x4002d97b
 80084b0:	3ff921fb 	.word	0x3ff921fb
 80084b4:	413921fb 	.word	0x413921fb
 80084b8:	3fe00000 	.word	0x3fe00000
 80084bc:	080098e0 	.word	0x080098e0
 80084c0:	7fefffff 	.word	0x7fefffff
 80084c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80084c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80084cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80084d0:	4630      	mov	r0, r6
 80084d2:	460f      	mov	r7, r1
 80084d4:	f7f8 fb40 	bl	8000b58 <__aeabi_d2iz>
 80084d8:	f7f8 f824 	bl	8000524 <__aeabi_i2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4630      	mov	r0, r6
 80084e2:	4639      	mov	r1, r7
 80084e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084e8:	f7f7 fece 	bl	8000288 <__aeabi_dsub>
 80084ec:	2200      	movs	r2, #0
 80084ee:	4b1f      	ldr	r3, [pc, #124]	; (800856c <__ieee754_rem_pio2+0x3dc>)
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	460f      	mov	r7, r1
 80084f6:	4606      	mov	r6, r0
 80084f8:	f7f8 fb2e 	bl	8000b58 <__aeabi_d2iz>
 80084fc:	f7f8 f812 	bl	8000524 <__aeabi_i2d>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4630      	mov	r0, r6
 8008506:	4639      	mov	r1, r7
 8008508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800850c:	f7f7 febc 	bl	8000288 <__aeabi_dsub>
 8008510:	2200      	movs	r2, #0
 8008512:	4b16      	ldr	r3, [pc, #88]	; (800856c <__ieee754_rem_pio2+0x3dc>)
 8008514:	f7f8 f870 	bl	80005f8 <__aeabi_dmul>
 8008518:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800851c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008520:	f04f 0803 	mov.w	r8, #3
 8008524:	2600      	movs	r6, #0
 8008526:	2700      	movs	r7, #0
 8008528:	4632      	mov	r2, r6
 800852a:	463b      	mov	r3, r7
 800852c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008530:	f108 3aff 	add.w	sl, r8, #4294967295
 8008534:	f7f8 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008538:	b9b0      	cbnz	r0, 8008568 <__ieee754_rem_pio2+0x3d8>
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <__ieee754_rem_pio2+0x3e0>)
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	2302      	movs	r3, #2
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	462a      	mov	r2, r5
 8008544:	4643      	mov	r3, r8
 8008546:	4621      	mov	r1, r4
 8008548:	a806      	add	r0, sp, #24
 800854a:	f000 f98d 	bl	8008868 <__kernel_rem_pio2>
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	4605      	mov	r5, r0
 8008554:	f6bf ae58 	bge.w	8008208 <__ieee754_rem_pio2+0x78>
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	68e3      	ldr	r3, [r4, #12]
 8008562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008566:	e746      	b.n	80083f6 <__ieee754_rem_pio2+0x266>
 8008568:	46d0      	mov	r8, sl
 800856a:	e7dd      	b.n	8008528 <__ieee754_rem_pio2+0x398>
 800856c:	41700000 	.word	0x41700000
 8008570:	08009960 	.word	0x08009960

08008574 <__ieee754_sqrt>:
 8008574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008578:	4955      	ldr	r1, [pc, #340]	; (80086d0 <__ieee754_sqrt+0x15c>)
 800857a:	ec55 4b10 	vmov	r4, r5, d0
 800857e:	43a9      	bics	r1, r5
 8008580:	462b      	mov	r3, r5
 8008582:	462a      	mov	r2, r5
 8008584:	d112      	bne.n	80085ac <__ieee754_sqrt+0x38>
 8008586:	ee10 2a10 	vmov	r2, s0
 800858a:	ee10 0a10 	vmov	r0, s0
 800858e:	4629      	mov	r1, r5
 8008590:	f7f8 f832 	bl	80005f8 <__aeabi_dmul>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4620      	mov	r0, r4
 800859a:	4629      	mov	r1, r5
 800859c:	f7f7 fe76 	bl	800028c <__adddf3>
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	ec45 4b10 	vmov	d0, r4, r5
 80085a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ac:	2d00      	cmp	r5, #0
 80085ae:	ee10 0a10 	vmov	r0, s0
 80085b2:	4621      	mov	r1, r4
 80085b4:	dc0f      	bgt.n	80085d6 <__ieee754_sqrt+0x62>
 80085b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085ba:	4330      	orrs	r0, r6
 80085bc:	d0f2      	beq.n	80085a4 <__ieee754_sqrt+0x30>
 80085be:	b155      	cbz	r5, 80085d6 <__ieee754_sqrt+0x62>
 80085c0:	ee10 2a10 	vmov	r2, s0
 80085c4:	4620      	mov	r0, r4
 80085c6:	4629      	mov	r1, r5
 80085c8:	f7f7 fe5e 	bl	8000288 <__aeabi_dsub>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	f7f8 f93c 	bl	800084c <__aeabi_ddiv>
 80085d4:	e7e4      	b.n	80085a0 <__ieee754_sqrt+0x2c>
 80085d6:	151b      	asrs	r3, r3, #20
 80085d8:	d073      	beq.n	80086c2 <__ieee754_sqrt+0x14e>
 80085da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085de:	07dd      	lsls	r5, r3, #31
 80085e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80085e4:	bf48      	it	mi
 80085e6:	0fc8      	lsrmi	r0, r1, #31
 80085e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80085ec:	bf44      	itt	mi
 80085ee:	0049      	lslmi	r1, r1, #1
 80085f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80085f4:	2500      	movs	r5, #0
 80085f6:	1058      	asrs	r0, r3, #1
 80085f8:	0fcb      	lsrs	r3, r1, #31
 80085fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80085fe:	0049      	lsls	r1, r1, #1
 8008600:	2316      	movs	r3, #22
 8008602:	462c      	mov	r4, r5
 8008604:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008608:	19a7      	adds	r7, r4, r6
 800860a:	4297      	cmp	r7, r2
 800860c:	bfde      	ittt	le
 800860e:	19bc      	addle	r4, r7, r6
 8008610:	1bd2      	suble	r2, r2, r7
 8008612:	19ad      	addle	r5, r5, r6
 8008614:	0fcf      	lsrs	r7, r1, #31
 8008616:	3b01      	subs	r3, #1
 8008618:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800861c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008620:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008624:	d1f0      	bne.n	8008608 <__ieee754_sqrt+0x94>
 8008626:	f04f 0c20 	mov.w	ip, #32
 800862a:	469e      	mov	lr, r3
 800862c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008630:	42a2      	cmp	r2, r4
 8008632:	eb06 070e 	add.w	r7, r6, lr
 8008636:	dc02      	bgt.n	800863e <__ieee754_sqrt+0xca>
 8008638:	d112      	bne.n	8008660 <__ieee754_sqrt+0xec>
 800863a:	428f      	cmp	r7, r1
 800863c:	d810      	bhi.n	8008660 <__ieee754_sqrt+0xec>
 800863e:	2f00      	cmp	r7, #0
 8008640:	eb07 0e06 	add.w	lr, r7, r6
 8008644:	da42      	bge.n	80086cc <__ieee754_sqrt+0x158>
 8008646:	f1be 0f00 	cmp.w	lr, #0
 800864a:	db3f      	blt.n	80086cc <__ieee754_sqrt+0x158>
 800864c:	f104 0801 	add.w	r8, r4, #1
 8008650:	1b12      	subs	r2, r2, r4
 8008652:	428f      	cmp	r7, r1
 8008654:	bf88      	it	hi
 8008656:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800865a:	1bc9      	subs	r1, r1, r7
 800865c:	4433      	add	r3, r6
 800865e:	4644      	mov	r4, r8
 8008660:	0052      	lsls	r2, r2, #1
 8008662:	f1bc 0c01 	subs.w	ip, ip, #1
 8008666:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800866a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800866e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008672:	d1dd      	bne.n	8008630 <__ieee754_sqrt+0xbc>
 8008674:	430a      	orrs	r2, r1
 8008676:	d006      	beq.n	8008686 <__ieee754_sqrt+0x112>
 8008678:	1c5c      	adds	r4, r3, #1
 800867a:	bf13      	iteet	ne
 800867c:	3301      	addne	r3, #1
 800867e:	3501      	addeq	r5, #1
 8008680:	4663      	moveq	r3, ip
 8008682:	f023 0301 	bicne.w	r3, r3, #1
 8008686:	106a      	asrs	r2, r5, #1
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	07e9      	lsls	r1, r5, #31
 800868c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008690:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008694:	bf48      	it	mi
 8008696:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800869a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800869e:	461c      	mov	r4, r3
 80086a0:	e780      	b.n	80085a4 <__ieee754_sqrt+0x30>
 80086a2:	0aca      	lsrs	r2, r1, #11
 80086a4:	3815      	subs	r0, #21
 80086a6:	0549      	lsls	r1, r1, #21
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	d0fa      	beq.n	80086a2 <__ieee754_sqrt+0x12e>
 80086ac:	02d6      	lsls	r6, r2, #11
 80086ae:	d50a      	bpl.n	80086c6 <__ieee754_sqrt+0x152>
 80086b0:	f1c3 0420 	rsb	r4, r3, #32
 80086b4:	fa21 f404 	lsr.w	r4, r1, r4
 80086b8:	1e5d      	subs	r5, r3, #1
 80086ba:	4099      	lsls	r1, r3
 80086bc:	4322      	orrs	r2, r4
 80086be:	1b43      	subs	r3, r0, r5
 80086c0:	e78b      	b.n	80085da <__ieee754_sqrt+0x66>
 80086c2:	4618      	mov	r0, r3
 80086c4:	e7f0      	b.n	80086a8 <__ieee754_sqrt+0x134>
 80086c6:	0052      	lsls	r2, r2, #1
 80086c8:	3301      	adds	r3, #1
 80086ca:	e7ef      	b.n	80086ac <__ieee754_sqrt+0x138>
 80086cc:	46a0      	mov	r8, r4
 80086ce:	e7bf      	b.n	8008650 <__ieee754_sqrt+0xdc>
 80086d0:	7ff00000 	.word	0x7ff00000
 80086d4:	00000000 	.word	0x00000000

080086d8 <__kernel_cos>:
 80086d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	ec59 8b10 	vmov	r8, r9, d0
 80086e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80086e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80086e8:	ed2d 8b02 	vpush	{d8}
 80086ec:	eeb0 8a41 	vmov.f32	s16, s2
 80086f0:	eef0 8a61 	vmov.f32	s17, s3
 80086f4:	da07      	bge.n	8008706 <__kernel_cos+0x2e>
 80086f6:	ee10 0a10 	vmov	r0, s0
 80086fa:	4649      	mov	r1, r9
 80086fc:	f7f8 fa2c 	bl	8000b58 <__aeabi_d2iz>
 8008700:	2800      	cmp	r0, #0
 8008702:	f000 8089 	beq.w	8008818 <__kernel_cos+0x140>
 8008706:	4642      	mov	r2, r8
 8008708:	464b      	mov	r3, r9
 800870a:	4640      	mov	r0, r8
 800870c:	4649      	mov	r1, r9
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	2200      	movs	r2, #0
 8008714:	4b4e      	ldr	r3, [pc, #312]	; (8008850 <__kernel_cos+0x178>)
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	f7f7 ff6d 	bl	80005f8 <__aeabi_dmul>
 800871e:	a340      	add	r3, pc, #256	; (adr r3, 8008820 <__kernel_cos+0x148>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	4682      	mov	sl, r0
 8008726:	468b      	mov	fp, r1
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f7f7 ff64 	bl	80005f8 <__aeabi_dmul>
 8008730:	a33d      	add	r3, pc, #244	; (adr r3, 8008828 <__kernel_cos+0x150>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	f7f7 fda9 	bl	800028c <__adddf3>
 800873a:	4622      	mov	r2, r4
 800873c:	462b      	mov	r3, r5
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	a33b      	add	r3, pc, #236	; (adr r3, 8008830 <__kernel_cos+0x158>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	4622      	mov	r2, r4
 800874e:	462b      	mov	r3, r5
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	a338      	add	r3, pc, #224	; (adr r3, 8008838 <__kernel_cos+0x160>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fd97 	bl	800028c <__adddf3>
 800875e:	4622      	mov	r2, r4
 8008760:	462b      	mov	r3, r5
 8008762:	f7f7 ff49 	bl	80005f8 <__aeabi_dmul>
 8008766:	a336      	add	r3, pc, #216	; (adr r3, 8008840 <__kernel_cos+0x168>)
 8008768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876c:	f7f7 fd8c 	bl	8000288 <__aeabi_dsub>
 8008770:	4622      	mov	r2, r4
 8008772:	462b      	mov	r3, r5
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	a333      	add	r3, pc, #204	; (adr r3, 8008848 <__kernel_cos+0x170>)
 800877a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877e:	f7f7 fd85 	bl	800028c <__adddf3>
 8008782:	4622      	mov	r2, r4
 8008784:	462b      	mov	r3, r5
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	ec53 2b18 	vmov	r2, r3, d8
 8008796:	4604      	mov	r4, r0
 8008798:	460d      	mov	r5, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80087a2:	460b      	mov	r3, r1
 80087a4:	4602      	mov	r2, r0
 80087a6:	4629      	mov	r1, r5
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7f7 fd6d 	bl	8000288 <__aeabi_dsub>
 80087ae:	4b29      	ldr	r3, [pc, #164]	; (8008854 <__kernel_cos+0x17c>)
 80087b0:	429e      	cmp	r6, r3
 80087b2:	4680      	mov	r8, r0
 80087b4:	4689      	mov	r9, r1
 80087b6:	dc11      	bgt.n	80087dc <__kernel_cos+0x104>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4650      	mov	r0, sl
 80087be:	4659      	mov	r1, fp
 80087c0:	f7f7 fd62 	bl	8000288 <__aeabi_dsub>
 80087c4:	460b      	mov	r3, r1
 80087c6:	4924      	ldr	r1, [pc, #144]	; (8008858 <__kernel_cos+0x180>)
 80087c8:	4602      	mov	r2, r0
 80087ca:	2000      	movs	r0, #0
 80087cc:	f7f7 fd5c 	bl	8000288 <__aeabi_dsub>
 80087d0:	ecbd 8b02 	vpop	{d8}
 80087d4:	ec41 0b10 	vmov	d0, r0, r1
 80087d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	4b1f      	ldr	r3, [pc, #124]	; (800885c <__kernel_cos+0x184>)
 80087de:	491e      	ldr	r1, [pc, #120]	; (8008858 <__kernel_cos+0x180>)
 80087e0:	429e      	cmp	r6, r3
 80087e2:	bfcc      	ite	gt
 80087e4:	4d1e      	ldrgt	r5, [pc, #120]	; (8008860 <__kernel_cos+0x188>)
 80087e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80087ea:	2400      	movs	r4, #0
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	2000      	movs	r0, #0
 80087f2:	f7f7 fd49 	bl	8000288 <__aeabi_dsub>
 80087f6:	4622      	mov	r2, r4
 80087f8:	4606      	mov	r6, r0
 80087fa:	460f      	mov	r7, r1
 80087fc:	462b      	mov	r3, r5
 80087fe:	4650      	mov	r0, sl
 8008800:	4659      	mov	r1, fp
 8008802:	f7f7 fd41 	bl	8000288 <__aeabi_dsub>
 8008806:	4642      	mov	r2, r8
 8008808:	464b      	mov	r3, r9
 800880a:	f7f7 fd3d 	bl	8000288 <__aeabi_dsub>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	e7d9      	b.n	80087cc <__kernel_cos+0xf4>
 8008818:	2000      	movs	r0, #0
 800881a:	490f      	ldr	r1, [pc, #60]	; (8008858 <__kernel_cos+0x180>)
 800881c:	e7d8      	b.n	80087d0 <__kernel_cos+0xf8>
 800881e:	bf00      	nop
 8008820:	be8838d4 	.word	0xbe8838d4
 8008824:	bda8fae9 	.word	0xbda8fae9
 8008828:	bdb4b1c4 	.word	0xbdb4b1c4
 800882c:	3e21ee9e 	.word	0x3e21ee9e
 8008830:	809c52ad 	.word	0x809c52ad
 8008834:	3e927e4f 	.word	0x3e927e4f
 8008838:	19cb1590 	.word	0x19cb1590
 800883c:	3efa01a0 	.word	0x3efa01a0
 8008840:	16c15177 	.word	0x16c15177
 8008844:	3f56c16c 	.word	0x3f56c16c
 8008848:	5555554c 	.word	0x5555554c
 800884c:	3fa55555 	.word	0x3fa55555
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	3fd33332 	.word	0x3fd33332
 8008858:	3ff00000 	.word	0x3ff00000
 800885c:	3fe90000 	.word	0x3fe90000
 8008860:	3fd20000 	.word	0x3fd20000
 8008864:	00000000 	.word	0x00000000

08008868 <__kernel_rem_pio2>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	ed2d 8b02 	vpush	{d8}
 8008870:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008874:	1ed4      	subs	r4, r2, #3
 8008876:	9308      	str	r3, [sp, #32]
 8008878:	9101      	str	r1, [sp, #4]
 800887a:	4bc5      	ldr	r3, [pc, #788]	; (8008b90 <__kernel_rem_pio2+0x328>)
 800887c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800887e:	9009      	str	r0, [sp, #36]	; 0x24
 8008880:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	3b01      	subs	r3, #1
 800888a:	9307      	str	r3, [sp, #28]
 800888c:	2318      	movs	r3, #24
 800888e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008892:	f06f 0317 	mvn.w	r3, #23
 8008896:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800889a:	fb04 3303 	mla	r3, r4, r3, r3
 800889e:	eb03 0a02 	add.w	sl, r3, r2
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	9a07      	ldr	r2, [sp, #28]
 80088a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008b80 <__kernel_rem_pio2+0x318>
 80088aa:	eb03 0802 	add.w	r8, r3, r2
 80088ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80088b0:	1aa7      	subs	r7, r4, r2
 80088b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80088b6:	ae22      	add	r6, sp, #136	; 0x88
 80088b8:	2500      	movs	r5, #0
 80088ba:	4545      	cmp	r5, r8
 80088bc:	dd13      	ble.n	80088e6 <__kernel_rem_pio2+0x7e>
 80088be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008b80 <__kernel_rem_pio2+0x318>
 80088c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80088c6:	2600      	movs	r6, #0
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	429e      	cmp	r6, r3
 80088cc:	dc32      	bgt.n	8008934 <__kernel_rem_pio2+0xcc>
 80088ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d0:	9302      	str	r3, [sp, #8]
 80088d2:	9b08      	ldr	r3, [sp, #32]
 80088d4:	199d      	adds	r5, r3, r6
 80088d6:	ab22      	add	r3, sp, #136	; 0x88
 80088d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80088dc:	9306      	str	r3, [sp, #24]
 80088de:	ec59 8b18 	vmov	r8, r9, d8
 80088e2:	2700      	movs	r7, #0
 80088e4:	e01f      	b.n	8008926 <__kernel_rem_pio2+0xbe>
 80088e6:	42ef      	cmn	r7, r5
 80088e8:	d407      	bmi.n	80088fa <__kernel_rem_pio2+0x92>
 80088ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80088ee:	f7f7 fe19 	bl	8000524 <__aeabi_i2d>
 80088f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80088f6:	3501      	adds	r5, #1
 80088f8:	e7df      	b.n	80088ba <__kernel_rem_pio2+0x52>
 80088fa:	ec51 0b18 	vmov	r0, r1, d8
 80088fe:	e7f8      	b.n	80088f2 <__kernel_rem_pio2+0x8a>
 8008900:	9906      	ldr	r1, [sp, #24]
 8008902:	9d02      	ldr	r5, [sp, #8]
 8008904:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008908:	9106      	str	r1, [sp, #24]
 800890a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800890e:	9502      	str	r5, [sp, #8]
 8008910:	f7f7 fe72 	bl	80005f8 <__aeabi_dmul>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4640      	mov	r0, r8
 800891a:	4649      	mov	r1, r9
 800891c:	f7f7 fcb6 	bl	800028c <__adddf3>
 8008920:	3701      	adds	r7, #1
 8008922:	4680      	mov	r8, r0
 8008924:	4689      	mov	r9, r1
 8008926:	9b07      	ldr	r3, [sp, #28]
 8008928:	429f      	cmp	r7, r3
 800892a:	dde9      	ble.n	8008900 <__kernel_rem_pio2+0x98>
 800892c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008930:	3601      	adds	r6, #1
 8008932:	e7c9      	b.n	80088c8 <__kernel_rem_pio2+0x60>
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	aa0e      	add	r2, sp, #56	; 0x38
 8008938:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800893c:	930c      	str	r3, [sp, #48]	; 0x30
 800893e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008940:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008944:	9c04      	ldr	r4, [sp, #16]
 8008946:	930b      	str	r3, [sp, #44]	; 0x2c
 8008948:	ab9a      	add	r3, sp, #616	; 0x268
 800894a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800894e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008956:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800895a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800895e:	ab9a      	add	r3, sp, #616	; 0x268
 8008960:	445b      	add	r3, fp
 8008962:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008966:	2500      	movs	r5, #0
 8008968:	1b63      	subs	r3, r4, r5
 800896a:	2b00      	cmp	r3, #0
 800896c:	dc78      	bgt.n	8008a60 <__kernel_rem_pio2+0x1f8>
 800896e:	4650      	mov	r0, sl
 8008970:	ec49 8b10 	vmov	d0, r8, r9
 8008974:	f000 fc04 	bl	8009180 <scalbn>
 8008978:	ec57 6b10 	vmov	r6, r7, d0
 800897c:	2200      	movs	r2, #0
 800897e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008982:	ee10 0a10 	vmov	r0, s0
 8008986:	4639      	mov	r1, r7
 8008988:	f7f7 fe36 	bl	80005f8 <__aeabi_dmul>
 800898c:	ec41 0b10 	vmov	d0, r0, r1
 8008990:	f000 fb6e 	bl	8009070 <floor>
 8008994:	2200      	movs	r2, #0
 8008996:	ec51 0b10 	vmov	r0, r1, d0
 800899a:	4b7e      	ldr	r3, [pc, #504]	; (8008b94 <__kernel_rem_pio2+0x32c>)
 800899c:	f7f7 fe2c 	bl	80005f8 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4630      	mov	r0, r6
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 fc6e 	bl	8000288 <__aeabi_dsub>
 80089ac:	460f      	mov	r7, r1
 80089ae:	4606      	mov	r6, r0
 80089b0:	f7f8 f8d2 	bl	8000b58 <__aeabi_d2iz>
 80089b4:	9006      	str	r0, [sp, #24]
 80089b6:	f7f7 fdb5 	bl	8000524 <__aeabi_i2d>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fc61 	bl	8000288 <__aeabi_dsub>
 80089c6:	f1ba 0f00 	cmp.w	sl, #0
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	dd6c      	ble.n	8008aaa <__kernel_rem_pio2+0x242>
 80089d0:	1e62      	subs	r2, r4, #1
 80089d2:	ab0e      	add	r3, sp, #56	; 0x38
 80089d4:	f1ca 0118 	rsb	r1, sl, #24
 80089d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80089dc:	9d06      	ldr	r5, [sp, #24]
 80089de:	fa40 f301 	asr.w	r3, r0, r1
 80089e2:	441d      	add	r5, r3
 80089e4:	408b      	lsls	r3, r1
 80089e6:	1ac0      	subs	r0, r0, r3
 80089e8:	ab0e      	add	r3, sp, #56	; 0x38
 80089ea:	9506      	str	r5, [sp, #24]
 80089ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80089f0:	f1ca 0317 	rsb	r3, sl, #23
 80089f4:	fa40 f303 	asr.w	r3, r0, r3
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	9b02      	ldr	r3, [sp, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd62      	ble.n	8008ac6 <__kernel_rem_pio2+0x25e>
 8008a00:	9b06      	ldr	r3, [sp, #24]
 8008a02:	2200      	movs	r2, #0
 8008a04:	3301      	adds	r3, #1
 8008a06:	9306      	str	r3, [sp, #24]
 8008a08:	4615      	mov	r5, r2
 8008a0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008a0e:	4294      	cmp	r4, r2
 8008a10:	f300 8095 	bgt.w	8008b3e <__kernel_rem_pio2+0x2d6>
 8008a14:	f1ba 0f00 	cmp.w	sl, #0
 8008a18:	dd07      	ble.n	8008a2a <__kernel_rem_pio2+0x1c2>
 8008a1a:	f1ba 0f01 	cmp.w	sl, #1
 8008a1e:	f000 80a2 	beq.w	8008b66 <__kernel_rem_pio2+0x2fe>
 8008a22:	f1ba 0f02 	cmp.w	sl, #2
 8008a26:	f000 80c1 	beq.w	8008bac <__kernel_rem_pio2+0x344>
 8008a2a:	9b02      	ldr	r3, [sp, #8]
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	d14a      	bne.n	8008ac6 <__kernel_rem_pio2+0x25e>
 8008a30:	4632      	mov	r2, r6
 8008a32:	463b      	mov	r3, r7
 8008a34:	2000      	movs	r0, #0
 8008a36:	4958      	ldr	r1, [pc, #352]	; (8008b98 <__kernel_rem_pio2+0x330>)
 8008a38:	f7f7 fc26 	bl	8000288 <__aeabi_dsub>
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	460f      	mov	r7, r1
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	d040      	beq.n	8008ac6 <__kernel_rem_pio2+0x25e>
 8008a44:	4650      	mov	r0, sl
 8008a46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008b88 <__kernel_rem_pio2+0x320>
 8008a4a:	f000 fb99 	bl	8009180 <scalbn>
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4639      	mov	r1, r7
 8008a52:	ec53 2b10 	vmov	r2, r3, d0
 8008a56:	f7f7 fc17 	bl	8000288 <__aeabi_dsub>
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	460f      	mov	r7, r1
 8008a5e:	e032      	b.n	8008ac6 <__kernel_rem_pio2+0x25e>
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b4e      	ldr	r3, [pc, #312]	; (8008b9c <__kernel_rem_pio2+0x334>)
 8008a64:	4640      	mov	r0, r8
 8008a66:	4649      	mov	r1, r9
 8008a68:	f7f7 fdc6 	bl	80005f8 <__aeabi_dmul>
 8008a6c:	f7f8 f874 	bl	8000b58 <__aeabi_d2iz>
 8008a70:	f7f7 fd58 	bl	8000524 <__aeabi_i2d>
 8008a74:	2200      	movs	r2, #0
 8008a76:	4b4a      	ldr	r3, [pc, #296]	; (8008ba0 <__kernel_rem_pio2+0x338>)
 8008a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4640      	mov	r0, r8
 8008a86:	4649      	mov	r1, r9
 8008a88:	f7f7 fbfe 	bl	8000288 <__aeabi_dsub>
 8008a8c:	f7f8 f864 	bl	8000b58 <__aeabi_d2iz>
 8008a90:	ab0e      	add	r3, sp, #56	; 0x38
 8008a92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008a96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a9e:	f7f7 fbf5 	bl	800028c <__adddf3>
 8008aa2:	3501      	adds	r5, #1
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	e75e      	b.n	8008968 <__kernel_rem_pio2+0x100>
 8008aaa:	d105      	bne.n	8008ab8 <__kernel_rem_pio2+0x250>
 8008aac:	1e63      	subs	r3, r4, #1
 8008aae:	aa0e      	add	r2, sp, #56	; 0x38
 8008ab0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008ab4:	15c3      	asrs	r3, r0, #23
 8008ab6:	e79f      	b.n	80089f8 <__kernel_rem_pio2+0x190>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4b3a      	ldr	r3, [pc, #232]	; (8008ba4 <__kernel_rem_pio2+0x33c>)
 8008abc:	f7f8 f822 	bl	8000b04 <__aeabi_dcmpge>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d139      	bne.n	8008b38 <__kernel_rem_pio2+0x2d0>
 8008ac4:	9002      	str	r0, [sp, #8]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f7 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f000 80c7 	beq.w	8008c66 <__kernel_rem_pio2+0x3fe>
 8008ad8:	1e65      	subs	r5, r4, #1
 8008ada:	462b      	mov	r3, r5
 8008adc:	2200      	movs	r2, #0
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	da6a      	bge.n	8008bba <__kernel_rem_pio2+0x352>
 8008ae4:	2a00      	cmp	r2, #0
 8008ae6:	f000 8088 	beq.w	8008bfa <__kernel_rem_pio2+0x392>
 8008aea:	ab0e      	add	r3, sp, #56	; 0x38
 8008aec:	f1aa 0a18 	sub.w	sl, sl, #24
 8008af0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 80b4 	beq.w	8008c62 <__kernel_rem_pio2+0x3fa>
 8008afa:	4650      	mov	r0, sl
 8008afc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008b88 <__kernel_rem_pio2+0x320>
 8008b00:	f000 fb3e 	bl	8009180 <scalbn>
 8008b04:	00ec      	lsls	r4, r5, #3
 8008b06:	ab72      	add	r3, sp, #456	; 0x1c8
 8008b08:	191e      	adds	r6, r3, r4
 8008b0a:	ec59 8b10 	vmov	r8, r9, d0
 8008b0e:	f106 0a08 	add.w	sl, r6, #8
 8008b12:	462f      	mov	r7, r5
 8008b14:	2f00      	cmp	r7, #0
 8008b16:	f280 80df 	bge.w	8008cd8 <__kernel_rem_pio2+0x470>
 8008b1a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008b80 <__kernel_rem_pio2+0x318>
 8008b1e:	f04f 0a00 	mov.w	sl, #0
 8008b22:	eba5 030a 	sub.w	r3, r5, sl
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f2c0 810a 	blt.w	8008d40 <__kernel_rem_pio2+0x4d8>
 8008b2c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008ba8 <__kernel_rem_pio2+0x340>
 8008b30:	ec59 8b18 	vmov	r8, r9, d8
 8008b34:	2700      	movs	r7, #0
 8008b36:	e0f5      	b.n	8008d24 <__kernel_rem_pio2+0x4bc>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	e760      	b.n	8008a00 <__kernel_rem_pio2+0x198>
 8008b3e:	ab0e      	add	r3, sp, #56	; 0x38
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	b94d      	cbnz	r5, 8008b5a <__kernel_rem_pio2+0x2f2>
 8008b46:	b12b      	cbz	r3, 8008b54 <__kernel_rem_pio2+0x2ec>
 8008b48:	a80e      	add	r0, sp, #56	; 0x38
 8008b4a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008b4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008b52:	2301      	movs	r3, #1
 8008b54:	3201      	adds	r2, #1
 8008b56:	461d      	mov	r5, r3
 8008b58:	e759      	b.n	8008a0e <__kernel_rem_pio2+0x1a6>
 8008b5a:	a80e      	add	r0, sp, #56	; 0x38
 8008b5c:	1acb      	subs	r3, r1, r3
 8008b5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008b62:	462b      	mov	r3, r5
 8008b64:	e7f6      	b.n	8008b54 <__kernel_rem_pio2+0x2ec>
 8008b66:	1e62      	subs	r2, r4, #1
 8008b68:	ab0e      	add	r3, sp, #56	; 0x38
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008b72:	a90e      	add	r1, sp, #56	; 0x38
 8008b74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008b78:	e757      	b.n	8008a2a <__kernel_rem_pio2+0x1c2>
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w
	...
 8008b8c:	3ff00000 	.word	0x3ff00000
 8008b90:	08009aa8 	.word	0x08009aa8
 8008b94:	40200000 	.word	0x40200000
 8008b98:	3ff00000 	.word	0x3ff00000
 8008b9c:	3e700000 	.word	0x3e700000
 8008ba0:	41700000 	.word	0x41700000
 8008ba4:	3fe00000 	.word	0x3fe00000
 8008ba8:	08009a68 	.word	0x08009a68
 8008bac:	1e62      	subs	r2, r4, #1
 8008bae:	ab0e      	add	r3, sp, #56	; 0x38
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008bb8:	e7db      	b.n	8008b72 <__kernel_rem_pio2+0x30a>
 8008bba:	a90e      	add	r1, sp, #56	; 0x38
 8008bbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	e78b      	b.n	8008ade <__kernel_rem_pio2+0x276>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008bcc:	2900      	cmp	r1, #0
 8008bce:	d0fa      	beq.n	8008bc6 <__kernel_rem_pio2+0x35e>
 8008bd0:	9a08      	ldr	r2, [sp, #32]
 8008bd2:	4422      	add	r2, r4
 8008bd4:	00d2      	lsls	r2, r2, #3
 8008bd6:	a922      	add	r1, sp, #136	; 0x88
 8008bd8:	18e3      	adds	r3, r4, r3
 8008bda:	9206      	str	r2, [sp, #24]
 8008bdc:	440a      	add	r2, r1
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	f10b 0108 	add.w	r1, fp, #8
 8008be4:	f102 0308 	add.w	r3, r2, #8
 8008be8:	1c66      	adds	r6, r4, #1
 8008bea:	910a      	str	r1, [sp, #40]	; 0x28
 8008bec:	2500      	movs	r5, #0
 8008bee:	930d      	str	r3, [sp, #52]	; 0x34
 8008bf0:	9b02      	ldr	r3, [sp, #8]
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	da04      	bge.n	8008c00 <__kernel_rem_pio2+0x398>
 8008bf6:	461c      	mov	r4, r3
 8008bf8:	e6a6      	b.n	8008948 <__kernel_rem_pio2+0xe0>
 8008bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e7e3      	b.n	8008bc8 <__kernel_rem_pio2+0x360>
 8008c00:	9b06      	ldr	r3, [sp, #24]
 8008c02:	18ef      	adds	r7, r5, r3
 8008c04:	ab22      	add	r3, sp, #136	; 0x88
 8008c06:	441f      	add	r7, r3
 8008c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c0e:	f7f7 fc89 	bl	8000524 <__aeabi_i2d>
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	461c      	mov	r4, r3
 8008c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c18:	e9c7 0100 	strd	r0, r1, [r7]
 8008c1c:	eb03 0b05 	add.w	fp, r3, r5
 8008c20:	2700      	movs	r7, #0
 8008c22:	f04f 0800 	mov.w	r8, #0
 8008c26:	f04f 0900 	mov.w	r9, #0
 8008c2a:	9b07      	ldr	r3, [sp, #28]
 8008c2c:	429f      	cmp	r7, r3
 8008c2e:	dd08      	ble.n	8008c42 <__kernel_rem_pio2+0x3da>
 8008c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c32:	aa72      	add	r2, sp, #456	; 0x1c8
 8008c34:	18eb      	adds	r3, r5, r3
 8008c36:	4413      	add	r3, r2
 8008c38:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	3508      	adds	r5, #8
 8008c40:	e7d6      	b.n	8008bf0 <__kernel_rem_pio2+0x388>
 8008c42:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008c46:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008c4a:	f7f7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 fb19 	bl	800028c <__adddf3>
 8008c5a:	3701      	adds	r7, #1
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	4689      	mov	r9, r1
 8008c60:	e7e3      	b.n	8008c2a <__kernel_rem_pio2+0x3c2>
 8008c62:	3d01      	subs	r5, #1
 8008c64:	e741      	b.n	8008aea <__kernel_rem_pio2+0x282>
 8008c66:	f1ca 0000 	rsb	r0, sl, #0
 8008c6a:	ec47 6b10 	vmov	d0, r6, r7
 8008c6e:	f000 fa87 	bl	8009180 <scalbn>
 8008c72:	ec57 6b10 	vmov	r6, r7, d0
 8008c76:	2200      	movs	r2, #0
 8008c78:	4b99      	ldr	r3, [pc, #612]	; (8008ee0 <__kernel_rem_pio2+0x678>)
 8008c7a:	ee10 0a10 	vmov	r0, s0
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ff40 	bl	8000b04 <__aeabi_dcmpge>
 8008c84:	b1f8      	cbz	r0, 8008cc6 <__kernel_rem_pio2+0x45e>
 8008c86:	2200      	movs	r2, #0
 8008c88:	4b96      	ldr	r3, [pc, #600]	; (8008ee4 <__kernel_rem_pio2+0x67c>)
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	f7f7 fcb3 	bl	80005f8 <__aeabi_dmul>
 8008c92:	f7f7 ff61 	bl	8000b58 <__aeabi_d2iz>
 8008c96:	4680      	mov	r8, r0
 8008c98:	f7f7 fc44 	bl	8000524 <__aeabi_i2d>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4b90      	ldr	r3, [pc, #576]	; (8008ee0 <__kernel_rem_pio2+0x678>)
 8008ca0:	f7f7 fcaa 	bl	80005f8 <__aeabi_dmul>
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7f7 faec 	bl	8000288 <__aeabi_dsub>
 8008cb0:	f7f7 ff52 	bl	8000b58 <__aeabi_d2iz>
 8008cb4:	1c65      	adds	r5, r4, #1
 8008cb6:	ab0e      	add	r3, sp, #56	; 0x38
 8008cb8:	f10a 0a18 	add.w	sl, sl, #24
 8008cbc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cc0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008cc4:	e719      	b.n	8008afa <__kernel_rem_pio2+0x292>
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	f7f7 ff45 	bl	8000b58 <__aeabi_d2iz>
 8008cce:	ab0e      	add	r3, sp, #56	; 0x38
 8008cd0:	4625      	mov	r5, r4
 8008cd2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cd6:	e710      	b.n	8008afa <__kernel_rem_pio2+0x292>
 8008cd8:	ab0e      	add	r3, sp, #56	; 0x38
 8008cda:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008cde:	f7f7 fc21 	bl	8000524 <__aeabi_i2d>
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	2200      	movs	r2, #0
 8008cec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008cf0:	4b7c      	ldr	r3, [pc, #496]	; (8008ee4 <__kernel_rem_pio2+0x67c>)
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fc7f 	bl	80005f8 <__aeabi_dmul>
 8008cfa:	3f01      	subs	r7, #1
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	4689      	mov	r9, r1
 8008d00:	e708      	b.n	8008b14 <__kernel_rem_pio2+0x2ac>
 8008d02:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8008d0e:	f7f7 fc73 	bl	80005f8 <__aeabi_dmul>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	4640      	mov	r0, r8
 8008d18:	4649      	mov	r1, r9
 8008d1a:	f7f7 fab7 	bl	800028c <__adddf3>
 8008d1e:	3701      	adds	r7, #1
 8008d20:	4680      	mov	r8, r0
 8008d22:	4689      	mov	r9, r1
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	429f      	cmp	r7, r3
 8008d28:	dc01      	bgt.n	8008d2e <__kernel_rem_pio2+0x4c6>
 8008d2a:	45ba      	cmp	sl, r7
 8008d2c:	dae9      	bge.n	8008d02 <__kernel_rem_pio2+0x49a>
 8008d2e:	ab4a      	add	r3, sp, #296	; 0x128
 8008d30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d34:	e9c3 8900 	strd	r8, r9, [r3]
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	3e08      	subs	r6, #8
 8008d3e:	e6f0      	b.n	8008b22 <__kernel_rem_pio2+0x2ba>
 8008d40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008d42:	2b03      	cmp	r3, #3
 8008d44:	d85b      	bhi.n	8008dfe <__kernel_rem_pio2+0x596>
 8008d46:	e8df f003 	tbb	[pc, r3]
 8008d4a:	264a      	.short	0x264a
 8008d4c:	0226      	.short	0x0226
 8008d4e:	ab9a      	add	r3, sp, #616	; 0x268
 8008d50:	441c      	add	r4, r3
 8008d52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008d56:	46a2      	mov	sl, r4
 8008d58:	46ab      	mov	fp, r5
 8008d5a:	f1bb 0f00 	cmp.w	fp, #0
 8008d5e:	dc6c      	bgt.n	8008e3a <__kernel_rem_pio2+0x5d2>
 8008d60:	46a2      	mov	sl, r4
 8008d62:	46ab      	mov	fp, r5
 8008d64:	f1bb 0f01 	cmp.w	fp, #1
 8008d68:	f300 8086 	bgt.w	8008e78 <__kernel_rem_pio2+0x610>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	2100      	movs	r1, #0
 8008d70:	2d01      	cmp	r5, #1
 8008d72:	f300 80a0 	bgt.w	8008eb6 <__kernel_rem_pio2+0x64e>
 8008d76:	9b02      	ldr	r3, [sp, #8]
 8008d78:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008d7c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f040 809e 	bne.w	8008ec2 <__kernel_rem_pio2+0x65a>
 8008d86:	9b01      	ldr	r3, [sp, #4]
 8008d88:	e9c3 7800 	strd	r7, r8, [r3]
 8008d8c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008d90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008d94:	e033      	b.n	8008dfe <__kernel_rem_pio2+0x596>
 8008d96:	3408      	adds	r4, #8
 8008d98:	ab4a      	add	r3, sp, #296	; 0x128
 8008d9a:	441c      	add	r4, r3
 8008d9c:	462e      	mov	r6, r5
 8008d9e:	2000      	movs	r0, #0
 8008da0:	2100      	movs	r1, #0
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	da3a      	bge.n	8008e1c <__kernel_rem_pio2+0x5b4>
 8008da6:	9b02      	ldr	r3, [sp, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d03d      	beq.n	8008e28 <__kernel_rem_pio2+0x5c0>
 8008dac:	4602      	mov	r2, r0
 8008dae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008db2:	9c01      	ldr	r4, [sp, #4]
 8008db4:	e9c4 2300 	strd	r2, r3, [r4]
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008dc0:	f7f7 fa62 	bl	8000288 <__aeabi_dsub>
 8008dc4:	ae4c      	add	r6, sp, #304	; 0x130
 8008dc6:	2401      	movs	r4, #1
 8008dc8:	42a5      	cmp	r5, r4
 8008dca:	da30      	bge.n	8008e2e <__kernel_rem_pio2+0x5c6>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	b113      	cbz	r3, 8008dd6 <__kernel_rem_pio2+0x56e>
 8008dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008ddc:	e00f      	b.n	8008dfe <__kernel_rem_pio2+0x596>
 8008dde:	ab9a      	add	r3, sp, #616	; 0x268
 8008de0:	441c      	add	r4, r3
 8008de2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008de6:	2000      	movs	r0, #0
 8008de8:	2100      	movs	r1, #0
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	da10      	bge.n	8008e10 <__kernel_rem_pio2+0x5a8>
 8008dee:	9b02      	ldr	r3, [sp, #8]
 8008df0:	b113      	cbz	r3, 8008df8 <__kernel_rem_pio2+0x590>
 8008df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008df6:	4619      	mov	r1, r3
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	e9c3 0100 	strd	r0, r1, [r3]
 8008dfe:	9b06      	ldr	r3, [sp, #24]
 8008e00:	f003 0007 	and.w	r0, r3, #7
 8008e04:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008e08:	ecbd 8b02 	vpop	{d8}
 8008e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e14:	f7f7 fa3a 	bl	800028c <__adddf3>
 8008e18:	3d01      	subs	r5, #1
 8008e1a:	e7e6      	b.n	8008dea <__kernel_rem_pio2+0x582>
 8008e1c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	3e01      	subs	r6, #1
 8008e26:	e7bc      	b.n	8008da2 <__kernel_rem_pio2+0x53a>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	e7c1      	b.n	8008db2 <__kernel_rem_pio2+0x54a>
 8008e2e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008e32:	f7f7 fa2b 	bl	800028c <__adddf3>
 8008e36:	3401      	adds	r4, #1
 8008e38:	e7c6      	b.n	8008dc8 <__kernel_rem_pio2+0x560>
 8008e3a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008e3e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008e42:	4640      	mov	r0, r8
 8008e44:	ec53 2b17 	vmov	r2, r3, d7
 8008e48:	4649      	mov	r1, r9
 8008e4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e4e:	f7f7 fa1d 	bl	800028c <__adddf3>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa13 	bl	8000288 <__aeabi_dsub>
 8008e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e66:	f7f7 fa11 	bl	800028c <__adddf3>
 8008e6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e6e:	e9ca 0100 	strd	r0, r1, [sl]
 8008e72:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8008e76:	e770      	b.n	8008d5a <__kernel_rem_pio2+0x4f2>
 8008e78:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008e7c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008e80:	4630      	mov	r0, r6
 8008e82:	ec53 2b17 	vmov	r2, r3, d7
 8008e86:	4639      	mov	r1, r7
 8008e88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e8c:	f7f7 f9fe 	bl	800028c <__adddf3>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4680      	mov	r8, r0
 8008e96:	4689      	mov	r9, r1
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea4:	f7f7 f9f2 	bl	800028c <__adddf3>
 8008ea8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008eac:	e9ca 0100 	strd	r0, r1, [sl]
 8008eb0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8008eb4:	e756      	b.n	8008d64 <__kernel_rem_pio2+0x4fc>
 8008eb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008eba:	f7f7 f9e7 	bl	800028c <__adddf3>
 8008ebe:	3d01      	subs	r5, #1
 8008ec0:	e756      	b.n	8008d70 <__kernel_rem_pio2+0x508>
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	9a01      	ldr	r2, [sp, #4]
 8008ec6:	601f      	str	r7, [r3, #0]
 8008ec8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008ecc:	605c      	str	r4, [r3, #4]
 8008ece:	609d      	str	r5, [r3, #8]
 8008ed0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ed4:	60d3      	str	r3, [r2, #12]
 8008ed6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008eda:	6110      	str	r0, [r2, #16]
 8008edc:	6153      	str	r3, [r2, #20]
 8008ede:	e78e      	b.n	8008dfe <__kernel_rem_pio2+0x596>
 8008ee0:	41700000 	.word	0x41700000
 8008ee4:	3e700000 	.word	0x3e700000

08008ee8 <__kernel_sin>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ec55 4b10 	vmov	r4, r5, d0
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008ef6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008efa:	ed8d 1b00 	vstr	d1, [sp]
 8008efe:	9002      	str	r0, [sp, #8]
 8008f00:	da06      	bge.n	8008f10 <__kernel_sin+0x28>
 8008f02:	ee10 0a10 	vmov	r0, s0
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fe26 	bl	8000b58 <__aeabi_d2iz>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d051      	beq.n	8008fb4 <__kernel_sin+0xcc>
 8008f10:	4622      	mov	r2, r4
 8008f12:	462b      	mov	r3, r5
 8008f14:	4620      	mov	r0, r4
 8008f16:	4629      	mov	r1, r5
 8008f18:	f7f7 fb6e 	bl	80005f8 <__aeabi_dmul>
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 fb66 	bl	80005f8 <__aeabi_dmul>
 8008f2c:	a341      	add	r3, pc, #260	; (adr r3, 8009034 <__kernel_sin+0x14c>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	4680      	mov	r8, r0
 8008f34:	4689      	mov	r9, r1
 8008f36:	4650      	mov	r0, sl
 8008f38:	4659      	mov	r1, fp
 8008f3a:	f7f7 fb5d 	bl	80005f8 <__aeabi_dmul>
 8008f3e:	a33f      	add	r3, pc, #252	; (adr r3, 800903c <__kernel_sin+0x154>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 f9a0 	bl	8000288 <__aeabi_dsub>
 8008f48:	4652      	mov	r2, sl
 8008f4a:	465b      	mov	r3, fp
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	a33c      	add	r3, pc, #240	; (adr r3, 8009044 <__kernel_sin+0x15c>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 f999 	bl	800028c <__adddf3>
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	f7f7 fb4b 	bl	80005f8 <__aeabi_dmul>
 8008f62:	a33a      	add	r3, pc, #232	; (adr r3, 800904c <__kernel_sin+0x164>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f7f7 f98e 	bl	8000288 <__aeabi_dsub>
 8008f6c:	4652      	mov	r2, sl
 8008f6e:	465b      	mov	r3, fp
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	a337      	add	r3, pc, #220	; (adr r3, 8009054 <__kernel_sin+0x16c>)
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f7f7 f987 	bl	800028c <__adddf3>
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	4606      	mov	r6, r0
 8008f82:	460f      	mov	r7, r1
 8008f84:	b9db      	cbnz	r3, 8008fbe <__kernel_sin+0xd6>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 fb33 	bl	80005f8 <__aeabi_dmul>
 8008f92:	a325      	add	r3, pc, #148	; (adr r3, 8009028 <__kernel_sin+0x140>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 f976 	bl	8000288 <__aeabi_dsub>
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	f7f7 fb2a 	bl	80005f8 <__aeabi_dmul>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	4629      	mov	r1, r5
 8008fac:	f7f7 f96e 	bl	800028c <__adddf3>
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	460d      	mov	r5, r1
 8008fb4:	ec45 4b10 	vmov	d0, r4, r5
 8008fb8:	b005      	add	sp, #20
 8008fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4b1b      	ldr	r3, [pc, #108]	; (8009030 <__kernel_sin+0x148>)
 8008fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc6:	f7f7 fb17 	bl	80005f8 <__aeabi_dmul>
 8008fca:	4632      	mov	r2, r6
 8008fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fb0f 	bl	80005f8 <__aeabi_dmul>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe2:	f7f7 f951 	bl	8000288 <__aeabi_dsub>
 8008fe6:	4652      	mov	r2, sl
 8008fe8:	465b      	mov	r3, fp
 8008fea:	f7f7 fb05 	bl	80005f8 <__aeabi_dmul>
 8008fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff2:	f7f7 f949 	bl	8000288 <__aeabi_dsub>
 8008ff6:	a30c      	add	r3, pc, #48	; (adr r3, 8009028 <__kernel_sin+0x140>)
 8008ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	4640      	mov	r0, r8
 8009002:	4649      	mov	r1, r9
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	4602      	mov	r2, r0
 800900a:	460b      	mov	r3, r1
 800900c:	4630      	mov	r0, r6
 800900e:	4639      	mov	r1, r7
 8009010:	f7f7 f93c 	bl	800028c <__adddf3>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4620      	mov	r0, r4
 800901a:	4629      	mov	r1, r5
 800901c:	f7f7 f934 	bl	8000288 <__aeabi_dsub>
 8009020:	e7c6      	b.n	8008fb0 <__kernel_sin+0xc8>
 8009022:	bf00      	nop
 8009024:	f3af 8000 	nop.w
 8009028:	55555549 	.word	0x55555549
 800902c:	3fc55555 	.word	0x3fc55555
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	5acfd57c 	.word	0x5acfd57c
 8009038:	3de5d93a 	.word	0x3de5d93a
 800903c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009040:	3e5ae5e6 	.word	0x3e5ae5e6
 8009044:	57b1fe7d 	.word	0x57b1fe7d
 8009048:	3ec71de3 	.word	0x3ec71de3
 800904c:	19c161d5 	.word	0x19c161d5
 8009050:	3f2a01a0 	.word	0x3f2a01a0
 8009054:	1110f8a6 	.word	0x1110f8a6
 8009058:	3f811111 	.word	0x3f811111

0800905c <fabs>:
 800905c:	ec51 0b10 	vmov	r0, r1, d0
 8009060:	ee10 2a10 	vmov	r2, s0
 8009064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009068:	ec43 2b10 	vmov	d0, r2, r3
 800906c:	4770      	bx	lr
	...

08009070 <floor>:
 8009070:	ec51 0b10 	vmov	r0, r1, d0
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800907c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009080:	2e13      	cmp	r6, #19
 8009082:	460c      	mov	r4, r1
 8009084:	ee10 5a10 	vmov	r5, s0
 8009088:	4680      	mov	r8, r0
 800908a:	dc34      	bgt.n	80090f6 <floor+0x86>
 800908c:	2e00      	cmp	r6, #0
 800908e:	da16      	bge.n	80090be <floor+0x4e>
 8009090:	a335      	add	r3, pc, #212	; (adr r3, 8009168 <floor+0xf8>)
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	f7f7 f8f9 	bl	800028c <__adddf3>
 800909a:	2200      	movs	r2, #0
 800909c:	2300      	movs	r3, #0
 800909e:	f7f7 fd3b 	bl	8000b18 <__aeabi_dcmpgt>
 80090a2:	b148      	cbz	r0, 80090b8 <floor+0x48>
 80090a4:	2c00      	cmp	r4, #0
 80090a6:	da59      	bge.n	800915c <floor+0xec>
 80090a8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80090ac:	4a30      	ldr	r2, [pc, #192]	; (8009170 <floor+0x100>)
 80090ae:	432b      	orrs	r3, r5
 80090b0:	2500      	movs	r5, #0
 80090b2:	42ab      	cmp	r3, r5
 80090b4:	bf18      	it	ne
 80090b6:	4614      	movne	r4, r2
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	e025      	b.n	800910a <floor+0x9a>
 80090be:	4f2d      	ldr	r7, [pc, #180]	; (8009174 <floor+0x104>)
 80090c0:	4137      	asrs	r7, r6
 80090c2:	ea01 0307 	and.w	r3, r1, r7
 80090c6:	4303      	orrs	r3, r0
 80090c8:	d01f      	beq.n	800910a <floor+0x9a>
 80090ca:	a327      	add	r3, pc, #156	; (adr r3, 8009168 <floor+0xf8>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	f7f7 fd1e 	bl	8000b18 <__aeabi_dcmpgt>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d0eb      	beq.n	80090b8 <floor+0x48>
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	bfbe      	ittt	lt
 80090e4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80090e8:	fa43 f606 	asrlt.w	r6, r3, r6
 80090ec:	19a4      	addlt	r4, r4, r6
 80090ee:	ea24 0407 	bic.w	r4, r4, r7
 80090f2:	2500      	movs	r5, #0
 80090f4:	e7e0      	b.n	80090b8 <floor+0x48>
 80090f6:	2e33      	cmp	r6, #51	; 0x33
 80090f8:	dd0b      	ble.n	8009112 <floor+0xa2>
 80090fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80090fe:	d104      	bne.n	800910a <floor+0x9a>
 8009100:	ee10 2a10 	vmov	r2, s0
 8009104:	460b      	mov	r3, r1
 8009106:	f7f7 f8c1 	bl	800028c <__adddf3>
 800910a:	ec41 0b10 	vmov	d0, r0, r1
 800910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009112:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	fa23 f707 	lsr.w	r7, r3, r7
 800911e:	4207      	tst	r7, r0
 8009120:	d0f3      	beq.n	800910a <floor+0x9a>
 8009122:	a311      	add	r3, pc, #68	; (adr r3, 8009168 <floor+0xf8>)
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f7f7 f8b0 	bl	800028c <__adddf3>
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	f7f7 fcf2 	bl	8000b18 <__aeabi_dcmpgt>
 8009134:	2800      	cmp	r0, #0
 8009136:	d0bf      	beq.n	80090b8 <floor+0x48>
 8009138:	2c00      	cmp	r4, #0
 800913a:	da02      	bge.n	8009142 <floor+0xd2>
 800913c:	2e14      	cmp	r6, #20
 800913e:	d103      	bne.n	8009148 <floor+0xd8>
 8009140:	3401      	adds	r4, #1
 8009142:	ea25 0507 	bic.w	r5, r5, r7
 8009146:	e7b7      	b.n	80090b8 <floor+0x48>
 8009148:	2301      	movs	r3, #1
 800914a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800914e:	fa03 f606 	lsl.w	r6, r3, r6
 8009152:	4435      	add	r5, r6
 8009154:	4545      	cmp	r5, r8
 8009156:	bf38      	it	cc
 8009158:	18e4      	addcc	r4, r4, r3
 800915a:	e7f2      	b.n	8009142 <floor+0xd2>
 800915c:	2500      	movs	r5, #0
 800915e:	462c      	mov	r4, r5
 8009160:	e7aa      	b.n	80090b8 <floor+0x48>
 8009162:	bf00      	nop
 8009164:	f3af 8000 	nop.w
 8009168:	8800759c 	.word	0x8800759c
 800916c:	7e37e43c 	.word	0x7e37e43c
 8009170:	bff00000 	.word	0xbff00000
 8009174:	000fffff 	.word	0x000fffff

08009178 <matherr>:
 8009178:	2000      	movs	r0, #0
 800917a:	4770      	bx	lr
 800917c:	0000      	movs	r0, r0
	...

08009180 <scalbn>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	ec55 4b10 	vmov	r4, r5, d0
 8009186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800918a:	4606      	mov	r6, r0
 800918c:	462b      	mov	r3, r5
 800918e:	b9aa      	cbnz	r2, 80091bc <scalbn+0x3c>
 8009190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009194:	4323      	orrs	r3, r4
 8009196:	d03b      	beq.n	8009210 <scalbn+0x90>
 8009198:	4b31      	ldr	r3, [pc, #196]	; (8009260 <scalbn+0xe0>)
 800919a:	4629      	mov	r1, r5
 800919c:	2200      	movs	r2, #0
 800919e:	ee10 0a10 	vmov	r0, s0
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <scalbn+0xe4>)
 80091a8:	429e      	cmp	r6, r3
 80091aa:	4604      	mov	r4, r0
 80091ac:	460d      	mov	r5, r1
 80091ae:	da12      	bge.n	80091d6 <scalbn+0x56>
 80091b0:	a327      	add	r3, pc, #156	; (adr r3, 8009250 <scalbn+0xd0>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	e009      	b.n	80091d0 <scalbn+0x50>
 80091bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091c0:	428a      	cmp	r2, r1
 80091c2:	d10c      	bne.n	80091de <scalbn+0x5e>
 80091c4:	ee10 2a10 	vmov	r2, s0
 80091c8:	4620      	mov	r0, r4
 80091ca:	4629      	mov	r1, r5
 80091cc:	f7f7 f85e 	bl	800028c <__adddf3>
 80091d0:	4604      	mov	r4, r0
 80091d2:	460d      	mov	r5, r1
 80091d4:	e01c      	b.n	8009210 <scalbn+0x90>
 80091d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091da:	460b      	mov	r3, r1
 80091dc:	3a36      	subs	r2, #54	; 0x36
 80091de:	4432      	add	r2, r6
 80091e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80091e4:	428a      	cmp	r2, r1
 80091e6:	dd0b      	ble.n	8009200 <scalbn+0x80>
 80091e8:	ec45 4b11 	vmov	d1, r4, r5
 80091ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009258 <scalbn+0xd8>
 80091f0:	f000 f83c 	bl	800926c <copysign>
 80091f4:	a318      	add	r3, pc, #96	; (adr r3, 8009258 <scalbn+0xd8>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	ec51 0b10 	vmov	r0, r1, d0
 80091fe:	e7da      	b.n	80091b6 <scalbn+0x36>
 8009200:	2a00      	cmp	r2, #0
 8009202:	dd08      	ble.n	8009216 <scalbn+0x96>
 8009204:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009208:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800920c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009210:	ec45 4b10 	vmov	d0, r4, r5
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800921a:	da0d      	bge.n	8009238 <scalbn+0xb8>
 800921c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009220:	429e      	cmp	r6, r3
 8009222:	ec45 4b11 	vmov	d1, r4, r5
 8009226:	dce1      	bgt.n	80091ec <scalbn+0x6c>
 8009228:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009250 <scalbn+0xd0>
 800922c:	f000 f81e 	bl	800926c <copysign>
 8009230:	a307      	add	r3, pc, #28	; (adr r3, 8009250 <scalbn+0xd0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	e7e0      	b.n	80091fa <scalbn+0x7a>
 8009238:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800923c:	3236      	adds	r2, #54	; 0x36
 800923e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009246:	4620      	mov	r0, r4
 8009248:	4629      	mov	r1, r5
 800924a:	2200      	movs	r2, #0
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <scalbn+0xe8>)
 800924e:	e7b2      	b.n	80091b6 <scalbn+0x36>
 8009250:	c2f8f359 	.word	0xc2f8f359
 8009254:	01a56e1f 	.word	0x01a56e1f
 8009258:	8800759c 	.word	0x8800759c
 800925c:	7e37e43c 	.word	0x7e37e43c
 8009260:	43500000 	.word	0x43500000
 8009264:	ffff3cb0 	.word	0xffff3cb0
 8009268:	3c900000 	.word	0x3c900000

0800926c <copysign>:
 800926c:	ec51 0b10 	vmov	r0, r1, d0
 8009270:	ee11 0a90 	vmov	r0, s3
 8009274:	ee10 2a10 	vmov	r2, s0
 8009278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800927c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009280:	ea41 0300 	orr.w	r3, r1, r0
 8009284:	ec43 2b10 	vmov	d0, r2, r3
 8009288:	4770      	bx	lr
	...

0800928c <_init>:
 800928c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928e:	bf00      	nop
 8009290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009292:	bc08      	pop	{r3}
 8009294:	469e      	mov	lr, r3
 8009296:	4770      	bx	lr

08009298 <_fini>:
 8009298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929a:	bf00      	nop
 800929c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800929e:	bc08      	pop	{r3}
 80092a0:	469e      	mov	lr, r3
 80092a2:	4770      	bx	lr
