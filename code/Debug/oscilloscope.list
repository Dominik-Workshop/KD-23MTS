
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08008830  08008830  00018830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800922c  0800922c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800922c  0800922c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800922c  0800922c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009230  08009230  00019230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08009234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea0  200000a4  080092d8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f44  080092d8  00022f44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019fd6  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003174  00000000  00000000  0003a0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001470  00000000  00000000  0003d220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003e690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aee2  00000000  00000000  0003f968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000131f0  00000000  00000000  0006a84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106a96  00000000  00000000  0007da3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001844d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  0018454c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008818 	.word	0x08008818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08008818 	.word	0x08008818

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f004 f893 	bl	80043b8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f002 fbdc 	bl	8002a50 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f004 f889 	bl	80043b8 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 80002a6:	4b65      	ldr	r3, [pc, #404]	; (800043c <ILI9488_Init+0x1bc>)
 80002a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80002ac:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 80002ae:	4b64      	ldr	r3, [pc, #400]	; (8000440 <ILI9488_Init+0x1c0>)
 80002b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80002b4:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 80002b6:	20e0      	movs	r0, #224	; 0xe0
 80002b8:	f000 ff0c 	bl	80010d4 <writecommand>
	writedata(0x00);
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 ff2d 	bl	800111c <writedata>
	writedata(0x03);
 80002c2:	2003      	movs	r0, #3
 80002c4:	f000 ff2a 	bl	800111c <writedata>
	writedata(0x09);
 80002c8:	2009      	movs	r0, #9
 80002ca:	f000 ff27 	bl	800111c <writedata>
	writedata(0x08);
 80002ce:	2008      	movs	r0, #8
 80002d0:	f000 ff24 	bl	800111c <writedata>
	writedata(0x16);
 80002d4:	2016      	movs	r0, #22
 80002d6:	f000 ff21 	bl	800111c <writedata>
	writedata(0x0A);
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 ff1e 	bl	800111c <writedata>
	writedata(0x3F);
 80002e0:	203f      	movs	r0, #63	; 0x3f
 80002e2:	f000 ff1b 	bl	800111c <writedata>
	writedata(0x78);
 80002e6:	2078      	movs	r0, #120	; 0x78
 80002e8:	f000 ff18 	bl	800111c <writedata>
	writedata(0x4C);
 80002ec:	204c      	movs	r0, #76	; 0x4c
 80002ee:	f000 ff15 	bl	800111c <writedata>
	writedata(0x09);
 80002f2:	2009      	movs	r0, #9
 80002f4:	f000 ff12 	bl	800111c <writedata>
	writedata(0x0A);
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 ff0f 	bl	800111c <writedata>
	writedata(0x08);
 80002fe:	2008      	movs	r0, #8
 8000300:	f000 ff0c 	bl	800111c <writedata>
	writedata(0x16);
 8000304:	2016      	movs	r0, #22
 8000306:	f000 ff09 	bl	800111c <writedata>
	writedata(0x1A);
 800030a:	201a      	movs	r0, #26
 800030c:	f000 ff06 	bl	800111c <writedata>
	writedata(0x0F);
 8000310:	200f      	movs	r0, #15
 8000312:	f000 ff03 	bl	800111c <writedata>

	writecommand(0XE1);
 8000316:	20e1      	movs	r0, #225	; 0xe1
 8000318:	f000 fedc 	bl	80010d4 <writecommand>
	writedata(0x00);
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fefd 	bl	800111c <writedata>
	writedata(0x16);
 8000322:	2016      	movs	r0, #22
 8000324:	f000 fefa 	bl	800111c <writedata>
	writedata(0x19);
 8000328:	2019      	movs	r0, #25
 800032a:	f000 fef7 	bl	800111c <writedata>
	writedata(0x03);
 800032e:	2003      	movs	r0, #3
 8000330:	f000 fef4 	bl	800111c <writedata>
	writedata(0x0F);
 8000334:	200f      	movs	r0, #15
 8000336:	f000 fef1 	bl	800111c <writedata>
	writedata(0x05);
 800033a:	2005      	movs	r0, #5
 800033c:	f000 feee 	bl	800111c <writedata>
	writedata(0x32);
 8000340:	2032      	movs	r0, #50	; 0x32
 8000342:	f000 feeb 	bl	800111c <writedata>
	writedata(0x45);
 8000346:	2045      	movs	r0, #69	; 0x45
 8000348:	f000 fee8 	bl	800111c <writedata>
	writedata(0x46);
 800034c:	2046      	movs	r0, #70	; 0x46
 800034e:	f000 fee5 	bl	800111c <writedata>
	writedata(0x04);
 8000352:	2004      	movs	r0, #4
 8000354:	f000 fee2 	bl	800111c <writedata>
	writedata(0x0E);
 8000358:	200e      	movs	r0, #14
 800035a:	f000 fedf 	bl	800111c <writedata>
	writedata(0x0D);
 800035e:	200d      	movs	r0, #13
 8000360:	f000 fedc 	bl	800111c <writedata>
	writedata(0x35);
 8000364:	2035      	movs	r0, #53	; 0x35
 8000366:	f000 fed9 	bl	800111c <writedata>
	writedata(0x37);
 800036a:	2037      	movs	r0, #55	; 0x37
 800036c:	f000 fed6 	bl	800111c <writedata>
	writedata(0x0F);
 8000370:	200f      	movs	r0, #15
 8000372:	f000 fed3 	bl	800111c <writedata>

	writecommand(0XC0);      //Power Control 1
 8000376:	20c0      	movs	r0, #192	; 0xc0
 8000378:	f000 feac 	bl	80010d4 <writecommand>
	writedata(0x17);    //Vreg1out
 800037c:	2017      	movs	r0, #23
 800037e:	f000 fecd 	bl	800111c <writedata>
	writedata(0x15);    //Verg2out
 8000382:	2015      	movs	r0, #21
 8000384:	f000 feca 	bl	800111c <writedata>

	writecommand(0xC1);      //Power Control 2
 8000388:	20c1      	movs	r0, #193	; 0xc1
 800038a:	f000 fea3 	bl	80010d4 <writecommand>
	writedata(0x41);    //VGH,VGL
 800038e:	2041      	movs	r0, #65	; 0x41
 8000390:	f000 fec4 	bl	800111c <writedata>

	writecommand(0xC5);      //Power Control 3
 8000394:	20c5      	movs	r0, #197	; 0xc5
 8000396:	f000 fe9d 	bl	80010d4 <writecommand>
	writedata(0x00);
 800039a:	2000      	movs	r0, #0
 800039c:	f000 febe 	bl	800111c <writedata>
	writedata(0x12);    //Vcom
 80003a0:	2012      	movs	r0, #18
 80003a2:	f000 febb 	bl	800111c <writedata>
	writedata(0x80);
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	f000 feb8 	bl	800111c <writedata>

	writecommand(0x36);      //Memory Access
 80003ac:	2036      	movs	r0, #54	; 0x36
 80003ae:	f000 fe91 	bl	80010d4 <writecommand>
	writedata(0x48);
 80003b2:	2048      	movs	r0, #72	; 0x48
 80003b4:	f000 feb2 	bl	800111c <writedata>

	writecommand(0x36);      // Interface Pixel Format
 80003b8:	2036      	movs	r0, #54	; 0x36
 80003ba:	f000 fe8b 	bl	80010d4 <writecommand>
	writedata(0x66); 	  //18 bit
 80003be:	2066      	movs	r0, #102	; 0x66
 80003c0:	f000 feac 	bl	800111c <writedata>

	writecommand(0XB0);      // Interface Mode Control
 80003c4:	20b0      	movs	r0, #176	; 0xb0
 80003c6:	f000 fe85 	bl	80010d4 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	f000 fea6 	bl	800111c <writedata>

	writecommand(0xB1);      //Frame rate
 80003d0:	20b1      	movs	r0, #177	; 0xb1
 80003d2:	f000 fe7f 	bl	80010d4 <writecommand>
	writedata(0xA0);    //60Hz
 80003d6:	20a0      	movs	r0, #160	; 0xa0
 80003d8:	f000 fea0 	bl	800111c <writedata>

	writecommand(0xB4);      //Display Inversion Control
 80003dc:	20b4      	movs	r0, #180	; 0xb4
 80003de:	f000 fe79 	bl	80010d4 <writecommand>
	writedata(0x02);    //2-dot
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 fe9a 	bl	800111c <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 80003e8:	20b6      	movs	r0, #182	; 0xb6
 80003ea:	f000 fe73 	bl	80010d4 <writecommand>

	writedata(0x02);    //MCU
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 fe94 	bl	800111c <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 fe91 	bl	800111c <writedata>

	writecommand(0XE9);      // Set Image Functio
 80003fa:	20e9      	movs	r0, #233	; 0xe9
 80003fc:	f000 fe6a 	bl	80010d4 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fe8b 	bl	800111c <writedata>

	writecommand(0xF7);      // Adjust Control
 8000406:	20f7      	movs	r0, #247	; 0xf7
 8000408:	f000 fe64 	bl	80010d4 <writecommand>
	writedata(0xA9);
 800040c:	20a9      	movs	r0, #169	; 0xa9
 800040e:	f000 fe85 	bl	800111c <writedata>
	writedata(0x51);
 8000412:	2051      	movs	r0, #81	; 0x51
 8000414:	f000 fe82 	bl	800111c <writedata>
	writedata(0x2C);
 8000418:	202c      	movs	r0, #44	; 0x2c
 800041a:	f000 fe7f 	bl	800111c <writedata>
	writedata(0x82);    // D7 stream, loose
 800041e:	2082      	movs	r0, #130	; 0x82
 8000420:	f000 fe7c 	bl	800111c <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 8000424:	2011      	movs	r0, #17
 8000426:	f000 fe55 	bl	80010d4 <writecommand>

	HAL_Delay(120);
 800042a:	2078      	movs	r0, #120	; 0x78
 800042c:	f002 fb10 	bl	8002a50 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000430:	2029      	movs	r0, #41	; 0x29
 8000432:	f000 fe4f 	bl	80010d4 <writecommand>


}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20012cdc 	.word	0x20012cdc
 8000440:	20012ce0 	.word	0x20012ce0

08000444 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4604      	mov	r4, r0
 800044c:	4608      	mov	r0, r1
 800044e:	4611      	mov	r1, r2
 8000450:	461a      	mov	r2, r3
 8000452:	4623      	mov	r3, r4
 8000454:	80fb      	strh	r3, [r7, #6]
 8000456:	4603      	mov	r3, r0
 8000458:	80bb      	strh	r3, [r7, #4]
 800045a:	460b      	mov	r3, r1
 800045c:	807b      	strh	r3, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000462:	202a      	movs	r0, #42	; 0x2a
 8000464:	f000 fe36 	bl	80010d4 <writecommand>
	writedata(x0 >> 8);
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	0a1b      	lsrs	r3, r3, #8
 800046c:	b29b      	uxth	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fe53 	bl	800111c <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8000476:	88fb      	ldrh	r3, [r7, #6]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fe4e 	bl	800111c <writedata>
	writedata(x1 >> 8);
 8000480:	887b      	ldrh	r3, [r7, #2]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b29b      	uxth	r3, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fe47 	bl	800111c <writedata>
	writedata(x1 & 0xFF);     // XEND
 800048e:	887b      	ldrh	r3, [r7, #2]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fe42 	bl	800111c <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000498:	202b      	movs	r0, #43	; 0x2b
 800049a:	f000 fe1b 	bl	80010d4 <writecommand>
	writedata(y0 >> 8);
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fe38 	bl	800111c <writedata>
	writedata(y0 & 0xff);     // YSTART
 80004ac:	88bb      	ldrh	r3, [r7, #4]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fe33 	bl	800111c <writedata>
	writedata(y1 >> 8);
 80004b6:	883b      	ldrh	r3, [r7, #0]
 80004b8:	0a1b      	lsrs	r3, r3, #8
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fe2c 	bl	800111c <writedata>
	writedata(y1 & 0xff);     // YEND
 80004c4:	883b      	ldrh	r3, [r7, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fe27 	bl	800111c <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 80004ce:	202c      	movs	r0, #44	; 0x2c
 80004d0:	f000 fe00 	bl	80010d4 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <setAddrWindow+0xb0>)
 80004dc:	f003 ff6c 	bl	80043b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <setAddrWindow+0xb0>)
 80004e6:	f003 ff67 	bl	80043b8 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd90      	pop	{r4, r7, pc}
 80004f2:	bf00      	nop
 80004f4:	48000800 	.word	0x48000800

080004f8 <clearScreen>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}

void clearScreen(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	memset(image_buffer, 0, sizeof(image_buffer));
 80004fc:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8000500:	2100      	movs	r1, #0
 8000502:	4802      	ldr	r0, [pc, #8]	; (800050c <clearScreen+0x14>)
 8000504:	f007 f837 	bl	8007576 <memset>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	200000c0 	.word	0x200000c0

08000510 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000510:	b490      	push	{r4, r7}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
 800051a:	460b      	mov	r3, r1
 800051c:	80bb      	strh	r3, [r7, #4]
 800051e:	4613      	mov	r3, r2
 8000520:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8000522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000526:	2b00      	cmp	r3, #0
 8000528:	f2c0 809f 	blt.w	800066a <drawPixel+0x15a>
 800052c:	4b51      	ldr	r3, [pc, #324]	; (8000674 <drawPixel+0x164>)
 800052e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000536:	429a      	cmp	r2, r3
 8000538:	f280 8097 	bge.w	800066a <drawPixel+0x15a>
 800053c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	f2c0 8092 	blt.w	800066a <drawPixel+0x15a>
 8000546:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <drawPixel+0x168>)
 8000548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800054c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	f280 808a 	bge.w	800066a <drawPixel+0x15a>
		return;
	IMG_BUF_SET(x, y, color);
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d142      	bne.n	80005e8 <drawPixel+0xd8>
 8000562:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000566:	4613      	mov	r3, r2
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	011b      	lsls	r3, r3, #4
 800056e:	4619      	mov	r1, r3
 8000570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000574:	0fda      	lsrs	r2, r3, #31
 8000576:	4413      	add	r3, r2
 8000578:	105b      	asrs	r3, r3, #1
 800057a:	b218      	sxth	r0, r3
 800057c:	4603      	mov	r3, r0
 800057e:	440b      	add	r3, r1
 8000580:	4a3e      	ldr	r2, [pc, #248]	; (800067c <drawPixel+0x16c>)
 8000582:	5cd1      	ldrb	r1, [r2, r3]
 8000584:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000588:	4613      	mov	r3, r2
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	461a      	mov	r2, r3
 8000592:	4603      	mov	r3, r0
 8000594:	4413      	add	r3, r2
 8000596:	f001 020f 	and.w	r2, r1, #15
 800059a:	b2d1      	uxtb	r1, r2
 800059c:	4a37      	ldr	r2, [pc, #220]	; (800067c <drawPixel+0x16c>)
 800059e:	54d1      	strb	r1, [r2, r3]
 80005a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005a4:	4613      	mov	r3, r2
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b2:	0fda      	lsrs	r2, r3, #31
 80005b4:	4413      	add	r3, r2
 80005b6:	105b      	asrs	r3, r3, #1
 80005b8:	b219      	sxth	r1, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	4403      	add	r3, r0
 80005be:	4a2f      	ldr	r2, [pc, #188]	; (800067c <drawPixel+0x16c>)
 80005c0:	5cd3      	ldrb	r3, [r2, r3]
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	887b      	ldrh	r3, [r7, #2]
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	b25b      	sxtb	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b258      	sxtb	r0, r3
 80005ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005d2:	4613      	mov	r3, r2
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	461a      	mov	r2, r3
 80005dc:	460b      	mov	r3, r1
 80005de:	4413      	add	r3, r2
 80005e0:	b2c1      	uxtb	r1, r0
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <drawPixel+0x16c>)
 80005e4:	54d1      	strb	r1, [r2, r3]
 80005e6:	e041      	b.n	800066c <drawPixel+0x15c>
 80005e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005ec:	4613      	mov	r3, r2
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	1a9b      	subs	r3, r3, r2
 80005f2:	011b      	lsls	r3, r3, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005fa:	0fda      	lsrs	r2, r3, #31
 80005fc:	4413      	add	r3, r2
 80005fe:	105b      	asrs	r3, r3, #1
 8000600:	b218      	sxth	r0, r3
 8000602:	4603      	mov	r3, r0
 8000604:	440b      	add	r3, r1
 8000606:	4a1d      	ldr	r2, [pc, #116]	; (800067c <drawPixel+0x16c>)
 8000608:	5cd1      	ldrb	r1, [r2, r3]
 800060a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800060e:	4613      	mov	r3, r2
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	1a9b      	subs	r3, r3, r2
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	461a      	mov	r2, r3
 8000618:	4603      	mov	r3, r0
 800061a:	4413      	add	r3, r2
 800061c:	f021 020f 	bic.w	r2, r1, #15
 8000620:	b2d1      	uxtb	r1, r2
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <drawPixel+0x16c>)
 8000624:	54d1      	strb	r1, [r2, r3]
 8000626:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	011b      	lsls	r3, r3, #4
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	4619      	mov	r1, r3
 8000634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000638:	0fda      	lsrs	r2, r3, #31
 800063a:	4413      	add	r3, r2
 800063c:	105b      	asrs	r3, r3, #1
 800063e:	b21c      	sxth	r4, r3
 8000640:	4623      	mov	r3, r4
 8000642:	440b      	add	r3, r1
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <drawPixel+0x16c>)
 8000646:	5cd0      	ldrb	r0, [r2, r3]
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000650:	4613      	mov	r3, r2
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	1a9b      	subs	r3, r3, r2
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	461a      	mov	r2, r3
 800065a:	4623      	mov	r3, r4
 800065c:	4413      	add	r3, r2
 800065e:	ea40 0201 	orr.w	r2, r0, r1
 8000662:	b2d1      	uxtb	r1, r2
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <drawPixel+0x16c>)
 8000666:	54d1      	strb	r1, [r2, r3]
 8000668:	e000      	b.n	800066c <drawPixel+0x15c>
		return;
 800066a:	bf00      	nop

}
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bc90      	pop	{r4, r7}
 8000672:	4770      	bx	lr
 8000674:	20012cdc 	.word	0x20012cdc
 8000678:	20012ce0 	.word	0x20012ce0
 800067c:	200000c0 	.word	0x200000c0

08000680 <drawFastVLine>:
void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000680:	b490      	push	{r4, r7}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4604      	mov	r4, r0
 8000688:	4608      	mov	r0, r1
 800068a:	4611      	mov	r1, r2
 800068c:	461a      	mov	r2, r3
 800068e:	4623      	mov	r3, r4
 8000690:	80fb      	strh	r3, [r7, #6]
 8000692:	4603      	mov	r3, r0
 8000694:	80bb      	strh	r3, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
 800069a:	4613      	mov	r3, r2
 800069c:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) || (y >= _height))
 800069e:	4b67      	ldr	r3, [pc, #412]	; (800083c <drawFastVLine+0x1bc>)
 80006a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	f280 80c1 	bge.w	8000830 <drawFastVLine+0x1b0>
 80006ae:	4b64      	ldr	r3, [pc, #400]	; (8000840 <drawFastVLine+0x1c0>)
 80006b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	f280 80b9 	bge.w	8000830 <drawFastVLine+0x1b0>
		return;

	if ((y + h - 1) >= _height)
 80006be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006c6:	4413      	add	r3, r2
 80006c8:	3b01      	subs	r3, #1
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <drawFastVLine+0x1c0>)
 80006cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006d0:	4293      	cmp	r3, r2
 80006d2:	db07      	blt.n	80006e4 <drawFastVLine+0x64>
		h = _height - y;
 80006d4:	4b5a      	ldr	r3, [pc, #360]	; (8000840 <drawFastVLine+0x1c0>)
 80006d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < h; ++i){
 80006e4:	2300      	movs	r3, #0
 80006e6:	81fb      	strh	r3, [r7, #14]
 80006e8:	e09b      	b.n	8000822 <drawFastVLine+0x1a2>
		IMG_BUF_SET(x, y+i, color);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14a      	bne.n	800078c <drawFastVLine+0x10c>
 80006f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	441a      	add	r2, r3
 80006fe:	4613      	mov	r3, r2
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	4619      	mov	r1, r3
 8000708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800070c:	0fda      	lsrs	r2, r3, #31
 800070e:	4413      	add	r3, r2
 8000710:	105b      	asrs	r3, r3, #1
 8000712:	b218      	sxth	r0, r3
 8000714:	4603      	mov	r3, r0
 8000716:	440b      	add	r3, r1
 8000718:	4a4a      	ldr	r2, [pc, #296]	; (8000844 <drawFastVLine+0x1c4>)
 800071a:	5cd1      	ldrb	r1, [r2, r3]
 800071c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000720:	89fb      	ldrh	r3, [r7, #14]
 8000722:	441a      	add	r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	461a      	mov	r2, r3
 800072e:	4603      	mov	r3, r0
 8000730:	4413      	add	r3, r2
 8000732:	f001 020f 	and.w	r2, r1, #15
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	4a42      	ldr	r2, [pc, #264]	; (8000844 <drawFastVLine+0x1c4>)
 800073a:	54d1      	strb	r1, [r2, r3]
 800073c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	441a      	add	r2, r3
 8000744:	4613      	mov	r3, r2
 8000746:	011b      	lsls	r3, r3, #4
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000752:	0fda      	lsrs	r2, r3, #31
 8000754:	4413      	add	r3, r2
 8000756:	105b      	asrs	r3, r3, #1
 8000758:	b219      	sxth	r1, r3
 800075a:	460b      	mov	r3, r1
 800075c:	4403      	add	r3, r0
 800075e:	4a39      	ldr	r2, [pc, #228]	; (8000844 <drawFastVLine+0x1c4>)
 8000760:	5cd3      	ldrb	r3, [r2, r3]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	883b      	ldrh	r3, [r7, #0]
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	b25b      	sxtb	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b258      	sxtb	r0, r3
 800076e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	441a      	add	r2, r3
 8000776:	4613      	mov	r3, r2
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	461a      	mov	r2, r3
 8000780:	460b      	mov	r3, r1
 8000782:	4413      	add	r3, r2
 8000784:	b2c1      	uxtb	r1, r0
 8000786:	4a2f      	ldr	r2, [pc, #188]	; (8000844 <drawFastVLine+0x1c4>)
 8000788:	54d1      	strb	r1, [r2, r3]
 800078a:	e047      	b.n	800081c <drawFastVLine+0x19c>
 800078c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	441a      	add	r2, r3
 8000794:	4613      	mov	r3, r2
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4619      	mov	r1, r3
 800079e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a2:	0fda      	lsrs	r2, r3, #31
 80007a4:	4413      	add	r3, r2
 80007a6:	105b      	asrs	r3, r3, #1
 80007a8:	b218      	sxth	r0, r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	440b      	add	r3, r1
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <drawFastVLine+0x1c4>)
 80007b0:	5cd1      	ldrb	r1, [r2, r3]
 80007b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007b6:	89fb      	ldrh	r3, [r7, #14]
 80007b8:	441a      	add	r2, r3
 80007ba:	4613      	mov	r3, r2
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	1a9b      	subs	r3, r3, r2
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	461a      	mov	r2, r3
 80007c4:	4603      	mov	r3, r0
 80007c6:	4413      	add	r3, r2
 80007c8:	f021 020f 	bic.w	r2, r1, #15
 80007cc:	b2d1      	uxtb	r1, r2
 80007ce:	4a1d      	ldr	r2, [pc, #116]	; (8000844 <drawFastVLine+0x1c4>)
 80007d0:	54d1      	strb	r1, [r2, r3]
 80007d2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007d6:	89fb      	ldrh	r3, [r7, #14]
 80007d8:	441a      	add	r2, r3
 80007da:	4613      	mov	r3, r2
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e8:	0fda      	lsrs	r2, r3, #31
 80007ea:	4413      	add	r3, r2
 80007ec:	105b      	asrs	r3, r3, #1
 80007ee:	b21c      	sxth	r4, r3
 80007f0:	4623      	mov	r3, r4
 80007f2:	440b      	add	r3, r1
 80007f4:	4a13      	ldr	r2, [pc, #76]	; (8000844 <drawFastVLine+0x1c4>)
 80007f6:	5cd0      	ldrb	r0, [r2, r3]
 80007f8:	883b      	ldrh	r3, [r7, #0]
 80007fa:	b2d9      	uxtb	r1, r3
 80007fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	441a      	add	r2, r3
 8000804:	4613      	mov	r3, r2
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	1a9b      	subs	r3, r3, r2
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	461a      	mov	r2, r3
 800080e:	4623      	mov	r3, r4
 8000810:	4413      	add	r3, r2
 8000812:	ea40 0201 	orr.w	r2, r0, r1
 8000816:	b2d1      	uxtb	r1, r2
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <drawFastVLine+0x1c4>)
 800081a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < h; ++i){
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	3301      	adds	r3, #1
 8000820:	81fb      	strh	r3, [r7, #14]
 8000822:	89fa      	ldrh	r2, [r7, #14]
 8000824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000828:	429a      	cmp	r2, r3
 800082a:	f6ff af5e 	blt.w	80006ea <drawFastVLine+0x6a>
 800082e:	e000      	b.n	8000832 <drawFastVLine+0x1b2>
		return;
 8000830:	bf00      	nop
	//while (h--) {
	//	write16BitColor(color);
	//}
	//HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20012cdc 	.word	0x20012cdc
 8000840:	20012ce0 	.word	0x20012ce0
 8000844:	200000c0 	.word	0x200000c0

08000848 <drawFastHLine>:
void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000848:	b490      	push	{r4, r7}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4604      	mov	r4, r0
 8000850:	4608      	mov	r0, r1
 8000852:	4611      	mov	r1, r2
 8000854:	461a      	mov	r2, r3
 8000856:	4623      	mov	r3, r4
 8000858:	80fb      	strh	r3, [r7, #6]
 800085a:	4603      	mov	r3, r0
 800085c:	80bb      	strh	r3, [r7, #4]
 800085e:	460b      	mov	r3, r1
 8000860:	807b      	strh	r3, [r7, #2]
 8000862:	4613      	mov	r3, r2
 8000864:	803b      	strh	r3, [r7, #0]

	if ((x >= _width) || (y >= _height))
 8000866:	4b5e      	ldr	r3, [pc, #376]	; (80009e0 <drawFastHLine+0x198>)
 8000868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800086c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000870:	429a      	cmp	r2, r3
 8000872:	f280 80af 	bge.w	80009d4 <drawFastHLine+0x18c>
 8000876:	4b5b      	ldr	r3, [pc, #364]	; (80009e4 <drawFastHLine+0x19c>)
 8000878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800087c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	f280 80a7 	bge.w	80009d4 <drawFastHLine+0x18c>
		return;
	if ((x + w - 1) >= _width)
 8000886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800088a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800088e:	4413      	add	r3, r2
 8000890:	3b01      	subs	r3, #1
 8000892:	4a53      	ldr	r2, [pc, #332]	; (80009e0 <drawFastHLine+0x198>)
 8000894:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000898:	4293      	cmp	r3, r2
 800089a:	db07      	blt.n	80008ac <drawFastHLine+0x64>
		w = _width - x;
 800089c:	4b50      	ldr	r3, [pc, #320]	; (80009e0 <drawFastHLine+0x198>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	807b      	strh	r3, [r7, #2]

	for(uint16_t i = 0; i < w; ++i){
 80008ac:	2300      	movs	r3, #0
 80008ae:	81fb      	strh	r3, [r7, #14]
 80008b0:	e089      	b.n	80009c6 <drawFastHLine+0x17e>
			IMG_BUF_SET(x+i, y, color);
 80008b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	4413      	add	r3, r2
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d140      	bne.n	8000944 <drawFastHLine+0xfc>
 80008c2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80008c6:	4613      	mov	r3, r2
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008d4:	89fb      	ldrh	r3, [r7, #14]
 80008d6:	4413      	add	r3, r2
 80008d8:	0fda      	lsrs	r2, r3, #31
 80008da:	4413      	add	r3, r2
 80008dc:	105b      	asrs	r3, r3, #1
 80008de:	461a      	mov	r2, r3
 80008e0:	1853      	adds	r3, r2, r1
 80008e2:	4941      	ldr	r1, [pc, #260]	; (80009e8 <drawFastHLine+0x1a0>)
 80008e4:	5cc8      	ldrb	r0, [r1, r3]
 80008e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008ea:	460b      	mov	r3, r1
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	1a5b      	subs	r3, r3, r1
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	4413      	add	r3, r2
 80008f4:	f000 020f 	and.w	r2, r0, #15
 80008f8:	b2d1      	uxtb	r1, r2
 80008fa:	4a3b      	ldr	r2, [pc, #236]	; (80009e8 <drawFastHLine+0x1a0>)
 80008fc:	54d1      	strb	r1, [r2, r3]
 80008fe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000902:	4613      	mov	r3, r2
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	1a9b      	subs	r3, r3, r2
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	4619      	mov	r1, r3
 800090c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	4413      	add	r3, r2
 8000914:	0fda      	lsrs	r2, r3, #31
 8000916:	4413      	add	r3, r2
 8000918:	105b      	asrs	r3, r3, #1
 800091a:	461a      	mov	r2, r3
 800091c:	1853      	adds	r3, r2, r1
 800091e:	4932      	ldr	r1, [pc, #200]	; (80009e8 <drawFastHLine+0x1a0>)
 8000920:	5ccb      	ldrb	r3, [r1, r3]
 8000922:	b259      	sxtb	r1, r3
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	b25b      	sxtb	r3, r3
 800092a:	430b      	orrs	r3, r1
 800092c:	b258      	sxtb	r0, r3
 800092e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000932:	460b      	mov	r3, r1
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	1a5b      	subs	r3, r3, r1
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	4413      	add	r3, r2
 800093c:	b2c1      	uxtb	r1, r0
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <drawFastHLine+0x1a0>)
 8000940:	54d1      	strb	r1, [r2, r3]
 8000942:	e03d      	b.n	80009c0 <drawFastHLine+0x178>
 8000944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000948:	4613      	mov	r3, r2
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	1a9b      	subs	r3, r3, r2
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	4619      	mov	r1, r3
 8000952:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	4413      	add	r3, r2
 800095a:	0fda      	lsrs	r2, r3, #31
 800095c:	4413      	add	r3, r2
 800095e:	105b      	asrs	r3, r3, #1
 8000960:	461a      	mov	r2, r3
 8000962:	1853      	adds	r3, r2, r1
 8000964:	4920      	ldr	r1, [pc, #128]	; (80009e8 <drawFastHLine+0x1a0>)
 8000966:	5cc8      	ldrb	r0, [r1, r3]
 8000968:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	011b      	lsls	r3, r3, #4
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	011b      	lsls	r3, r3, #4
 8000974:	4413      	add	r3, r2
 8000976:	f020 020f 	bic.w	r2, r0, #15
 800097a:	b2d1      	uxtb	r1, r2
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <drawFastHLine+0x1a0>)
 800097e:	54d1      	strb	r1, [r2, r3]
 8000980:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000984:	4613      	mov	r3, r2
 8000986:	011b      	lsls	r3, r3, #4
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	4619      	mov	r1, r3
 800098e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	4413      	add	r3, r2
 8000996:	0fda      	lsrs	r2, r3, #31
 8000998:	4413      	add	r3, r2
 800099a:	105b      	asrs	r3, r3, #1
 800099c:	461a      	mov	r2, r3
 800099e:	1853      	adds	r3, r2, r1
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <drawFastHLine+0x1a0>)
 80009a2:	5ccc      	ldrb	r4, [r1, r3]
 80009a4:	883b      	ldrh	r3, [r7, #0]
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009ac:	460b      	mov	r3, r1
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4413      	add	r3, r2
 80009b6:	ea44 0200 	orr.w	r2, r4, r0
 80009ba:	b2d1      	uxtb	r1, r2
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <drawFastHLine+0x1a0>)
 80009be:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < w; ++i){
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	3301      	adds	r3, #1
 80009c4:	81fb      	strh	r3, [r7, #14]
 80009c6:	89fa      	ldrh	r2, [r7, #14]
 80009c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	f6ff af70 	blt.w	80008b2 <drawFastHLine+0x6a>
 80009d2:	e000      	b.n	80009d6 <drawFastHLine+0x18e>
		return;
 80009d4:	bf00      	nop
		}


}
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc90      	pop	{r4, r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20012cdc 	.word	0x20012cdc
 80009e4:	20012ce0 	.word	0x20012ce0
 80009e8:	200000c0 	.word	0x200000c0

080009ec <drawLine>:
void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
	 if (x0 == x1) {
 8000a0a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d11a      	bne.n	8000a4c <drawLine+0x60>
	    if (y0 > y1)
 8000a16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a1a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dd05      	ble.n	8000a2e <drawLine+0x42>
	      _swap_int16_t(y0, y1);
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	81bb      	strh	r3, [r7, #12]
 8000a26:	883b      	ldrh	r3, [r7, #0]
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	89bb      	ldrh	r3, [r7, #12]
 8000a2c:	803b      	strh	r3, [r7, #0]
	    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8000a2e:	883a      	ldrh	r2, [r7, #0]
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	8c3b      	ldrh	r3, [r7, #32]
 8000a3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a46:	f7ff fe1b 	bl	8000680 <drawFastVLine>

	    writeLine(x0, y0, x1, y1, color);

	  }

}
 8000a4a:	e02d      	b.n	8000aa8 <drawLine+0xbc>
	  } else if (y0 == y1) {
 8000a4c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a50:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d11a      	bne.n	8000a8e <drawLine+0xa2>
	    if (x0 > x1)
 8000a58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dd05      	ble.n	8000a70 <drawLine+0x84>
	      _swap_int16_t(x0, x1);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	81fb      	strh	r3, [r7, #14]
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	807b      	strh	r3, [r7, #2]
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000a70:	887a      	ldrh	r2, [r7, #2]
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	3301      	adds	r3, #1
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	8c3b      	ldrh	r3, [r7, #32]
 8000a80:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a84:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a88:	f7ff fede 	bl	8000848 <drawFastHLine>
}
 8000a8c:	e00c      	b.n	8000aa8 <drawLine+0xbc>
	    writeLine(x0, y0, x1, y1, color);
 8000a8e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a96:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a9a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a9e:	8c3b      	ldrh	r3, [r7, #32]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f000 f804 	bl	8000ab0 <writeLine>
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <writeLine>:
void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,uint16_t color) {
 8000ab0:	b490      	push	{r4, r7}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000ace:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ad2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000adc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000ae0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000ae4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae8:	1acb      	subs	r3, r1, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	429a      	cmp	r2, r3
 8000af2:	bfcc      	ite	gt
 8000af4:	2301      	movgt	r3, #1
 8000af6:	2300      	movle	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	837b      	strh	r3, [r7, #26]
  if (steep) {
 8000afc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d00b      	beq.n	8000b1c <writeLine+0x6c>
    _swap_int16_t(x0, y0);
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	833b      	strh	r3, [r7, #24]
 8000b08:	88bb      	ldrh	r3, [r7, #4]
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	8b3b      	ldrh	r3, [r7, #24]
 8000b0e:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	82fb      	strh	r3, [r7, #22]
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	807b      	strh	r3, [r7, #2]
 8000b18:	8afb      	ldrh	r3, [r7, #22]
 8000b1a:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000b1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dd0b      	ble.n	8000b40 <writeLine+0x90>
    _swap_int16_t(x0, x1);
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	82bb      	strh	r3, [r7, #20]
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	8abb      	ldrh	r3, [r7, #20]
 8000b32:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	827b      	strh	r3, [r7, #18]
 8000b38:	883b      	ldrh	r3, [r7, #0]
 8000b3a:	80bb      	strh	r3, [r7, #4]
 8000b3c:	8a7b      	ldrh	r3, [r7, #18]
 8000b3e:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8000b40:	887a      	ldrh	r2, [r7, #2]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000b4a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000b4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bfb8      	it	lt
 8000b58:	425b      	neglt	r3, r3
 8000b5a:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000b60:	0fda      	lsrs	r2, r3, #31
 8000b62:	4413      	add	r3, r2
 8000b64:	105b      	asrs	r3, r3, #1
 8000b66:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000b68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	da02      	bge.n	8000b7a <writeLine+0xca>
    ystep = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	83bb      	strh	r3, [r7, #28]
 8000b78:	e134      	b.n	8000de4 <writeLine+0x334>
  } else {
    ystep = -1;
 8000b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7e:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 8000b80:	e130      	b.n	8000de4 <writeLine+0x334>
    if (steep) {
 8000b82:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 808a 	beq.w	8000ca0 <writeLine+0x1f0>
      //drawPixel(y0, x0, color);
    	IMG_BUF_SET(y0, x0, color)
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d142      	bne.n	8000c1e <writeLine+0x16e>
 8000b98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000baa:	0fda      	lsrs	r2, r3, #31
 8000bac:	4413      	add	r3, r2
 8000bae:	105b      	asrs	r3, r3, #1
 8000bb0:	b218      	sxth	r0, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	440b      	add	r3, r1
 8000bb6:	4a91      	ldr	r2, [pc, #580]	; (8000dfc <writeLine+0x34c>)
 8000bb8:	5cd1      	ldrb	r1, [r2, r3]
 8000bba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	1a9b      	subs	r3, r3, r2
 8000bc4:	011b      	lsls	r3, r3, #4
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4413      	add	r3, r2
 8000bcc:	f001 020f 	and.w	r2, r1, #15
 8000bd0:	b2d1      	uxtb	r1, r2
 8000bd2:	4a8a      	ldr	r2, [pc, #552]	; (8000dfc <writeLine+0x34c>)
 8000bd4:	54d1      	strb	r1, [r2, r3]
 8000bd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000be8:	0fda      	lsrs	r2, r3, #31
 8000bea:	4413      	add	r3, r2
 8000bec:	105b      	asrs	r3, r3, #1
 8000bee:	b219      	sxth	r1, r3
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	4403      	add	r3, r0
 8000bf4:	4a81      	ldr	r2, [pc, #516]	; (8000dfc <writeLine+0x34c>)
 8000bf6:	5cd3      	ldrb	r3, [r2, r3]
 8000bf8:	b25a      	sxtb	r2, r3
 8000bfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b258      	sxtb	r0, r3
 8000c04:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	1a9b      	subs	r3, r3, r2
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	461a      	mov	r2, r3
 8000c12:	460b      	mov	r3, r1
 8000c14:	4413      	add	r3, r2
 8000c16:	b2c1      	uxtb	r1, r0
 8000c18:	4a78      	ldr	r2, [pc, #480]	; (8000dfc <writeLine+0x34c>)
 8000c1a:	54d1      	strb	r1, [r2, r3]
 8000c1c:	e0c9      	b.n	8000db2 <writeLine+0x302>
 8000c1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c22:	4613      	mov	r3, r2
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	1a9b      	subs	r3, r3, r2
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c30:	0fda      	lsrs	r2, r3, #31
 8000c32:	4413      	add	r3, r2
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	b218      	sxth	r0, r3
 8000c38:	4603      	mov	r3, r0
 8000c3a:	440b      	add	r3, r1
 8000c3c:	4a6f      	ldr	r2, [pc, #444]	; (8000dfc <writeLine+0x34c>)
 8000c3e:	5cd1      	ldrb	r1, [r2, r3]
 8000c40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c44:	4613      	mov	r3, r2
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	011b      	lsls	r3, r3, #4
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4413      	add	r3, r2
 8000c52:	f021 020f 	bic.w	r2, r1, #15
 8000c56:	b2d1      	uxtb	r1, r2
 8000c58:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <writeLine+0x34c>)
 8000c5a:	54d1      	strb	r1, [r2, r3]
 8000c5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c60:	4613      	mov	r3, r2
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	1a9b      	subs	r3, r3, r2
 8000c66:	011b      	lsls	r3, r3, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c6e:	0fda      	lsrs	r2, r3, #31
 8000c70:	4413      	add	r3, r2
 8000c72:	105b      	asrs	r3, r3, #1
 8000c74:	b21c      	sxth	r4, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	440b      	add	r3, r1
 8000c7a:	4a60      	ldr	r2, [pc, #384]	; (8000dfc <writeLine+0x34c>)
 8000c7c:	5cd0      	ldrb	r0, [r2, r3]
 8000c7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c80:	b2d9      	uxtb	r1, r3
 8000c82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c86:	4613      	mov	r3, r2
 8000c88:	011b      	lsls	r3, r3, #4
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4623      	mov	r3, r4
 8000c92:	4413      	add	r3, r2
 8000c94:	ea40 0201 	orr.w	r2, r0, r1
 8000c98:	b2d1      	uxtb	r1, r2
 8000c9a:	4a58      	ldr	r2, [pc, #352]	; (8000dfc <writeLine+0x34c>)
 8000c9c:	54d1      	strb	r1, [r2, r3]
 8000c9e:	e088      	b.n	8000db2 <writeLine+0x302>
    } else {
      //drawPixel(x0, y0, color);
    	IMG_BUF_SET(x0, y0, color)
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d142      	bne.n	8000d32 <writeLine+0x282>
 8000cac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cbe:	0fda      	lsrs	r2, r3, #31
 8000cc0:	4413      	add	r3, r2
 8000cc2:	105b      	asrs	r3, r3, #1
 8000cc4:	b218      	sxth	r0, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	440b      	add	r3, r1
 8000cca:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <writeLine+0x34c>)
 8000ccc:	5cd1      	ldrb	r1, [r2, r3]
 8000cce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4413      	add	r3, r2
 8000ce0:	f001 020f 	and.w	r2, r1, #15
 8000ce4:	b2d1      	uxtb	r1, r2
 8000ce6:	4a45      	ldr	r2, [pc, #276]	; (8000dfc <writeLine+0x34c>)
 8000ce8:	54d1      	strb	r1, [r2, r3]
 8000cea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfc:	0fda      	lsrs	r2, r3, #31
 8000cfe:	4413      	add	r3, r2
 8000d00:	105b      	asrs	r3, r3, #1
 8000d02:	b219      	sxth	r1, r3
 8000d04:	460b      	mov	r3, r1
 8000d06:	4403      	add	r3, r0
 8000d08:	4a3c      	ldr	r2, [pc, #240]	; (8000dfc <writeLine+0x34c>)
 8000d0a:	5cd3      	ldrb	r3, [r2, r3]
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b258      	sxtb	r0, r3
 8000d18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	1a9b      	subs	r3, r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	461a      	mov	r2, r3
 8000d26:	460b      	mov	r3, r1
 8000d28:	4413      	add	r3, r2
 8000d2a:	b2c1      	uxtb	r1, r0
 8000d2c:	4a33      	ldr	r2, [pc, #204]	; (8000dfc <writeLine+0x34c>)
 8000d2e:	54d1      	strb	r1, [r2, r3]
 8000d30:	e03f      	b.n	8000db2 <writeLine+0x302>
 8000d32:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d44:	0fda      	lsrs	r2, r3, #31
 8000d46:	4413      	add	r3, r2
 8000d48:	105b      	asrs	r3, r3, #1
 8000d4a:	b218      	sxth	r0, r3
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	440b      	add	r3, r1
 8000d50:	4a2a      	ldr	r2, [pc, #168]	; (8000dfc <writeLine+0x34c>)
 8000d52:	5cd1      	ldrb	r1, [r2, r3]
 8000d54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	461a      	mov	r2, r3
 8000d62:	4603      	mov	r3, r0
 8000d64:	4413      	add	r3, r2
 8000d66:	f021 020f 	bic.w	r2, r1, #15
 8000d6a:	b2d1      	uxtb	r1, r2
 8000d6c:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <writeLine+0x34c>)
 8000d6e:	54d1      	strb	r1, [r2, r3]
 8000d70:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d82:	0fda      	lsrs	r2, r3, #31
 8000d84:	4413      	add	r3, r2
 8000d86:	105b      	asrs	r3, r3, #1
 8000d88:	b21c      	sxth	r4, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	440b      	add	r3, r1
 8000d8e:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <writeLine+0x34c>)
 8000d90:	5cd0      	ldrb	r0, [r2, r3]
 8000d92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	461a      	mov	r2, r3
 8000da4:	4623      	mov	r3, r4
 8000da6:	4413      	add	r3, r2
 8000da8:	ea40 0201 	orr.w	r2, r0, r1
 8000dac:	b2d1      	uxtb	r1, r2
 8000dae:	4a13      	ldr	r2, [pc, #76]	; (8000dfc <writeLine+0x34c>)
 8000db0:	54d1      	strb	r1, [r2, r3]
    }
    err -= dy;
 8000db2:	8bfa      	ldrh	r2, [r7, #30]
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 8000dbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	da09      	bge.n	8000dd8 <writeLine+0x328>
      y0 += ystep;
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	8bbb      	ldrh	r3, [r7, #28]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8000dce:	8bfa      	ldrh	r2, [r7, #30]
 8000dd0:	8a3b      	ldrh	r3, [r7, #16]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 8000dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	80fb      	strh	r3, [r7, #6]
 8000de4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000de8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f77f aec8 	ble.w	8000b82 <writeLine+0xd2>
    }
  }
}
 8000df2:	bf00      	nop
 8000df4:	3720      	adds	r7, #32
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc90      	pop	{r4, r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	200000c0 	.word	0x200000c0

08000e00 <fillRect>:
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000e00:	b490      	push	{r4, r7}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4604      	mov	r4, r0
 8000e08:	4608      	mov	r0, r1
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4623      	mov	r3, r4
 8000e10:	80fb      	strh	r3, [r7, #6]
 8000e12:	4603      	mov	r3, r0
 8000e14:	80bb      	strh	r3, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 8000e1e:	4b7e      	ldr	r3, [pc, #504]	; (8001018 <fillRect+0x218>)
 8000e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f280 80ef 	bge.w	800100c <fillRect+0x20c>
 8000e2e:	4b7b      	ldr	r3, [pc, #492]	; (800101c <fillRect+0x21c>)
 8000e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e34:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f280 80e7 	bge.w	800100c <fillRect+0x20c>
		return;
	if ((x + w - 1) >= _width)
 8000e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e46:	4413      	add	r3, r2
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	4a73      	ldr	r2, [pc, #460]	; (8001018 <fillRect+0x218>)
 8000e4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e50:	4293      	cmp	r3, r2
 8000e52:	db07      	blt.n	8000e64 <fillRect+0x64>
		w = _width - x;
 8000e54:	4b70      	ldr	r3, [pc, #448]	; (8001018 <fillRect+0x218>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 8000e64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	4a6a      	ldr	r2, [pc, #424]	; (800101c <fillRect+0x21c>)
 8000e72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	db07      	blt.n	8000e8a <fillRect+0x8a>
		h = _height - y;
 8000e7a:	4b68      	ldr	r3, [pc, #416]	; (800101c <fillRect+0x21c>)
 8000e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	88bb      	ldrh	r3, [r7, #4]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	803b      	strh	r3, [r7, #0]


	for(int16_t i = 0; i < w; ++i){
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	81fb      	strh	r3, [r7, #14]
 8000e8e:	e0b5      	b.n	8000ffc <fillRect+0x1fc>
		for(int16_t j = 0; j < h; ++j){
 8000e90:	2300      	movs	r3, #0
 8000e92:	81bb      	strh	r3, [r7, #12]
 8000e94:	e0a7      	b.n	8000fe6 <fillRect+0x1e6>
			IMG_BUF_SET(x+i, y+j, color);
 8000e96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14e      	bne.n	8000f46 <fillRect+0x146>
 8000ea8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb0:	441a      	add	r2, r3
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	011b      	lsls	r3, r3, #4
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	011b      	lsls	r3, r3, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	0fda      	lsrs	r2, r3, #31
 8000ec8:	4413      	add	r3, r2
 8000eca:	105b      	asrs	r3, r3, #1
 8000ecc:	461a      	mov	r2, r3
 8000ece:	1853      	adds	r3, r2, r1
 8000ed0:	4953      	ldr	r1, [pc, #332]	; (8001020 <fillRect+0x220>)
 8000ed2:	5cc8      	ldrb	r0, [r1, r3]
 8000ed4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ed8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000edc:	4419      	add	r1, r3
 8000ede:	460b      	mov	r3, r1
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	1a5b      	subs	r3, r3, r1
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f000 020f 	and.w	r2, r0, #15
 8000eec:	b2d1      	uxtb	r1, r2
 8000eee:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <fillRect+0x220>)
 8000ef0:	54d1      	strb	r1, [r2, r3]
 8000ef2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ef6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000efa:	441a      	add	r2, r3
 8000efc:	4613      	mov	r3, r2
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0e:	4413      	add	r3, r2
 8000f10:	0fda      	lsrs	r2, r3, #31
 8000f12:	4413      	add	r3, r2
 8000f14:	105b      	asrs	r3, r3, #1
 8000f16:	461a      	mov	r2, r3
 8000f18:	1853      	adds	r3, r2, r1
 8000f1a:	4941      	ldr	r1, [pc, #260]	; (8001020 <fillRect+0x220>)
 8000f1c:	5ccb      	ldrb	r3, [r1, r3]
 8000f1e:	b259      	sxtb	r1, r3
 8000f20:	8b3b      	ldrh	r3, [r7, #24]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	430b      	orrs	r3, r1
 8000f28:	b258      	sxtb	r0, r3
 8000f2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f32:	4419      	add	r1, r3
 8000f34:	460b      	mov	r3, r1
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2c1      	uxtb	r1, r0
 8000f40:	4a37      	ldr	r2, [pc, #220]	; (8001020 <fillRect+0x220>)
 8000f42:	54d1      	strb	r1, [r2, r3]
 8000f44:	e04b      	b.n	8000fde <fillRect+0x1de>
 8000f46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f4e:	441a      	add	r2, r3
 8000f50:	4613      	mov	r3, r2
 8000f52:	011b      	lsls	r3, r3, #4
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f62:	4413      	add	r3, r2
 8000f64:	0fda      	lsrs	r2, r3, #31
 8000f66:	4413      	add	r3, r2
 8000f68:	105b      	asrs	r3, r3, #1
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	1853      	adds	r3, r2, r1
 8000f6e:	492c      	ldr	r1, [pc, #176]	; (8001020 <fillRect+0x220>)
 8000f70:	5cc8      	ldrb	r0, [r1, r3]
 8000f72:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f7a:	4419      	add	r1, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	011b      	lsls	r3, r3, #4
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4413      	add	r3, r2
 8000f86:	f020 020f 	bic.w	r2, r0, #15
 8000f8a:	b2d1      	uxtb	r1, r2
 8000f8c:	4a24      	ldr	r2, [pc, #144]	; (8001020 <fillRect+0x220>)
 8000f8e:	54d1      	strb	r1, [r2, r3]
 8000f90:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f98:	441a      	add	r2, r3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fac:	4413      	add	r3, r2
 8000fae:	0fda      	lsrs	r2, r3, #31
 8000fb0:	4413      	add	r3, r2
 8000fb2:	105b      	asrs	r3, r3, #1
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	1853      	adds	r3, r2, r1
 8000fb8:	4919      	ldr	r1, [pc, #100]	; (8001020 <fillRect+0x220>)
 8000fba:	5ccc      	ldrb	r4, [r1, r3]
 8000fbc:	8b3b      	ldrh	r3, [r7, #24]
 8000fbe:	b2d8      	uxtb	r0, r3
 8000fc0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fc8:	4419      	add	r1, r3
 8000fca:	460b      	mov	r3, r1
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	1a5b      	subs	r3, r3, r1
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4413      	add	r3, r2
 8000fd4:	ea44 0200 	orr.w	r2, r4, r0
 8000fd8:	b2d1      	uxtb	r1, r2
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <fillRect+0x220>)
 8000fdc:	54d1      	strb	r1, [r2, r3]
		for(int16_t j = 0; j < h; ++j){
 8000fde:	89bb      	ldrh	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	f6ff af51 	blt.w	8000e96 <fillRect+0x96>
	for(int16_t i = 0; i < w; ++i){
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	81fb      	strh	r3, [r7, #14]
 8000ffc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001004:	429a      	cmp	r2, r3
 8001006:	f6ff af43 	blt.w	8000e90 <fillRect+0x90>
 800100a:	e000      	b.n	800100e <fillRect+0x20e>
		return;
 800100c:	bf00      	nop
		}
	}


}
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bc90      	pop	{r4, r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20012cdc 	.word	0x20012cdc
 800101c:	20012ce0 	.word	0x20012ce0
 8001020:	200000c0 	.word	0x200000c0

08001024 <setRotation>:
void setRotation(uint8_t r)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 800102e:	2036      	movs	r0, #54	; 0x36
 8001030:	f000 f850 	bl	80010d4 <writecommand>
	rotation = r % 4; // can't be higher than 3
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <setRotation+0xa4>)
 800103e:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <setRotation+0xa4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d83b      	bhi.n	80010c0 <setRotation+0x9c>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <setRotation+0x2c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001061 	.word	0x08001061
 8001054:	08001079 	.word	0x08001079
 8001058:	08001091 	.word	0x08001091
 800105c:	080010a9 	.word	0x080010a9
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8001060:	2048      	movs	r0, #72	; 0x48
 8001062:	f000 f85b 	bl	800111c <writedata>
		_width = ILI9488_TFTWIDTH;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <setRotation+0xa8>)
 8001068:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800106c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <setRotation+0xac>)
 8001070:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001074:	801a      	strh	r2, [r3, #0]
		break;
 8001076:	e023      	b.n	80010c0 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f000 f84f 	bl	800111c <writedata>
		_width = ILI9488_TFTHEIGHT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <setRotation+0xa8>)
 8001080:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001084:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <setRotation+0xac>)
 8001088:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800108c:	801a      	strh	r2, [r3, #0]
		break;
 800108e:	e017      	b.n	80010c0 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001090:	2088      	movs	r0, #136	; 0x88
 8001092:	f000 f843 	bl	800111c <writedata>
		_width = ILI9488_TFTWIDTH;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <setRotation+0xa8>)
 8001098:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800109c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <setRotation+0xac>)
 80010a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010a4:	801a      	strh	r2, [r3, #0]
		break;
 80010a6:	e00b      	b.n	80010c0 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80010a8:	20e8      	movs	r0, #232	; 0xe8
 80010aa:	f000 f837 	bl	800111c <writedata>
		_width = ILI9488_TFTHEIGHT;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <setRotation+0xa8>)
 80010b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80010b4:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <setRotation+0xac>)
 80010b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010bc:	801a      	strh	r2, [r3, #0]
		break;
 80010be:	bf00      	nop
	}

}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20012cd8 	.word	0x20012cd8
 80010cc:	20012cdc 	.word	0x20012cdc
 80010d0:	20012ce0 	.word	0x20012ce0

080010d4 <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2110      	movs	r1, #16
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <writecommand+0x40>)
 80010e4:	f003 f968 	bl	80043b8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <writecommand+0x40>)
 80010f0:	f003 f962 	bl	80043b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	2301      	movs	r3, #1
 80010f8:	2201      	movs	r2, #1
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <writecommand+0x44>)
 80010fc:	f004 fcdd 	bl	8005aba <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <writecommand+0x40>)
 8001108:	f003 f956 	bl	80043b8 <HAL_GPIO_WritePin>

}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	48000800 	.word	0x48000800
 8001118:	20012df8 	.word	0x20012df8

0800111c <writedata>:
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);


}
void writedata(uint8_t d)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2110      	movs	r1, #16
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <writedata+0x40>)
 800112c:	f003 f944 	bl	80043b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <writedata+0x40>)
 8001138:	f003 f93e 	bl	80043b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 800113c:	1df9      	adds	r1, r7, #7
 800113e:	2301      	movs	r3, #1
 8001140:	2201      	movs	r2, #1
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <writedata+0x44>)
 8001144:	f004 fcb9 	bl	8005aba <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114e:	4803      	ldr	r0, [pc, #12]	; (800115c <writedata+0x40>)
 8001150:	f003 f932 	bl	80043b8 <HAL_GPIO_WritePin>

}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	48000800 	.word	0x48000800
 8001160:	20012df8 	.word	0x20012df8

08001164 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	466b      	mov	r3, sp
 8001172:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001180:	4293      	cmp	r3, r2
 8001182:	d802      	bhi.n	800118a <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
 8001188:	e002      	b.n	8001190 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 800118a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	2110      	movs	r1, #16
 8001194:	4867      	ldr	r0, [pc, #412]	; (8001334 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001196:	f003 f90f 	bl	80043b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	4864      	ldr	r0, [pc, #400]	; (8001334 <ILI9341_Draw_Colour_Burst+0x1d0>)
 80011a2:	f003 f909 	bl	80043b8 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	0adb      	lsrs	r3, r3, #11
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	115b      	asrs	r3, r3, #5
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 80011ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80011ce:	4613      	mov	r3, r2
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	4a58      	ldr	r2, [pc, #352]	; (8001338 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80011d6:	fb82 1203 	smull	r1, r2, r2, r3
 80011da:	441a      	add	r2, r3
 80011dc:	1112      	asrs	r2, r2, #4
 80011de:	17db      	asrs	r3, r3, #31
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 80011e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80011ea:	4613      	mov	r3, r2
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <ILI9341_Draw_Colour_Burst+0x1d8>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	441a      	add	r2, r3
 80011f8:	1152      	asrs	r2, r2, #5
 80011fa:	17db      	asrs	r3, r3, #31
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 8001202:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001206:	4613      	mov	r3, r2
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <ILI9341_Draw_Colour_Burst+0x1d4>)
 800120e:	fb82 1203 	smull	r1, r2, r2, r3
 8001212:	441a      	add	r2, r3
 8001214:	1112      	asrs	r2, r2, #4
 8001216:	17db      	asrs	r3, r3, #31
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 800121e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001220:	4603      	mov	r3, r0
 8001222:	3b01      	subs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	4601      	mov	r1, r0
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	f04f 0400 	mov.w	r4, #0
 8001234:	00d4      	lsls	r4, r2, #3
 8001236:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800123a:	00cb      	lsls	r3, r1, #3
 800123c:	4601      	mov	r1, r0
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	f04f 0400 	mov.w	r4, #0
 800124a:	00d4      	lsls	r4, r2, #3
 800124c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001250:	00cb      	lsls	r3, r1, #3
 8001252:	1dc3      	adds	r3, r0, #7
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	ebad 0d03 	sub.w	sp, sp, r3
 800125c:	466b      	mov	r3, sp
 800125e:	3300      	adds	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
 8001266:	e014      	b.n	8001292 <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	4413      	add	r3, r2
 800126e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001272:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	3301      	adds	r3, #1
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800127e:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 8001280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800128a:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	3303      	adds	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
 8001292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e6      	bcc.n	8001268 <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ac:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d018      	beq.n	80012f8 <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012ca:	e011      	b.n	80012f0 <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d6:	b292      	uxth	r2, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	481a      	ldr	r0, [pc, #104]	; (8001344 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80012dc:	f004 fd5c 	bl	8005d98 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 80012e0:	bf00      	nop
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0fb      	beq.n	80012e2 <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80012ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ec:	3301      	adds	r3, #1
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3e9      	bcc.n	80012cc <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00e      	beq.n	800131c <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	b292      	uxth	r2, r2
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <ILI9341_Draw_Colour_Burst+0x1e0>)
 800130e:	f004 fd43 	bl	8005d98 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 8001312:	bf00      	nop
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0fb      	beq.n	8001314 <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001322:	4804      	ldr	r0, [pc, #16]	; (8001334 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8001324:	f003 f848 	bl	80043b8 <HAL_GPIO_WritePin>
 8001328:	46ad      	mov	sp, r5
}
 800132a:	bf00      	nop
 800132c:	3730      	adds	r7, #48	; 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bdb0      	pop	{r4, r5, r7, pc}
 8001332:	bf00      	nop
 8001334:	48000800 	.word	0x48000800
 8001338:	84210843 	.word	0x84210843
 800133c:	82082083 	.word	0x82082083
 8001340:	20000031 	.word	0x20000031
 8001344:	20012df8 	.word	0x20012df8

08001348 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 8001352:	f240 133f 	movw	r3, #319	; 0x13f
 8001356:	f240 12df 	movw	r2, #479	; 0x1df
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff f871 	bl	8000444 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fefb 	bl	8001164 <ILI9341_Draw_Colour_Burst>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001376:	b590      	push	{r4, r7, lr}
 8001378:	b08b      	sub	sp, #44	; 0x2c
 800137a:	af02      	add	r7, sp, #8
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	4603      	mov	r3, r0
 8001382:	81fb      	strh	r3, [r7, #14]
 8001384:	460b      	mov	r3, r1
 8001386:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	777b      	strb	r3, [r7, #29]
 8001398:	2300      	movs	r3, #0
 800139a:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80013a0:	2300      	movs	r3, #0
 80013a2:	763b      	strb	r3, [r7, #24]
 80013a4:	e09b      	b.n	80014de <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	767b      	strb	r3, [r7, #25]
 80013aa:	e056      	b.n	800145a <LCD_Char+0xe4>
		{
			if (bit == 0)
 80013ac:	7f3b      	ldrb	r3, [r7, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80013b2:	8bfb      	ldrh	r3, [r7, #30]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	83fa      	strh	r2, [r7, #30]
 80013b8:	461a      	mov	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 80013c6:	7f7a      	ldrb	r2, [r7, #29]
 80013c8:	7f3b      	ldrb	r3, [r7, #28]
 80013ca:	4013      	ands	r3, r2
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <LCD_Char+0x64>
 80013d2:	8b7b      	ldrh	r3, [r7, #26]
 80013d4:	3301      	adds	r3, #1
 80013d6:	837b      	strh	r3, [r7, #26]
 80013d8:	e039      	b.n	800144e <LCD_Char+0xd8>
			else if (set_pixels > 0)
 80013da:	8b7b      	ldrh	r3, [r7, #26]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d036      	beq.n	800144e <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80013e6:	461a      	mov	r2, r3
 80013e8:	7e7b      	ldrb	r3, [r7, #25]
 80013ea:	441a      	add	r2, r3
 80013ec:	8b7b      	ldrh	r3, [r7, #26]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	fb12 f303 	smulbb	r3, r2, r3
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	b218      	sxth	r0, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800140c:	461a      	mov	r2, r3
 800140e:	7e3b      	ldrb	r3, [r7, #24]
 8001410:	4413      	add	r3, r2
 8001412:	b29a      	uxth	r2, r3
 8001414:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001418:	b29b      	uxth	r3, r3
 800141a:	fb12 f303 	smulbb	r3, r2, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	89bb      	ldrh	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	b29b      	uxth	r3, r3
 8001426:	b219      	sxth	r1, r3
 8001428:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800142c:	b29b      	uxth	r3, r3
 800142e:	8b7a      	ldrh	r2, [r7, #26]
 8001430:	fb12 f303 	smulbb	r3, r2, r3
 8001434:	b29b      	uxth	r3, r3
 8001436:	b21a      	sxth	r2, r3
 8001438:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800143c:	b21c      	sxth	r4, r3
 800143e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001440:	b29b      	uxth	r3, r3
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4623      	mov	r3, r4
 8001446:	f7ff fcdb 	bl	8000e00 <fillRect>
				set_pixels = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 800144e:	7f3b      	ldrb	r3, [r7, #28]
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001454:	7e7b      	ldrb	r3, [r7, #25]
 8001456:	3301      	adds	r3, #1
 8001458:	767b      	strb	r3, [r7, #25]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	789b      	ldrb	r3, [r3, #2]
 800145e:	7e7a      	ldrb	r2, [r7, #25]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3a3      	bcc.n	80013ac <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001464:	8b7b      	ldrh	r3, [r7, #26]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001470:	461a      	mov	r2, r3
 8001472:	7e7b      	ldrb	r3, [r7, #25]
 8001474:	441a      	add	r2, r3
 8001476:	8b7b      	ldrh	r3, [r7, #26]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	b29a      	uxth	r2, r3
 800147c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001480:	b29b      	uxth	r3, r3
 8001482:	fb12 f303 	smulbb	r3, r2, r3
 8001486:	b29a      	uxth	r2, r3
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	4413      	add	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	b218      	sxth	r0, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001496:	461a      	mov	r2, r3
 8001498:	7e3b      	ldrb	r3, [r7, #24]
 800149a:	4413      	add	r3, r2
 800149c:	b29a      	uxth	r2, r3
 800149e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	fb12 f303 	smulbb	r3, r2, r3
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	89bb      	ldrh	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b219      	sxth	r1, r3
 80014b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8b7a      	ldrh	r2, [r7, #26]
 80014ba:	fb12 f303 	smulbb	r3, r2, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014c6:	b21c      	sxth	r4, r3
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4623      	mov	r3, r4
 80014d0:	f7ff fc96 	bl	8000e00 <fillRect>
			set_pixels = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80014d8:	7e3b      	ldrb	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	763b      	strb	r3, [r7, #24]
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	7e3a      	ldrb	r2, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f4ff af5e 	bcc.w	80013a6 <LCD_Char+0x30>
		}
	}
}
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}

080014f2 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80014f2:	b590      	push	{r4, r7, lr}
 80014f4:	b08f      	sub	sp, #60	; 0x3c
 80014f6:	af02      	add	r7, sp, #8
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4603      	mov	r3, r0
 80014fe:	81fb      	strh	r3, [r7, #14]
 8001500:	460b      	mov	r3, r1
 8001502:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001504:	89fb      	ldrh	r3, [r7, #14]
 8001506:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	220c      	movs	r2, #12
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	f006 f823 	bl	8007560 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 800151a:	2300      	movs	r3, #0
 800151c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800151e:	e056      	b.n	80015ce <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001520:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 800152c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001530:	2b0a      	cmp	r3, #10
 8001532:	d10f      	bne.n	8001554 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800153c:	b29a      	uxth	r2, r3
 800153e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001542:	b29b      	uxth	r3, r3
 8001544:	fb12 f303 	smulbb	r3, r2, r3
 8001548:	b29a      	uxth	r2, r3
 800154a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001552:	e039      	b.n	80015c8 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001554:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001558:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800155c:	429a      	cmp	r2, r3
 800155e:	d333      	bcc.n	80015c8 <LCD_Font+0xd6>
 8001560:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001564:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001568:	429a      	cmp	r2, r3
 800156a:	d82d      	bhi.n	80015c8 <LCD_Font+0xd6>
 800156c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001570:	2b0d      	cmp	r3, #13
 8001572:	d029      	beq.n	80015c8 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001574:	6a3a      	ldr	r2, [r7, #32]
 8001576:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800157a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800157e:	1a5b      	subs	r3, r3, r1
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2208      	movs	r2, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f005 ffe8 	bl	8007560 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001590:	f107 041c 	add.w	r4, r7, #28
 8001594:	f107 0214 	add.w	r2, r7, #20
 8001598:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800159c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80015a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4623      	mov	r3, r4
 80015ac:	f7ff fee3 	bl	8001376 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80015b0:	7e3b      	ldrb	r3, [r7, #24]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	fb12 f303 	smulbb	r3, r2, r3
 80015be:	b29a      	uxth	r2, r3
 80015c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80015c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015ca:	3301      	adds	r3, #1
 80015cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80015ce:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	f7fe fdfd 	bl	80001d0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	429c      	cmp	r4, r3
 80015da:	d3a1      	bcc.n	8001520 <LCD_Font+0x2e>
		}
	}
}
 80015dc:	bf00      	nop
 80015de:	3734      	adds	r7, #52	; 0x34
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}

080015e4 <imageRender>:
	{0xFF, 0, 0xFF},
	{0xFF, 0x55, 0xFF},
	{0xFF, 0xFF, 0xFF}
};

void imageRender(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
 80015ea:	af00      	add	r7, sp, #0

	setAddrWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80015ec:	f240 133f 	movw	r3, #319	; 0x13f
 80015f0:	f240 12df 	movw	r2, #479	; 0x1df
 80015f4:	2100      	movs	r1, #0
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7fe ff24 	bl	8000444 <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2110      	movs	r1, #16
 8001600:	4873      	ldr	r0, [pc, #460]	; (80017d0 <imageRender+0x1ec>)
 8001602:	f002 fed9 	bl	80043b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	4870      	ldr	r0, [pc, #448]	; (80017d0 <imageRender+0x1ec>)
 800160e:	f002 fed3 	bl	80043b8 <HAL_GPIO_WritePin>

	uint8_t linebuff[LCD_WIDTH * 3 + 1];
	for (uint16_t i = 0; i < LCD_HEIGHT; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	f8a7 35a6 	strh.w	r3, [r7, #1446]	; 0x5a6
 8001618:	e0c8      	b.n	80017ac <imageRender+0x1c8>
		for (uint16_t j = 0; j < LCD_WIDTH/2; j++) {
 800161a:	2300      	movs	r3, #0
 800161c:	f8a7 35a4 	strh.w	r3, [r7, #1444]	; 0x5a4
 8001620:	e0b3      	b.n	800178a <imageRender+0x1a6>
			linebuff[pixcount] = (((color & 0x07E0) >> 5) * 255)
					/ 63;
			pixcount++;
			linebuff[pixcount] = ((color & 0x001F) * 255) / 31;
			pixcount++;*/
			uint8_t c1 = IMG_BUFF_GET(2*j, i);
 8001622:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	4619      	mov	r1, r3
 8001630:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	0fda      	lsrs	r2, r3, #31
 8001638:	4413      	add	r3, r2
 800163a:	105b      	asrs	r3, r3, #1
 800163c:	440b      	add	r3, r1
 800163e:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <imageRender+0x1f0>)
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f887 35a3 	strb.w	r3, [r7, #1443]	; 0x5a3
			uint8_t c2 = IMG_BUFF_GET(2*j + 1, i);
 8001648:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	3301      	adds	r3, #1
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d113      	bne.n	8001680 <imageRender+0x9c>
 8001658:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4619      	mov	r1, r3
 8001666:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	3301      	adds	r3, #1
 800166e:	0fda      	lsrs	r2, r3, #31
 8001670:	4413      	add	r3, r2
 8001672:	105b      	asrs	r3, r3, #1
 8001674:	440b      	add	r3, r1
 8001676:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <imageRender+0x1f0>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e013      	b.n	80016a8 <imageRender+0xc4>
 8001680:	f8b7 25a6 	ldrh.w	r2, [r7, #1446]	; 0x5a6
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4619      	mov	r1, r3
 800168e:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	3301      	adds	r3, #1
 8001696:	0fda      	lsrs	r2, r3, #31
 8001698:	4413      	add	r3, r2
 800169a:	105b      	asrs	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <imageRender+0x1f0>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f887 35a2 	strb.w	r3, [r7, #1442]	; 0x5a2
			linebuff[2*3*j + 0 + 0] = colors[c1][0];
 80016ac:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 80016b0:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 80016b4:	460b      	mov	r3, r1
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	4946      	ldr	r1, [pc, #280]	; (80017d8 <imageRender+0x1f4>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4413      	add	r3, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	781a      	ldrb	r2, [r3, #0]
 80016ca:	463b      	mov	r3, r7
 80016cc:	541a      	strb	r2, [r3, r0]
			linebuff[2*3*j + 0 + 1] = colors[c1][1];
 80016ce:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 80016d2:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 80016d6:	460b      	mov	r3, r1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	440b      	add	r3, r1
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	1c59      	adds	r1, r3, #1
 80016e0:	483d      	ldr	r0, [pc, #244]	; (80017d8 <imageRender+0x1f4>)
 80016e2:	4613      	mov	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	4403      	add	r3, r0
 80016ea:	3301      	adds	r3, #1
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	463b      	mov	r3, r7
 80016f0:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 0 + 2] = colors[c1][2];
 80016f2:	f897 25a3 	ldrb.w	r2, [r7, #1443]	; 0x5a3
 80016f6:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 80016fa:	460b      	mov	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	440b      	add	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	1c99      	adds	r1, r3, #2
 8001704:	4834      	ldr	r0, [pc, #208]	; (80017d8 <imageRender+0x1f4>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	4403      	add	r3, r0
 800170e:	3302      	adds	r3, #2
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	463b      	mov	r3, r7
 8001714:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 0] = colors[c2][0];
 8001716:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 800171a:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 800171e:	460b      	mov	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	1cd9      	adds	r1, r3, #3
 8001728:	482b      	ldr	r0, [pc, #172]	; (80017d8 <imageRender+0x1f4>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	4403      	add	r3, r0
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	463b      	mov	r3, r7
 8001736:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 1] = colors[c2][1];
 8001738:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 800173c:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	1d19      	adds	r1, r3, #4
 800174a:	4823      	ldr	r0, [pc, #140]	; (80017d8 <imageRender+0x1f4>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	4403      	add	r3, r0
 8001754:	3301      	adds	r3, #1
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	463b      	mov	r3, r7
 800175a:	545a      	strb	r2, [r3, r1]
			linebuff[2*3*j + 3 + 2] = colors[c2][2];
 800175c:	f897 25a2 	ldrb.w	r2, [r7, #1442]	; 0x5a2
 8001760:	f8b7 15a4 	ldrh.w	r1, [r7, #1444]	; 0x5a4
 8001764:	460b      	mov	r3, r1
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	440b      	add	r3, r1
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	1d59      	adds	r1, r3, #5
 800176e:	481a      	ldr	r0, [pc, #104]	; (80017d8 <imageRender+0x1f4>)
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	4403      	add	r3, r0
 8001778:	3302      	adds	r3, #2
 800177a:	781a      	ldrb	r2, [r3, #0]
 800177c:	463b      	mov	r3, r7
 800177e:	545a      	strb	r2, [r3, r1]
		for (uint16_t j = 0; j < LCD_WIDTH/2; j++) {
 8001780:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 8001784:	3301      	adds	r3, #1
 8001786:	f8a7 35a4 	strh.w	r3, [r7, #1444]	; 0x5a4
 800178a:	f8b7 35a4 	ldrh.w	r3, [r7, #1444]	; 0x5a4
 800178e:	2bef      	cmp	r3, #239	; 0xef
 8001790:	f67f af47 	bls.w	8001622 <imageRender+0x3e>
		}
//		HAL_SPI_Transmit(_spi->getHandler(), linebuff, w * 3, 100);
		HAL_SPI_Transmit(&hspi1, linebuff, LCD_WIDTH * 3, 100);
 8001794:	4639      	mov	r1, r7
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <imageRender+0x1f8>)
 800179e:	f004 f98c 	bl	8005aba <HAL_SPI_Transmit>
	for (uint16_t i = 0; i < LCD_HEIGHT; i++) {
 80017a2:	f8b7 35a6 	ldrh.w	r3, [r7, #1446]	; 0x5a6
 80017a6:	3301      	adds	r3, #1
 80017a8:	f8a7 35a6 	strh.w	r3, [r7, #1446]	; 0x5a6
 80017ac:	f8b7 35a6 	ldrh.w	r3, [r7, #1446]	; 0x5a6
 80017b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017b4:	f4ff af31 	bcc.w	800161a <imageRender+0x36>

	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	4804      	ldr	r0, [pc, #16]	; (80017d0 <imageRender+0x1ec>)
 80017c0:	f002 fdfa 	bl	80043b8 <HAL_GPIO_WritePin>
}
 80017c4:	bf00      	nop
 80017c6:	f507 67b5 	add.w	r7, r7, #1448	; 0x5a8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	48000800 	.word	0x48000800
 80017d4:	200000c0 	.word	0x200000c0
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20012df8 	.word	0x20012df8

080017e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
 8001800:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001802:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001804:	4a2f      	ldr	r2, [pc, #188]	; (80018c4 <MX_ADC1_Init+0xe4>)
 8001806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001814:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800181a:	4b29      	ldr	r3, [pc, #164]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001820:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001822:	2204      	movs	r2, #4
 8001824:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001828:	2200      	movs	r2, #0
 800182a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800182e:	2201      	movs	r2, #1
 8001830:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001834:	2201      	movs	r2, #1
 8001836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001842:	2200      	movs	r2, #0
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001856:	2200      	movs	r2, #0
 8001858:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001862:	4817      	ldr	r0, [pc, #92]	; (80018c0 <MX_ADC1_Init+0xe0>)
 8001864:	f001 faa2 	bl	8002dac <HAL_ADC_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800186e:	f000 fb45 	bl	8001efc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <MX_ADC1_Init+0xe0>)
 800187e:	f001 fffd 	bl	800387c <HAL_ADCEx_MultiModeConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001888:	f000 fb38 	bl	8001efc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_ADC1_Init+0xe8>)
 800188e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001890:	2306      	movs	r3, #6
 8001892:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001898:	237f      	movs	r3, #127	; 0x7f
 800189a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800189c:	2304      	movs	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_ADC1_Init+0xe0>)
 80018aa:	f001 fbd3 	bl	8003054 <HAL_ADC_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80018b4:	f000 fb22 	bl	8001efc <Error_Handler>
  }

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20012ce8 	.word	0x20012ce8
 80018c4:	50040000 	.word	0x50040000
 80018c8:	08600004 	.word	0x08600004

080018cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <HAL_ADC_MspInit+0xc8>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d14e      	bne.n	800198c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018ee:	4b2a      	ldr	r3, [pc, #168]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a29      	ldr	r2, [pc, #164]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 80018f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a23      	ldr	r2, [pc, #140]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_ADC_MspInit+0xcc>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 800191e:	2302      	movs	r3, #2
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001922:	230b      	movs	r3, #11
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	481a      	ldr	r0, [pc, #104]	; (800199c <HAL_ADC_MspInit+0xd0>)
 8001932:	f002 fb99 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001938:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_ADC_MspInit+0xd8>)
 800193a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 800195e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001962:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001966:	2220      	movs	r2, #32
 8001968:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001970:	480b      	ldr	r0, [pc, #44]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001972:	f002 f941 	bl	8003bf8 <HAL_DMA_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800197c:	f000 fabe 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001984:	64da      	str	r2, [r3, #76]	; 0x4c
 8001986:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_ADC_MspInit+0xd4>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	50040000 	.word	0x50040000
 8001998:	40021000 	.word	0x40021000
 800199c:	48000800 	.word	0x48000800
 80019a0:	20012d4c 	.word	0x20012d4c
 80019a4:	40020430 	.word	0x40020430

080019a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_DMA_Init+0x60>)
 80019b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <MX_DMA_Init+0x60>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6493      	str	r3, [r2, #72]	; 0x48
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_DMA_Init+0x60>)
 80019bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <MX_DMA_Init+0x60>)
 80019c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <MX_DMA_Init+0x60>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6493      	str	r3, [r2, #72]	; 0x48
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MX_DMA_Init+0x60>)
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	2100      	movs	r1, #0
 80019e2:	200d      	movs	r0, #13
 80019e4:	f002 f8d1 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80019e8:	200d      	movs	r0, #13
 80019ea:	f002 f8ea 	bl	8003bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	203a      	movs	r0, #58	; 0x3a
 80019f4:	f002 f8c9 	bl	8003b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80019f8:	203a      	movs	r0, #58	; 0x3a
 80019fa:	f002 f8e2 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a47      	ldr	r2, [pc, #284]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a3b      	ldr	r2, [pc, #236]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <MX_GPIO_Init+0x138>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f002 fca0 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001a7e:	4832      	ldr	r0, [pc, #200]	; (8001b48 <MX_GPIO_Init+0x13c>)
 8001a80:	f002 fc9a 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8a:	4830      	ldr	r0, [pc, #192]	; (8001b4c <MX_GPIO_Init+0x140>)
 8001a8c:	f002 fc94 	bl	80043b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <MX_GPIO_Init+0x144>)
 8001a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4828      	ldr	r0, [pc, #160]	; (8001b48 <MX_GPIO_Init+0x13c>)
 8001aa6:	f002 fadf 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4619      	mov	r1, r3
 8001abc:	4822      	ldr	r0, [pc, #136]	; (8001b48 <MX_GPIO_Init+0x13c>)
 8001abe:	f002 fad3 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f002 fac4 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001ae0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4813      	ldr	r0, [pc, #76]	; (8001b48 <MX_GPIO_Init+0x13c>)
 8001afa:	f002 fab5 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	4619      	mov	r1, r3
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_GPIO_Init+0x140>)
 8001b18:	f002 faa6 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8001b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b38:	f002 fa96 	bl	8004068 <HAL_GPIO_Init>

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	48000800 	.word	0x48000800
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	10210000 	.word	0x10210000

08001b54 <drawGrid>:
#define TFT_HEIGHT		((uint16_t)240)
uint8_t hOffset = (TFT_WIDTH - GRID_WIDTH)/2;
uint8_t vOffset = (TFT_HEIGHT - GRID_HEIGHT)/2;
uint8_t dHeight = GRID_HEIGHT/8;

void drawGrid(){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
			drawPixel(j, i, ILI9488_DARKGREY);
	}
	for(int j = 0; j < 480; j+=2)
				drawPixel(j, 319, ILI9488_DARKGREY);
				*/
	uint8_t hPacing = GRID_WIDTH / 12;
 8001b5a:	2319      	movs	r3, #25
 8001b5c:	71fb      	strb	r3, [r7, #7]
		uint8_t vPacing = GRID_HEIGHT / 8;
 8001b5e:	231e      	movs	r3, #30
 8001b60:	71bb      	strb	r3, [r7, #6]
	for(int i = 1; i < 12; i++)
 8001b62:	2301      	movs	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e016      	b.n	8001b96 <drawGrid+0x42>
			drawFastVLine(i * hPacing + hOffset, vOffset, GRID_HEIGHT, 1);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	fb12 f303 	smulbb	r3, r2, r3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <drawGrid+0x8c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b218      	sxth	r0, r3
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <drawGrid+0x90>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b219      	sxth	r1, r3
 8001b88:	2301      	movs	r3, #1
 8001b8a:	22f0      	movs	r2, #240	; 0xf0
 8001b8c:	f7fe fd78 	bl	8000680 <drawFastVLine>
	for(int i = 1; i < 12; i++)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b0b      	cmp	r3, #11
 8001b9a:	dde5      	ble.n	8001b68 <drawGrid+0x14>

		for(int i = 1; i < 8; i++)
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e017      	b.n	8001bd2 <drawGrid+0x7e>
			drawFastHLine(hOffset, i * vPacing + vOffset, GRID_WIDTH, 1);
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <drawGrid+0x8c>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b218      	sxth	r0, r3
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	fb12 f303 	smulbb	r3, r2, r3
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <drawGrid+0x90>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	b219      	sxth	r1, r3
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bc8:	f7fe fe3e 	bl	8000848 <drawFastHLine>
		for(int i = 1; i < 8; i++)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b07      	cmp	r3, #7
 8001bd6:	dde4      	ble.n	8001ba2 <drawGrid+0x4e>
		//for(int i = 1; i < 2*8; i++)
		//	drawFastHLine(hOffset + GRID_WIDTH/2 - 3, i * vPacing/2 + vOffset, 7, ILI9488_DARKGREY);

		//for(int i = 1; i < 2*12; i++)
		//	drawFastVLine(i * hPacing/2 + hOffset, vOffset + GRID_HEIGHT/2 - 4, 7, ILI9488_DARKGREY);
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000030 	.word	0x20000030
 8001be4:	20012cc0 	.word	0x20012cc0

08001be8 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8001bf0:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <HAL_SPI_TxCpltCallback+0x1c>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000031 	.word	0x20000031

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	f5ad 6d37 	sub.w	sp, sp, #2928	; 0xb70
 8001c0e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  oscilloscope_channel CH1;
  oscilloscope_channel_init(&CH1);
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f978 	bl	8001f0a <oscilloscope_channel_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c1a:	f000 fe9d 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1e:	f000 f8e7 	bl	8001df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c22:	f7ff fef3 	bl	8001a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c26:	f7ff febf 	bl	80019a8 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c2a:	f000 fab5 	bl	8002198 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001c2e:	f000 faf1 	bl	8002214 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c32:	f000 fd47 	bl	80026c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001c36:	f7ff fdd3 	bl	80017e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001c3a:	f000 fce9 	bl	8002610 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CH1.waveform , MEMORY_DEPTH);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001c3e:	213c      	movs	r1, #60	; 0x3c
 8001c40:	4861      	ldr	r0, [pc, #388]	; (8001dc8 <main+0x1c0>)
 8001c42:	f004 fea7 	bl	8006994 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c46:	210c      	movs	r1, #12
 8001c48:	4860      	ldr	r0, [pc, #384]	; (8001dcc <main+0x1c4>)
 8001c4a:	f004 fcf7 	bl	800663c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c4e:	2108      	movs	r1, #8
 8001c50:	485e      	ldr	r0, [pc, #376]	; (8001dcc <main+0x1c4>)
 8001c52:	f004 fcf3 	bl	800663c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LCD_BRIGHTNESS); // 0-1000
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <main+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200); // 0-1000
 8001c60:	4b5a      	ldr	r3, [pc, #360]	; (8001dcc <main+0x1c4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	22c8      	movs	r2, #200	; 0xc8
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c
  ILI9488_Init();
 8001c68:	f7fe fb0a 	bl	8000280 <ILI9488_Init>
  setRotation(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff f9d9 	bl	8001024 <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fb68 	bl	8001348 <ILI9341_Fill_Screen>
  //drawGrid();

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001c78:	2312      	movs	r3, #18
 8001c7a:	f240 12db 	movw	r2, #475	; 0x1db
 8001c7e:	2101      	movs	r1, #1
 8001c80:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001c84:	f7fe fbde 	bl	8000444 <setAddrWindow>
  ILI9341_Draw_Colour_Burst(YELLOW, 35 * 18);
 8001c88:	f240 2176 	movw	r1, #630	; 0x276
 8001c8c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001c90:	f7ff fa68 	bl	8001164 <ILI9341_Draw_Colour_Burst>
  LCD_Font(466, 15, "2", _Open_Sans_Bold_12  , 1, BLACK);
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <main+0x1c8>)
 8001c9e:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <main+0x1cc>)
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001ca6:	f7ff fc24 	bl	80014f2 <LCD_Font>

  HAL_Delay(500);
 8001caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cae:	f000 fecf 	bl	8002a50 <HAL_Delay>

  setAddrWindow(463, 1, 463+13-1, 1+18-1);
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	f240 12db 	movw	r2, #475	; 0x1db
 8001cb8:	2101      	movs	r1, #1
 8001cba:	f240 10cf 	movw	r0, #463	; 0x1cf
 8001cbe:	f7fe fbc1 	bl	8000444 <setAddrWindow>
  ILI9341_Draw_Colour_Burst(GREEN, 35 * 18);
 8001cc2:	f240 2176 	movw	r1, #630	; 0x276
 8001cc6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001cca:	f7ff fa4b 	bl	8001164 <ILI9341_Draw_Colour_Burst>
  LCD_Font(440, 15, "Ch:", _Open_Sans_Bold_12  , 1, WHITE);
 8001cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <main+0x1c8>)
 8001cda:	4a3f      	ldr	r2, [pc, #252]	; (8001dd8 <main+0x1d0>)
 8001cdc:	210f      	movs	r1, #15
 8001cde:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8001ce2:	f7ff fc06 	bl	80014f2 <LCD_Font>
  LCD_Font(466, 15, "1", _Open_Sans_Bold_12  , 1, BLACK);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2301      	movs	r3, #1
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <main+0x1c8>)
 8001cf0:	4a3a      	ldr	r2, [pc, #232]	; (8001ddc <main+0x1d4>)
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f44f 70e9 	mov.w	r0, #466	; 0x1d2
 8001cf8:	f7ff fbfb 	bl	80014f2 <LCD_Font>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int faza = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
	  //ILI9341_Fill_Screen(ILI9488_BLACK);
	  //drawGrid();
	  //drawLine(0, 0, 200, 300, 1);

	  //writeLine(10, 20, 400, 20, 2);
	  clearScreen();
 8001d02:	f7fe fbf9 	bl	80004f8 <clearScreen>
	  drawGrid();
 8001d06:	f7ff ff25 	bl	8001b54 <drawGrid>

	  for(int i = 0; i < 480; ++i){
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001d10:	e033      	b.n	8001d7a <main+0x172>
	  	  	CH1.waveform[i] = 2000*sinf(0.05f*i + faza*0.1f) + 2000;
 8001d12:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001d16:	ee07 3a90 	vmov	s15, r3
 8001d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001de0 <main+0x1d8>
 8001d22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d26:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001d2a:	ee07 3a90 	vmov	s15, r3
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001de4 <main+0x1dc>
 8001d36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	f006 f81d 	bl	8007d80 <sinf>
 8001d46:	eeb0 7a40 	vmov.f32	s14, s0
 8001d4a:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001de8 <main+0x1e0>
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001de8 <main+0x1e0>
 8001d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5e:	ee17 3a90 	vmov	r3, s15
 8001d62:	b299      	uxth	r1, r3
 8001d64:	f107 0318 	add.w	r3, r7, #24
 8001d68:	f8d7 2b60 	ldr.w	r2, [r7, #2912]	; 0xb60
 8001d6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  for(int i = 0; i < 480; ++i){
 8001d70:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001d74:	3301      	adds	r3, #1
 8001d76:	f8c7 3b60 	str.w	r3, [r7, #2912]	; 0xb60
 8001d7a:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 8001d7e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001d82:	dbc6      	blt.n	8001d12 <main+0x10a>
	  	    }

	  draw_waveform(& CH1);
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f913 	bl	8001fb4 <draw_waveform>
	  sprintf(buf,"Vpp=%d", calculate_peak_to_peak(CH1.waveform));
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f8cf 	bl	8001f36 <calculate_peak_to_peak>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4913      	ldr	r1, [pc, #76]	; (8001dec <main+0x1e4>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fbf2 	bl	8007588 <siprintf>
	  LCD_Font(5, 15, buf, _Open_Sans_Bold_12  , 1, 15);
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	230f      	movs	r3, #15
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2301      	movs	r3, #1
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <main+0x1c8>)
 8001db0:	210f      	movs	r1, #15
 8001db2:	2005      	movs	r0, #5
 8001db4:	f7ff fb9d 	bl	80014f2 <LCD_Font>
	  imageRender();
 8001db8:	f7ff fc14 	bl	80015e4 <imageRender>
	    }
	  for(int i = 280; i < 480; ++i){
	  	  	//CH1.waveform[i] = 2000*sin(0.05*i + faza*0.1) + 2000;
	  	  	CH1.waveform[i] = 2000 + 2000;
	  	    }*/
	  faza++;
 8001dbc:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f8c7 3b64 	str.w	r3, [r7, #2916]	; 0xb64
  {
 8001dc6:	e79c      	b.n	8001d02 <main+0xfa>
 8001dc8:	20012ef0 	.word	0x20012ef0
 8001dcc:	20012ea4 	.word	0x20012ea4
 8001dd0:	08008ddc 	.word	0x08008ddc
 8001dd4:	08008830 	.word	0x08008830
 8001dd8:	08008834 	.word	0x08008834
 8001ddc:	08008838 	.word	0x08008838
 8001de0:	3d4ccccd 	.word	0x3d4ccccd
 8001de4:	3dcccccd 	.word	0x3dcccccd
 8001de8:	44fa0000 	.word	0x44fa0000
 8001dec:	0800883c 	.word	0x0800883c

08001df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b0b8      	sub	sp, #224	; 0xe0
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dfa:	2244      	movs	r2, #68	; 0x44
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 fbb9 	bl	8007576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2288      	movs	r2, #136	; 0x88
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f005 fbab 	bl	8007576 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e34:	2302      	movs	r3, #2
 8001e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e46:	230a      	movs	r3, #10
 8001e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e62:	4618      	mov	r0, r3
 8001e64:	f002 fb24 	bl	80044b0 <HAL_RCC_OscConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e6e:	f000 f845 	bl	8001efc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e72:	230f      	movs	r3, #15
 8001e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e90:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e94:	2104      	movs	r1, #4
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fef0 	bl	8004c7c <HAL_RCC_ClockConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001ea2:	f000 f82b 	bl	8001efc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001eaa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001eb0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ece:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f89e 	bl	8005014 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001ede:	f000 f80d 	bl	8001efc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ee2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee6:	f002 fa8d 	bl	8004404 <HAL_PWREx_ControlVoltageScaling>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001ef0:	f000 f804 	bl	8001efc <Error_Handler>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	37e0      	adds	r7, #224	; 0xe0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <oscilloscope_channel_init>:
 *      Author: Dominik
 */

#include "oscilloscope.h"

void oscilloscope_channel_init(oscilloscope_channel* ch){
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
	ch->x_offset = 0;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0
	ch->y_offset = 0;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f8a3 23c2 	strh.w	r2, [r3, #962]	; 0x3c2
	ch->y_scale = 0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <calculate_peak_to_peak>:


int calculate_peak_to_peak(int16_t waveform[MEMORY_DEPTH]){
 8001f36:	b480      	push	{r7}
 8001f38:	b087      	sub	sp, #28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	uint32_t max=0, min=4096;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e024      	b.n	8001f98 <calculate_peak_to_peak+0x62>
		if(waveform[i]<min)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d906      	bls.n	8001f70 <calculate_peak_to_peak+0x3a>
			min=waveform[i];
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6e:	613b      	str	r3, [r7, #16]
		if(waveform[i]>max)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d206      	bcs.n	8001f92 <calculate_peak_to_peak+0x5c>
			max=waveform[i];
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f90:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f9e:	dbd6      	blt.n	8001f4e <calculate_peak_to_peak+0x18>
	}
	return max-min;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <draw_waveform>:
			}
		}
	  }
}

void draw_waveform(oscilloscope_channel* ch){
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b091      	sub	sp, #68	; 0x44
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
	for(int j = 0; j < 5; ++j){
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, BLACK);
	}
	erase_waveform(ch->waveform_display_previous, ch->x_offset);
*/
	ch->x_offset = -htim1.Instance->CNT;
 8001fbc:	4b74      	ldr	r3, [pc, #464]	; (8002190 <draw_waveform+0x1dc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8a3 23c0 	strh.w	r2, [r3, #960]	; 0x3c0

	for(int i = 0; i < 480; ++i)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd4:	e00e      	b.n	8001ff4 <draw_waveform+0x40>
				ch->waveform_display[i] = ch->waveform[i];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fda:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	460a      	mov	r2, r1
 8001fec:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i < 480; ++i)
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ffa:	dbec      	blt.n	8001fd6 <draw_waveform+0x22>
		for(int i = 0; i < 480-1; ++i){
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8002000:	e04a      	b.n	8002098 <draw_waveform+0xe4>
			//ch->waveform_display[i] = ch->waveform[i];
			int x0 = i;
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	61bb      	str	r3, [r7, #24]
			int x1 = i+1;
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
			int y0 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002012:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	440b      	add	r3, r1
 8002022:	88db      	ldrh	r3, [r3, #6]
 8002024:	495b      	ldr	r1, [pc, #364]	; (8002194 <draw_waveform+0x1e0>)
 8002026:	fba1 1303 	umull	r1, r3, r1, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b29b      	uxth	r3, r3
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	613b      	str	r3, [r7, #16]
			int y1 = CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i+1]/40;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002038:	f1c3 02aa 	rsb	r2, r3, #170	; 0xaa
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	3301      	adds	r3, #1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	88db      	ldrh	r3, [r3, #6]
 800204c:	4951      	ldr	r1, [pc, #324]	; (8002194 <draw_waveform+0x1e0>)
 800204e:	fba1 1303 	umull	r1, r3, r1, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	b29b      	uxth	r3, r3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	60fb      	str	r3, [r7, #12]
			drawLine(x0, y0, x1, y1, 10);
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	b218      	sxth	r0, r3
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	b219      	sxth	r1, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	b21a      	sxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	b21c      	sxth	r4, r3
 800206a:	230a      	movs	r3, #10
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4623      	mov	r3, r4
 8002070:	f7fe fcbc 	bl	80009ec <drawLine>
			//drawLine(i, CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40, i+1,  CANVA_MIDDLE_V - ch->x_offset -ch->waveform_display[i+1]/40, GREEN);
			//drawPixel(i, CANVA_MIDDLE_V - ch->x_offset - ch->waveform_display[i]/40, GREEN);
			ch->waveform_display_previous[i] = ch->waveform_display[i];
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4413      	add	r3, r2
 8002080:	88d9      	ldrh	r1, [r3, #6]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4413      	add	r3, r2
 800208e:	460a      	mov	r2, r1
 8002090:	80da      	strh	r2, [r3, #6]
		for(int i = 0; i < 480-1; ++i){
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	3301      	adds	r3, #1
 8002096:	633b      	str	r3, [r7, #48]	; 0x30
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 800209e:	ddb0      	ble.n	8002002 <draw_waveform+0x4e>
		}
	// draw marker 0
	for(int j = 0; j < 5; ++j){
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a4:	e010      	b.n	80020c8 <draw_waveform+0x114>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 2, 10);
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	b218      	sxth	r0, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f1c3 03a8 	rsb	r3, r3, #168	; 0xa8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b21b      	sxth	r3, r3
 80020ba:	220a      	movs	r2, #10
 80020bc:	4619      	mov	r1, r3
 80020be:	f7fe fa27 	bl	8000510 <drawPixel>
	for(int j = 0; j < 5; ++j){
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	3301      	adds	r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	ddeb      	ble.n	80020a6 <draw_waveform+0xf2>
		}
		for(int j = 0; j < 6; ++j){
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d2:	e010      	b.n	80020f6 <draw_waveform+0x142>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset - 1, 10);
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	b218      	sxth	r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f1c3 03a9 	rsb	r3, r3, #169	; 0xa9
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	220a      	movs	r2, #10
 80020ea:	4619      	mov	r1, r3
 80020ec:	f7fe fa10 	bl	8000510 <drawPixel>
		for(int j = 0; j < 6; ++j){
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	3301      	adds	r3, #1
 80020f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	ddeb      	ble.n	80020d4 <draw_waveform+0x120>
		}
		for(int j = 0; j < 7; ++j){
 80020fc:	2300      	movs	r3, #0
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002100:	e010      	b.n	8002124 <draw_waveform+0x170>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset, 10);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	b218      	sxth	r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800210c:	b29b      	uxth	r3, r3
 800210e:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	220a      	movs	r2, #10
 8002118:	4619      	mov	r1, r3
 800211a:	f7fe f9f9 	bl	8000510 <drawPixel>
		for(int j = 0; j < 7; ++j){
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3301      	adds	r3, #1
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	2b06      	cmp	r3, #6
 8002128:	ddeb      	ble.n	8002102 <draw_waveform+0x14e>
		}
		for(int j = 0; j < 6; ++j){
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	e010      	b.n	8002152 <draw_waveform+0x19e>
			drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 1, 10);
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	b218      	sxth	r0, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 800213a:	b29b      	uxth	r3, r3
 800213c:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
 8002140:	b29b      	uxth	r3, r3
 8002142:	b21b      	sxth	r3, r3
 8002144:	220a      	movs	r2, #10
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe f9e2 	bl	8000510 <drawPixel>
		for(int j = 0; j < 6; ++j){
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	3301      	adds	r3, #1
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b05      	cmp	r3, #5
 8002156:	ddeb      	ble.n	8002130 <draw_waveform+0x17c>
		}
		for(int j = 0; j < 5; ++j){
 8002158:	2300      	movs	r3, #0
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e010      	b.n	8002180 <draw_waveform+0x1cc>
				drawPixel(j, CANVA_MIDDLE_V - ch->x_offset + 2, 10);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	b218      	sxth	r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f9b3 33c0 	ldrsh.w	r3, [r3, #960]	; 0x3c0
 8002168:	b29b      	uxth	r3, r3
 800216a:	f1c3 03ac 	rsb	r3, r3, #172	; 0xac
 800216e:	b29b      	uxth	r3, r3
 8002170:	b21b      	sxth	r3, r3
 8002172:	220a      	movs	r2, #10
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe f9cb 	bl	8000510 <drawPixel>
		for(int j = 0; j < 5; ++j){
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3301      	adds	r3, #1
 800217e:	61fb      	str	r3, [r7, #28]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	2b04      	cmp	r3, #4
 8002184:	ddeb      	ble.n	800215e <draw_waveform+0x1aa>
		}
}
 8002186:	bf00      	nop
 8002188:	373c      	adds	r7, #60	; 0x3c
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop
 8002190:	20012ef0 	.word	0x20012ef0
 8002194:	cccccccd 	.word	0xcccccccd

08002198 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_SPI1_Init+0x74>)
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <MX_SPI1_Init+0x78>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_SPI1_Init+0x74>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_SPI1_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_SPI1_Init+0x74>)
 80021b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_SPI1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_SPI1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_SPI1_Init+0x74>)
 80021c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_SPI1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_SPI1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_SPI1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_SPI1_Init+0x74>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_SPI1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_SPI1_Init+0x74>)
 80021f2:	2208      	movs	r2, #8
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_SPI1_Init+0x74>)
 80021f8:	f003 fbbc 	bl	8005974 <HAL_SPI_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002202:	f7ff fe7b 	bl	8001efc <Error_Handler>
  }

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20012df8 	.word	0x20012df8
 8002210:	40013000 	.word	0x40013000

08002214 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MX_SPI2_Init+0x74>)
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <MX_SPI2_Init+0x78>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_SPI2_Init+0x74>)
 8002220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_SPI2_Init+0x74>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_SPI2_Init+0x74>)
 800222e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002232:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_SPI2_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_SPI2_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI2_Init+0x74>)
 8002242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002246:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_SPI2_Init+0x74>)
 800224a:	2218      	movs	r2, #24
 800224c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI2_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI2_Init+0x74>)
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_SPI2_Init+0x74>)
 800225c:	2200      	movs	r2, #0
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI2_Init+0x74>)
 8002262:	2207      	movs	r2, #7
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_SPI2_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI2_Init+0x74>)
 800226e:	2208      	movs	r2, #8
 8002270:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_SPI2_Init+0x74>)
 8002274:	f003 fb7e 	bl	8005974 <HAL_SPI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800227e:	f7ff fe3d 	bl	8001efc <Error_Handler>
  }

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20012d94 	.word	0x20012d94
 800228c:	40003800 	.word	0x40003800

08002290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08e      	sub	sp, #56	; 0x38
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_SPI_MspInit+0x1ac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d176      	bne.n	80023a0 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	4a62      	ldr	r2, [pc, #392]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022bc:	6613      	str	r3, [r2, #96]	; 0x60
 80022be:	4b60      	ldr	r3, [pc, #384]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	623b      	str	r3, [r7, #32]
 80022c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b5d      	ldr	r3, [pc, #372]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a5c      	ldr	r2, [pc, #368]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	4a56      	ldr	r2, [pc, #344]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002306:	2303      	movs	r3, #3
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800230a:	2305      	movs	r3, #5
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002312:	4619      	mov	r1, r3
 8002314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002318:	f001 fea6 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800231c:	2308      	movs	r3, #8
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800232c:	2305      	movs	r3, #5
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002334:	4619      	mov	r1, r3
 8002336:	4843      	ldr	r0, [pc, #268]	; (8002444 <HAL_SPI_MspInit+0x1b4>)
 8002338:	f001 fe96 	bl	8004068 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 800233e:	4a43      	ldr	r2, [pc, #268]	; (800244c <HAL_SPI_MspInit+0x1bc>)
 8002340:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002344:	2201      	movs	r2, #1
 8002346:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002348:	4b3f      	ldr	r3, [pc, #252]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 800234a:	2210      	movs	r2, #16
 800234c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800234e:	4b3e      	ldr	r3, [pc, #248]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002354:	4b3c      	ldr	r3, [pc, #240]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 800235c:	2200      	movs	r2, #0
 800235e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002366:	4b38      	ldr	r3, [pc, #224]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002368:	2200      	movs	r2, #0
 800236a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 800236e:	2200      	movs	r2, #0
 8002370:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002372:	4835      	ldr	r0, [pc, #212]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002374:	f001 fc40 	bl	8003bf8 <HAL_DMA_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 800237e:	f7ff fdbd 	bl	8001efc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
 8002388:	4a2f      	ldr	r2, [pc, #188]	; (8002448 <HAL_SPI_MspInit+0x1b8>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2023      	movs	r0, #35	; 0x23
 8002394:	f001 fbf9 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002398:	2023      	movs	r0, #35	; 0x23
 800239a:	f001 fc12 	bl	8003bc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800239e:	e049      	b.n	8002434 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <HAL_SPI_MspInit+0x1c0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d144      	bne.n	8002434 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	4a24      	ldr	r2, [pc, #144]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b4:	6593      	str	r3, [r2, #88]	; 0x58
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_SPI_MspInit+0x1b0>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f2:	230c      	movs	r3, #12
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002402:	2305      	movs	r3, #5
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	4811      	ldr	r0, [pc, #68]	; (8002454 <HAL_SPI_MspInit+0x1c4>)
 800240e:	f001 fe2b 	bl	8004068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002424:	2305      	movs	r3, #5
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_SPI_MspInit+0x1b4>)
 8002430:	f001 fe1a 	bl	8004068 <HAL_GPIO_Init>
}
 8002434:	bf00      	nop
 8002436:	3738      	adds	r7, #56	; 0x38
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013000 	.word	0x40013000
 8002440:	40021000 	.word	0x40021000
 8002444:	48000400 	.word	0x48000400
 8002448:	20012e5c 	.word	0x20012e5c
 800244c:	40020030 	.word	0x40020030
 8002450:	40003800 	.word	0x40003800
 8002454:	48000800 	.word	0x48000800

08002458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <HAL_MspInit+0x44>)
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <HAL_MspInit+0x44>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6613      	str	r3, [r2, #96]	; 0x60
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <HAL_MspInit+0x44>)
 800246c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_MspInit+0x44>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_MspInit+0x44>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	; 0x58
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_MspInit+0x44>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <MemManage_Handler+0x4>

080024ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024be:	e7fe      	b.n	80024be <BusFault_Handler+0x4>

080024c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <UsageFault_Handler+0x4>

080024c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f4:	f000 fa8c 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA1_Channel3_IRQHandler+0x10>)
 8002502:	f001 fcd2 	bl	8003eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20012e5c 	.word	0x20012e5c

08002510 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <SPI1_IRQHandler+0x10>)
 8002516:	f003 fd33 	bl	8005f80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20012df8 	.word	0x20012df8

08002524 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <DMA2_Channel3_IRQHandler+0x10>)
 800252a:	f001 fcbe 	bl	8003eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20012d4c 	.word	0x20012d4c

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f004 ffd0 	bl	800750c <__errno>
 800256c:	4602      	mov	r2, r0
 800256e:	230c      	movs	r3, #12
 8002570:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	; (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	; (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	; (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20018000 	.word	0x20018000
 8002598:	00000400 	.word	0x00000400
 800259c:	20012cc4 	.word	0x20012cc4
 80025a0:	20012f48 	.word	0x20012f48

080025a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <SystemInit+0x64>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	4a16      	ldr	r2, [pc, #88]	; (8002608 <SystemInit+0x64>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <SystemInit+0x68>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a13      	ldr	r2, [pc, #76]	; (800260c <SystemInit+0x68>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <SystemInit+0x68>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <SystemInit+0x68>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <SystemInit+0x68>)
 80025d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <SystemInit+0x68>)
 80025dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <SystemInit+0x68>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <SystemInit+0x68>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <SystemInit+0x68>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SystemInit+0x64>)
 80025f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025fa:	609a      	str	r2, [r3, #8]
#endif
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000ed00 	.word	0xe000ed00
 800260c:	40021000 	.word	0x40021000

08002610 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f004 ffa9 	bl	8007576 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <MX_TIM1_Init+0xac>)
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <MX_TIM1_Init+0xb0>)
 8002632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <MX_TIM1_Init+0xac>)
 8002636:	2200      	movs	r2, #0
 8002638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <MX_TIM1_Init+0xac>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <MX_TIM1_Init+0xac>)
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_TIM1_Init+0xac>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <MX_TIM1_Init+0xac>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <MX_TIM1_Init+0xac>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800265a:	2303      	movs	r3, #3
 800265c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002662:	2301      	movs	r3, #1
 8002664:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002672:	2301      	movs	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800267e:	f107 030c 	add.w	r3, r7, #12
 8002682:	4619      	mov	r1, r3
 8002684:	480d      	ldr	r0, [pc, #52]	; (80026bc <MX_TIM1_Init+0xac>)
 8002686:	f004 f8df 	bl	8006848 <HAL_TIM_Encoder_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002690:	f7ff fc34 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a0:	463b      	mov	r3, r7
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <MX_TIM1_Init+0xac>)
 80026a6:	f004 fea9 	bl	80073fc <HAL_TIMEx_MasterConfigSynchronization>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80026b0:	f7ff fc24 	bl	8001efc <Error_Handler>
  }

}
 80026b4:	bf00      	nop
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20012ef0 	.word	0x20012ef0
 80026c0:	40012c00 	.word	0x40012c00

080026c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d6:	463b      	mov	r3, r7
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	615a      	str	r2, [r3, #20]
 80026e6:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <MX_TIM3_Init+0xc4>)
 80026ea:	4a28      	ldr	r2, [pc, #160]	; (800278c <MX_TIM3_Init+0xc8>)
 80026ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <MX_TIM3_Init+0xc4>)
 80026f0:	224f      	movs	r2, #79	; 0x4f
 80026f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <MX_TIM3_Init+0xc4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80026fa:	4b23      	ldr	r3, [pc, #140]	; (8002788 <MX_TIM3_Init+0xc4>)
 80026fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002700:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002702:	4b21      	ldr	r3, [pc, #132]	; (8002788 <MX_TIM3_Init+0xc4>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002708:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <MX_TIM3_Init+0xc4>)
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800270e:	481e      	ldr	r0, [pc, #120]	; (8002788 <MX_TIM3_Init+0xc4>)
 8002710:	f003 ff3c 	bl	800658c <HAL_TIM_PWM_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800271a:	f7ff fbef 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002726:	f107 031c 	add.w	r3, r7, #28
 800272a:	4619      	mov	r1, r3
 800272c:	4816      	ldr	r0, [pc, #88]	; (8002788 <MX_TIM3_Init+0xc4>)
 800272e:	f004 fe65 	bl	80073fc <HAL_TIMEx_MasterConfigSynchronization>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002738:	f7ff fbe0 	bl	8001efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800273c:	2360      	movs	r3, #96	; 0x60
 800273e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800274c:	463b      	mov	r3, r7
 800274e:	2208      	movs	r2, #8
 8002750:	4619      	mov	r1, r3
 8002752:	480d      	ldr	r0, [pc, #52]	; (8002788 <MX_TIM3_Init+0xc4>)
 8002754:	f004 f9ac 	bl	8006ab0 <HAL_TIM_PWM_ConfigChannel>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800275e:	f7ff fbcd 	bl	8001efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002762:	463b      	mov	r3, r7
 8002764:	220c      	movs	r2, #12
 8002766:	4619      	mov	r1, r3
 8002768:	4807      	ldr	r0, [pc, #28]	; (8002788 <MX_TIM3_Init+0xc4>)
 800276a:	f004 f9a1 	bl	8006ab0 <HAL_TIM_PWM_ConfigChannel>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002774:	f7ff fbc2 	bl	8001efc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <MX_TIM3_Init+0xc4>)
 800277a:	f000 f86d 	bl	8002858 <HAL_TIM_MspPostInit>

}
 800277e:	bf00      	nop
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20012ea4 	.word	0x20012ea4
 800278c:	40000400 	.word	0x40000400

08002790 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIM_Encoder_MspInit+0x80>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d129      	bne.n	8002806 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027bc:	6613      	str	r3, [r2, #96]	; 0x60
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ce:	4a11      	ldr	r2, [pc, #68]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_TIM_Encoder_MspInit+0x84>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002802:	f001 fc31 	bl	8004068 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40021000 	.word	0x40021000

08002818 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <HAL_TIM_PWM_MspInit+0x38>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10b      	bne.n	8002842 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_TIM_PWM_MspInit+0x3c>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_TIM_PWM_MspInit+0x3c>)
 8002830:	f043 0302 	orr.w	r3, r3, #2
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_TIM_PWM_MspInit+0x3c>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40000400 	.word	0x40000400
 8002854:	40021000 	.word	0x40021000

08002858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <HAL_TIM_MspPostInit+0x9c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d138      	bne.n	80028ec <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	4a1e      	ldr	r2, [pc, #120]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_TIM_MspPostInit+0xa0>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GEN_OUT_Pin;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ba:	2302      	movs	r3, #2
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GEN_OUT_GPIO_Port, &GPIO_InitStruct);
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	480d      	ldr	r0, [pc, #52]	; (80028fc <HAL_TIM_MspPostInit+0xa4>)
 80028c6:	f001 fbcf 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_LED_Pin;
 80028ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028dc:	2302      	movs	r3, #2
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4806      	ldr	r0, [pc, #24]	; (8002900 <HAL_TIM_MspPostInit+0xa8>)
 80028e8:	f001 fbbe 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	48000400 	.word	0x48000400
 8002900:	48000800 	.word	0x48000800

08002904 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002908:	f7ff fe4c 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800290c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800290e:	e003      	b.n	8002918 <LoopCopyDataInit>

08002910 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002912:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002914:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002916:	3104      	adds	r1, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <LoopForever+0xa>)
	ldr	r3, =_edata
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <LoopForever+0xe>)
	adds	r2, r0, r1
 800291c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800291e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002920:	d3f6      	bcc.n	8002910 <CopyDataInit>
	ldr	r2, =_sbss
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002924:	e002      	b.n	800292c <LoopFillZerobss>

08002926 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002926:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002928:	f842 3b04 	str.w	r3, [r2], #4

0800292c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <LoopForever+0x16>)
	cmp	r2, r3
 800292e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002930:	d3f9      	bcc.n	8002926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002932:	f004 fdf1 	bl	8007518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002936:	f7ff f967 	bl	8001c08 <main>

0800293a <LoopForever>:

LoopForever:
    b LoopForever
 800293a:	e7fe      	b.n	800293a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800293c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002940:	08009234 	.word	0x08009234
	ldr	r0, =_sdata
 8002944:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002948:	200000a4 	.word	0x200000a4
	ldr	r2, =_sbss
 800294c:	200000a4 	.word	0x200000a4
	ldr	r3, = _ebss
 8002950:	20012f44 	.word	0x20012f44

08002954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC1_2_IRQHandler>
	...

08002958 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_Init+0x3c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_Init+0x3c>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800296e:	2003      	movs	r0, #3
 8002970:	f001 f900 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002974:	2000      	movs	r0, #0
 8002976:	f000 f80f 	bl	8002998 <HAL_InitTick>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	71fb      	strb	r3, [r7, #7]
 8002984:	e001      	b.n	800298a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002986:	f7ff fd67 	bl	8002458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800298a:	79fb      	ldrb	r3, [r7, #7]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40022000 	.word	0x40022000

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <HAL_InitTick+0x6c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d023      	beq.n	80029f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_InitTick+0x70>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_InitTick+0x6c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 f90b 	bl	8003bde <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0f      	cmp	r3, #15
 80029d2:	d809      	bhi.n	80029e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d4:	2200      	movs	r2, #0
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	f001 f8d5 	bl	8003b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_InitTick+0x74>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e007      	b.n	80029f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e004      	b.n	80029f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
 80029f2:	e001      	b.n	80029f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000003c 	.word	0x2000003c
 8002a08:	20000034 	.word	0x20000034
 8002a0c:	20000038 	.word	0x20000038

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	2000003c 	.word	0x2000003c
 8002a34:	20012f3c 	.word	0x20012f3c

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20012f3c 	.word	0x20012f3c

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_Delay+0x40>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	2000003c 	.word	0x2000003c

08002a94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3360      	adds	r3, #96	; 0x60
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <LL_ADC_SetOffset+0x44>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b34:	bf00      	nop
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	03fff000 	.word	0x03fff000

08002b44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	461a      	mov	r2, r3
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3360      	adds	r3, #96	; 0x60
 8002b80:	461a      	mov	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b087      	sub	sp, #28
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3330      	adds	r3, #48	; 0x30
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	4413      	add	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	211f      	movs	r1, #31
 8002bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	401a      	ands	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 011f 	and.w	r1, r3, #31
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	431a      	orrs	r2, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bf2:	bf00      	nop
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b087      	sub	sp, #28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	0e5b      	lsrs	r3, r3, #25
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0d1b      	lsrs	r3, r3, #20
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2107      	movs	r1, #7
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	0d1b      	lsrs	r3, r3, #20
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	431a      	orrs	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f003 0318 	and.w	r3, r3, #24
 8002c76:	4908      	ldr	r1, [pc, #32]	; (8002c98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	431a      	orrs	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	0007ffff 	.word	0x0007ffff

08002c9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6093      	str	r3, [r2, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <LL_ADC_IsEnabled+0x18>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <LL_ADC_IsEnabled+0x1a>
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d101      	bne.n	8002d76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d101      	bne.n	8002d9c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e134      	b.n	8003030 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe fd79 	bl	80018cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff67 	bl	8002cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d004      	beq.n	8002e02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff4d 	bl	8002c9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff82 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff66 	bl	8002ce8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e1c:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_ADC_Init+0x28c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	4a86      	ldr	r2, [pc, #536]	; (800303c <HAL_ADC_Init+0x290>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff66 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	f043 0210 	orr.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff77 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 80cf 	bne.w	800301e <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f040 80cb 	bne.w	800301e <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e90:	f043 0202 	orr.w	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff4b 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d115      	bne.n	8002ed4 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea8:	4865      	ldr	r0, [pc, #404]	; (8003040 <HAL_ADC_Init+0x294>)
 8002eaa:	f7ff ff45 	bl	8002d38 <LL_ADC_IsEnabled>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4864      	ldr	r0, [pc, #400]	; (8003044 <HAL_ADC_Init+0x298>)
 8002eb2:	f7ff ff41 	bl	8002d38 <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	431c      	orrs	r4, r3
 8002eba:	4863      	ldr	r0, [pc, #396]	; (8003048 <HAL_ADC_Init+0x29c>)
 8002ebc:	f7ff ff3c 	bl	8002d38 <LL_ADC_IsEnabled>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4323      	orrs	r3, r4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	485f      	ldr	r0, [pc, #380]	; (800304c <HAL_ADC_Init+0x2a0>)
 8002ed0:	f7ff fde0 	bl	8002a94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	7e5b      	ldrb	r3, [r3, #25]
 8002ed8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ede:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ee4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d106      	bne.n	8002f10 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	3b01      	subs	r3, #1
 8002f08:	045b      	lsls	r3, r3, #17
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	4b47      	ldr	r3, [pc, #284]	; (8003050 <HAL_ADC_Init+0x2a4>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	69b9      	ldr	r1, [r7, #24]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff0a 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8002f4a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff17 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 8002f56:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d13d      	bne.n	8002fda <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d13a      	bne.n	8002fda <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f68:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f70:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f80:	f023 0302 	bic.w	r3, r3, #2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	69b9      	ldr	r1, [r7, #24]
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d118      	bne.n	8002fca <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fa2:	f023 0304 	bic.w	r3, r3, #4
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fae:	4311      	orrs	r1, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	611a      	str	r2, [r3, #16]
 8002fc8:	e007      	b.n	8002fda <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10c      	bne.n	8002ffc <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f023 010f 	bic.w	r1, r3, #15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8002ffa:	e007      	b.n	800300c <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 020f 	bic.w	r2, r2, #15
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f023 0303 	bic.w	r3, r3, #3
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
 800301c:	e007      	b.n	800302e <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0210 	orr.w	r2, r3, #16
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800302e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3724      	adds	r7, #36	; 0x24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	20000034 	.word	0x20000034
 800303c:	053e2d63 	.word	0x053e2d63
 8003040:	50040000 	.word	0x50040000
 8003044:	50040100 	.word	0x50040100
 8003048:	50040200 	.word	0x50040200
 800304c:	50040300 	.word	0x50040300
 8003050:	fff0c007 	.word	0xfff0c007

08003054 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b0b6      	sub	sp, #216	; 0xd8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x22>
 8003072:	2302      	movs	r3, #2
 8003074:	e3c6      	b.n	8003804 <HAL_ADC_ConfigChannel+0x7b0>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fe6b 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	f040 83a7 	bne.w	80037de <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d824      	bhi.n	80030e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	3b02      	subs	r3, #2
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d81b      	bhi.n	80030da <HAL_ADC_ConfigChannel+0x86>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <HAL_ADC_ConfigChannel+0x54>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030c1 	.word	0x080030c1
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030d1 	.word	0x080030d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	220c      	movs	r2, #12
 80030bc:	605a      	str	r2, [r3, #4]
          break;
 80030be:	e011      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2212      	movs	r2, #18
 80030c4:	605a      	str	r2, [r3, #4]
          break;
 80030c6:	e00d      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2218      	movs	r2, #24
 80030cc:	605a      	str	r2, [r3, #4]
          break;
 80030ce:	e009      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	605a      	str	r2, [r3, #4]
          break;
 80030d8:	e004      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2206      	movs	r2, #6
 80030de:	605a      	str	r2, [r3, #4]
          break;
 80030e0:	e000      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80030e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f7ff fd58 	bl	8002ba6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe2f 	bl	8002d5e <LL_ADC_REG_IsConversionOngoing>
 8003100:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe3b 	bl	8002d84 <LL_ADC_INJ_IsConversionOngoing>
 800310e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003112:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003116:	2b00      	cmp	r3, #0
 8003118:	f040 81a6 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800311c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 81a1 	bne.w	8003468 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6819      	ldr	r1, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	461a      	mov	r2, r3
 8003134:	f7ff fd63 	bl	8002bfe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	08db      	lsrs	r3, r3, #3
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b04      	cmp	r3, #4
 8003158:	d00a      	beq.n	8003170 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6919      	ldr	r1, [r3, #16]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800316a:	f7ff fcc7 	bl	8002afc <LL_ADC_SetOffset>
 800316e:	e17b      	b.n	8003468 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fce4 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x148>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fcd9 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x186>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fcce 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80031ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x19e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	e018      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800320a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800320e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e004      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800321a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003224:	429a      	cmp	r2, r3
 8003226:	d106      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fc9d 	bl	8002b70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2101      	movs	r1, #1
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fc81 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_ADC_ConfigChannel+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2101      	movs	r1, #1
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fc76 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	0e9b      	lsrs	r3, r3, #26
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	e01e      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x24c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2101      	movs	r1, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fc6b 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003280:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e004      	b.n	800329e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003298:	fab3 f383 	clz	r3, r3
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d105      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x264>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0e9b      	lsrs	r3, r3, #26
 80032b2:	f003 031f 	and.w	r3, r3, #31
 80032b6:	e018      	b.n	80032ea <HAL_ADC_ConfigChannel+0x296>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80032cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80032d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80032d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e004      	b.n	80032ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80032e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032e4:	fab3 f383 	clz	r3, r3
 80032e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d106      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fc3a 	bl	8002b70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2102      	movs	r1, #2
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fc1e 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x2d4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fc13 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 021f 	and.w	r2, r3, #31
 8003326:	e01e      	b.n	8003366 <HAL_ADC_ConfigChannel+0x312>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2102      	movs	r1, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fc08 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003346:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800334a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800334e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800335a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ADC_ConfigChannel+0x32a>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0e9b      	lsrs	r3, r3, #26
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	e016      	b.n	80033ac <HAL_ADC_ConfigChannel+0x358>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003396:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80033a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d106      	bne.n	80033be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fbd9 	bl	8002b70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2103      	movs	r1, #3
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fbbd 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x396>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2103      	movs	r1, #3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fbb2 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	0e9b      	lsrs	r3, r3, #26
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	e017      	b.n	800341a <HAL_ADC_ConfigChannel+0x3c6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2103      	movs	r1, #3
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fba7 	bl	8002b44 <LL_ADC_GetOffsetChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003404:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e003      	b.n	8003418 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x3de>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	e011      	b.n	8003456 <HAL_ADC_ConfigChannel+0x402>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800343a:	fa93 f3a3 	rbit	r3, r3
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003442:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800344a:	2320      	movs	r3, #32
 800344c:	e003      	b.n	8003456 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003456:	429a      	cmp	r2, r3
 8003458:	d106      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	2103      	movs	r1, #3
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fb84 	bl	8002b70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fc63 	bl	8002d38 <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 813f 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f7ff fbe4 	bl	8002c54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a8e      	ldr	r2, [pc, #568]	; (80036cc <HAL_ADC_ConfigChannel+0x678>)
 8003492:	4293      	cmp	r3, r2
 8003494:	f040 8130 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x46c>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	0e9b      	lsrs	r3, r3, #26
 80034ae:	3301      	adds	r3, #1
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2b09      	cmp	r3, #9
 80034b6:	bf94      	ite	ls
 80034b8:	2301      	movls	r3, #1
 80034ba:	2300      	movhi	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e019      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x4a0>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80034ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80034d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2b09      	cmp	r3, #9
 80034ec:	bf94      	ite	ls
 80034ee:	2301      	movls	r3, #1
 80034f0:	2300      	movhi	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d079      	beq.n	80035ec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d107      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x4c0>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	069b      	lsls	r3, r3, #26
 800350e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003512:	e015      	b.n	8003540 <HAL_ADC_ConfigChannel+0x4ec>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003524:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	069b      	lsls	r3, r3, #26
 800353c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x50c>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0e9b      	lsrs	r3, r3, #26
 8003552:	3301      	adds	r3, #1
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2101      	movs	r1, #1
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	e017      	b.n	8003590 <HAL_ADC_ConfigChannel+0x53c>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800356e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003570:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800357c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2101      	movs	r1, #1
 800358c:	fa01 f303 	lsl.w	r3, r1, r3
 8003590:	ea42 0103 	orr.w	r1, r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10a      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x562>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4613      	mov	r3, r2
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	4413      	add	r3, r2
 80035b2:	051b      	lsls	r3, r3, #20
 80035b4:	e018      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x594>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80035ce:	2320      	movs	r3, #32
 80035d0:	e003      	b.n	80035da <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035e8:	430b      	orrs	r3, r1
 80035ea:	e080      	b.n	80036ee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x5b4>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	069b      	lsls	r3, r3, #26
 8003602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003606:	e015      	b.n	8003634 <HAL_ADC_ConfigChannel+0x5e0>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003620:	2320      	movs	r3, #32
 8003622:	e003      	b.n	800362c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800363c:	2b00      	cmp	r3, #0
 800363e:	d109      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x600>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	3301      	adds	r3, #1
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2101      	movs	r1, #1
 800364e:	fa01 f303 	lsl.w	r3, r1, r3
 8003652:	e017      	b.n	8003684 <HAL_ADC_ConfigChannel+0x630>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	61fb      	str	r3, [r7, #28]
  return result;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	ea42 0103 	orr.w	r1, r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x65c>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0e9b      	lsrs	r3, r3, #26
 800369a:	3301      	adds	r3, #1
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	4613      	mov	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	4413      	add	r3, r2
 80036a6:	3b1e      	subs	r3, #30
 80036a8:	051b      	lsls	r3, r3, #20
 80036aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036ae:	e01d      	b.n	80036ec <HAL_ADC_ConfigChannel+0x698>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	613b      	str	r3, [r7, #16]
  return result;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80036c8:	2320      	movs	r3, #32
 80036ca:	e005      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x684>
 80036cc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f003 021f 	and.w	r2, r3, #31
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	3b1e      	subs	r3, #30
 80036e6:	051b      	lsls	r3, r3, #20
 80036e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ec:	430b      	orrs	r3, r1
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	6892      	ldr	r2, [r2, #8]
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7ff fa83 	bl	8002bfe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_ADC_ConfigChannel+0x7b8>)
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d079      	beq.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003704:	4842      	ldr	r0, [pc, #264]	; (8003810 <HAL_ADC_ConfigChannel+0x7bc>)
 8003706:	f7ff f9eb 	bl	8002ae0 <LL_ADC_GetCommonPathInternalCh>
 800370a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a40      	ldr	r2, [pc, #256]	; (8003814 <HAL_ADC_ConfigChannel+0x7c0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d12b      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800371c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d125      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <HAL_ADC_ConfigChannel+0x7c4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_ADC_ConfigChannel+0x6e4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <HAL_ADC_ConfigChannel+0x7c8>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d15c      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003740:	4619      	mov	r1, r3
 8003742:	4833      	ldr	r0, [pc, #204]	; (8003810 <HAL_ADC_ConfigChannel+0x7bc>)
 8003744:	f7ff f9b9 	bl	8002aba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_ADC_ConfigChannel+0x7cc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	4a35      	ldr	r2, [pc, #212]	; (8003824 <HAL_ADC_ConfigChannel+0x7d0>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099a      	lsrs	r2, r3, #6
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003760:	e002      	b.n	8003768 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b01      	subs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f9      	bne.n	8003762 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800376e:	e040      	b.n	80037f2 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <HAL_ADC_ConfigChannel+0x7d4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d118      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x758>
 800377a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d112      	bne.n	80037ac <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_ADC_ConfigChannel+0x7c4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_ADC_ConfigChannel+0x746>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_ADC_ConfigChannel+0x7c8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12d      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800379a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	4619      	mov	r1, r3
 80037a4:	481a      	ldr	r0, [pc, #104]	; (8003810 <HAL_ADC_ConfigChannel+0x7bc>)
 80037a6:	f7ff f988 	bl	8002aba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037aa:	e024      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_ADC_ConfigChannel+0x7d8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d120      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11a      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_ADC_ConfigChannel+0x7c4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d115      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d4:	4619      	mov	r1, r3
 80037d6:	480e      	ldr	r0, [pc, #56]	; (8003810 <HAL_ADC_ConfigChannel+0x7bc>)
 80037d8:	f7ff f96f 	bl	8002aba <LL_ADC_SetCommonPathInternalCh>
 80037dc:	e00c      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037f0:	e002      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003800:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003804:	4618      	mov	r0, r3
 8003806:	37d8      	adds	r7, #216	; 0xd8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	80080000 	.word	0x80080000
 8003810:	50040300 	.word	0x50040300
 8003814:	c7520000 	.word	0xc7520000
 8003818:	50040000 	.word	0x50040000
 800381c:	50040200 	.word	0x50040200
 8003820:	20000034 	.word	0x20000034
 8003824:	053e2d63 	.word	0x053e2d63
 8003828:	cb840000 	.word	0xcb840000
 800382c:	80000001 	.word	0x80000001

08003830 <LL_ADC_IsEnabled>:
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <LL_ADC_IsEnabled+0x18>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <LL_ADC_IsEnabled+0x1a>
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_REG_IsConversionOngoing>:
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d101      	bne.n	800386e <LL_ADC_REG_IsConversionOngoing+0x18>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b09f      	sub	sp, #124	; 0x7c
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003896:	2302      	movs	r3, #2
 8003898:	e08f      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a47      	ldr	r2, [pc, #284]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d102      	bne.n	80038b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	e001      	b.n	80038b6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e072      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff ffbd 	bl	8003856 <LL_ADC_REG_IsConversionOngoing>
 80038dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ffb7 	bl	8003856 <LL_ADC_REG_IsConversionOngoing>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d154      	bne.n	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d151      	bne.n	8003998 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038f4:	4b35      	ldr	r3, [pc, #212]	; (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02c      	beq.n	800395a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003912:	035b      	lsls	r3, r3, #13
 8003914:	430b      	orrs	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800391c:	4829      	ldr	r0, [pc, #164]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800391e:	f7ff ff87 	bl	8003830 <LL_ADC_IsEnabled>
 8003922:	4604      	mov	r4, r0
 8003924:	4828      	ldr	r0, [pc, #160]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003926:	f7ff ff83 	bl	8003830 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	431c      	orrs	r4, r3
 800392e:	4828      	ldr	r0, [pc, #160]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003930:	f7ff ff7e 	bl	8003830 <LL_ADC_IsEnabled>
 8003934:	4603      	mov	r3, r0
 8003936:	4323      	orrs	r3, r4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d137      	bne.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003944:	f023 030f 	bic.w	r3, r3, #15
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	6811      	ldr	r1, [r2, #0]
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	430a      	orrs	r2, r1
 8003952:	431a      	orrs	r2, r3
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003958:	e028      	b.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003966:	4817      	ldr	r0, [pc, #92]	; (80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003968:	f7ff ff62 	bl	8003830 <LL_ADC_IsEnabled>
 800396c:	4604      	mov	r4, r0
 800396e:	4816      	ldr	r0, [pc, #88]	; (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003970:	f7ff ff5e 	bl	8003830 <LL_ADC_IsEnabled>
 8003974:	4603      	mov	r3, r0
 8003976:	431c      	orrs	r4, r3
 8003978:	4815      	ldr	r0, [pc, #84]	; (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800397a:	f7ff ff59 	bl	8003830 <LL_ADC_IsEnabled>
 800397e:	4603      	mov	r3, r0
 8003980:	4323      	orrs	r3, r4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d112      	bne.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800398e:	f023 030f 	bic.w	r3, r3, #15
 8003992:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003994:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003996:	e009      	b.n	80039ac <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 0220 	orr.w	r2, r3, #32
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80039aa:	e000      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80039b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	377c      	adds	r7, #124	; 0x7c
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	50040000 	.word	0x50040000
 80039c8:	50040100 	.word	0x50040100
 80039cc:	50040300 	.word	0x50040300
 80039d0:	50040200 	.word	0x50040200

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	; (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	; (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	; 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf28      	it	cs
 8003ae6:	2304      	movcs	r3, #4
 8003ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d902      	bls.n	8003af8 <NVIC_EncodePriority+0x30>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3b03      	subs	r3, #3
 8003af6:	e000      	b.n	8003afa <NVIC_EncodePriority+0x32>
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	4313      	orrs	r3, r2
         );
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b40:	d301      	bcc.n	8003b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <SysTick_Config+0x40>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4e:	210f      	movs	r1, #15
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f7ff ff8e 	bl	8003a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <SysTick_Config+0x40>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5e:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <SysTick_Config+0x40>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff29 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9c:	f7ff ff3e 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003ba0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7ff ff8e 	bl	8003ac8 <NVIC_EncodePriority>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff5d 	bl	8003a74 <__NVIC_SetPriority>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff31 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffa2 	bl	8003b30 <SysTick_Config>
 8003bec:	4603      	mov	r3, r0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e098      	b.n	8003d3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b4d      	ldr	r3, [pc, #308]	; (8003d48 <HAL_DMA_Init+0x150>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d80f      	bhi.n	8003c36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4b4b      	ldr	r3, [pc, #300]	; (8003d4c <HAL_DMA_Init+0x154>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	4a4b      	ldr	r2, [pc, #300]	; (8003d50 <HAL_DMA_Init+0x158>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	009a      	lsls	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_DMA_Init+0x15c>)
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
 8003c34:	e00e      	b.n	8003c54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_DMA_Init+0x160>)
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a43      	ldr	r2, [pc, #268]	; (8003d50 <HAL_DMA_Init+0x158>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	091b      	lsrs	r3, r3, #4
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a42      	ldr	r2, [pc, #264]	; (8003d5c <HAL_DMA_Init+0x164>)
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cae:	d039      	beq.n	8003d24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <HAL_DMA_Init+0x15c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <HAL_DMA_Init+0x168>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f003 031c 	and.w	r3, r3, #28
 8003cc6:	210f      	movs	r1, #15
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	4924      	ldr	r1, [pc, #144]	; (8003d60 <HAL_DMA_Init+0x168>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <HAL_DMA_Init+0x168>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f003 031c 	and.w	r3, r3, #28
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	491d      	ldr	r1, [pc, #116]	; (8003d60 <HAL_DMA_Init+0x168>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
 8003cee:	e019      	b.n	8003d24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_DMA_Init+0x16c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f003 031c 	and.w	r3, r3, #28
 8003cfc:	210f      	movs	r1, #15
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	4917      	ldr	r1, [pc, #92]	; (8003d64 <HAL_DMA_Init+0x16c>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <HAL_DMA_Init+0x16c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f003 031c 	and.w	r3, r3, #28
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	4911      	ldr	r1, [pc, #68]	; (8003d64 <HAL_DMA_Init+0x16c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40020407 	.word	0x40020407
 8003d4c:	bffdfff8 	.word	0xbffdfff8
 8003d50:	cccccccd 	.word	0xcccccccd
 8003d54:	40020000 	.word	0x40020000
 8003d58:	bffdfbf8 	.word	0xbffdfbf8
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	400200a8 	.word	0x400200a8
 8003d64:	400204a8 	.word	0x400204a8

08003d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_DMA_Start_IT+0x20>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e04b      	b.n	8003e20 <HAL_DMA_Start_IT+0xb8>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d13a      	bne.n	8003e12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f921 	bl	8004008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d008      	beq.n	8003de0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 020e 	orr.w	r2, r2, #14
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e00f      	b.n	8003e00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 020a 	orr.w	r2, r2, #10
 8003dfe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e005      	b.n	8003e1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d005      	beq.n	8003e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2204      	movs	r2, #4
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
 8003e4a:	e029      	b.n	8003ea0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020e 	bic.w	r2, r2, #14
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f003 021c 	and.w	r2, r3, #28
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
    }
  }
  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f003 031c 	and.w	r3, r3, #28
 8003eca:	2204      	movs	r2, #4
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d026      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x7a>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d021      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d107      	bne.n	8003efe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 021c 	and.w	r2, r3, #28
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d071      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003f22:	e06c      	b.n	8003ffe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f003 031c 	and.w	r3, r3, #28
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02e      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xec>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d029      	beq.n	8003f96 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 020a 	bic.w	r2, r2, #10
 8003f5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6c:	f003 021c 	and.w	r2, r3, #28
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2102      	movs	r1, #2
 8003f76:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d038      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f94:	e033      	b.n	8003ffe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f003 031c 	and.w	r3, r3, #28
 8003f9e:	2208      	movs	r2, #8
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d02a      	beq.n	8004000 <HAL_DMA_IRQHandler+0x156>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d025      	beq.n	8004000 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 020e 	bic.w	r2, r2, #14
 8003fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc8:	f003 021c 	and.w	r2, r3, #28
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
}
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f003 021c 	and.w	r2, r3, #28
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d108      	bne.n	800404c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800404a:	e007      	b.n	800405c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004076:	e17f      	b.n	8004378 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2101      	movs	r1, #1
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 8171 	beq.w	8004372 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d00b      	beq.n	80040b0 <HAL_GPIO_Init+0x48>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d007      	beq.n	80040b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a4:	2b11      	cmp	r3, #17
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b12      	cmp	r3, #18
 80040ae:	d130      	bne.n	8004112 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	2203      	movs	r2, #3
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	43db      	mvns	r3, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040e6:	2201      	movs	r2, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4013      	ands	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 0201 	and.w	r2, r3, #1
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b03      	cmp	r3, #3
 800411c:	d118      	bne.n	8004150 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004124:	2201      	movs	r2, #1
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f003 0201 	and.w	r2, r3, #1
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	2203      	movs	r2, #3
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x128>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b12      	cmp	r3, #18
 800418e:	d123      	bne.n	80041d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	220f      	movs	r2, #15
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	43db      	mvns	r3, r3
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	08da      	lsrs	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3208      	adds	r2, #8
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0203 	and.w	r2, r3, #3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80ac 	beq.w	8004372 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421a:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_GPIO_Init+0x32c>)
 800421c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421e:	4a5d      	ldr	r2, [pc, #372]	; (8004394 <HAL_GPIO_Init+0x32c>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6613      	str	r3, [r2, #96]	; 0x60
 8004226:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <HAL_GPIO_Init+0x32c>)
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004232:	4a59      	ldr	r2, [pc, #356]	; (8004398 <HAL_GPIO_Init+0x330>)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	3302      	adds	r3, #2
 800423a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800425c:	d025      	beq.n	80042aa <HAL_GPIO_Init+0x242>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	; (800439c <HAL_GPIO_Init+0x334>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01f      	beq.n	80042a6 <HAL_GPIO_Init+0x23e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4d      	ldr	r2, [pc, #308]	; (80043a0 <HAL_GPIO_Init+0x338>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d019      	beq.n	80042a2 <HAL_GPIO_Init+0x23a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4c      	ldr	r2, [pc, #304]	; (80043a4 <HAL_GPIO_Init+0x33c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_GPIO_Init+0x236>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <HAL_GPIO_Init+0x340>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00d      	beq.n	800429a <HAL_GPIO_Init+0x232>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4a      	ldr	r2, [pc, #296]	; (80043ac <HAL_GPIO_Init+0x344>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <HAL_GPIO_Init+0x22e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <HAL_GPIO_Init+0x348>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_GPIO_Init+0x22a>
 800428e:	2306      	movs	r3, #6
 8004290:	e00c      	b.n	80042ac <HAL_GPIO_Init+0x244>
 8004292:	2307      	movs	r3, #7
 8004294:	e00a      	b.n	80042ac <HAL_GPIO_Init+0x244>
 8004296:	2305      	movs	r3, #5
 8004298:	e008      	b.n	80042ac <HAL_GPIO_Init+0x244>
 800429a:	2304      	movs	r3, #4
 800429c:	e006      	b.n	80042ac <HAL_GPIO_Init+0x244>
 800429e:	2303      	movs	r3, #3
 80042a0:	e004      	b.n	80042ac <HAL_GPIO_Init+0x244>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e002      	b.n	80042ac <HAL_GPIO_Init+0x244>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_GPIO_Init+0x244>
 80042aa:	2300      	movs	r3, #0
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	f002 0203 	and.w	r2, r2, #3
 80042b2:	0092      	lsls	r2, r2, #2
 80042b4:	4093      	lsls	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042bc:	4936      	ldr	r1, [pc, #216]	; (8004398 <HAL_GPIO_Init+0x330>)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	089b      	lsrs	r3, r3, #2
 80042c2:	3302      	adds	r3, #2
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80042ca:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4013      	ands	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ee:	4a31      	ldr	r2, [pc, #196]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042f4:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004318:	4a26      	ldr	r2, [pc, #152]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800431e:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	43db      	mvns	r3, r3
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004348:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	43db      	mvns	r3, r3
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4013      	ands	r3, r2
 8004356:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <HAL_GPIO_Init+0x34c>)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	3301      	adds	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa22 f303 	lsr.w	r3, r2, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	f47f ae78 	bne.w	8004078 <HAL_GPIO_Init+0x10>
  }
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40021000 	.word	0x40021000
 8004398:	40010000 	.word	0x40010000
 800439c:	48000400 	.word	0x48000400
 80043a0:	48000800 	.word	0x48000800
 80043a4:	48000c00 	.word	0x48000c00
 80043a8:	48001000 	.word	0x48001000
 80043ac:	48001400 	.word	0x48001400
 80043b0:	48001800 	.word	0x48001800
 80043b4:	40010400 	.word	0x40010400

080043b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	807b      	strh	r3, [r7, #2]
 80043c4:	4613      	mov	r3, r2
 80043c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043d4:	e002      	b.n	80043dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043d6:	887a      	ldrh	r2, [r7, #2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d130      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d038      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2232      	movs	r2, #50	; 0x32
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0c9b      	lsrs	r3, r3, #18
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004448:	e002      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b01      	subs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d102      	bne.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x60>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f2      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d110      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d007      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004492:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40007000 	.word	0x40007000
 80044a8:	20000034 	.word	0x20000034
 80044ac:	431bde83 	.word	0x431bde83

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e3d4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c2:	4ba1      	ldr	r3, [pc, #644]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044cc:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80e4 	beq.w	80046ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_RCC_OscConfig+0x4a>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	f040 808b 	bne.w	8004608 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 8087 	bne.w	8004608 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044fa:	4b93      	ldr	r3, [pc, #588]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e3ac      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_RCC_OscConfig+0x7c>
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452a:	e005      	b.n	8004538 <HAL_RCC_OscConfig+0x88>
 800452c:	4b86      	ldr	r3, [pc, #536]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	4293      	cmp	r3, r2
 800453a:	d223      	bcs.n	8004584 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd07 	bl	8004f54 <RCC_SetFlashLatencyFromMSIRange>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e38d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004550:	4b7d      	ldr	r3, [pc, #500]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7c      	ldr	r2, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b7a      	ldr	r3, [pc, #488]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4977      	ldr	r1, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456e:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	4972      	ldr	r1, [pc, #456]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e025      	b.n	80045d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004584:	4b70      	ldr	r3, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6f      	ldr	r2, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	496a      	ldr	r1, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a2:	4b69      	ldr	r3, [pc, #420]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	4965      	ldr	r1, [pc, #404]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fcc7 	bl	8004f54 <RCC_SetFlashLatencyFromMSIRange>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e34d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d0:	f000 fc36 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 80045d4:	4601      	mov	r1, r0
 80045d6:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	4a5a      	ldr	r2, [pc, #360]	; (800474c <HAL_RCC_OscConfig+0x29c>)
 80045e2:	5cd3      	ldrb	r3, [r2, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa21 f303 	lsr.w	r3, r1, r3
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x2a0>)
 80045ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCC_OscConfig+0x2a4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe f9cf 	bl	8002998 <HAL_InitTick>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d052      	beq.n	80046aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	e331      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d032      	beq.n	8004676 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004610:	4b4d      	ldr	r3, [pc, #308]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800461c:	f7fe fa0c 	bl	8002a38 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004624:	f7fe fa08 	bl	8002a38 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e31a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a40      	ldr	r2, [pc, #256]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	493b      	ldr	r1, [pc, #236]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4936      	ldr	r1, [pc, #216]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e01a      	b.n	80046ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004676:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a33      	ldr	r2, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004682:	f7fe f9d9 	bl	8002a38 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800468a:	f7fe f9d5 	bl	8002a38 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e2e7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x1da>
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d074      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x21a>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d10e      	bne.n	80046e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ca:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d064      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d160      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e2c4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x24a>
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e01d      	b.n	8004736 <HAL_RCC_OscConfig+0x286>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x26e>
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800470a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x286>
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a06      	ldr	r2, [pc, #24]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01c      	beq.n	8004778 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fe f97b 	bl	8002a38 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004744:	e011      	b.n	800476a <HAL_RCC_OscConfig+0x2ba>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	08008de8 	.word	0x08008de8
 8004750:	20000034 	.word	0x20000034
 8004754:	20000038 	.word	0x20000038
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fe f96e 	bl	8002a38 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e280      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	4baf      	ldr	r3, [pc, #700]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x2a8>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe f95e 	bl	8002a38 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe f95a 	bl	8002a38 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e26c      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004792:	4ba5      	ldr	r3, [pc, #660]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x2d0>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d060      	beq.n	8004870 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_OscConfig+0x310>
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d119      	bne.n	80047ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d116      	bne.n	80047ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	4b99      	ldr	r3, [pc, #612]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_OscConfig+0x328>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e249      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	4990      	ldr	r1, [pc, #576]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ec:	e040      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d023      	beq.n	800483e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f6:	4b8c      	ldr	r3, [pc, #560]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8b      	ldr	r2, [pc, #556]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fe f919 	bl	8002a38 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7fe f915 	bl	8002a38 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e227      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	497c      	ldr	r1, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e018      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a79      	ldr	r2, [pc, #484]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe f8f5 	bl	8002a38 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe f8f1 	bl	8002a38 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e203      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004864:	4b70      	ldr	r3, [pc, #448]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01c      	beq.n	80048be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488a:	4a67      	ldr	r2, [pc, #412]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe f8d0 	bl	8002a38 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe f8cc 	bl	8002a38 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1de      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ae:	4b5e      	ldr	r3, [pc, #376]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <HAL_RCC_OscConfig+0x3ec>
 80048bc:	e01b      	b.n	80048f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048be:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fe f8b3 	bl	8002a38 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fe f8af 	bl	8002a38 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1c1      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e8:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a6 	beq.w	8004a50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	4a43      	ldr	r2, [pc, #268]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	; 0x58
 8004920:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004930:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d118      	bne.n	800496e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004948:	f7fe f876 	bl	8002a38 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fe f872 	bl	8002a38 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e184      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <HAL_RCC_OscConfig+0x4d8>
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004986:	e024      	b.n	80049d2 <HAL_RCC_OscConfig+0x522>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d110      	bne.n	80049b2 <HAL_RCC_OscConfig+0x502>
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a20      	ldr	r2, [pc, #128]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b0:	e00f      	b.n	80049d2 <HAL_RCC_OscConfig+0x522>
 80049b2:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049ca:	f023 0304 	bic.w	r3, r3, #4
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fe f82d 	bl	8002a38 <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fe f829 	bl	8002a38 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e139      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ed      	beq.n	80049e2 <HAL_RCC_OscConfig+0x532>
 8004a06:	e01a      	b.n	8004a3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe f816 	bl	8002a38 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe f812 	bl	8002a38 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d906      	bls.n	8004a30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e122      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a30:	4b90      	ldr	r3, [pc, #576]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e8      	bne.n	8004a10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a8a      	ldr	r2, [pc, #552]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8108 	beq.w	8004c6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	f040 80d0 	bne.w	8004c04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a64:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f003 0203 	and.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d130      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	3b01      	subs	r3, #1
 8004a84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d127      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d11f      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa4:	2a07      	cmp	r2, #7
 8004aa6:	bf14      	ite	ne
 8004aa8:	2201      	movne	r2, #1
 8004aaa:	2200      	moveq	r2, #0
 8004aac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d113      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d06e      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d069      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ae0:	4b64      	ldr	r3, [pc, #400]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004afc:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b08:	f7fd ff96 	bl	8002a38 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd ff92 	bl	8002a38 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0a4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2e:	4b51      	ldr	r3, [pc, #324]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCC_OscConfig+0x7c8>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b48:	0212      	lsls	r2, r2, #8
 8004b4a:	4311      	orrs	r1, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b50:	0852      	lsrs	r2, r2, #1
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0552      	lsls	r2, r2, #21
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b5c:	0852      	lsrs	r2, r2, #1
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	0652      	lsls	r2, r2, #25
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b68:	0912      	lsrs	r2, r2, #4
 8004b6a:	0452      	lsls	r2, r2, #17
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4941      	ldr	r1, [pc, #260]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b74:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b80:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b8c:	f7fd ff54 	bl	8002a38 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd ff50 	bl	8002a38 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e062      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb2:	e05a      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e059      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d152      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bdc:	f7fd ff2c 	bl	8002a38 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fd ff28 	bl	8002a38 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e03a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x734>
 8004c02:	e032      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d02d      	beq.n	8004c66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c28:	f023 0303 	bic.w	r3, r3, #3
 8004c2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fd fefb 	bl	8002a38 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fd fef7 	bl	8002a38 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e009      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0x796>
 8004c64:	e001      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	f99d808c 	.word	0xf99d808c

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0c8      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d910      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4961      	ldr	r1, [pc, #388]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b5f      	ldr	r3, [pc, #380]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b0      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d04c      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd4:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e09e      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d115      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e092      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d04:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e086      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d14:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e07e      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d24:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 0203 	bic.w	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	493f      	ldr	r1, [pc, #252]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fd fe7f 	bl	8002a38 <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3e:	f7fd fe7b 	bl	8002a38 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e066      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 020c 	and.w	r2, r3, #12
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d1eb      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d72:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	492c      	ldr	r1, [pc, #176]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d84:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d210      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 0207 	bic.w	r2, r3, #7
 8004d9a:	4924      	ldr	r1, [pc, #144]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e036      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4918      	ldr	r1, [pc, #96]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4910      	ldr	r1, [pc, #64]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004df2:	f000 f825 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8004df6:	4601      	mov	r1, r0
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_RCC_ClockConfig+0x1c0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd fdbe 	bl	8002998 <HAL_InitTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e20:	7afb      	ldrb	r3, [r7, #11]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40021000 	.word	0x40021000
 8004e34:	08008de8 	.word	0x08008de8
 8004e38:	20000034 	.word	0x20000034
 8004e3c:	20000038 	.word	0x20000038

08004e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e58:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x34>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d11e      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e74:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e80:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e005      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e90:	4b2c      	ldr	r3, [pc, #176]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e9c:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d102      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb8:	4b24      	ldr	r3, [pc, #144]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec4:	4b22      	ldr	r3, [pc, #136]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d133      	bne.n	8004f36 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ece:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d002      	beq.n	8004ee4 <HAL_RCC_GetSysClockFreq+0xa4>
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0xaa>
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ee4:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ee6:	617b      	str	r3, [r7, #20]
      break;
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eea:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eec:	617b      	str	r3, [r7, #20]
      break;
 8004eee:	e002      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	617b      	str	r3, [r7, #20]
      break;
 8004ef4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f003 0307 	and.w	r3, r3, #7
 8004f00:	3301      	adds	r3, #1
 8004f02:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	fb02 f203 	mul.w	r2, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x104>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	0e5b      	lsrs	r3, r3, #25
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	3301      	adds	r3, #1
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f34:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f36:	69bb      	ldr	r3, [r7, #24]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3724      	adds	r7, #36	; 0x24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40021000 	.word	0x40021000
 8004f48:	08008df8 	.word	0x08008df8
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200

08004f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f6c:	f7ff fa3c 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 8004f70:	6178      	str	r0, [r7, #20]
 8004f72:	e014      	b.n	8004f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f74:	4b25      	ldr	r3, [pc, #148]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f78:	4a24      	ldr	r2, [pc, #144]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f80:	4b22      	ldr	r3, [pc, #136]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f8c:	f7ff fa2c 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 8004f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	4a1d      	ldr	r2, [pc, #116]	; (800500c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa4:	d10b      	bne.n	8004fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d919      	bls.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2ba0      	cmp	r3, #160	; 0xa0
 8004fb0:	d902      	bls.n	8004fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	e013      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fb8:	2301      	movs	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
 8004fbc:	e010      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d902      	bls.n	8004fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	e00a      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d102      	bne.n	8004fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e004      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b70      	cmp	r3, #112	; 0x70
 8004fda:	d101      	bne.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fdc:	2301      	movs	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 0207 	bic.w	r2, r3, #7
 8004fe8:	4909      	ldr	r1, [pc, #36]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d001      	beq.n	8005002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000
 8005010:	40022000 	.word	0x40022000

08005014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800501c:	2300      	movs	r3, #0
 800501e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005020:	2300      	movs	r3, #0
 8005022:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03f      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005038:	d01c      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800503a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503e:	d802      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00e      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005044:	e01f      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005046:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800504a:	d003      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800504c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005050:	d01c      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005052:	e018      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005054:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a84      	ldr	r2, [pc, #528]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800505a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800505e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005060:	e015      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	2100      	movs	r1, #0
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fab9 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 800506e:	4603      	mov	r3, r0
 8005070:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005072:	e00c      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3320      	adds	r3, #32
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fba0 	bl	80057c0 <RCCEx_PLLSAI2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005084:	e003      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	74fb      	strb	r3, [r7, #19]
      break;
 800508a:	e000      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800508c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005094:	4b75      	ldr	r3, [pc, #468]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a2:	4972      	ldr	r1, [pc, #456]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050aa:	e001      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d03f      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050c4:	d01c      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80050c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050ca:	d802      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0xda>
 80050d0:	e01f      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80050d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050d6:	d003      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80050d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050dc:	d01c      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80050de:	e018      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050e0:	4b62      	ldr	r3, [pc, #392]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4a61      	ldr	r2, [pc, #388]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ec:	e015      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	2100      	movs	r1, #0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fa73 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 80050fa:	4603      	mov	r3, r0
 80050fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050fe:	e00c      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3320      	adds	r3, #32
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb5a 	bl	80057c0 <RCCEx_PLLSAI2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005110:	e003      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	74fb      	strb	r3, [r7, #19]
      break;
 8005116:	e000      	b.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800511a:	7cfb      	ldrb	r3, [r7, #19]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005120:	4b52      	ldr	r3, [pc, #328]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800512e:	494f      	ldr	r1, [pc, #316]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005136:	e001      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a0 	beq.w	800528a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800514a:	2300      	movs	r3, #0
 800514c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800514e:	4b47      	ldr	r3, [pc, #284]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	4a40      	ldr	r2, [pc, #256]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516e:	6593      	str	r3, [r2, #88]	; 0x58
 8005170:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517c:	2301      	movs	r3, #1
 800517e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005180:	4b3b      	ldr	r3, [pc, #236]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a3a      	ldr	r2, [pc, #232]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800518c:	f7fd fc54 	bl	8002a38 <HAL_GetTick>
 8005190:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005192:	e009      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005194:	f7fd fc50 	bl	8002a38 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d902      	bls.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	74fb      	strb	r3, [r7, #19]
        break;
 80051a6:	e005      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051a8:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ef      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d15c      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01f      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d019      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051d8:	4b24      	ldr	r3, [pc, #144]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051e4:	4b21      	ldr	r3, [pc, #132]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	4a20      	ldr	r2, [pc, #128]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051f4:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80051fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005204:	4a19      	ldr	r2, [pc, #100]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005216:	f7fd fc0f 	bl	8002a38 <HAL_GetTick>
 800521a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521c:	e00b      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521e:	f7fd fc0b 	bl	8002a38 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	f241 3288 	movw	r2, #5000	; 0x1388
 800522c:	4293      	cmp	r3, r2
 800522e:	d902      	bls.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	74fb      	strb	r3, [r7, #19]
            break;
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005236:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0ec      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10c      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	4904      	ldr	r1, [pc, #16]	; (800526c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005262:	e009      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005264:	7cfb      	ldrb	r3, [r7, #19]
 8005266:	74bb      	strb	r3, [r7, #18]
 8005268:	e006      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005278:	7c7b      	ldrb	r3, [r7, #17]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d105      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527e:	4b9e      	ldr	r3, [pc, #632]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005282:	4a9d      	ldr	r2, [pc, #628]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005288:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005296:	4b98      	ldr	r3, [pc, #608]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f023 0203 	bic.w	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	4994      	ldr	r1, [pc, #592]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052b8:	4b8f      	ldr	r3, [pc, #572]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f023 020c 	bic.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c6:	498c      	ldr	r1, [pc, #560]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052da:	4b87      	ldr	r3, [pc, #540]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	4983      	ldr	r1, [pc, #524]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052fc:	4b7e      	ldr	r3, [pc, #504]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	497b      	ldr	r1, [pc, #492]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800531e:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800532c:	4972      	ldr	r1, [pc, #456]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005340:	4b6d      	ldr	r3, [pc, #436]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	496a      	ldr	r1, [pc, #424]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005362:	4b65      	ldr	r3, [pc, #404]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005370:	4961      	ldr	r1, [pc, #388]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005384:	4b5c      	ldr	r3, [pc, #368]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005392:	4959      	ldr	r1, [pc, #356]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00a      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b4:	4950      	ldr	r1, [pc, #320]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053c8:	4b4b      	ldr	r3, [pc, #300]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	4948      	ldr	r1, [pc, #288]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053ea:	4b43      	ldr	r3, [pc, #268]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	493f      	ldr	r1, [pc, #252]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d028      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800540c:	4b3a      	ldr	r3, [pc, #232]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800541a:	4937      	ldr	r1, [pc, #220]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542a:	d106      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
 8005438:	e011      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005442:	d10c      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f8c8 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d028      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800546a:	4b23      	ldr	r3, [pc, #140]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	491f      	ldr	r1, [pc, #124]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4a1a      	ldr	r2, [pc, #104]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005494:	60d3      	str	r3, [r2, #12]
 8005496:	e011      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f899 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d02b      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054c8:	4b0b      	ldr	r3, [pc, #44]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	4908      	ldr	r1, [pc, #32]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054e6:	d109      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054e8:	4b03      	ldr	r3, [pc, #12]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	4a02      	ldr	r2, [pc, #8]	; (80054f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80054ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054f2:	60d3      	str	r3, [r2, #12]
 80054f4:	e014      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005504:	d10c      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3304      	adds	r3, #4
 800550a:	2101      	movs	r1, #1
 800550c:	4618      	mov	r0, r3
 800550e:	f000 f867 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8005512:	4603      	mov	r3, r0
 8005514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d02f      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800552c:	4b2b      	ldr	r3, [pc, #172]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800553a:	4928      	ldr	r1, [pc, #160]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553c:	4313      	orrs	r3, r2
 800553e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554a:	d10d      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	2102      	movs	r1, #2
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f844 	bl	80055e0 <RCCEx_PLLSAI1_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800555c:	7cfb      	ldrb	r3, [r7, #19]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d014      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005562:	7cfb      	ldrb	r3, [r7, #19]
 8005564:	74bb      	strb	r3, [r7, #18]
 8005566:	e011      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800556c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005570:	d10c      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3320      	adds	r3, #32
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f000 f921 	bl	80057c0 <RCCEx_PLLSAI2_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005588:	7cfb      	ldrb	r3, [r7, #19]
 800558a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005598:	4b10      	ldr	r3, [pc, #64]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a6:	490d      	ldr	r1, [pc, #52]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ca:	4904      	ldr	r1, [pc, #16]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80055d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000

080055e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ee:	4b73      	ldr	r3, [pc, #460]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d018      	beq.n	800562c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055fa:	4b70      	ldr	r3, [pc, #448]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f003 0203 	and.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d10d      	bne.n	8005626 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
       ||
 800560e:	2b00      	cmp	r3, #0
 8005610:	d009      	beq.n	8005626 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005612:	4b6a      	ldr	r3, [pc, #424]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
       ||
 8005622:	429a      	cmp	r2, r3
 8005624:	d044      	beq.n	80056b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	e041      	b.n	80056b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b02      	cmp	r3, #2
 8005632:	d00c      	beq.n	800564e <RCCEx_PLLSAI1_Config+0x6e>
 8005634:	2b03      	cmp	r3, #3
 8005636:	d013      	beq.n	8005660 <RCCEx_PLLSAI1_Config+0x80>
 8005638:	2b01      	cmp	r3, #1
 800563a:	d120      	bne.n	800567e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800563c:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11d      	bne.n	8005684 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564c:	e01a      	b.n	8005684 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800564e:	4b5b      	ldr	r3, [pc, #364]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005656:	2b00      	cmp	r3, #0
 8005658:	d116      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565e:	e013      	b.n	8005688 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005660:	4b56      	ldr	r3, [pc, #344]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10f      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800566c:	4b53      	ldr	r3, [pc, #332]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d109      	bne.n	800568c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800567c:	e006      	b.n	800568c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      break;
 8005682:	e004      	b.n	800568e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005684:	bf00      	nop
 8005686:	e002      	b.n	800568e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800568c:	bf00      	nop
    }

    if(status == HAL_OK)
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005694:	4b49      	ldr	r3, [pc, #292]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	3b01      	subs	r3, #1
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	430b      	orrs	r3, r1
 80056aa:	4944      	ldr	r1, [pc, #272]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d17d      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c2:	f7fd f9b9 	bl	8002a38 <HAL_GetTick>
 80056c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056c8:	e009      	b.n	80056de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ca:	f7fd f9b5 	bl	8002a38 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d902      	bls.n	80056de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	73fb      	strb	r3, [r7, #15]
        break;
 80056dc:	e005      	b.n	80056ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056de:	4b37      	ldr	r3, [pc, #220]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ef      	bne.n	80056ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d160      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d111      	bne.n	800571a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	0211      	lsls	r1, r2, #8
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68d2      	ldr	r2, [r2, #12]
 800570c:	0912      	lsrs	r2, r2, #4
 800570e:	0452      	lsls	r2, r2, #17
 8005710:	430a      	orrs	r2, r1
 8005712:	492a      	ldr	r1, [pc, #168]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
 8005718:	e027      	b.n	800576a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d112      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6892      	ldr	r2, [r2, #8]
 8005730:	0211      	lsls	r1, r2, #8
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6912      	ldr	r2, [r2, #16]
 8005736:	0852      	lsrs	r2, r2, #1
 8005738:	3a01      	subs	r2, #1
 800573a:	0552      	lsls	r2, r2, #21
 800573c:	430a      	orrs	r2, r1
 800573e:	491f      	ldr	r1, [pc, #124]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
 8005744:	e011      	b.n	800576a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800574e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6892      	ldr	r2, [r2, #8]
 8005756:	0211      	lsls	r1, r2, #8
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6952      	ldr	r2, [r2, #20]
 800575c:	0852      	lsrs	r2, r2, #1
 800575e:	3a01      	subs	r2, #1
 8005760:	0652      	lsls	r2, r2, #25
 8005762:	430a      	orrs	r2, r1
 8005764:	4915      	ldr	r1, [pc, #84]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800576a:	4b14      	ldr	r3, [pc, #80]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a13      	ldr	r2, [pc, #76]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005774:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fd f95f 	bl	8002a38 <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800577c:	e009      	b.n	8005792 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800577e:	f7fd f95b 	bl	8002a38 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d902      	bls.n	8005792 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	73fb      	strb	r3, [r7, #15]
          break;
 8005790:	e005      	b.n	800579e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0ef      	beq.n	800577e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	4903      	ldr	r1, [pc, #12]	; (80057bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000

080057c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057ce:	4b68      	ldr	r3, [pc, #416]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d018      	beq.n	800580c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057da:	4b65      	ldr	r3, [pc, #404]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f003 0203 	and.w	r2, r3, #3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d10d      	bne.n	8005806 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
       ||
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057f2:	4b5f      	ldr	r3, [pc, #380]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	091b      	lsrs	r3, r3, #4
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
       ||
 8005802:	429a      	cmp	r2, r3
 8005804:	d044      	beq.n	8005890 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
 800580a:	e041      	b.n	8005890 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d00c      	beq.n	800582e <RCCEx_PLLSAI2_Config+0x6e>
 8005814:	2b03      	cmp	r3, #3
 8005816:	d013      	beq.n	8005840 <RCCEx_PLLSAI2_Config+0x80>
 8005818:	2b01      	cmp	r3, #1
 800581a:	d120      	bne.n	800585e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800581c:	4b54      	ldr	r3, [pc, #336]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11d      	bne.n	8005864 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800582c:	e01a      	b.n	8005864 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800582e:	4b50      	ldr	r3, [pc, #320]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800583e:	e013      	b.n	8005868 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005840:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10f      	bne.n	800586c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800584c:	4b48      	ldr	r3, [pc, #288]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800585c:	e006      	b.n	800586c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
      break;
 8005862:	e004      	b.n	800586e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005864:	bf00      	nop
 8005866:	e002      	b.n	800586e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005868:	bf00      	nop
 800586a:	e000      	b.n	800586e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800586c:	bf00      	nop
    }

    if(status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10d      	bne.n	8005890 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005874:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6819      	ldr	r1, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	3b01      	subs	r3, #1
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	430b      	orrs	r3, r1
 800588a:	4939      	ldr	r1, [pc, #228]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d167      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005896:	4b36      	ldr	r3, [pc, #216]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a35      	ldr	r2, [pc, #212]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800589c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a2:	f7fd f8c9 	bl	8002a38 <HAL_GetTick>
 80058a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058a8:	e009      	b.n	80058be <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058aa:	f7fd f8c5 	bl	8002a38 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d902      	bls.n	80058be <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	73fb      	strb	r3, [r7, #15]
        break;
 80058bc:	e005      	b.n	80058ca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058be:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ef      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d14a      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d111      	bne.n	80058fa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d6:	4b26      	ldr	r3, [pc, #152]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6892      	ldr	r2, [r2, #8]
 80058e6:	0211      	lsls	r1, r2, #8
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68d2      	ldr	r2, [r2, #12]
 80058ec:	0912      	lsrs	r2, r2, #4
 80058ee:	0452      	lsls	r2, r2, #17
 80058f0:	430a      	orrs	r2, r1
 80058f2:	491f      	ldr	r1, [pc, #124]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	614b      	str	r3, [r1, #20]
 80058f8:	e011      	b.n	800591e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058fa:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6892      	ldr	r2, [r2, #8]
 800590a:	0211      	lsls	r1, r2, #8
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6912      	ldr	r2, [r2, #16]
 8005910:	0852      	lsrs	r2, r2, #1
 8005912:	3a01      	subs	r2, #1
 8005914:	0652      	lsls	r2, r2, #25
 8005916:	430a      	orrs	r2, r1
 8005918:	4915      	ldr	r1, [pc, #84]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a13      	ldr	r2, [pc, #76]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fd f885 	bl	8002a38 <HAL_GetTick>
 800592e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005930:	e009      	b.n	8005946 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005932:	f7fd f881 	bl	8002a38 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d902      	bls.n	8005946 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	73fb      	strb	r3, [r7, #15]
          break;
 8005944:	e005      	b.n	8005952 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ef      	beq.n	8005932 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005962:	4313      	orrs	r3, r2
 8005964:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40021000 	.word	0x40021000

08005974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e095      	b.n	8005ab2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005996:	d009      	beq.n	80059ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	e005      	b.n	80059ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fc62 	bl	8002290 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ec:	d902      	bls.n	80059f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e002      	b.n	80059fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a02:	d007      	beq.n	8005a14 <HAL_SPI_Init+0xa0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a0c:	d002      	beq.n	8005a14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a56:	ea42 0103 	orr.w	r1, r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	f003 0204 	and.w	r2, r3, #4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a90:	ea42 0103 	orr.w	r1, r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_SPI_Transmit+0x22>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e158      	b.n	8005d8e <HAL_SPI_Transmit+0x2d4>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae4:	f7fc ffa8 	bl	8002a38 <HAL_GetTick>
 8005ae8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005aea:	88fb      	ldrh	r3, [r7, #6]
 8005aec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d002      	beq.n	8005b00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005afa:	2302      	movs	r3, #2
 8005afc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005afe:	e13d      	b.n	8005d7c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_SPI_Transmit+0x52>
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b10:	e134      	b.n	8005d7c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	88fa      	ldrh	r2, [r7, #6]
 8005b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	88fa      	ldrh	r2, [r7, #6]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b5c:	d10f      	bne.n	8005b7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d007      	beq.n	8005b9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba4:	d94b      	bls.n	8005c3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_SPI_Transmit+0xfa>
 8005bae:	8afb      	ldrh	r3, [r7, #22]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d13e      	bne.n	8005c32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	881a      	ldrh	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bd8:	e02b      	b.n	8005c32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d112      	bne.n	8005c0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c0c:	e011      	b.n	8005c32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0e:	f7fc ff13 	bl	8002a38 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d803      	bhi.n	8005c26 <HAL_SPI_Transmit+0x16c>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d102      	bne.n	8005c2c <HAL_SPI_Transmit+0x172>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c30:	e0a4      	b.n	8005d7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1ce      	bne.n	8005bda <HAL_SPI_Transmit+0x120>
 8005c3c:	e07c      	b.n	8005d38 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_SPI_Transmit+0x192>
 8005c46:	8afb      	ldrh	r3, [r7, #22]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d170      	bne.n	8005d2e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d912      	bls.n	8005c7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	881a      	ldrh	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b02      	subs	r3, #2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c7a:	e058      	b.n	8005d2e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ca2:	e044      	b.n	8005d2e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d12b      	bne.n	8005d0a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d912      	bls.n	8005ce2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	1c9a      	adds	r2, r3, #2
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	3b02      	subs	r3, #2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ce0:	e025      	b.n	8005d2e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	7812      	ldrb	r2, [r2, #0]
 8005cee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d08:	e011      	b.n	8005d2e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0a:	f7fc fe95 	bl	8002a38 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d803      	bhi.n	8005d22 <HAL_SPI_Transmit+0x268>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d102      	bne.n	8005d28 <HAL_SPI_Transmit+0x26e>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d102      	bne.n	8005d2e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d2c:	e026      	b.n	8005d7c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1b5      	bne.n	8005ca4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fbdf 	bl	8006500 <SPI_EndRxTxTransaction>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	613b      	str	r3, [r7, #16]
 8005d6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e000      	b.n	8005d7c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3720      	adds	r7, #32
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_SPI_Transmit_DMA+0x20>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e0d8      	b.n	8005f6a <HAL_SPI_Transmit_DMA+0x1d2>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005dd0:	e0c6      	b.n	8005f60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <HAL_SPI_Transmit_DMA+0x46>
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005de2:	e0bd      	b.n	8005f60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2203      	movs	r2, #3
 8005de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	88fa      	ldrh	r2, [r7, #6]
 8005e02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2e:	d10f      	bne.n	8005e50 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	4a47      	ldr	r2, [pc, #284]	; (8005f74 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	4a46      	ldr	r2, [pc, #280]	; (8005f78 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e64:	4a45      	ldr	r2, [pc, #276]	; (8005f7c <HAL_SPI_Transmit_DMA+0x1e4>)
 8005e66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e7e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e88:	d82d      	bhi.n	8005ee6 <HAL_SPI_Transmit_DMA+0x14e>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d127      	bne.n	8005ee6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005eb2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec2:	e010      	b.n	8005ee6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3301      	adds	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	330c      	adds	r3, #12
 8005ef6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005efe:	f7fd ff33 	bl	8003d68 <HAL_DMA_Start_IT>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00c      	beq.n	8005f22 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	f043 0210 	orr.w	r2, r3, #16
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005f20:	e01e      	b.n	8005f60 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d007      	beq.n	8005f40 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0220 	orr.w	r2, r2, #32
 8005f4e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0202 	orr.w	r2, r2, #2
 8005f5e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	0800624f 	.word	0x0800624f
 8005f78:	080061a9 	.word	0x080061a9
 8005f7c:	0800626b 	.word	0x0800626b

08005f80 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	099b      	lsrs	r3, r3, #6
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    return;
 8005fc2:	e0d8      	b.n	8006176 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_SPI_IRQHandler+0x66>
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	09db      	lsrs	r3, r3, #7
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
    return;
 8005fe4:	e0c7      	b.n	8006176 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <HAL_SPI_IRQHandler+0x8c>
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	099b      	lsrs	r3, r3, #6
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80b5 	beq.w	8006176 <HAL_SPI_IRQHandler+0x1f6>
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80ae 	beq.w	8006176 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	099b      	lsrs	r3, r3, #6
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d023      	beq.n	800606e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	d011      	beq.n	8006056 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006036:	f043 0204 	orr.w	r2, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	e00b      	b.n	800606e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
        return;
 800606c:	e083      	b.n	8006176 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d014      	beq.n	80060a4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b4:	f043 0208 	orr.w	r2, r3, #8
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060bc:	2300      	movs	r3, #0
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d050      	beq.n	8006174 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060e0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d104      	bne.n	80060fe <HAL_SPI_IRQHandler+0x17e>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d034      	beq.n	8006168 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0203 	bic.w	r2, r2, #3
 800610c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	2b00      	cmp	r3, #0
 8006114:	d011      	beq.n	800613a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	4a18      	ldr	r2, [pc, #96]	; (800617c <HAL_SPI_IRQHandler+0x1fc>)
 800611c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fe80 	bl	8003e28 <HAL_DMA_Abort_IT>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	2b00      	cmp	r3, #0
 8006140:	d016      	beq.n	8006170 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <HAL_SPI_IRQHandler+0x1fc>)
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	4618      	mov	r0, r3
 8006150:	f7fd fe6a 	bl	8003e28 <HAL_DMA_Abort_IT>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006166:	e003      	b.n	8006170 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f813 	bl	8006194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800616e:	e000      	b.n	8006172 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006170:	bf00      	nop
    return;
 8006172:	bf00      	nop
 8006174:	bf00      	nop
  }
}
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	080062ab 	.word	0x080062ab

08006180 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061b6:	f7fc fc3f 	bl	8002a38 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	d03b      	beq.n	8006242 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0220 	bic.w	r2, r2, #32
 80061d8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0202 	bic.w	r2, r2, #2
 80061e8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	2164      	movs	r1, #100	; 0x64
 80061ee:	6978      	ldr	r0, [r7, #20]
 80061f0:	f000 f986 	bl	8006500 <SPI_EndRxTxTransaction>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	f043 0220 	orr.w	r2, r3, #32
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f7ff ffaa 	bl	8006194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006240:	e002      	b.n	8006248 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006242:	6978      	ldr	r0, [r7, #20]
 8006244:	f7fb fcd0 	bl	8001be8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f7ff ff8f 	bl	8006180 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0203 	bic.w	r2, r2, #3
 8006286:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628c:	f043 0210 	orr.w	r2, r3, #16
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff ff79 	bl	8006194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff64 	bl	8006194 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062e4:	f7fc fba8 	bl	8002a38 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	1a9b      	subs	r3, r3, r2
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	4413      	add	r3, r2
 80062f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062f4:	f7fc fba0 	bl	8002a38 <HAL_GetTick>
 80062f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	015b      	lsls	r3, r3, #5
 8006300:	0d1b      	lsrs	r3, r3, #20
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	fb02 f303 	mul.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800630a:	e054      	b.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d050      	beq.n	80063b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006314:	f7fc fb90 	bl	8002a38 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	429a      	cmp	r2, r3
 8006322:	d902      	bls.n	800632a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d13d      	bne.n	80063a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006338:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006342:	d111      	bne.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634c:	d004      	beq.n	8006358 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	d107      	bne.n	8006368 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006366:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006370:	d10f      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006390:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e017      	b.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4013      	ands	r3, r2
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	bf0c      	ite	eq
 80063c6:	2301      	moveq	r3, #1
 80063c8:	2300      	movne	r3, #0
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d19b      	bne.n	800630c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000034 	.word	0x20000034

080063e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063f2:	f7fc fb21 	bl	8002a38 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	4413      	add	r3, r2
 8006400:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006402:	f7fc fb19 	bl	8002a38 <HAL_GetTick>
 8006406:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006408:	4b3c      	ldr	r3, [pc, #240]	; (80064fc <SPI_WaitFifoStateUntilTimeout+0x118>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	00da      	lsls	r2, r3, #3
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	0d1b      	lsrs	r3, r3, #20
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006420:	e05f      	b.n	80064e2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006428:	d106      	bne.n	8006438 <SPI_WaitFifoStateUntilTimeout+0x54>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d050      	beq.n	80064e2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006440:	f7fc fafa 	bl	8002a38 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13d      	bne.n	80064d2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800646e:	d111      	bne.n	8006494 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d004      	beq.n	8006484 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006482:	d107      	bne.n	8006494 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d10f      	bne.n	80064be <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e010      	b.n	80064f4 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3b01      	subs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d197      	bne.n	8006422 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000034 	.word	0x20000034

08006500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff ff63 	bl	80063e4 <SPI_WaitFifoStateUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006528:	f043 0220 	orr.w	r2, r3, #32
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e027      	b.n	8006584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff fec8 	bl	80062d4 <SPI_WaitFlagStateUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654e:	f043 0220 	orr.w	r2, r3, #32
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e014      	b.n	8006584 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff ff3c 	bl	80063e4 <SPI_WaitFifoStateUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e000      	b.n	8006584 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e049      	b.n	8006632 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7fc f930 	bl	8002818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f000 fb80 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_TIM_PWM_Start+0x24>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b01      	cmp	r3, #1
 8006656:	bf14      	ite	ne
 8006658:	2301      	movne	r3, #1
 800665a:	2300      	moveq	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	e03c      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d109      	bne.n	800667a <HAL_TIM_PWM_Start+0x3e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b01      	cmp	r3, #1
 8006670:	bf14      	ite	ne
 8006672:	2301      	movne	r3, #1
 8006674:	2300      	moveq	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	e02f      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b08      	cmp	r3, #8
 800667e:	d109      	bne.n	8006694 <HAL_TIM_PWM_Start+0x58>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b01      	cmp	r3, #1
 800668a:	bf14      	ite	ne
 800668c:	2301      	movne	r3, #1
 800668e:	2300      	moveq	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	e022      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d109      	bne.n	80066ae <HAL_TIM_PWM_Start+0x72>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	bf14      	ite	ne
 80066a6:	2301      	movne	r3, #1
 80066a8:	2300      	moveq	r3, #0
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	e015      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d109      	bne.n	80066c8 <HAL_TIM_PWM_Start+0x8c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e008      	b.n	80066da <HAL_TIM_PWM_Start+0x9e>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e09c      	b.n	800681c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0xb6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f0:	e023      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_PWM_Start+0xc6>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006700:	e01b      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start+0xd6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006710:	e013      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d104      	bne.n	8006722 <HAL_TIM_PWM_Start+0xe6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006720:	e00b      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b10      	cmp	r3, #16
 8006726:	d104      	bne.n	8006732 <HAL_TIM_PWM_Start+0xf6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006730:	e003      	b.n	800673a <HAL_TIM_PWM_Start+0xfe>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2202      	movs	r2, #2
 8006736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fe34 	bl	80073b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a35      	ldr	r2, [pc, #212]	; (8006824 <HAL_TIM_PWM_Start+0x1e8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a34      	ldr	r2, [pc, #208]	; (8006828 <HAL_TIM_PWM_Start+0x1ec>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a32      	ldr	r2, [pc, #200]	; (800682c <HAL_TIM_PWM_Start+0x1f0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a31      	ldr	r2, [pc, #196]	; (8006830 <HAL_TIM_PWM_Start+0x1f4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_TIM_PWM_Start+0x13e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2f      	ldr	r2, [pc, #188]	; (8006834 <HAL_TIM_PWM_Start+0x1f8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_TIM_PWM_Start+0x142>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <HAL_TIM_PWM_Start+0x144>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006792:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_TIM_PWM_Start+0x1e8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01d      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a6:	d018      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a22      	ldr	r2, [pc, #136]	; (8006838 <HAL_TIM_PWM_Start+0x1fc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a21      	ldr	r2, [pc, #132]	; (800683c <HAL_TIM_PWM_Start+0x200>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00e      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <HAL_TIM_PWM_Start+0x204>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_TIM_PWM_Start+0x1ec>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_TIM_PWM_Start+0x19e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <HAL_TIM_PWM_Start+0x1f0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d115      	bne.n	8006806 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	4b18      	ldr	r3, [pc, #96]	; (8006844 <HAL_TIM_PWM_Start+0x208>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b06      	cmp	r3, #6
 80067ea:	d015      	beq.n	8006818 <HAL_TIM_PWM_Start+0x1dc>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f2:	d011      	beq.n	8006818 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006804:	e008      	b.n	8006818 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e000      	b.n	800681a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40012c00 	.word	0x40012c00
 8006828:	40013400 	.word	0x40013400
 800682c:	40014000 	.word	0x40014000
 8006830:	40014400 	.word	0x40014400
 8006834:	40014800 	.word	0x40014800
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	00010007 	.word	0x00010007

08006848 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e097      	b.n	800698c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fb ff8d 	bl	8002790 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	6812      	ldr	r2, [r2, #0]
 8006888:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800688c:	f023 0307 	bic.w	r3, r3, #7
 8006890:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3304      	adds	r3, #4
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f000 fa17 	bl	8006cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	f023 0303 	bic.w	r3, r3, #3
 80068ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	021b      	lsls	r3, r3, #8
 80068da:	4313      	orrs	r3, r2
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068e8:	f023 030c 	bic.w	r3, r3, #12
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	4313      	orrs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	031b      	lsls	r3, r3, #12
 8006918:	4313      	orrs	r3, r2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006926:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	4313      	orrs	r3, r2
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d110      	bne.n	80069e6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d102      	bne.n	80069d0 <HAL_TIM_Encoder_Start+0x3c>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069ca:	7b7b      	ldrb	r3, [r7, #13]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e068      	b.n	8006aa6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e4:	e031      	b.n	8006a4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d110      	bne.n	8006a0e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d102      	bne.n	80069f8 <HAL_TIM_Encoder_Start+0x64>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069f2:	7b3b      	ldrb	r3, [r7, #12]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d001      	beq.n	80069fc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e054      	b.n	8006aa6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a0c:	e01d      	b.n	8006a4a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d108      	bne.n	8006a26 <HAL_TIM_Encoder_Start+0x92>
     || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d105      	bne.n	8006a26 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a1a:	7b7b      	ldrb	r3, [r7, #13]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d102      	bne.n	8006a26 <HAL_TIM_Encoder_Start+0x92>
     || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a20:	7b3b      	ldrb	r3, [r7, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d001      	beq.n	8006a2a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e03d      	b.n	8006aa6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_TIM_Encoder_Start+0xc2>
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d008      	beq.n	8006a66 <HAL_TIM_Encoder_Start+0xd2>
 8006a54:	e00f      	b.n	8006a76 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fca6 	bl	80073b0 <TIM_CCxChannelCmd>
      break;
 8006a64:	e016      	b.n	8006a94 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2104      	movs	r1, #4
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fc9e 	bl	80073b0 <TIM_CCxChannelCmd>
      break;
 8006a74:	e00e      	b.n	8006a94 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fc96 	bl	80073b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	2104      	movs	r1, #4
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fc8f 	bl	80073b0 <TIM_CCxChannelCmd>
      break;
 8006a92:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e0fd      	b.n	8006cc6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b14      	cmp	r3, #20
 8006ad6:	f200 80f0 	bhi.w	8006cba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006cbb 	.word	0x08006cbb
 8006ae8:	08006cbb 	.word	0x08006cbb
 8006aec:	08006cbb 	.word	0x08006cbb
 8006af0:	08006b75 	.word	0x08006b75
 8006af4:	08006cbb 	.word	0x08006cbb
 8006af8:	08006cbb 	.word	0x08006cbb
 8006afc:	08006cbb 	.word	0x08006cbb
 8006b00:	08006bb7 	.word	0x08006bb7
 8006b04:	08006cbb 	.word	0x08006cbb
 8006b08:	08006cbb 	.word	0x08006cbb
 8006b0c:	08006cbb 	.word	0x08006cbb
 8006b10:	08006bf7 	.word	0x08006bf7
 8006b14:	08006cbb 	.word	0x08006cbb
 8006b18:	08006cbb 	.word	0x08006cbb
 8006b1c:	08006cbb 	.word	0x08006cbb
 8006b20:	08006c39 	.word	0x08006c39
 8006b24:	08006cbb 	.word	0x08006cbb
 8006b28:	08006cbb 	.word	0x08006cbb
 8006b2c:	08006cbb 	.word	0x08006cbb
 8006b30:	08006c79 	.word	0x08006c79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 f962 	bl	8006e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0208 	orr.w	r2, r2, #8
 8006b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0204 	bic.w	r2, r2, #4
 8006b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6999      	ldr	r1, [r3, #24]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	691a      	ldr	r2, [r3, #16]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	619a      	str	r2, [r3, #24]
      break;
 8006b72:	e0a3      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f9d2 	bl	8006f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	021a      	lsls	r2, r3, #8
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	619a      	str	r2, [r3, #24]
      break;
 8006bb4:	e082      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68b9      	ldr	r1, [r7, #8]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fa3b 	bl	8007038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	69da      	ldr	r2, [r3, #28]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0208 	orr.w	r2, r2, #8
 8006bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0204 	bic.w	r2, r2, #4
 8006be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69d9      	ldr	r1, [r3, #28]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	61da      	str	r2, [r3, #28]
      break;
 8006bf4:	e062      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 faa3 	bl	8007148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	021a      	lsls	r2, r3, #8
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	61da      	str	r2, [r3, #28]
      break;
 8006c36:	e041      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 faec 	bl	800721c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0208 	orr.w	r2, r2, #8
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0204 	bic.w	r2, r2, #4
 8006c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c76:	e021      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fb30 	bl	80072e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006cb8:	e000      	b.n	8006cbc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006cba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop

08006cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a40      	ldr	r2, [pc, #256]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d013      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cee:	d00f      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a3d      	ldr	r2, [pc, #244]	; (8006de8 <TIM_Base_SetConfig+0x118>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00b      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a3c      	ldr	r2, [pc, #240]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d007      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a3b      	ldr	r2, [pc, #236]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d003      	beq.n	8006d10 <TIM_Base_SetConfig+0x40>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a3a      	ldr	r2, [pc, #232]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a2f      	ldr	r2, [pc, #188]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01f      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d30:	d01b      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <TIM_Base_SetConfig+0x118>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d017      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a2b      	ldr	r2, [pc, #172]	; (8006dec <TIM_Base_SetConfig+0x11c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <TIM_Base_SetConfig+0x120>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00f      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a29      	ldr	r2, [pc, #164]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00b      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a28      	ldr	r2, [pc, #160]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d007      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d003      	beq.n	8006d6a <TIM_Base_SetConfig+0x9a>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <TIM_Base_SetConfig+0x130>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d108      	bne.n	8006d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689a      	ldr	r2, [r3, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a10      	ldr	r2, [pc, #64]	; (8006de4 <TIM_Base_SetConfig+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00f      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <TIM_Base_SetConfig+0x124>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a11      	ldr	r2, [pc, #68]	; (8006df8 <TIM_Base_SetConfig+0x128>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d007      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a10      	ldr	r2, [pc, #64]	; (8006dfc <TIM_Base_SetConfig+0x12c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_Base_SetConfig+0xf8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a0f      	ldr	r2, [pc, #60]	; (8006e00 <TIM_Base_SetConfig+0x130>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d103      	bne.n	8006dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691a      	ldr	r2, [r3, #16]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	615a      	str	r2, [r3, #20]
}
 8006dd6:	bf00      	nop
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800

08006e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0302 	bic.w	r3, r3, #2
 8006e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a2c      	ldr	r2, [pc, #176]	; (8006f10 <TIM_OC1_SetConfig+0x10c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <TIM_OC1_SetConfig+0x110>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a2a      	ldr	r2, [pc, #168]	; (8006f18 <TIM_OC1_SetConfig+0x114>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a29      	ldr	r2, [pc, #164]	; (8006f1c <TIM_OC1_SetConfig+0x118>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC1_SetConfig+0x80>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a28      	ldr	r2, [pc, #160]	; (8006f20 <TIM_OC1_SetConfig+0x11c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d10c      	bne.n	8006e9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0308 	bic.w	r3, r3, #8
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f023 0304 	bic.w	r3, r3, #4
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <TIM_OC1_SetConfig+0x10c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00f      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <TIM_OC1_SetConfig+0x110>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <TIM_OC1_SetConfig+0x114>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d007      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC1_SetConfig+0x118>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d003      	beq.n	8006ec6 <TIM_OC1_SetConfig+0xc2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a17      	ldr	r2, [pc, #92]	; (8006f20 <TIM_OC1_SetConfig+0x11c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d111      	bne.n	8006eea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	621a      	str	r2, [r3, #32]
}
 8006f04:	bf00      	nop
 8006f06:	371c      	adds	r7, #28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40013400 	.word	0x40013400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	f023 0210 	bic.w	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0320 	bic.w	r3, r3, #32
 8006f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a28      	ldr	r2, [pc, #160]	; (8007024 <TIM_OC2_SetConfig+0x100>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0x6c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a27      	ldr	r2, [pc, #156]	; (8007028 <TIM_OC2_SetConfig+0x104>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10d      	bne.n	8006fac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <TIM_OC2_SetConfig+0x100>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <TIM_OC2_SetConfig+0x104>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00b      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a1b      	ldr	r2, [pc, #108]	; (800702c <TIM_OC2_SetConfig+0x108>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <TIM_OC2_SetConfig+0x10c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_OC2_SetConfig+0xb0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a19      	ldr	r2, [pc, #100]	; (8007034 <TIM_OC2_SetConfig+0x110>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d113      	bne.n	8006ffc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40012c00 	.word	0x40012c00
 8007028:	40013400 	.word	0x40013400
 800702c:	40014000 	.word	0x40014000
 8007030:	40014400 	.word	0x40014400
 8007034:	40014800 	.word	0x40014800

08007038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0303 	bic.w	r3, r3, #3
 8007072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a27      	ldr	r2, [pc, #156]	; (8007134 <TIM_OC3_SetConfig+0xfc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC3_SetConfig+0x6a>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a26      	ldr	r2, [pc, #152]	; (8007138 <TIM_OC3_SetConfig+0x100>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d10d      	bne.n	80070be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a1c      	ldr	r2, [pc, #112]	; (8007134 <TIM_OC3_SetConfig+0xfc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a1b      	ldr	r2, [pc, #108]	; (8007138 <TIM_OC3_SetConfig+0x100>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a1a      	ldr	r2, [pc, #104]	; (800713c <TIM_OC3_SetConfig+0x104>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a19      	ldr	r2, [pc, #100]	; (8007140 <TIM_OC3_SetConfig+0x108>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_OC3_SetConfig+0xae>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a18      	ldr	r2, [pc, #96]	; (8007144 <TIM_OC3_SetConfig+0x10c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d113      	bne.n	800710e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	011b      	lsls	r3, r3, #4
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40013400 	.word	0x40013400
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800

08007148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	031b      	lsls	r3, r3, #12
 800719e:	693a      	ldr	r2, [r7, #16]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a18      	ldr	r2, [pc, #96]	; (8007208 <TIM_OC4_SetConfig+0xc0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d00f      	beq.n	80071cc <TIM_OC4_SetConfig+0x84>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a17      	ldr	r2, [pc, #92]	; (800720c <TIM_OC4_SetConfig+0xc4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00b      	beq.n	80071cc <TIM_OC4_SetConfig+0x84>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <TIM_OC4_SetConfig+0xc8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d007      	beq.n	80071cc <TIM_OC4_SetConfig+0x84>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a15      	ldr	r2, [pc, #84]	; (8007214 <TIM_OC4_SetConfig+0xcc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC4_SetConfig+0x84>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <TIM_OC4_SetConfig+0xd0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d109      	bne.n	80071e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	019b      	lsls	r3, r3, #6
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40014000 	.word	0x40014000
 8007214:	40014400 	.word	0x40014400
 8007218:	40014800 	.word	0x40014800

0800721c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007260:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	4313      	orrs	r3, r2
 800726c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <TIM_OC5_SetConfig+0xb4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00f      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a16      	ldr	r2, [pc, #88]	; (80072d4 <TIM_OC5_SetConfig+0xb8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d00b      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a15      	ldr	r2, [pc, #84]	; (80072d8 <TIM_OC5_SetConfig+0xbc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d007      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <TIM_OC5_SetConfig+0xc0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC5_SetConfig+0x7a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a13      	ldr	r2, [pc, #76]	; (80072e0 <TIM_OC5_SetConfig+0xc4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d109      	bne.n	80072aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00
 80072d4:	40013400 	.word	0x40013400
 80072d8:	40014000 	.word	0x40014000
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	051b      	lsls	r3, r3, #20
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a18      	ldr	r2, [pc, #96]	; (800739c <TIM_OC6_SetConfig+0xb8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d00f      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <TIM_OC6_SetConfig+0xbc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00b      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <TIM_OC6_SetConfig+0xc0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d007      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <TIM_OC6_SetConfig+0xc4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_OC6_SetConfig+0x7c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a14      	ldr	r2, [pc, #80]	; (80073ac <TIM_OC6_SetConfig+0xc8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d109      	bne.n	8007374 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007366:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	029b      	lsls	r3, r3, #10
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	621a      	str	r2, [r3, #32]
}
 800738e:	bf00      	nop
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40013400 	.word	0x40013400
 80073a4:	40014000 	.word	0x40014000
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800

080073b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 031f 	and.w	r3, r3, #31
 80073c2:	2201      	movs	r2, #1
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1a      	ldr	r2, [r3, #32]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	401a      	ands	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1a      	ldr	r2, [r3, #32]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	431a      	orrs	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007410:	2302      	movs	r3, #2
 8007412:	e068      	b.n	80074e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2e      	ldr	r2, [pc, #184]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2d      	ldr	r2, [pc, #180]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d108      	bne.n	800745a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800744e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01d      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007486:	d018      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a1b      	ldr	r2, [pc, #108]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d013      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a1a      	ldr	r2, [pc, #104]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d00e      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d009      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a13      	ldr	r2, [pc, #76]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d004      	beq.n	80074ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a14      	ldr	r2, [pc, #80]	; (8007508 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10c      	bne.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40012c00 	.word	0x40012c00
 80074f8:	40013400 	.word	0x40013400
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40014000 	.word	0x40014000

0800750c <__errno>:
 800750c:	4b01      	ldr	r3, [pc, #4]	; (8007514 <__errno+0x8>)
 800750e:	6818      	ldr	r0, [r3, #0]
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000040 	.word	0x20000040

08007518 <__libc_init_array>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	4e0d      	ldr	r6, [pc, #52]	; (8007550 <__libc_init_array+0x38>)
 800751c:	4c0d      	ldr	r4, [pc, #52]	; (8007554 <__libc_init_array+0x3c>)
 800751e:	1ba4      	subs	r4, r4, r6
 8007520:	10a4      	asrs	r4, r4, #2
 8007522:	2500      	movs	r5, #0
 8007524:	42a5      	cmp	r5, r4
 8007526:	d109      	bne.n	800753c <__libc_init_array+0x24>
 8007528:	4e0b      	ldr	r6, [pc, #44]	; (8007558 <__libc_init_array+0x40>)
 800752a:	4c0c      	ldr	r4, [pc, #48]	; (800755c <__libc_init_array+0x44>)
 800752c:	f001 f974 	bl	8008818 <_init>
 8007530:	1ba4      	subs	r4, r4, r6
 8007532:	10a4      	asrs	r4, r4, #2
 8007534:	2500      	movs	r5, #0
 8007536:	42a5      	cmp	r5, r4
 8007538:	d105      	bne.n	8007546 <__libc_init_array+0x2e>
 800753a:	bd70      	pop	{r4, r5, r6, pc}
 800753c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007540:	4798      	blx	r3
 8007542:	3501      	adds	r5, #1
 8007544:	e7ee      	b.n	8007524 <__libc_init_array+0xc>
 8007546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800754a:	4798      	blx	r3
 800754c:	3501      	adds	r5, #1
 800754e:	e7f2      	b.n	8007536 <__libc_init_array+0x1e>
 8007550:	0800922c 	.word	0x0800922c
 8007554:	0800922c 	.word	0x0800922c
 8007558:	0800922c 	.word	0x0800922c
 800755c:	08009230 	.word	0x08009230

08007560 <memcpy>:
 8007560:	b510      	push	{r4, lr}
 8007562:	1e43      	subs	r3, r0, #1
 8007564:	440a      	add	r2, r1
 8007566:	4291      	cmp	r1, r2
 8007568:	d100      	bne.n	800756c <memcpy+0xc>
 800756a:	bd10      	pop	{r4, pc}
 800756c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007570:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007574:	e7f7      	b.n	8007566 <memcpy+0x6>

08007576 <memset>:
 8007576:	4402      	add	r2, r0
 8007578:	4603      	mov	r3, r0
 800757a:	4293      	cmp	r3, r2
 800757c:	d100      	bne.n	8007580 <memset+0xa>
 800757e:	4770      	bx	lr
 8007580:	f803 1b01 	strb.w	r1, [r3], #1
 8007584:	e7f9      	b.n	800757a <memset+0x4>
	...

08007588 <siprintf>:
 8007588:	b40e      	push	{r1, r2, r3}
 800758a:	b500      	push	{lr}
 800758c:	b09c      	sub	sp, #112	; 0x70
 800758e:	ab1d      	add	r3, sp, #116	; 0x74
 8007590:	9002      	str	r0, [sp, #8]
 8007592:	9006      	str	r0, [sp, #24]
 8007594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007598:	4809      	ldr	r0, [pc, #36]	; (80075c0 <siprintf+0x38>)
 800759a:	9107      	str	r1, [sp, #28]
 800759c:	9104      	str	r1, [sp, #16]
 800759e:	4909      	ldr	r1, [pc, #36]	; (80075c4 <siprintf+0x3c>)
 80075a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075a4:	9105      	str	r1, [sp, #20]
 80075a6:	6800      	ldr	r0, [r0, #0]
 80075a8:	9301      	str	r3, [sp, #4]
 80075aa:	a902      	add	r1, sp, #8
 80075ac:	f000 f866 	bl	800767c <_svfiprintf_r>
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	b01c      	add	sp, #112	; 0x70
 80075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075bc:	b003      	add	sp, #12
 80075be:	4770      	bx	lr
 80075c0:	20000040 	.word	0x20000040
 80075c4:	ffff0208 	.word	0xffff0208

080075c8 <__ssputs_r>:
 80075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	688e      	ldr	r6, [r1, #8]
 80075ce:	429e      	cmp	r6, r3
 80075d0:	4682      	mov	sl, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	4690      	mov	r8, r2
 80075d6:	4699      	mov	r9, r3
 80075d8:	d837      	bhi.n	800764a <__ssputs_r+0x82>
 80075da:	898a      	ldrh	r2, [r1, #12]
 80075dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075e0:	d031      	beq.n	8007646 <__ssputs_r+0x7e>
 80075e2:	6825      	ldr	r5, [r4, #0]
 80075e4:	6909      	ldr	r1, [r1, #16]
 80075e6:	1a6f      	subs	r7, r5, r1
 80075e8:	6965      	ldr	r5, [r4, #20]
 80075ea:	2302      	movs	r3, #2
 80075ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80075f4:	f109 0301 	add.w	r3, r9, #1
 80075f8:	443b      	add	r3, r7
 80075fa:	429d      	cmp	r5, r3
 80075fc:	bf38      	it	cc
 80075fe:	461d      	movcc	r5, r3
 8007600:	0553      	lsls	r3, r2, #21
 8007602:	d530      	bpl.n	8007666 <__ssputs_r+0x9e>
 8007604:	4629      	mov	r1, r5
 8007606:	f000 fb21 	bl	8007c4c <_malloc_r>
 800760a:	4606      	mov	r6, r0
 800760c:	b950      	cbnz	r0, 8007624 <__ssputs_r+0x5c>
 800760e:	230c      	movs	r3, #12
 8007610:	f8ca 3000 	str.w	r3, [sl]
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800761a:	81a3      	strh	r3, [r4, #12]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	463a      	mov	r2, r7
 8007626:	6921      	ldr	r1, [r4, #16]
 8007628:	f7ff ff9a 	bl	8007560 <memcpy>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	6126      	str	r6, [r4, #16]
 800763a:	6165      	str	r5, [r4, #20]
 800763c:	443e      	add	r6, r7
 800763e:	1bed      	subs	r5, r5, r7
 8007640:	6026      	str	r6, [r4, #0]
 8007642:	60a5      	str	r5, [r4, #8]
 8007644:	464e      	mov	r6, r9
 8007646:	454e      	cmp	r6, r9
 8007648:	d900      	bls.n	800764c <__ssputs_r+0x84>
 800764a:	464e      	mov	r6, r9
 800764c:	4632      	mov	r2, r6
 800764e:	4641      	mov	r1, r8
 8007650:	6820      	ldr	r0, [r4, #0]
 8007652:	f000 fa93 	bl	8007b7c <memmove>
 8007656:	68a3      	ldr	r3, [r4, #8]
 8007658:	1b9b      	subs	r3, r3, r6
 800765a:	60a3      	str	r3, [r4, #8]
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	441e      	add	r6, r3
 8007660:	6026      	str	r6, [r4, #0]
 8007662:	2000      	movs	r0, #0
 8007664:	e7dc      	b.n	8007620 <__ssputs_r+0x58>
 8007666:	462a      	mov	r2, r5
 8007668:	f000 fb4a 	bl	8007d00 <_realloc_r>
 800766c:	4606      	mov	r6, r0
 800766e:	2800      	cmp	r0, #0
 8007670:	d1e2      	bne.n	8007638 <__ssputs_r+0x70>
 8007672:	6921      	ldr	r1, [r4, #16]
 8007674:	4650      	mov	r0, sl
 8007676:	f000 fa9b 	bl	8007bb0 <_free_r>
 800767a:	e7c8      	b.n	800760e <__ssputs_r+0x46>

0800767c <_svfiprintf_r>:
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	461d      	mov	r5, r3
 8007682:	898b      	ldrh	r3, [r1, #12]
 8007684:	061f      	lsls	r7, r3, #24
 8007686:	b09d      	sub	sp, #116	; 0x74
 8007688:	4680      	mov	r8, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d50f      	bpl.n	80076b0 <_svfiprintf_r+0x34>
 8007690:	690b      	ldr	r3, [r1, #16]
 8007692:	b96b      	cbnz	r3, 80076b0 <_svfiprintf_r+0x34>
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	f000 fad9 	bl	8007c4c <_malloc_r>
 800769a:	6020      	str	r0, [r4, #0]
 800769c:	6120      	str	r0, [r4, #16]
 800769e:	b928      	cbnz	r0, 80076ac <_svfiprintf_r+0x30>
 80076a0:	230c      	movs	r3, #12
 80076a2:	f8c8 3000 	str.w	r3, [r8]
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	e0c8      	b.n	800783e <_svfiprintf_r+0x1c2>
 80076ac:	2340      	movs	r3, #64	; 0x40
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9309      	str	r3, [sp, #36]	; 0x24
 80076b4:	2320      	movs	r3, #32
 80076b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076ba:	2330      	movs	r3, #48	; 0x30
 80076bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076c0:	9503      	str	r5, [sp, #12]
 80076c2:	f04f 0b01 	mov.w	fp, #1
 80076c6:	4637      	mov	r7, r6
 80076c8:	463d      	mov	r5, r7
 80076ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ce:	b10b      	cbz	r3, 80076d4 <_svfiprintf_r+0x58>
 80076d0:	2b25      	cmp	r3, #37	; 0x25
 80076d2:	d13e      	bne.n	8007752 <_svfiprintf_r+0xd6>
 80076d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80076d8:	d00b      	beq.n	80076f2 <_svfiprintf_r+0x76>
 80076da:	4653      	mov	r3, sl
 80076dc:	4632      	mov	r2, r6
 80076de:	4621      	mov	r1, r4
 80076e0:	4640      	mov	r0, r8
 80076e2:	f7ff ff71 	bl	80075c8 <__ssputs_r>
 80076e6:	3001      	adds	r0, #1
 80076e8:	f000 80a4 	beq.w	8007834 <_svfiprintf_r+0x1b8>
 80076ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ee:	4453      	add	r3, sl
 80076f0:	9309      	str	r3, [sp, #36]	; 0x24
 80076f2:	783b      	ldrb	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 809d 	beq.w	8007834 <_svfiprintf_r+0x1b8>
 80076fa:	2300      	movs	r3, #0
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800770c:	931a      	str	r3, [sp, #104]	; 0x68
 800770e:	462f      	mov	r7, r5
 8007710:	2205      	movs	r2, #5
 8007712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007716:	4850      	ldr	r0, [pc, #320]	; (8007858 <_svfiprintf_r+0x1dc>)
 8007718:	f7f8 fd62 	bl	80001e0 <memchr>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	b9d0      	cbnz	r0, 8007756 <_svfiprintf_r+0xda>
 8007720:	06d9      	lsls	r1, r3, #27
 8007722:	bf44      	itt	mi
 8007724:	2220      	movmi	r2, #32
 8007726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800772a:	071a      	lsls	r2, r3, #28
 800772c:	bf44      	itt	mi
 800772e:	222b      	movmi	r2, #43	; 0x2b
 8007730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007734:	782a      	ldrb	r2, [r5, #0]
 8007736:	2a2a      	cmp	r2, #42	; 0x2a
 8007738:	d015      	beq.n	8007766 <_svfiprintf_r+0xea>
 800773a:	9a07      	ldr	r2, [sp, #28]
 800773c:	462f      	mov	r7, r5
 800773e:	2000      	movs	r0, #0
 8007740:	250a      	movs	r5, #10
 8007742:	4639      	mov	r1, r7
 8007744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007748:	3b30      	subs	r3, #48	; 0x30
 800774a:	2b09      	cmp	r3, #9
 800774c:	d94d      	bls.n	80077ea <_svfiprintf_r+0x16e>
 800774e:	b1b8      	cbz	r0, 8007780 <_svfiprintf_r+0x104>
 8007750:	e00f      	b.n	8007772 <_svfiprintf_r+0xf6>
 8007752:	462f      	mov	r7, r5
 8007754:	e7b8      	b.n	80076c8 <_svfiprintf_r+0x4c>
 8007756:	4a40      	ldr	r2, [pc, #256]	; (8007858 <_svfiprintf_r+0x1dc>)
 8007758:	1a80      	subs	r0, r0, r2
 800775a:	fa0b f000 	lsl.w	r0, fp, r0
 800775e:	4318      	orrs	r0, r3
 8007760:	9004      	str	r0, [sp, #16]
 8007762:	463d      	mov	r5, r7
 8007764:	e7d3      	b.n	800770e <_svfiprintf_r+0x92>
 8007766:	9a03      	ldr	r2, [sp, #12]
 8007768:	1d11      	adds	r1, r2, #4
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	9103      	str	r1, [sp, #12]
 800776e:	2a00      	cmp	r2, #0
 8007770:	db01      	blt.n	8007776 <_svfiprintf_r+0xfa>
 8007772:	9207      	str	r2, [sp, #28]
 8007774:	e004      	b.n	8007780 <_svfiprintf_r+0x104>
 8007776:	4252      	negs	r2, r2
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	9207      	str	r2, [sp, #28]
 800777e:	9304      	str	r3, [sp, #16]
 8007780:	783b      	ldrb	r3, [r7, #0]
 8007782:	2b2e      	cmp	r3, #46	; 0x2e
 8007784:	d10c      	bne.n	80077a0 <_svfiprintf_r+0x124>
 8007786:	787b      	ldrb	r3, [r7, #1]
 8007788:	2b2a      	cmp	r3, #42	; 0x2a
 800778a:	d133      	bne.n	80077f4 <_svfiprintf_r+0x178>
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	9203      	str	r2, [sp, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	bfb8      	it	lt
 8007798:	f04f 33ff 	movlt.w	r3, #4294967295
 800779c:	3702      	adds	r7, #2
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	4d2e      	ldr	r5, [pc, #184]	; (800785c <_svfiprintf_r+0x1e0>)
 80077a2:	7839      	ldrb	r1, [r7, #0]
 80077a4:	2203      	movs	r2, #3
 80077a6:	4628      	mov	r0, r5
 80077a8:	f7f8 fd1a 	bl	80001e0 <memchr>
 80077ac:	b138      	cbz	r0, 80077be <_svfiprintf_r+0x142>
 80077ae:	2340      	movs	r3, #64	; 0x40
 80077b0:	1b40      	subs	r0, r0, r5
 80077b2:	fa03 f000 	lsl.w	r0, r3, r0
 80077b6:	9b04      	ldr	r3, [sp, #16]
 80077b8:	4303      	orrs	r3, r0
 80077ba:	3701      	adds	r7, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	7839      	ldrb	r1, [r7, #0]
 80077c0:	4827      	ldr	r0, [pc, #156]	; (8007860 <_svfiprintf_r+0x1e4>)
 80077c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077c6:	2206      	movs	r2, #6
 80077c8:	1c7e      	adds	r6, r7, #1
 80077ca:	f7f8 fd09 	bl	80001e0 <memchr>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d038      	beq.n	8007844 <_svfiprintf_r+0x1c8>
 80077d2:	4b24      	ldr	r3, [pc, #144]	; (8007864 <_svfiprintf_r+0x1e8>)
 80077d4:	bb13      	cbnz	r3, 800781c <_svfiprintf_r+0x1a0>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	3308      	adds	r3, #8
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e4:	444b      	add	r3, r9
 80077e6:	9309      	str	r3, [sp, #36]	; 0x24
 80077e8:	e76d      	b.n	80076c6 <_svfiprintf_r+0x4a>
 80077ea:	fb05 3202 	mla	r2, r5, r2, r3
 80077ee:	2001      	movs	r0, #1
 80077f0:	460f      	mov	r7, r1
 80077f2:	e7a6      	b.n	8007742 <_svfiprintf_r+0xc6>
 80077f4:	2300      	movs	r3, #0
 80077f6:	3701      	adds	r7, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	250a      	movs	r5, #10
 80077fe:	4638      	mov	r0, r7
 8007800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007804:	3a30      	subs	r2, #48	; 0x30
 8007806:	2a09      	cmp	r2, #9
 8007808:	d903      	bls.n	8007812 <_svfiprintf_r+0x196>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0c8      	beq.n	80077a0 <_svfiprintf_r+0x124>
 800780e:	9105      	str	r1, [sp, #20]
 8007810:	e7c6      	b.n	80077a0 <_svfiprintf_r+0x124>
 8007812:	fb05 2101 	mla	r1, r5, r1, r2
 8007816:	2301      	movs	r3, #1
 8007818:	4607      	mov	r7, r0
 800781a:	e7f0      	b.n	80077fe <_svfiprintf_r+0x182>
 800781c:	ab03      	add	r3, sp, #12
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4622      	mov	r2, r4
 8007822:	4b11      	ldr	r3, [pc, #68]	; (8007868 <_svfiprintf_r+0x1ec>)
 8007824:	a904      	add	r1, sp, #16
 8007826:	4640      	mov	r0, r8
 8007828:	f3af 8000 	nop.w
 800782c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007830:	4681      	mov	r9, r0
 8007832:	d1d6      	bne.n	80077e2 <_svfiprintf_r+0x166>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	065b      	lsls	r3, r3, #25
 8007838:	f53f af35 	bmi.w	80076a6 <_svfiprintf_r+0x2a>
 800783c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800783e:	b01d      	add	sp, #116	; 0x74
 8007840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007844:	ab03      	add	r3, sp, #12
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	4622      	mov	r2, r4
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <_svfiprintf_r+0x1ec>)
 800784c:	a904      	add	r1, sp, #16
 800784e:	4640      	mov	r0, r8
 8007850:	f000 f882 	bl	8007958 <_printf_i>
 8007854:	e7ea      	b.n	800782c <_svfiprintf_r+0x1b0>
 8007856:	bf00      	nop
 8007858:	08008e28 	.word	0x08008e28
 800785c:	08008e2e 	.word	0x08008e2e
 8007860:	08008e32 	.word	0x08008e32
 8007864:	00000000 	.word	0x00000000
 8007868:	080075c9 	.word	0x080075c9

0800786c <_printf_common>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	4691      	mov	r9, r2
 8007872:	461f      	mov	r7, r3
 8007874:	688a      	ldr	r2, [r1, #8]
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800787c:	4293      	cmp	r3, r2
 800787e:	bfb8      	it	lt
 8007880:	4613      	movlt	r3, r2
 8007882:	f8c9 3000 	str.w	r3, [r9]
 8007886:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800788a:	4606      	mov	r6, r0
 800788c:	460c      	mov	r4, r1
 800788e:	b112      	cbz	r2, 8007896 <_printf_common+0x2a>
 8007890:	3301      	adds	r3, #1
 8007892:	f8c9 3000 	str.w	r3, [r9]
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	0699      	lsls	r1, r3, #26
 800789a:	bf42      	ittt	mi
 800789c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078a0:	3302      	addmi	r3, #2
 80078a2:	f8c9 3000 	strmi.w	r3, [r9]
 80078a6:	6825      	ldr	r5, [r4, #0]
 80078a8:	f015 0506 	ands.w	r5, r5, #6
 80078ac:	d107      	bne.n	80078be <_printf_common+0x52>
 80078ae:	f104 0a19 	add.w	sl, r4, #25
 80078b2:	68e3      	ldr	r3, [r4, #12]
 80078b4:	f8d9 2000 	ldr.w	r2, [r9]
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	42ab      	cmp	r3, r5
 80078bc:	dc28      	bgt.n	8007910 <_printf_common+0xa4>
 80078be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	3300      	adds	r3, #0
 80078c6:	bf18      	it	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	0692      	lsls	r2, r2, #26
 80078cc:	d42d      	bmi.n	800792a <_printf_common+0xbe>
 80078ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078d2:	4639      	mov	r1, r7
 80078d4:	4630      	mov	r0, r6
 80078d6:	47c0      	blx	r8
 80078d8:	3001      	adds	r0, #1
 80078da:	d020      	beq.n	800791e <_printf_common+0xb2>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	68e5      	ldr	r5, [r4, #12]
 80078e0:	f8d9 2000 	ldr.w	r2, [r9]
 80078e4:	f003 0306 	and.w	r3, r3, #6
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	bf08      	it	eq
 80078ec:	1aad      	subeq	r5, r5, r2
 80078ee:	68a3      	ldr	r3, [r4, #8]
 80078f0:	6922      	ldr	r2, [r4, #16]
 80078f2:	bf0c      	ite	eq
 80078f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078f8:	2500      	movne	r5, #0
 80078fa:	4293      	cmp	r3, r2
 80078fc:	bfc4      	itt	gt
 80078fe:	1a9b      	subgt	r3, r3, r2
 8007900:	18ed      	addgt	r5, r5, r3
 8007902:	f04f 0900 	mov.w	r9, #0
 8007906:	341a      	adds	r4, #26
 8007908:	454d      	cmp	r5, r9
 800790a:	d11a      	bne.n	8007942 <_printf_common+0xd6>
 800790c:	2000      	movs	r0, #0
 800790e:	e008      	b.n	8007922 <_printf_common+0xb6>
 8007910:	2301      	movs	r3, #1
 8007912:	4652      	mov	r2, sl
 8007914:	4639      	mov	r1, r7
 8007916:	4630      	mov	r0, r6
 8007918:	47c0      	blx	r8
 800791a:	3001      	adds	r0, #1
 800791c:	d103      	bne.n	8007926 <_printf_common+0xba>
 800791e:	f04f 30ff 	mov.w	r0, #4294967295
 8007922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007926:	3501      	adds	r5, #1
 8007928:	e7c3      	b.n	80078b2 <_printf_common+0x46>
 800792a:	18e1      	adds	r1, r4, r3
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	2030      	movs	r0, #48	; 0x30
 8007930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007934:	4422      	add	r2, r4
 8007936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800793a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800793e:	3302      	adds	r3, #2
 8007940:	e7c5      	b.n	80078ce <_printf_common+0x62>
 8007942:	2301      	movs	r3, #1
 8007944:	4622      	mov	r2, r4
 8007946:	4639      	mov	r1, r7
 8007948:	4630      	mov	r0, r6
 800794a:	47c0      	blx	r8
 800794c:	3001      	adds	r0, #1
 800794e:	d0e6      	beq.n	800791e <_printf_common+0xb2>
 8007950:	f109 0901 	add.w	r9, r9, #1
 8007954:	e7d8      	b.n	8007908 <_printf_common+0x9c>
	...

08007958 <_printf_i>:
 8007958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800795c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007960:	460c      	mov	r4, r1
 8007962:	7e09      	ldrb	r1, [r1, #24]
 8007964:	b085      	sub	sp, #20
 8007966:	296e      	cmp	r1, #110	; 0x6e
 8007968:	4617      	mov	r7, r2
 800796a:	4606      	mov	r6, r0
 800796c:	4698      	mov	r8, r3
 800796e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007970:	f000 80b3 	beq.w	8007ada <_printf_i+0x182>
 8007974:	d822      	bhi.n	80079bc <_printf_i+0x64>
 8007976:	2963      	cmp	r1, #99	; 0x63
 8007978:	d036      	beq.n	80079e8 <_printf_i+0x90>
 800797a:	d80a      	bhi.n	8007992 <_printf_i+0x3a>
 800797c:	2900      	cmp	r1, #0
 800797e:	f000 80b9 	beq.w	8007af4 <_printf_i+0x19c>
 8007982:	2958      	cmp	r1, #88	; 0x58
 8007984:	f000 8083 	beq.w	8007a8e <_printf_i+0x136>
 8007988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800798c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007990:	e032      	b.n	80079f8 <_printf_i+0xa0>
 8007992:	2964      	cmp	r1, #100	; 0x64
 8007994:	d001      	beq.n	800799a <_printf_i+0x42>
 8007996:	2969      	cmp	r1, #105	; 0x69
 8007998:	d1f6      	bne.n	8007988 <_printf_i+0x30>
 800799a:	6820      	ldr	r0, [r4, #0]
 800799c:	6813      	ldr	r3, [r2, #0]
 800799e:	0605      	lsls	r5, r0, #24
 80079a0:	f103 0104 	add.w	r1, r3, #4
 80079a4:	d52a      	bpl.n	80079fc <_printf_i+0xa4>
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6011      	str	r1, [r2, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da03      	bge.n	80079b6 <_printf_i+0x5e>
 80079ae:	222d      	movs	r2, #45	; 0x2d
 80079b0:	425b      	negs	r3, r3
 80079b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80079b6:	486f      	ldr	r0, [pc, #444]	; (8007b74 <_printf_i+0x21c>)
 80079b8:	220a      	movs	r2, #10
 80079ba:	e039      	b.n	8007a30 <_printf_i+0xd8>
 80079bc:	2973      	cmp	r1, #115	; 0x73
 80079be:	f000 809d 	beq.w	8007afc <_printf_i+0x1a4>
 80079c2:	d808      	bhi.n	80079d6 <_printf_i+0x7e>
 80079c4:	296f      	cmp	r1, #111	; 0x6f
 80079c6:	d020      	beq.n	8007a0a <_printf_i+0xb2>
 80079c8:	2970      	cmp	r1, #112	; 0x70
 80079ca:	d1dd      	bne.n	8007988 <_printf_i+0x30>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	f043 0320 	orr.w	r3, r3, #32
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	e003      	b.n	80079de <_printf_i+0x86>
 80079d6:	2975      	cmp	r1, #117	; 0x75
 80079d8:	d017      	beq.n	8007a0a <_printf_i+0xb2>
 80079da:	2978      	cmp	r1, #120	; 0x78
 80079dc:	d1d4      	bne.n	8007988 <_printf_i+0x30>
 80079de:	2378      	movs	r3, #120	; 0x78
 80079e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079e4:	4864      	ldr	r0, [pc, #400]	; (8007b78 <_printf_i+0x220>)
 80079e6:	e055      	b.n	8007a94 <_printf_i+0x13c>
 80079e8:	6813      	ldr	r3, [r2, #0]
 80079ea:	1d19      	adds	r1, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6011      	str	r1, [r2, #0]
 80079f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f8:	2301      	movs	r3, #1
 80079fa:	e08c      	b.n	8007b16 <_printf_i+0x1be>
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6011      	str	r1, [r2, #0]
 8007a00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a04:	bf18      	it	ne
 8007a06:	b21b      	sxthne	r3, r3
 8007a08:	e7cf      	b.n	80079aa <_printf_i+0x52>
 8007a0a:	6813      	ldr	r3, [r2, #0]
 8007a0c:	6825      	ldr	r5, [r4, #0]
 8007a0e:	1d18      	adds	r0, r3, #4
 8007a10:	6010      	str	r0, [r2, #0]
 8007a12:	0628      	lsls	r0, r5, #24
 8007a14:	d501      	bpl.n	8007a1a <_printf_i+0xc2>
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	e002      	b.n	8007a20 <_printf_i+0xc8>
 8007a1a:	0668      	lsls	r0, r5, #25
 8007a1c:	d5fb      	bpl.n	8007a16 <_printf_i+0xbe>
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	4854      	ldr	r0, [pc, #336]	; (8007b74 <_printf_i+0x21c>)
 8007a22:	296f      	cmp	r1, #111	; 0x6f
 8007a24:	bf14      	ite	ne
 8007a26:	220a      	movne	r2, #10
 8007a28:	2208      	moveq	r2, #8
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a30:	6865      	ldr	r5, [r4, #4]
 8007a32:	60a5      	str	r5, [r4, #8]
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f2c0 8095 	blt.w	8007b64 <_printf_i+0x20c>
 8007a3a:	6821      	ldr	r1, [r4, #0]
 8007a3c:	f021 0104 	bic.w	r1, r1, #4
 8007a40:	6021      	str	r1, [r4, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d13d      	bne.n	8007ac2 <_printf_i+0x16a>
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	f040 808e 	bne.w	8007b68 <_printf_i+0x210>
 8007a4c:	4665      	mov	r5, ip
 8007a4e:	2a08      	cmp	r2, #8
 8007a50:	d10b      	bne.n	8007a6a <_printf_i+0x112>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	07db      	lsls	r3, r3, #31
 8007a56:	d508      	bpl.n	8007a6a <_printf_i+0x112>
 8007a58:	6923      	ldr	r3, [r4, #16]
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	bfde      	ittt	le
 8007a60:	2330      	movle	r3, #48	; 0x30
 8007a62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a6a:	ebac 0305 	sub.w	r3, ip, r5
 8007a6e:	6123      	str	r3, [r4, #16]
 8007a70:	f8cd 8000 	str.w	r8, [sp]
 8007a74:	463b      	mov	r3, r7
 8007a76:	aa03      	add	r2, sp, #12
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7ff fef6 	bl	800786c <_printf_common>
 8007a80:	3001      	adds	r0, #1
 8007a82:	d14d      	bne.n	8007b20 <_printf_i+0x1c8>
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	b005      	add	sp, #20
 8007a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a8e:	4839      	ldr	r0, [pc, #228]	; (8007b74 <_printf_i+0x21c>)
 8007a90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	6821      	ldr	r1, [r4, #0]
 8007a98:	1d1d      	adds	r5, r3, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6015      	str	r5, [r2, #0]
 8007a9e:	060a      	lsls	r2, r1, #24
 8007aa0:	d50b      	bpl.n	8007aba <_printf_i+0x162>
 8007aa2:	07ca      	lsls	r2, r1, #31
 8007aa4:	bf44      	itt	mi
 8007aa6:	f041 0120 	orrmi.w	r1, r1, #32
 8007aaa:	6021      	strmi	r1, [r4, #0]
 8007aac:	b91b      	cbnz	r3, 8007ab6 <_printf_i+0x15e>
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	f022 0220 	bic.w	r2, r2, #32
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	2210      	movs	r2, #16
 8007ab8:	e7b7      	b.n	8007a2a <_printf_i+0xd2>
 8007aba:	064d      	lsls	r5, r1, #25
 8007abc:	bf48      	it	mi
 8007abe:	b29b      	uxthmi	r3, r3
 8007ac0:	e7ef      	b.n	8007aa2 <_printf_i+0x14a>
 8007ac2:	4665      	mov	r5, ip
 8007ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ac8:	fb02 3311 	mls	r3, r2, r1, r3
 8007acc:	5cc3      	ldrb	r3, [r0, r3]
 8007ace:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d1f5      	bne.n	8007ac4 <_printf_i+0x16c>
 8007ad8:	e7b9      	b.n	8007a4e <_printf_i+0xf6>
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	6825      	ldr	r5, [r4, #0]
 8007ade:	6961      	ldr	r1, [r4, #20]
 8007ae0:	1d18      	adds	r0, r3, #4
 8007ae2:	6010      	str	r0, [r2, #0]
 8007ae4:	0628      	lsls	r0, r5, #24
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	d501      	bpl.n	8007aee <_printf_i+0x196>
 8007aea:	6019      	str	r1, [r3, #0]
 8007aec:	e002      	b.n	8007af4 <_printf_i+0x19c>
 8007aee:	066a      	lsls	r2, r5, #25
 8007af0:	d5fb      	bpl.n	8007aea <_printf_i+0x192>
 8007af2:	8019      	strh	r1, [r3, #0]
 8007af4:	2300      	movs	r3, #0
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	4665      	mov	r5, ip
 8007afa:	e7b9      	b.n	8007a70 <_printf_i+0x118>
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	1d19      	adds	r1, r3, #4
 8007b00:	6011      	str	r1, [r2, #0]
 8007b02:	681d      	ldr	r5, [r3, #0]
 8007b04:	6862      	ldr	r2, [r4, #4]
 8007b06:	2100      	movs	r1, #0
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f7f8 fb69 	bl	80001e0 <memchr>
 8007b0e:	b108      	cbz	r0, 8007b14 <_printf_i+0x1bc>
 8007b10:	1b40      	subs	r0, r0, r5
 8007b12:	6060      	str	r0, [r4, #4]
 8007b14:	6863      	ldr	r3, [r4, #4]
 8007b16:	6123      	str	r3, [r4, #16]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b1e:	e7a7      	b.n	8007a70 <_printf_i+0x118>
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	462a      	mov	r2, r5
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d0aa      	beq.n	8007a84 <_printf_i+0x12c>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	079b      	lsls	r3, r3, #30
 8007b32:	d413      	bmi.n	8007b5c <_printf_i+0x204>
 8007b34:	68e0      	ldr	r0, [r4, #12]
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	4298      	cmp	r0, r3
 8007b3a:	bfb8      	it	lt
 8007b3c:	4618      	movlt	r0, r3
 8007b3e:	e7a3      	b.n	8007a88 <_printf_i+0x130>
 8007b40:	2301      	movs	r3, #1
 8007b42:	464a      	mov	r2, r9
 8007b44:	4639      	mov	r1, r7
 8007b46:	4630      	mov	r0, r6
 8007b48:	47c0      	blx	r8
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d09a      	beq.n	8007a84 <_printf_i+0x12c>
 8007b4e:	3501      	adds	r5, #1
 8007b50:	68e3      	ldr	r3, [r4, #12]
 8007b52:	9a03      	ldr	r2, [sp, #12]
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	42ab      	cmp	r3, r5
 8007b58:	dcf2      	bgt.n	8007b40 <_printf_i+0x1e8>
 8007b5a:	e7eb      	b.n	8007b34 <_printf_i+0x1dc>
 8007b5c:	2500      	movs	r5, #0
 8007b5e:	f104 0919 	add.w	r9, r4, #25
 8007b62:	e7f5      	b.n	8007b50 <_printf_i+0x1f8>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1ac      	bne.n	8007ac2 <_printf_i+0x16a>
 8007b68:	7803      	ldrb	r3, [r0, #0]
 8007b6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b72:	e76c      	b.n	8007a4e <_printf_i+0xf6>
 8007b74:	08008e39 	.word	0x08008e39
 8007b78:	08008e4a 	.word	0x08008e4a

08007b7c <memmove>:
 8007b7c:	4288      	cmp	r0, r1
 8007b7e:	b510      	push	{r4, lr}
 8007b80:	eb01 0302 	add.w	r3, r1, r2
 8007b84:	d807      	bhi.n	8007b96 <memmove+0x1a>
 8007b86:	1e42      	subs	r2, r0, #1
 8007b88:	4299      	cmp	r1, r3
 8007b8a:	d00a      	beq.n	8007ba2 <memmove+0x26>
 8007b8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b94:	e7f8      	b.n	8007b88 <memmove+0xc>
 8007b96:	4283      	cmp	r3, r0
 8007b98:	d9f5      	bls.n	8007b86 <memmove+0xa>
 8007b9a:	1881      	adds	r1, r0, r2
 8007b9c:	1ad2      	subs	r2, r2, r3
 8007b9e:	42d3      	cmn	r3, r2
 8007ba0:	d100      	bne.n	8007ba4 <memmove+0x28>
 8007ba2:	bd10      	pop	{r4, pc}
 8007ba4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ba8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bac:	e7f7      	b.n	8007b9e <memmove+0x22>
	...

08007bb0 <_free_r>:
 8007bb0:	b538      	push	{r3, r4, r5, lr}
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	2900      	cmp	r1, #0
 8007bb6:	d045      	beq.n	8007c44 <_free_r+0x94>
 8007bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bbc:	1f0c      	subs	r4, r1, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	bfb8      	it	lt
 8007bc2:	18e4      	addlt	r4, r4, r3
 8007bc4:	f000 f8d2 	bl	8007d6c <__malloc_lock>
 8007bc8:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <_free_r+0x98>)
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	4610      	mov	r0, r2
 8007bce:	b933      	cbnz	r3, 8007bde <_free_r+0x2e>
 8007bd0:	6063      	str	r3, [r4, #4]
 8007bd2:	6014      	str	r4, [r2, #0]
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bda:	f000 b8c8 	b.w	8007d6e <__malloc_unlock>
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	d90c      	bls.n	8007bfc <_free_r+0x4c>
 8007be2:	6821      	ldr	r1, [r4, #0]
 8007be4:	1862      	adds	r2, r4, r1
 8007be6:	4293      	cmp	r3, r2
 8007be8:	bf04      	itt	eq
 8007bea:	681a      	ldreq	r2, [r3, #0]
 8007bec:	685b      	ldreq	r3, [r3, #4]
 8007bee:	6063      	str	r3, [r4, #4]
 8007bf0:	bf04      	itt	eq
 8007bf2:	1852      	addeq	r2, r2, r1
 8007bf4:	6022      	streq	r2, [r4, #0]
 8007bf6:	6004      	str	r4, [r0, #0]
 8007bf8:	e7ec      	b.n	8007bd4 <_free_r+0x24>
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	b10a      	cbz	r2, 8007c04 <_free_r+0x54>
 8007c00:	42a2      	cmp	r2, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x4a>
 8007c04:	6819      	ldr	r1, [r3, #0]
 8007c06:	1858      	adds	r0, r3, r1
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x74>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	4401      	add	r1, r0
 8007c10:	1858      	adds	r0, r3, r1
 8007c12:	4282      	cmp	r2, r0
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	d1dd      	bne.n	8007bd4 <_free_r+0x24>
 8007c18:	6810      	ldr	r0, [r2, #0]
 8007c1a:	6852      	ldr	r2, [r2, #4]
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	4401      	add	r1, r0
 8007c20:	6019      	str	r1, [r3, #0]
 8007c22:	e7d7      	b.n	8007bd4 <_free_r+0x24>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x7c>
 8007c26:	230c      	movs	r3, #12
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	e7d3      	b.n	8007bd4 <_free_r+0x24>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	1821      	adds	r1, r4, r0
 8007c30:	428a      	cmp	r2, r1
 8007c32:	bf04      	itt	eq
 8007c34:	6811      	ldreq	r1, [r2, #0]
 8007c36:	6852      	ldreq	r2, [r2, #4]
 8007c38:	6062      	str	r2, [r4, #4]
 8007c3a:	bf04      	itt	eq
 8007c3c:	1809      	addeq	r1, r1, r0
 8007c3e:	6021      	streq	r1, [r4, #0]
 8007c40:	605c      	str	r4, [r3, #4]
 8007c42:	e7c7      	b.n	8007bd4 <_free_r+0x24>
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
 8007c46:	bf00      	nop
 8007c48:	20012cc8 	.word	0x20012cc8

08007c4c <_malloc_r>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	1ccd      	adds	r5, r1, #3
 8007c50:	f025 0503 	bic.w	r5, r5, #3
 8007c54:	3508      	adds	r5, #8
 8007c56:	2d0c      	cmp	r5, #12
 8007c58:	bf38      	it	cc
 8007c5a:	250c      	movcc	r5, #12
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	4606      	mov	r6, r0
 8007c60:	db01      	blt.n	8007c66 <_malloc_r+0x1a>
 8007c62:	42a9      	cmp	r1, r5
 8007c64:	d903      	bls.n	8007c6e <_malloc_r+0x22>
 8007c66:	230c      	movs	r3, #12
 8007c68:	6033      	str	r3, [r6, #0]
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	bd70      	pop	{r4, r5, r6, pc}
 8007c6e:	f000 f87d 	bl	8007d6c <__malloc_lock>
 8007c72:	4a21      	ldr	r2, [pc, #132]	; (8007cf8 <_malloc_r+0xac>)
 8007c74:	6814      	ldr	r4, [r2, #0]
 8007c76:	4621      	mov	r1, r4
 8007c78:	b991      	cbnz	r1, 8007ca0 <_malloc_r+0x54>
 8007c7a:	4c20      	ldr	r4, [pc, #128]	; (8007cfc <_malloc_r+0xb0>)
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	b91b      	cbnz	r3, 8007c88 <_malloc_r+0x3c>
 8007c80:	4630      	mov	r0, r6
 8007c82:	f000 f863 	bl	8007d4c <_sbrk_r>
 8007c86:	6020      	str	r0, [r4, #0]
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f000 f85e 	bl	8007d4c <_sbrk_r>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d124      	bne.n	8007cde <_malloc_r+0x92>
 8007c94:	230c      	movs	r3, #12
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f000 f868 	bl	8007d6e <__malloc_unlock>
 8007c9e:	e7e4      	b.n	8007c6a <_malloc_r+0x1e>
 8007ca0:	680b      	ldr	r3, [r1, #0]
 8007ca2:	1b5b      	subs	r3, r3, r5
 8007ca4:	d418      	bmi.n	8007cd8 <_malloc_r+0x8c>
 8007ca6:	2b0b      	cmp	r3, #11
 8007ca8:	d90f      	bls.n	8007cca <_malloc_r+0x7e>
 8007caa:	600b      	str	r3, [r1, #0]
 8007cac:	50cd      	str	r5, [r1, r3]
 8007cae:	18cc      	adds	r4, r1, r3
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	f000 f85c 	bl	8007d6e <__malloc_unlock>
 8007cb6:	f104 000b 	add.w	r0, r4, #11
 8007cba:	1d23      	adds	r3, r4, #4
 8007cbc:	f020 0007 	bic.w	r0, r0, #7
 8007cc0:	1ac3      	subs	r3, r0, r3
 8007cc2:	d0d3      	beq.n	8007c6c <_malloc_r+0x20>
 8007cc4:	425a      	negs	r2, r3
 8007cc6:	50e2      	str	r2, [r4, r3]
 8007cc8:	e7d0      	b.n	8007c6c <_malloc_r+0x20>
 8007cca:	428c      	cmp	r4, r1
 8007ccc:	684b      	ldr	r3, [r1, #4]
 8007cce:	bf16      	itet	ne
 8007cd0:	6063      	strne	r3, [r4, #4]
 8007cd2:	6013      	streq	r3, [r2, #0]
 8007cd4:	460c      	movne	r4, r1
 8007cd6:	e7eb      	b.n	8007cb0 <_malloc_r+0x64>
 8007cd8:	460c      	mov	r4, r1
 8007cda:	6849      	ldr	r1, [r1, #4]
 8007cdc:	e7cc      	b.n	8007c78 <_malloc_r+0x2c>
 8007cde:	1cc4      	adds	r4, r0, #3
 8007ce0:	f024 0403 	bic.w	r4, r4, #3
 8007ce4:	42a0      	cmp	r0, r4
 8007ce6:	d005      	beq.n	8007cf4 <_malloc_r+0xa8>
 8007ce8:	1a21      	subs	r1, r4, r0
 8007cea:	4630      	mov	r0, r6
 8007cec:	f000 f82e 	bl	8007d4c <_sbrk_r>
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	d0cf      	beq.n	8007c94 <_malloc_r+0x48>
 8007cf4:	6025      	str	r5, [r4, #0]
 8007cf6:	e7db      	b.n	8007cb0 <_malloc_r+0x64>
 8007cf8:	20012cc8 	.word	0x20012cc8
 8007cfc:	20012ccc 	.word	0x20012ccc

08007d00 <_realloc_r>:
 8007d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d02:	4607      	mov	r7, r0
 8007d04:	4614      	mov	r4, r2
 8007d06:	460e      	mov	r6, r1
 8007d08:	b921      	cbnz	r1, 8007d14 <_realloc_r+0x14>
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d10:	f7ff bf9c 	b.w	8007c4c <_malloc_r>
 8007d14:	b922      	cbnz	r2, 8007d20 <_realloc_r+0x20>
 8007d16:	f7ff ff4b 	bl	8007bb0 <_free_r>
 8007d1a:	4625      	mov	r5, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	f000 f826 	bl	8007d70 <_malloc_usable_size_r>
 8007d24:	42a0      	cmp	r0, r4
 8007d26:	d20f      	bcs.n	8007d48 <_realloc_r+0x48>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff ff8e 	bl	8007c4c <_malloc_r>
 8007d30:	4605      	mov	r5, r0
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d0f2      	beq.n	8007d1c <_realloc_r+0x1c>
 8007d36:	4631      	mov	r1, r6
 8007d38:	4622      	mov	r2, r4
 8007d3a:	f7ff fc11 	bl	8007560 <memcpy>
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ff35 	bl	8007bb0 <_free_r>
 8007d46:	e7e9      	b.n	8007d1c <_realloc_r+0x1c>
 8007d48:	4635      	mov	r5, r6
 8007d4a:	e7e7      	b.n	8007d1c <_realloc_r+0x1c>

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4c06      	ldr	r4, [pc, #24]	; (8007d68 <_sbrk_r+0x1c>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	4605      	mov	r5, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	6023      	str	r3, [r4, #0]
 8007d58:	f7fa fbee 	bl	8002538 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	6823      	ldr	r3, [r4, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20012f40 	.word	0x20012f40

08007d6c <__malloc_lock>:
 8007d6c:	4770      	bx	lr

08007d6e <__malloc_unlock>:
 8007d6e:	4770      	bx	lr

08007d70 <_malloc_usable_size_r>:
 8007d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d74:	1f18      	subs	r0, r3, #4
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bfbc      	itt	lt
 8007d7a:	580b      	ldrlt	r3, [r1, r0]
 8007d7c:	18c0      	addlt	r0, r0, r3
 8007d7e:	4770      	bx	lr

08007d80 <sinf>:
 8007d80:	ee10 3a10 	vmov	r3, s0
 8007d84:	b507      	push	{r0, r1, r2, lr}
 8007d86:	4a1d      	ldr	r2, [pc, #116]	; (8007dfc <sinf+0x7c>)
 8007d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	dc05      	bgt.n	8007d9c <sinf+0x1c>
 8007d90:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8007e00 <sinf+0x80>
 8007d94:	2000      	movs	r0, #0
 8007d96:	f000 fc41 	bl	800861c <__kernel_sinf>
 8007d9a:	e004      	b.n	8007da6 <sinf+0x26>
 8007d9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007da0:	db04      	blt.n	8007dac <sinf+0x2c>
 8007da2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007da6:	b003      	add	sp, #12
 8007da8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dac:	4668      	mov	r0, sp
 8007dae:	f000 f829 	bl	8007e04 <__ieee754_rem_pio2f>
 8007db2:	f000 0003 	and.w	r0, r0, #3
 8007db6:	2801      	cmp	r0, #1
 8007db8:	d008      	beq.n	8007dcc <sinf+0x4c>
 8007dba:	2802      	cmp	r0, #2
 8007dbc:	d00d      	beq.n	8007dda <sinf+0x5a>
 8007dbe:	b9b0      	cbnz	r0, 8007dee <sinf+0x6e>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8007dc6:	ed9d 0a00 	vldr	s0, [sp]
 8007dca:	e7e4      	b.n	8007d96 <sinf+0x16>
 8007dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007dd0:	ed9d 0a00 	vldr	s0, [sp]
 8007dd4:	f000 f942 	bl	800805c <__kernel_cosf>
 8007dd8:	e7e5      	b.n	8007da6 <sinf+0x26>
 8007dda:	2001      	movs	r0, #1
 8007ddc:	eddd 0a01 	vldr	s1, [sp, #4]
 8007de0:	ed9d 0a00 	vldr	s0, [sp]
 8007de4:	f000 fc1a 	bl	800861c <__kernel_sinf>
 8007de8:	eeb1 0a40 	vneg.f32	s0, s0
 8007dec:	e7db      	b.n	8007da6 <sinf+0x26>
 8007dee:	eddd 0a01 	vldr	s1, [sp, #4]
 8007df2:	ed9d 0a00 	vldr	s0, [sp]
 8007df6:	f000 f931 	bl	800805c <__kernel_cosf>
 8007dfa:	e7f5      	b.n	8007de8 <sinf+0x68>
 8007dfc:	3f490fd8 	.word	0x3f490fd8
 8007e00:	00000000 	.word	0x00000000

08007e04 <__ieee754_rem_pio2f>:
 8007e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e06:	ee10 6a10 	vmov	r6, s0
 8007e0a:	4b86      	ldr	r3, [pc, #536]	; (8008024 <__ieee754_rem_pio2f+0x220>)
 8007e0c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8007e10:	429c      	cmp	r4, r3
 8007e12:	b087      	sub	sp, #28
 8007e14:	4605      	mov	r5, r0
 8007e16:	dc05      	bgt.n	8007e24 <__ieee754_rem_pio2f+0x20>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	ed85 0a00 	vstr	s0, [r5]
 8007e1e:	6043      	str	r3, [r0, #4]
 8007e20:	2000      	movs	r0, #0
 8007e22:	e020      	b.n	8007e66 <__ieee754_rem_pio2f+0x62>
 8007e24:	4b80      	ldr	r3, [pc, #512]	; (8008028 <__ieee754_rem_pio2f+0x224>)
 8007e26:	429c      	cmp	r4, r3
 8007e28:	dc38      	bgt.n	8007e9c <__ieee754_rem_pio2f+0x98>
 8007e2a:	2e00      	cmp	r6, #0
 8007e2c:	f024 040f 	bic.w	r4, r4, #15
 8007e30:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800802c <__ieee754_rem_pio2f+0x228>
 8007e34:	4b7e      	ldr	r3, [pc, #504]	; (8008030 <__ieee754_rem_pio2f+0x22c>)
 8007e36:	dd18      	ble.n	8007e6a <__ieee754_rem_pio2f+0x66>
 8007e38:	429c      	cmp	r4, r3
 8007e3a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8007e3e:	bf09      	itett	eq
 8007e40:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8008034 <__ieee754_rem_pio2f+0x230>
 8007e44:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8008038 <__ieee754_rem_pio2f+0x234>
 8007e48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007e4c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800803c <__ieee754_rem_pio2f+0x238>
 8007e50:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8007e54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e58:	edc0 6a00 	vstr	s13, [r0]
 8007e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e60:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e64:	2001      	movs	r0, #1
 8007e66:	b007      	add	sp, #28
 8007e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007e70:	bf09      	itett	eq
 8007e72:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8008034 <__ieee754_rem_pio2f+0x230>
 8007e76:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8008038 <__ieee754_rem_pio2f+0x234>
 8007e7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007e7e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800803c <__ieee754_rem_pio2f+0x238>
 8007e82:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007e86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007e8a:	edc0 6a00 	vstr	s13, [r0]
 8007e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e92:	edc0 7a01 	vstr	s15, [r0, #4]
 8007e96:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9a:	e7e4      	b.n	8007e66 <__ieee754_rem_pio2f+0x62>
 8007e9c:	4b68      	ldr	r3, [pc, #416]	; (8008040 <__ieee754_rem_pio2f+0x23c>)
 8007e9e:	429c      	cmp	r4, r3
 8007ea0:	dc71      	bgt.n	8007f86 <__ieee754_rem_pio2f+0x182>
 8007ea2:	f000 fc03 	bl	80086ac <fabsf>
 8007ea6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008044 <__ieee754_rem_pio2f+0x240>
 8007eaa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007eae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007eb6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8007eba:	ee17 0a90 	vmov	r0, s15
 8007ebe:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800802c <__ieee754_rem_pio2f+0x228>
 8007ec2:	eeb1 7a46 	vneg.f32	s14, s12
 8007ec6:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007eca:	281f      	cmp	r0, #31
 8007ecc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008038 <__ieee754_rem_pio2f+0x234>
 8007ed0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007ed4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007ed8:	ee16 3a90 	vmov	r3, s13
 8007edc:	dc1c      	bgt.n	8007f18 <__ieee754_rem_pio2f+0x114>
 8007ede:	1e47      	subs	r7, r0, #1
 8007ee0:	4959      	ldr	r1, [pc, #356]	; (8008048 <__ieee754_rem_pio2f+0x244>)
 8007ee2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007ee6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8007eea:	428a      	cmp	r2, r1
 8007eec:	d014      	beq.n	8007f18 <__ieee754_rem_pio2f+0x114>
 8007eee:	602b      	str	r3, [r5, #0]
 8007ef0:	ed95 7a00 	vldr	s14, [r5]
 8007ef4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007efe:	ed85 0a01 	vstr	s0, [r5, #4]
 8007f02:	dab0      	bge.n	8007e66 <__ieee754_rem_pio2f+0x62>
 8007f04:	eeb1 7a47 	vneg.f32	s14, s14
 8007f08:	eeb1 0a40 	vneg.f32	s0, s0
 8007f0c:	ed85 7a00 	vstr	s14, [r5]
 8007f10:	ed85 0a01 	vstr	s0, [r5, #4]
 8007f14:	4240      	negs	r0, r0
 8007f16:	e7a6      	b.n	8007e66 <__ieee754_rem_pio2f+0x62>
 8007f18:	15e4      	asrs	r4, r4, #23
 8007f1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f1e:	1aa2      	subs	r2, r4, r2
 8007f20:	2a08      	cmp	r2, #8
 8007f22:	dde4      	ble.n	8007eee <__ieee754_rem_pio2f+0xea>
 8007f24:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008034 <__ieee754_rem_pio2f+0x230>
 8007f28:	eef0 6a40 	vmov.f32	s13, s0
 8007f2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f30:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007f34:	eea7 0a27 	vfma.f32	s0, s14, s15
 8007f38:	eddf 7a40 	vldr	s15, [pc, #256]	; 800803c <__ieee754_rem_pio2f+0x238>
 8007f3c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8007f40:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8007f44:	eef0 7a40 	vmov.f32	s15, s0
 8007f48:	ee15 3a90 	vmov	r3, s11
 8007f4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007f50:	1aa4      	subs	r4, r4, r2
 8007f52:	2c19      	cmp	r4, #25
 8007f54:	dc04      	bgt.n	8007f60 <__ieee754_rem_pio2f+0x15c>
 8007f56:	edc5 5a00 	vstr	s11, [r5]
 8007f5a:	eeb0 0a66 	vmov.f32	s0, s13
 8007f5e:	e7c7      	b.n	8007ef0 <__ieee754_rem_pio2f+0xec>
 8007f60:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800804c <__ieee754_rem_pio2f+0x248>
 8007f64:	eeb0 0a66 	vmov.f32	s0, s13
 8007f68:	eea7 0a25 	vfma.f32	s0, s14, s11
 8007f6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007f70:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007f74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008050 <__ieee754_rem_pio2f+0x24c>
 8007f78:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8007f7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007f80:	ed85 7a00 	vstr	s14, [r5]
 8007f84:	e7b4      	b.n	8007ef0 <__ieee754_rem_pio2f+0xec>
 8007f86:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007f8a:	db06      	blt.n	8007f9a <__ieee754_rem_pio2f+0x196>
 8007f8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007f90:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f94:	edc0 7a00 	vstr	s15, [r0]
 8007f98:	e742      	b.n	8007e20 <__ieee754_rem_pio2f+0x1c>
 8007f9a:	15e2      	asrs	r2, r4, #23
 8007f9c:	3a86      	subs	r2, #134	; 0x86
 8007f9e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007faa:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8008054 <__ieee754_rem_pio2f+0x250>
 8007fae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007fc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007fce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fda:	edcd 7a05 	vstr	s15, [sp, #20]
 8007fde:	d11e      	bne.n	800801e <__ieee754_rem_pio2f+0x21a>
 8007fe0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2302      	movne	r3, #2
 8007fee:	491a      	ldr	r1, [pc, #104]	; (8008058 <__ieee754_rem_pio2f+0x254>)
 8007ff0:	9101      	str	r1, [sp, #4]
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	9100      	str	r1, [sp, #0]
 8007ff6:	a803      	add	r0, sp, #12
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f000 f88d 	bl	8008118 <__kernel_rem_pio2f>
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	f6bf af31 	bge.w	8007e66 <__ieee754_rem_pio2f+0x62>
 8008004:	edd5 7a00 	vldr	s15, [r5]
 8008008:	eef1 7a67 	vneg.f32	s15, s15
 800800c:	edc5 7a00 	vstr	s15, [r5]
 8008010:	edd5 7a01 	vldr	s15, [r5, #4]
 8008014:	eef1 7a67 	vneg.f32	s15, s15
 8008018:	edc5 7a01 	vstr	s15, [r5, #4]
 800801c:	e77a      	b.n	8007f14 <__ieee754_rem_pio2f+0x110>
 800801e:	2303      	movs	r3, #3
 8008020:	e7e5      	b.n	8007fee <__ieee754_rem_pio2f+0x1ea>
 8008022:	bf00      	nop
 8008024:	3f490fd8 	.word	0x3f490fd8
 8008028:	4016cbe3 	.word	0x4016cbe3
 800802c:	3fc90f80 	.word	0x3fc90f80
 8008030:	3fc90fd0 	.word	0x3fc90fd0
 8008034:	37354400 	.word	0x37354400
 8008038:	37354443 	.word	0x37354443
 800803c:	2e85a308 	.word	0x2e85a308
 8008040:	43490f80 	.word	0x43490f80
 8008044:	3f22f984 	.word	0x3f22f984
 8008048:	08008e5c 	.word	0x08008e5c
 800804c:	2e85a300 	.word	0x2e85a300
 8008050:	248d3132 	.word	0x248d3132
 8008054:	43800000 	.word	0x43800000
 8008058:	08008edc 	.word	0x08008edc

0800805c <__kernel_cosf>:
 800805c:	ee10 3a10 	vmov	r3, s0
 8008060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008064:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806c:	da05      	bge.n	800807a <__kernel_cosf+0x1e>
 800806e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008072:	ee17 2a90 	vmov	r2, s15
 8008076:	2a00      	cmp	r2, #0
 8008078:	d03b      	beq.n	80080f2 <__kernel_cosf+0x96>
 800807a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800807e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008082:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80080f8 <__kernel_cosf+0x9c>
 8008086:	4a1d      	ldr	r2, [pc, #116]	; (80080fc <__kernel_cosf+0xa0>)
 8008088:	ee66 7a07 	vmul.f32	s15, s12, s14
 800808c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008100 <__kernel_cosf+0xa4>
 8008090:	eea6 7a25 	vfma.f32	s14, s12, s11
 8008094:	4293      	cmp	r3, r2
 8008096:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8008104 <__kernel_cosf+0xa8>
 800809a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800809e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8008108 <__kernel_cosf+0xac>
 80080a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80080a6:	eddf 5a19 	vldr	s11, [pc, #100]	; 800810c <__kernel_cosf+0xb0>
 80080aa:	eee7 5a06 	vfma.f32	s11, s14, s12
 80080ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8008110 <__kernel_cosf+0xb4>
 80080b2:	eea5 7a86 	vfma.f32	s14, s11, s12
 80080b6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80080ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80080be:	eee6 0a07 	vfma.f32	s1, s12, s14
 80080c2:	dc04      	bgt.n	80080ce <__kernel_cosf+0x72>
 80080c4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80080c8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80080cc:	4770      	bx	lr
 80080ce:	4a11      	ldr	r2, [pc, #68]	; (8008114 <__kernel_cosf+0xb8>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	bfda      	itte	le
 80080d4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80080d8:	ee07 3a10 	vmovle	s14, r3
 80080dc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80080e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080e4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80080e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80080ec:	ee30 0a67 	vsub.f32	s0, s0, s15
 80080f0:	4770      	bx	lr
 80080f2:	eeb0 0a66 	vmov.f32	s0, s13
 80080f6:	4770      	bx	lr
 80080f8:	ad47d74e 	.word	0xad47d74e
 80080fc:	3e999999 	.word	0x3e999999
 8008100:	310f74f6 	.word	0x310f74f6
 8008104:	b493f27c 	.word	0xb493f27c
 8008108:	37d00d01 	.word	0x37d00d01
 800810c:	bab60b61 	.word	0xbab60b61
 8008110:	3d2aaaab 	.word	0x3d2aaaab
 8008114:	3f480000 	.word	0x3f480000

08008118 <__kernel_rem_pio2f>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	ed2d 8b04 	vpush	{d8-d9}
 8008120:	b0d7      	sub	sp, #348	; 0x15c
 8008122:	469b      	mov	fp, r3
 8008124:	460e      	mov	r6, r1
 8008126:	4bbe      	ldr	r3, [pc, #760]	; (8008420 <__kernel_rem_pio2f+0x308>)
 8008128:	9964      	ldr	r1, [sp, #400]	; 0x190
 800812a:	9002      	str	r0, [sp, #8]
 800812c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8008130:	9865      	ldr	r0, [sp, #404]	; 0x194
 8008132:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8008430 <__kernel_rem_pio2f+0x318>
 8008136:	1ed1      	subs	r1, r2, #3
 8008138:	2308      	movs	r3, #8
 800813a:	fb91 f1f3 	sdiv	r1, r1, r3
 800813e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8008142:	f10b 3aff 	add.w	sl, fp, #4294967295
 8008146:	1c4c      	adds	r4, r1, #1
 8008148:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800814c:	eba1 050a 	sub.w	r5, r1, sl
 8008150:	aa1a      	add	r2, sp, #104	; 0x68
 8008152:	eb09 070a 	add.w	r7, r9, sl
 8008156:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800815a:	4696      	mov	lr, r2
 800815c:	2300      	movs	r3, #0
 800815e:	42bb      	cmp	r3, r7
 8008160:	dd0f      	ble.n	8008182 <__kernel_rem_pio2f+0x6a>
 8008162:	af42      	add	r7, sp, #264	; 0x108
 8008164:	2200      	movs	r2, #0
 8008166:	454a      	cmp	r2, r9
 8008168:	dc27      	bgt.n	80081ba <__kernel_rem_pio2f+0xa2>
 800816a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800816e:	eb0b 0302 	add.w	r3, fp, r2
 8008172:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008176:	9d02      	ldr	r5, [sp, #8]
 8008178:	eddf 7aad 	vldr	s15, [pc, #692]	; 8008430 <__kernel_rem_pio2f+0x318>
 800817c:	f04f 0c00 	mov.w	ip, #0
 8008180:	e015      	b.n	80081ae <__kernel_rem_pio2f+0x96>
 8008182:	42dd      	cmn	r5, r3
 8008184:	bf5d      	ittte	pl
 8008186:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800818a:	ee07 2a90 	vmovpl	s15, r2
 800818e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008192:	eef0 7a47 	vmovmi.f32	s15, s14
 8008196:	ecee 7a01 	vstmia	lr!, {s15}
 800819a:	3301      	adds	r3, #1
 800819c:	e7df      	b.n	800815e <__kernel_rem_pio2f+0x46>
 800819e:	ecf5 6a01 	vldmia	r5!, {s13}
 80081a2:	ed33 7a01 	vldmdb	r3!, {s14}
 80081a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80081aa:	f10c 0c01 	add.w	ip, ip, #1
 80081ae:	45d4      	cmp	ip, sl
 80081b0:	ddf5      	ble.n	800819e <__kernel_rem_pio2f+0x86>
 80081b2:	ece7 7a01 	vstmia	r7!, {s15}
 80081b6:	3201      	adds	r2, #1
 80081b8:	e7d5      	b.n	8008166 <__kernel_rem_pio2f+0x4e>
 80081ba:	ab06      	add	r3, sp, #24
 80081bc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800842c <__kernel_rem_pio2f+0x314>
 80081c6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8008428 <__kernel_rem_pio2f+0x310>
 80081ca:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	464d      	mov	r5, r9
 80081d2:	ab56      	add	r3, sp, #344	; 0x158
 80081d4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80081d8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80081dc:	3f01      	subs	r7, #1
 80081de:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80081e2:	00bf      	lsls	r7, r7, #2
 80081e4:	ab56      	add	r3, sp, #344	; 0x158
 80081e6:	19da      	adds	r2, r3, r7
 80081e8:	3a4c      	subs	r2, #76	; 0x4c
 80081ea:	2300      	movs	r3, #0
 80081ec:	1ae9      	subs	r1, r5, r3
 80081ee:	2900      	cmp	r1, #0
 80081f0:	dc4c      	bgt.n	800828c <__kernel_rem_pio2f+0x174>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 faa4 	bl	8008740 <scalbnf>
 80081f8:	eeb0 8a40 	vmov.f32	s16, s0
 80081fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008200:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008204:	f000 fa5a 	bl	80086bc <floorf>
 8008208:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800820c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008210:	2c00      	cmp	r4, #0
 8008212:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008216:	edcd 7a01 	vstr	s15, [sp, #4]
 800821a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800821e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008222:	dd48      	ble.n	80082b6 <__kernel_rem_pio2f+0x19e>
 8008224:	1e69      	subs	r1, r5, #1
 8008226:	ab06      	add	r3, sp, #24
 8008228:	f1c4 0008 	rsb	r0, r4, #8
 800822c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8008230:	9a01      	ldr	r2, [sp, #4]
 8008232:	fa4c f300 	asr.w	r3, ip, r0
 8008236:	441a      	add	r2, r3
 8008238:	4083      	lsls	r3, r0
 800823a:	9201      	str	r2, [sp, #4]
 800823c:	ebac 0203 	sub.w	r2, ip, r3
 8008240:	ab06      	add	r3, sp, #24
 8008242:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8008246:	f1c4 0307 	rsb	r3, r4, #7
 800824a:	fa42 f803 	asr.w	r8, r2, r3
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	dd41      	ble.n	80082d8 <__kernel_rem_pio2f+0x1c0>
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	2000      	movs	r0, #0
 8008258:	3301      	adds	r3, #1
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	4601      	mov	r1, r0
 800825e:	4285      	cmp	r5, r0
 8008260:	dc6d      	bgt.n	800833e <__kernel_rem_pio2f+0x226>
 8008262:	2c00      	cmp	r4, #0
 8008264:	dd04      	ble.n	8008270 <__kernel_rem_pio2f+0x158>
 8008266:	2c01      	cmp	r4, #1
 8008268:	d07e      	beq.n	8008368 <__kernel_rem_pio2f+0x250>
 800826a:	2c02      	cmp	r4, #2
 800826c:	f000 8086 	beq.w	800837c <__kernel_rem_pio2f+0x264>
 8008270:	f1b8 0f02 	cmp.w	r8, #2
 8008274:	d130      	bne.n	80082d8 <__kernel_rem_pio2f+0x1c0>
 8008276:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800827a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800827e:	b359      	cbz	r1, 80082d8 <__kernel_rem_pio2f+0x1c0>
 8008280:	4620      	mov	r0, r4
 8008282:	f000 fa5d 	bl	8008740 <scalbnf>
 8008286:	ee38 8a40 	vsub.f32	s16, s16, s0
 800828a:	e025      	b.n	80082d8 <__kernel_rem_pio2f+0x1c0>
 800828c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008290:	a806      	add	r0, sp, #24
 8008292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800829a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800829e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80082a2:	ee10 1a10 	vmov	r1, s0
 80082a6:	ed32 0a01 	vldmdb	r2!, {s0}
 80082aa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80082ae:	ee37 0a80 	vadd.f32	s0, s15, s0
 80082b2:	3301      	adds	r3, #1
 80082b4:	e79a      	b.n	80081ec <__kernel_rem_pio2f+0xd4>
 80082b6:	d106      	bne.n	80082c6 <__kernel_rem_pio2f+0x1ae>
 80082b8:	1e6b      	subs	r3, r5, #1
 80082ba:	aa06      	add	r2, sp, #24
 80082bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80082c0:	ea4f 2822 	mov.w	r8, r2, asr #8
 80082c4:	e7c3      	b.n	800824e <__kernel_rem_pio2f+0x136>
 80082c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082ca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80082ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d2:	da31      	bge.n	8008338 <__kernel_rem_pio2f+0x220>
 80082d4:	f04f 0800 	mov.w	r8, #0
 80082d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80082dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e0:	f040 80a8 	bne.w	8008434 <__kernel_rem_pio2f+0x31c>
 80082e4:	1e6b      	subs	r3, r5, #1
 80082e6:	4618      	mov	r0, r3
 80082e8:	2200      	movs	r2, #0
 80082ea:	4548      	cmp	r0, r9
 80082ec:	da4d      	bge.n	800838a <__kernel_rem_pio2f+0x272>
 80082ee:	2a00      	cmp	r2, #0
 80082f0:	f000 8087 	beq.w	8008402 <__kernel_rem_pio2f+0x2ea>
 80082f4:	aa06      	add	r2, sp, #24
 80082f6:	3c08      	subs	r4, #8
 80082f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80082fc:	2900      	cmp	r1, #0
 80082fe:	f000 808d 	beq.w	800841c <__kernel_rem_pio2f+0x304>
 8008302:	4620      	mov	r0, r4
 8008304:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008308:	9302      	str	r3, [sp, #8]
 800830a:	f000 fa19 	bl	8008740 <scalbnf>
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800842c <__kernel_rem_pio2f+0x314>
 8008314:	0099      	lsls	r1, r3, #2
 8008316:	aa42      	add	r2, sp, #264	; 0x108
 8008318:	1850      	adds	r0, r2, r1
 800831a:	1d05      	adds	r5, r0, #4
 800831c:	461c      	mov	r4, r3
 800831e:	2c00      	cmp	r4, #0
 8008320:	f280 80b8 	bge.w	8008494 <__kernel_rem_pio2f+0x37c>
 8008324:	2500      	movs	r5, #0
 8008326:	1b5c      	subs	r4, r3, r5
 8008328:	2c00      	cmp	r4, #0
 800832a:	f2c0 80d8 	blt.w	80084de <__kernel_rem_pio2f+0x3c6>
 800832e:	4f3d      	ldr	r7, [pc, #244]	; (8008424 <__kernel_rem_pio2f+0x30c>)
 8008330:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8008430 <__kernel_rem_pio2f+0x318>
 8008334:	2400      	movs	r4, #0
 8008336:	e0c6      	b.n	80084c6 <__kernel_rem_pio2f+0x3ae>
 8008338:	f04f 0802 	mov.w	r8, #2
 800833c:	e78a      	b.n	8008254 <__kernel_rem_pio2f+0x13c>
 800833e:	ab06      	add	r3, sp, #24
 8008340:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008344:	b949      	cbnz	r1, 800835a <__kernel_rem_pio2f+0x242>
 8008346:	b12b      	cbz	r3, 8008354 <__kernel_rem_pio2f+0x23c>
 8008348:	aa06      	add	r2, sp, #24
 800834a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800834e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008352:	2301      	movs	r3, #1
 8008354:	3001      	adds	r0, #1
 8008356:	4619      	mov	r1, r3
 8008358:	e781      	b.n	800825e <__kernel_rem_pio2f+0x146>
 800835a:	aa06      	add	r2, sp, #24
 800835c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008360:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8008364:	460b      	mov	r3, r1
 8008366:	e7f5      	b.n	8008354 <__kernel_rem_pio2f+0x23c>
 8008368:	1e68      	subs	r0, r5, #1
 800836a:	ab06      	add	r3, sp, #24
 800836c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008374:	aa06      	add	r2, sp, #24
 8008376:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800837a:	e779      	b.n	8008270 <__kernel_rem_pio2f+0x158>
 800837c:	1e68      	subs	r0, r5, #1
 800837e:	ab06      	add	r3, sp, #24
 8008380:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008388:	e7f4      	b.n	8008374 <__kernel_rem_pio2f+0x25c>
 800838a:	a906      	add	r1, sp, #24
 800838c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008390:	3801      	subs	r0, #1
 8008392:	430a      	orrs	r2, r1
 8008394:	e7a9      	b.n	80082ea <__kernel_rem_pio2f+0x1d2>
 8008396:	f10c 0c01 	add.w	ip, ip, #1
 800839a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800839e:	2a00      	cmp	r2, #0
 80083a0:	d0f9      	beq.n	8008396 <__kernel_rem_pio2f+0x27e>
 80083a2:	eb0b 0305 	add.w	r3, fp, r5
 80083a6:	aa1a      	add	r2, sp, #104	; 0x68
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	1898      	adds	r0, r3, r2
 80083ac:	3004      	adds	r0, #4
 80083ae:	1c69      	adds	r1, r5, #1
 80083b0:	3704      	adds	r7, #4
 80083b2:	2200      	movs	r2, #0
 80083b4:	4465      	add	r5, ip
 80083b6:	9005      	str	r0, [sp, #20]
 80083b8:	428d      	cmp	r5, r1
 80083ba:	f6ff af0a 	blt.w	80081d2 <__kernel_rem_pio2f+0xba>
 80083be:	a81a      	add	r0, sp, #104	; 0x68
 80083c0:	eb02 0c03 	add.w	ip, r2, r3
 80083c4:	4484      	add	ip, r0
 80083c6:	9803      	ldr	r0, [sp, #12]
 80083c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80083cc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80083d0:	9001      	str	r0, [sp, #4]
 80083d2:	ee07 0a90 	vmov	s15, r0
 80083d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083da:	9805      	ldr	r0, [sp, #20]
 80083dc:	edcc 7a00 	vstr	s15, [ip]
 80083e0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008430 <__kernel_rem_pio2f+0x318>
 80083e4:	eb00 0802 	add.w	r8, r0, r2
 80083e8:	f04f 0c00 	mov.w	ip, #0
 80083ec:	45d4      	cmp	ip, sl
 80083ee:	dd0c      	ble.n	800840a <__kernel_rem_pio2f+0x2f2>
 80083f0:	eb02 0c07 	add.w	ip, r2, r7
 80083f4:	a842      	add	r0, sp, #264	; 0x108
 80083f6:	4484      	add	ip, r0
 80083f8:	edcc 7a01 	vstr	s15, [ip, #4]
 80083fc:	3101      	adds	r1, #1
 80083fe:	3204      	adds	r2, #4
 8008400:	e7da      	b.n	80083b8 <__kernel_rem_pio2f+0x2a0>
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	f04f 0c01 	mov.w	ip, #1
 8008408:	e7c7      	b.n	800839a <__kernel_rem_pio2f+0x282>
 800840a:	ecfe 6a01 	vldmia	lr!, {s13}
 800840e:	ed38 7a01 	vldmdb	r8!, {s14}
 8008412:	f10c 0c01 	add.w	ip, ip, #1
 8008416:	eee6 7a87 	vfma.f32	s15, s13, s14
 800841a:	e7e7      	b.n	80083ec <__kernel_rem_pio2f+0x2d4>
 800841c:	3b01      	subs	r3, #1
 800841e:	e769      	b.n	80082f4 <__kernel_rem_pio2f+0x1dc>
 8008420:	08009220 	.word	0x08009220
 8008424:	080091f4 	.word	0x080091f4
 8008428:	43800000 	.word	0x43800000
 800842c:	3b800000 	.word	0x3b800000
 8008430:	00000000 	.word	0x00000000
 8008434:	4260      	negs	r0, r4
 8008436:	eeb0 0a48 	vmov.f32	s0, s16
 800843a:	f000 f981 	bl	8008740 <scalbnf>
 800843e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8008428 <__kernel_rem_pio2f+0x310>
 8008442:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844a:	db1a      	blt.n	8008482 <__kernel_rem_pio2f+0x36a>
 800844c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800842c <__kernel_rem_pio2f+0x314>
 8008450:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008454:	aa06      	add	r2, sp, #24
 8008456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800845a:	a906      	add	r1, sp, #24
 800845c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008460:	3408      	adds	r4, #8
 8008462:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800846a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800846e:	ee10 3a10 	vmov	r3, s0
 8008472:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008476:	1c6b      	adds	r3, r5, #1
 8008478:	ee17 2a90 	vmov	r2, s15
 800847c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008480:	e73f      	b.n	8008302 <__kernel_rem_pio2f+0x1ea>
 8008482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008486:	aa06      	add	r2, sp, #24
 8008488:	ee10 3a10 	vmov	r3, s0
 800848c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008490:	462b      	mov	r3, r5
 8008492:	e736      	b.n	8008302 <__kernel_rem_pio2f+0x1ea>
 8008494:	aa06      	add	r2, sp, #24
 8008496:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800849a:	9202      	str	r2, [sp, #8]
 800849c:	ee07 2a90 	vmov	s15, r2
 80084a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084a4:	3c01      	subs	r4, #1
 80084a6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80084aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80084ae:	ed65 7a01 	vstmdb	r5!, {s15}
 80084b2:	e734      	b.n	800831e <__kernel_rem_pio2f+0x206>
 80084b4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80084b8:	ecf7 6a01 	vldmia	r7!, {s13}
 80084bc:	ed9c 7a00 	vldr	s14, [ip]
 80084c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80084c4:	3401      	adds	r4, #1
 80084c6:	454c      	cmp	r4, r9
 80084c8:	dc01      	bgt.n	80084ce <__kernel_rem_pio2f+0x3b6>
 80084ca:	42a5      	cmp	r5, r4
 80084cc:	daf2      	bge.n	80084b4 <__kernel_rem_pio2f+0x39c>
 80084ce:	aa56      	add	r2, sp, #344	; 0x158
 80084d0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80084d4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80084d8:	3501      	adds	r5, #1
 80084da:	3804      	subs	r0, #4
 80084dc:	e723      	b.n	8008326 <__kernel_rem_pio2f+0x20e>
 80084de:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80084e0:	2a03      	cmp	r2, #3
 80084e2:	d84d      	bhi.n	8008580 <__kernel_rem_pio2f+0x468>
 80084e4:	e8df f002 	tbb	[pc, r2]
 80084e8:	021f1f3e 	.word	0x021f1f3e
 80084ec:	aa56      	add	r2, sp, #344	; 0x158
 80084ee:	4411      	add	r1, r2
 80084f0:	399c      	subs	r1, #156	; 0x9c
 80084f2:	4608      	mov	r0, r1
 80084f4:	461c      	mov	r4, r3
 80084f6:	2c00      	cmp	r4, #0
 80084f8:	dc5f      	bgt.n	80085ba <__kernel_rem_pio2f+0x4a2>
 80084fa:	4608      	mov	r0, r1
 80084fc:	461c      	mov	r4, r3
 80084fe:	2c01      	cmp	r4, #1
 8008500:	dc6b      	bgt.n	80085da <__kernel_rem_pio2f+0x4c2>
 8008502:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8008430 <__kernel_rem_pio2f+0x318>
 8008506:	2b01      	cmp	r3, #1
 8008508:	dc77      	bgt.n	80085fa <__kernel_rem_pio2f+0x4e2>
 800850a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800850e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8008512:	f1b8 0f00 	cmp.w	r8, #0
 8008516:	d176      	bne.n	8008606 <__kernel_rem_pio2f+0x4ee>
 8008518:	edc6 6a00 	vstr	s13, [r6]
 800851c:	ed86 7a01 	vstr	s14, [r6, #4]
 8008520:	edc6 7a02 	vstr	s15, [r6, #8]
 8008524:	e02c      	b.n	8008580 <__kernel_rem_pio2f+0x468>
 8008526:	aa56      	add	r2, sp, #344	; 0x158
 8008528:	4411      	add	r1, r2
 800852a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8008430 <__kernel_rem_pio2f+0x318>
 800852e:	399c      	subs	r1, #156	; 0x9c
 8008530:	4618      	mov	r0, r3
 8008532:	2800      	cmp	r0, #0
 8008534:	da32      	bge.n	800859c <__kernel_rem_pio2f+0x484>
 8008536:	f1b8 0f00 	cmp.w	r8, #0
 800853a:	d035      	beq.n	80085a8 <__kernel_rem_pio2f+0x490>
 800853c:	eef1 7a47 	vneg.f32	s15, s14
 8008540:	edc6 7a00 	vstr	s15, [r6]
 8008544:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8008548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800854c:	a82f      	add	r0, sp, #188	; 0xbc
 800854e:	2101      	movs	r1, #1
 8008550:	428b      	cmp	r3, r1
 8008552:	da2c      	bge.n	80085ae <__kernel_rem_pio2f+0x496>
 8008554:	f1b8 0f00 	cmp.w	r8, #0
 8008558:	d001      	beq.n	800855e <__kernel_rem_pio2f+0x446>
 800855a:	eef1 7a67 	vneg.f32	s15, s15
 800855e:	edc6 7a01 	vstr	s15, [r6, #4]
 8008562:	e00d      	b.n	8008580 <__kernel_rem_pio2f+0x468>
 8008564:	aa56      	add	r2, sp, #344	; 0x158
 8008566:	4411      	add	r1, r2
 8008568:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8008430 <__kernel_rem_pio2f+0x318>
 800856c:	399c      	subs	r1, #156	; 0x9c
 800856e:	2b00      	cmp	r3, #0
 8008570:	da0e      	bge.n	8008590 <__kernel_rem_pio2f+0x478>
 8008572:	f1b8 0f00 	cmp.w	r8, #0
 8008576:	d001      	beq.n	800857c <__kernel_rem_pio2f+0x464>
 8008578:	eef1 7a67 	vneg.f32	s15, s15
 800857c:	edc6 7a00 	vstr	s15, [r6]
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	f003 0007 	and.w	r0, r3, #7
 8008586:	b057      	add	sp, #348	; 0x15c
 8008588:	ecbd 8b04 	vpop	{d8-d9}
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	ed31 7a01 	vldmdb	r1!, {s14}
 8008594:	3b01      	subs	r3, #1
 8008596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800859a:	e7e8      	b.n	800856e <__kernel_rem_pio2f+0x456>
 800859c:	ed71 7a01 	vldmdb	r1!, {s15}
 80085a0:	3801      	subs	r0, #1
 80085a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085a6:	e7c4      	b.n	8008532 <__kernel_rem_pio2f+0x41a>
 80085a8:	eef0 7a47 	vmov.f32	s15, s14
 80085ac:	e7c8      	b.n	8008540 <__kernel_rem_pio2f+0x428>
 80085ae:	ecb0 7a01 	vldmia	r0!, {s14}
 80085b2:	3101      	adds	r1, #1
 80085b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085b8:	e7ca      	b.n	8008550 <__kernel_rem_pio2f+0x438>
 80085ba:	ed50 7a02 	vldr	s15, [r0, #-8]
 80085be:	ed70 6a01 	vldmdb	r0!, {s13}
 80085c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80085c6:	3c01      	subs	r4, #1
 80085c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085cc:	ed00 7a01 	vstr	s14, [r0, #-4]
 80085d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085d4:	edc0 7a00 	vstr	s15, [r0]
 80085d8:	e78d      	b.n	80084f6 <__kernel_rem_pio2f+0x3de>
 80085da:	ed50 7a02 	vldr	s15, [r0, #-8]
 80085de:	ed70 6a01 	vldmdb	r0!, {s13}
 80085e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80085e6:	3c01      	subs	r4, #1
 80085e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80085ec:	ed00 7a01 	vstr	s14, [r0, #-4]
 80085f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f4:	edc0 7a00 	vstr	s15, [r0]
 80085f8:	e781      	b.n	80084fe <__kernel_rem_pio2f+0x3e6>
 80085fa:	ed31 7a01 	vldmdb	r1!, {s14}
 80085fe:	3b01      	subs	r3, #1
 8008600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008604:	e77f      	b.n	8008506 <__kernel_rem_pio2f+0x3ee>
 8008606:	eef1 6a66 	vneg.f32	s13, s13
 800860a:	eeb1 7a47 	vneg.f32	s14, s14
 800860e:	edc6 6a00 	vstr	s13, [r6]
 8008612:	ed86 7a01 	vstr	s14, [r6, #4]
 8008616:	eef1 7a67 	vneg.f32	s15, s15
 800861a:	e781      	b.n	8008520 <__kernel_rem_pio2f+0x408>

0800861c <__kernel_sinf>:
 800861c:	ee10 3a10 	vmov	r3, s0
 8008620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008624:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008628:	da04      	bge.n	8008634 <__kernel_sinf+0x18>
 800862a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800862e:	ee17 3a90 	vmov	r3, s15
 8008632:	b35b      	cbz	r3, 800868c <__kernel_sinf+0x70>
 8008634:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008638:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008690 <__kernel_sinf+0x74>
 800863c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8008694 <__kernel_sinf+0x78>
 8008640:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008644:	eddf 7a14 	vldr	s15, [pc, #80]	; 8008698 <__kernel_sinf+0x7c>
 8008648:	eee6 7a07 	vfma.f32	s15, s12, s14
 800864c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800869c <__kernel_sinf+0x80>
 8008650:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008654:	eddf 7a12 	vldr	s15, [pc, #72]	; 80086a0 <__kernel_sinf+0x84>
 8008658:	ee60 6a07 	vmul.f32	s13, s0, s14
 800865c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008660:	b930      	cbnz	r0, 8008670 <__kernel_sinf+0x54>
 8008662:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80086a4 <__kernel_sinf+0x88>
 8008666:	eea7 6a27 	vfma.f32	s12, s14, s15
 800866a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800866e:	4770      	bx	lr
 8008670:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8008678:	eee0 7a86 	vfma.f32	s15, s1, s12
 800867c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008680:	eddf 7a09 	vldr	s15, [pc, #36]	; 80086a8 <__kernel_sinf+0x8c>
 8008684:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008688:	ee30 0a60 	vsub.f32	s0, s0, s1
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	2f2ec9d3 	.word	0x2f2ec9d3
 8008694:	b2d72f34 	.word	0xb2d72f34
 8008698:	3638ef1b 	.word	0x3638ef1b
 800869c:	b9500d01 	.word	0xb9500d01
 80086a0:	3c088889 	.word	0x3c088889
 80086a4:	be2aaaab 	.word	0xbe2aaaab
 80086a8:	3e2aaaab 	.word	0x3e2aaaab

080086ac <fabsf>:
 80086ac:	ee10 3a10 	vmov	r3, s0
 80086b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	ee00 3a10 	vmov	s0, r3
 80086b8:	4770      	bx	lr
	...

080086bc <floorf>:
 80086bc:	ee10 3a10 	vmov	r3, s0
 80086c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086c4:	0dca      	lsrs	r2, r1, #23
 80086c6:	3a7f      	subs	r2, #127	; 0x7f
 80086c8:	2a16      	cmp	r2, #22
 80086ca:	dc2a      	bgt.n	8008722 <floorf+0x66>
 80086cc:	2a00      	cmp	r2, #0
 80086ce:	da11      	bge.n	80086f4 <floorf+0x38>
 80086d0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008734 <floorf+0x78>
 80086d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80086d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80086dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e0:	dd05      	ble.n	80086ee <floorf+0x32>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da23      	bge.n	800872e <floorf+0x72>
 80086e6:	4a14      	ldr	r2, [pc, #80]	; (8008738 <floorf+0x7c>)
 80086e8:	2900      	cmp	r1, #0
 80086ea:	bf18      	it	ne
 80086ec:	4613      	movne	r3, r2
 80086ee:	ee00 3a10 	vmov	s0, r3
 80086f2:	4770      	bx	lr
 80086f4:	4911      	ldr	r1, [pc, #68]	; (800873c <floorf+0x80>)
 80086f6:	4111      	asrs	r1, r2
 80086f8:	420b      	tst	r3, r1
 80086fa:	d0fa      	beq.n	80086f2 <floorf+0x36>
 80086fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008734 <floorf+0x78>
 8008700:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008704:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870c:	ddef      	ble.n	80086ee <floorf+0x32>
 800870e:	2b00      	cmp	r3, #0
 8008710:	bfbe      	ittt	lt
 8008712:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008716:	fa40 f202 	asrlt.w	r2, r0, r2
 800871a:	189b      	addlt	r3, r3, r2
 800871c:	ea23 0301 	bic.w	r3, r3, r1
 8008720:	e7e5      	b.n	80086ee <floorf+0x32>
 8008722:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008726:	d3e4      	bcc.n	80086f2 <floorf+0x36>
 8008728:	ee30 0a00 	vadd.f32	s0, s0, s0
 800872c:	4770      	bx	lr
 800872e:	2300      	movs	r3, #0
 8008730:	e7dd      	b.n	80086ee <floorf+0x32>
 8008732:	bf00      	nop
 8008734:	7149f2ca 	.word	0x7149f2ca
 8008738:	bf800000 	.word	0xbf800000
 800873c:	007fffff 	.word	0x007fffff

08008740 <scalbnf>:
 8008740:	b508      	push	{r3, lr}
 8008742:	ee10 2a10 	vmov	r2, s0
 8008746:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800874a:	ed2d 8b02 	vpush	{d8}
 800874e:	eef0 0a40 	vmov.f32	s1, s0
 8008752:	d004      	beq.n	800875e <scalbnf+0x1e>
 8008754:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008758:	d306      	bcc.n	8008768 <scalbnf+0x28>
 800875a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800875e:	ecbd 8b02 	vpop	{d8}
 8008762:	eeb0 0a60 	vmov.f32	s0, s1
 8008766:	bd08      	pop	{r3, pc}
 8008768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800876c:	d21c      	bcs.n	80087a8 <scalbnf+0x68>
 800876e:	4b1f      	ldr	r3, [pc, #124]	; (80087ec <scalbnf+0xac>)
 8008770:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80087f0 <scalbnf+0xb0>
 8008774:	4298      	cmp	r0, r3
 8008776:	ee60 0a27 	vmul.f32	s1, s0, s15
 800877a:	db10      	blt.n	800879e <scalbnf+0x5e>
 800877c:	ee10 2a90 	vmov	r2, s1
 8008780:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8008784:	3b19      	subs	r3, #25
 8008786:	4403      	add	r3, r0
 8008788:	2bfe      	cmp	r3, #254	; 0xfe
 800878a:	dd0f      	ble.n	80087ac <scalbnf+0x6c>
 800878c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80087f4 <scalbnf+0xb4>
 8008790:	eeb0 0a48 	vmov.f32	s0, s16
 8008794:	f000 f834 	bl	8008800 <copysignf>
 8008798:	ee60 0a08 	vmul.f32	s1, s0, s16
 800879c:	e7df      	b.n	800875e <scalbnf+0x1e>
 800879e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80087f8 <scalbnf+0xb8>
 80087a2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80087a6:	e7da      	b.n	800875e <scalbnf+0x1e>
 80087a8:	0ddb      	lsrs	r3, r3, #23
 80087aa:	e7ec      	b.n	8008786 <scalbnf+0x46>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dd06      	ble.n	80087be <scalbnf+0x7e>
 80087b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80087b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80087b8:	ee00 3a90 	vmov	s1, r3
 80087bc:	e7cf      	b.n	800875e <scalbnf+0x1e>
 80087be:	f113 0f16 	cmn.w	r3, #22
 80087c2:	da06      	bge.n	80087d2 <scalbnf+0x92>
 80087c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80087c8:	4298      	cmp	r0, r3
 80087ca:	dcdf      	bgt.n	800878c <scalbnf+0x4c>
 80087cc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80087f8 <scalbnf+0xb8>
 80087d0:	e7de      	b.n	8008790 <scalbnf+0x50>
 80087d2:	3319      	adds	r3, #25
 80087d4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80087d8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80087dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80087fc <scalbnf+0xbc>
 80087e0:	ee07 3a10 	vmov	s14, r3
 80087e4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80087e8:	e7b9      	b.n	800875e <scalbnf+0x1e>
 80087ea:	bf00      	nop
 80087ec:	ffff3cb0 	.word	0xffff3cb0
 80087f0:	4c000000 	.word	0x4c000000
 80087f4:	7149f2ca 	.word	0x7149f2ca
 80087f8:	0da24260 	.word	0x0da24260
 80087fc:	33000000 	.word	0x33000000

08008800 <copysignf>:
 8008800:	ee10 3a10 	vmov	r3, s0
 8008804:	ee10 2a90 	vmov	r2, s1
 8008808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800880c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008810:	4313      	orrs	r3, r2
 8008812:	ee00 3a10 	vmov	s0, r3
 8008816:	4770      	bx	lr

08008818 <_init>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr

08008824 <_fini>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	bf00      	nop
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr
