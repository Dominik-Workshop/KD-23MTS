
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800637c  0800637c  0001637c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063bc  080063bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080063bc  080063bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063bc  080063bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080063c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004258  20000010  080063d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004268  080063d4  00024268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017403  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002aea  00000000  00000000  00037443  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003b300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a55e  00000000  00000000  0003c568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000118c5  00000000  00000000  00066ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00106239  00000000  00000000  0007838b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e5c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  0017e640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006364 	.word	0x08006364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006364 	.word	0x08006364

080001c8 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001d6:	f003 f923 	bl	8003420 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80001da:	200a      	movs	r0, #10
 80001dc:	f001 fa62 	bl	80016a4 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001ea:	f003 f919 	bl	8003420 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 80001ee:	4b65      	ldr	r3, [pc, #404]	; (8000384 <ILI9488_Init+0x1bc>)
 80001f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80001f4:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 80001f6:	4b64      	ldr	r3, [pc, #400]	; (8000388 <ILI9488_Init+0x1c0>)
 80001f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80001fc:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 80001fe:	20e0      	movs	r0, #224	; 0xe0
 8000200:	f000 f9e6 	bl	80005d0 <writecommand>
	writedata(0x00);
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fa67 	bl	80006d8 <writedata>
	writedata(0x03);
 800020a:	2003      	movs	r0, #3
 800020c:	f000 fa64 	bl	80006d8 <writedata>
	writedata(0x09);
 8000210:	2009      	movs	r0, #9
 8000212:	f000 fa61 	bl	80006d8 <writedata>
	writedata(0x08);
 8000216:	2008      	movs	r0, #8
 8000218:	f000 fa5e 	bl	80006d8 <writedata>
	writedata(0x16);
 800021c:	2016      	movs	r0, #22
 800021e:	f000 fa5b 	bl	80006d8 <writedata>
	writedata(0x0A);
 8000222:	200a      	movs	r0, #10
 8000224:	f000 fa58 	bl	80006d8 <writedata>
	writedata(0x3F);
 8000228:	203f      	movs	r0, #63	; 0x3f
 800022a:	f000 fa55 	bl	80006d8 <writedata>
	writedata(0x78);
 800022e:	2078      	movs	r0, #120	; 0x78
 8000230:	f000 fa52 	bl	80006d8 <writedata>
	writedata(0x4C);
 8000234:	204c      	movs	r0, #76	; 0x4c
 8000236:	f000 fa4f 	bl	80006d8 <writedata>
	writedata(0x09);
 800023a:	2009      	movs	r0, #9
 800023c:	f000 fa4c 	bl	80006d8 <writedata>
	writedata(0x0A);
 8000240:	200a      	movs	r0, #10
 8000242:	f000 fa49 	bl	80006d8 <writedata>
	writedata(0x08);
 8000246:	2008      	movs	r0, #8
 8000248:	f000 fa46 	bl	80006d8 <writedata>
	writedata(0x16);
 800024c:	2016      	movs	r0, #22
 800024e:	f000 fa43 	bl	80006d8 <writedata>
	writedata(0x1A);
 8000252:	201a      	movs	r0, #26
 8000254:	f000 fa40 	bl	80006d8 <writedata>
	writedata(0x0F);
 8000258:	200f      	movs	r0, #15
 800025a:	f000 fa3d 	bl	80006d8 <writedata>

	writecommand(0XE1);
 800025e:	20e1      	movs	r0, #225	; 0xe1
 8000260:	f000 f9b6 	bl	80005d0 <writecommand>
	writedata(0x00);
 8000264:	2000      	movs	r0, #0
 8000266:	f000 fa37 	bl	80006d8 <writedata>
	writedata(0x16);
 800026a:	2016      	movs	r0, #22
 800026c:	f000 fa34 	bl	80006d8 <writedata>
	writedata(0x19);
 8000270:	2019      	movs	r0, #25
 8000272:	f000 fa31 	bl	80006d8 <writedata>
	writedata(0x03);
 8000276:	2003      	movs	r0, #3
 8000278:	f000 fa2e 	bl	80006d8 <writedata>
	writedata(0x0F);
 800027c:	200f      	movs	r0, #15
 800027e:	f000 fa2b 	bl	80006d8 <writedata>
	writedata(0x05);
 8000282:	2005      	movs	r0, #5
 8000284:	f000 fa28 	bl	80006d8 <writedata>
	writedata(0x32);
 8000288:	2032      	movs	r0, #50	; 0x32
 800028a:	f000 fa25 	bl	80006d8 <writedata>
	writedata(0x45);
 800028e:	2045      	movs	r0, #69	; 0x45
 8000290:	f000 fa22 	bl	80006d8 <writedata>
	writedata(0x46);
 8000294:	2046      	movs	r0, #70	; 0x46
 8000296:	f000 fa1f 	bl	80006d8 <writedata>
	writedata(0x04);
 800029a:	2004      	movs	r0, #4
 800029c:	f000 fa1c 	bl	80006d8 <writedata>
	writedata(0x0E);
 80002a0:	200e      	movs	r0, #14
 80002a2:	f000 fa19 	bl	80006d8 <writedata>
	writedata(0x0D);
 80002a6:	200d      	movs	r0, #13
 80002a8:	f000 fa16 	bl	80006d8 <writedata>
	writedata(0x35);
 80002ac:	2035      	movs	r0, #53	; 0x35
 80002ae:	f000 fa13 	bl	80006d8 <writedata>
	writedata(0x37);
 80002b2:	2037      	movs	r0, #55	; 0x37
 80002b4:	f000 fa10 	bl	80006d8 <writedata>
	writedata(0x0F);
 80002b8:	200f      	movs	r0, #15
 80002ba:	f000 fa0d 	bl	80006d8 <writedata>

	writecommand(0XC0);      //Power Control 1
 80002be:	20c0      	movs	r0, #192	; 0xc0
 80002c0:	f000 f986 	bl	80005d0 <writecommand>
	writedata(0x17);    //Vreg1out
 80002c4:	2017      	movs	r0, #23
 80002c6:	f000 fa07 	bl	80006d8 <writedata>
	writedata(0x15);    //Verg2out
 80002ca:	2015      	movs	r0, #21
 80002cc:	f000 fa04 	bl	80006d8 <writedata>

	writecommand(0xC1);      //Power Control 2
 80002d0:	20c1      	movs	r0, #193	; 0xc1
 80002d2:	f000 f97d 	bl	80005d0 <writecommand>
	writedata(0x41);    //VGH,VGL
 80002d6:	2041      	movs	r0, #65	; 0x41
 80002d8:	f000 f9fe 	bl	80006d8 <writedata>

	writecommand(0xC5);      //Power Control 3
 80002dc:	20c5      	movs	r0, #197	; 0xc5
 80002de:	f000 f977 	bl	80005d0 <writecommand>
	writedata(0x00);
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 f9f8 	bl	80006d8 <writedata>
	writedata(0x12);    //Vcom
 80002e8:	2012      	movs	r0, #18
 80002ea:	f000 f9f5 	bl	80006d8 <writedata>
	writedata(0x80);
 80002ee:	2080      	movs	r0, #128	; 0x80
 80002f0:	f000 f9f2 	bl	80006d8 <writedata>

	writecommand(0x36);      //Memory Access
 80002f4:	2036      	movs	r0, #54	; 0x36
 80002f6:	f000 f96b 	bl	80005d0 <writecommand>
	writedata(0x48);
 80002fa:	2048      	movs	r0, #72	; 0x48
 80002fc:	f000 f9ec 	bl	80006d8 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 8000300:	2036      	movs	r0, #54	; 0x36
 8000302:	f000 f965 	bl	80005d0 <writecommand>
	writedata(0x66); 	  //18 bit
 8000306:	2066      	movs	r0, #102	; 0x66
 8000308:	f000 f9e6 	bl	80006d8 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 800030c:	20b0      	movs	r0, #176	; 0xb0
 800030e:	f000 f95f 	bl	80005d0 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000312:	2080      	movs	r0, #128	; 0x80
 8000314:	f000 f9e0 	bl	80006d8 <writedata>

	writecommand(0xB1);      //Frame rate
 8000318:	20b1      	movs	r0, #177	; 0xb1
 800031a:	f000 f959 	bl	80005d0 <writecommand>
	writedata(0xA0);    //60Hz
 800031e:	20a0      	movs	r0, #160	; 0xa0
 8000320:	f000 f9da 	bl	80006d8 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 8000324:	20b4      	movs	r0, #180	; 0xb4
 8000326:	f000 f953 	bl	80005d0 <writecommand>
	writedata(0x02);    //2-dot
 800032a:	2002      	movs	r0, #2
 800032c:	f000 f9d4 	bl	80006d8 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000330:	20b6      	movs	r0, #182	; 0xb6
 8000332:	f000 f94d 	bl	80005d0 <writecommand>

	writedata(0x02);    //MCU
 8000336:	2002      	movs	r0, #2
 8000338:	f000 f9ce 	bl	80006d8 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 800033c:	2002      	movs	r0, #2
 800033e:	f000 f9cb 	bl	80006d8 <writedata>

	writecommand(0XE9);      // Set Image Functio
 8000342:	20e9      	movs	r0, #233	; 0xe9
 8000344:	f000 f944 	bl	80005d0 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000348:	2000      	movs	r0, #0
 800034a:	f000 f9c5 	bl	80006d8 <writedata>

	writecommand(0xF7);      // Adjust Control
 800034e:	20f7      	movs	r0, #247	; 0xf7
 8000350:	f000 f93e 	bl	80005d0 <writecommand>
	writedata(0xA9);
 8000354:	20a9      	movs	r0, #169	; 0xa9
 8000356:	f000 f9bf 	bl	80006d8 <writedata>
	writedata(0x51);
 800035a:	2051      	movs	r0, #81	; 0x51
 800035c:	f000 f9bc 	bl	80006d8 <writedata>
	writedata(0x2C);
 8000360:	202c      	movs	r0, #44	; 0x2c
 8000362:	f000 f9b9 	bl	80006d8 <writedata>
	writedata(0x82);    // D7 stream, loose
 8000366:	2082      	movs	r0, #130	; 0x82
 8000368:	f000 f9b6 	bl	80006d8 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 800036c:	2011      	movs	r0, #17
 800036e:	f000 f92f 	bl	80005d0 <writecommand>

	HAL_Delay(120);
 8000372:	2078      	movs	r0, #120	; 0x78
 8000374:	f001 f996 	bl	80016a4 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000378:	2029      	movs	r0, #41	; 0x29
 800037a:	f000 f929 	bl	80005d0 <writecommand>


}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000038 	.word	0x20000038
 8000388:	2000003c 	.word	0x2000003c

0800038c <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800038c:	b590      	push	{r4, r7, lr}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	4604      	mov	r4, r0
 8000394:	4608      	mov	r0, r1
 8000396:	4611      	mov	r1, r2
 8000398:	461a      	mov	r2, r3
 800039a:	4623      	mov	r3, r4
 800039c:	80fb      	strh	r3, [r7, #6]
 800039e:	4603      	mov	r3, r0
 80003a0:	80bb      	strh	r3, [r7, #4]
 80003a2:	460b      	mov	r3, r1
 80003a4:	807b      	strh	r3, [r7, #2]
 80003a6:	4613      	mov	r3, r2
 80003a8:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 80003aa:	202a      	movs	r0, #42	; 0x2a
 80003ac:	f000 f910 	bl	80005d0 <writecommand>
	writedata(x0 >> 8);
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 f98d 	bl	80006d8 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 80003be:	88fb      	ldrh	r3, [r7, #6]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f988 	bl	80006d8 <writedata>
	writedata(x1 >> 8);
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	0a1b      	lsrs	r3, r3, #8
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f981 	bl	80006d8 <writedata>
	writedata(x1 & 0xFF);     // XEND
 80003d6:	887b      	ldrh	r3, [r7, #2]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f97c 	bl	80006d8 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 80003e0:	202b      	movs	r0, #43	; 0x2b
 80003e2:	f000 f8f5 	bl	80005d0 <writecommand>
	writedata(y0 >> 8);
 80003e6:	88bb      	ldrh	r3, [r7, #4]
 80003e8:	0a1b      	lsrs	r3, r3, #8
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 f972 	bl	80006d8 <writedata>
	writedata(y0 & 0xff);     // YSTART
 80003f4:	88bb      	ldrh	r3, [r7, #4]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f96d 	bl	80006d8 <writedata>
	writedata(y1 >> 8);
 80003fe:	883b      	ldrh	r3, [r7, #0]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	b29b      	uxth	r3, r3
 8000404:	b2db      	uxtb	r3, r3
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f966 	bl	80006d8 <writedata>
	writedata(y1 & 0xff);     // YEND
 800040c:	883b      	ldrh	r3, [r7, #0]
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f961 	bl	80006d8 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000416:	202c      	movs	r0, #44	; 0x2c
 8000418:	f000 f8da 	bl	80005d0 <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000422:	4806      	ldr	r0, [pc, #24]	; (800043c <setAddrWindow+0xb0>)
 8000424:	f002 fffc 	bl	8003420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2110      	movs	r1, #16
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <setAddrWindow+0xb0>)
 800042e:	f002 fff7 	bl	8003420 <HAL_GPIO_WritePin>
}
 8000432:	bf00      	nop
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	bd90      	pop	{r4, r7, pc}
 800043a:	bf00      	nop
 800043c:	48000800 	.word	0x48000800

08000440 <drawPixel>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}
void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	80fb      	strh	r3, [r7, #6]
 800044a:	460b      	mov	r3, r1
 800044c:	80bb      	strh	r3, [r7, #4]
 800044e:	4613      	mov	r3, r2
 8000450:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8000452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000456:	2b00      	cmp	r3, #0
 8000458:	db31      	blt.n	80004be <drawPixel+0x7e>
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <drawPixel+0x88>)
 800045c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000460:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000464:	429a      	cmp	r2, r3
 8000466:	da2a      	bge.n	80004be <drawPixel+0x7e>
 8000468:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800046c:	2b00      	cmp	r3, #0
 800046e:	db26      	blt.n	80004be <drawPixel+0x7e>
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <drawPixel+0x8c>)
 8000472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000476:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	da1f      	bge.n	80004be <drawPixel+0x7e>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 800047e:	88f8      	ldrh	r0, [r7, #6]
 8000480:	88b9      	ldrh	r1, [r7, #4]
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	3301      	adds	r3, #1
 8000486:	b29a      	uxth	r2, r3
 8000488:	88bb      	ldrh	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	b29b      	uxth	r3, r3
 800048e:	f7ff ff7d 	bl	800038c <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2110      	movs	r1, #16
 8000496:	480e      	ldr	r0, [pc, #56]	; (80004d0 <drawPixel+0x90>)
 8000498:	f002 ffc2 	bl	8003420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <drawPixel+0x90>)
 80004a4:	f002 ffbc 	bl	8003420 <HAL_GPIO_WritePin>
	write16BitColor(color);
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 f8b4 	bl	8000618 <write16BitColor>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b6:	4806      	ldr	r0, [pc, #24]	; (80004d0 <drawPixel+0x90>)
 80004b8:	f002 ffb2 	bl	8003420 <HAL_GPIO_WritePin>
 80004bc:	e000      	b.n	80004c0 <drawPixel+0x80>
		return;
 80004be:	bf00      	nop

}
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000038 	.word	0x20000038
 80004cc:	2000003c 	.word	0x2000003c
 80004d0:	48000800 	.word	0x48000800

080004d4 <setRotation>:

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
void setRotation(uint8_t r)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f000 f876 	bl	80005d0 <writecommand>
	rotation = r % 4; // can't be higher than 3
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	f003 0303 	and.w	r3, r3, #3
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <setRotation+0xa4>)
 80004ee:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <setRotation+0xa4>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d83b      	bhi.n	8000570 <setRotation+0x9c>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <setRotation+0x2c>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	08000511 	.word	0x08000511
 8000504:	08000529 	.word	0x08000529
 8000508:	08000541 	.word	0x08000541
 800050c:	08000559 	.word	0x08000559
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8000510:	2048      	movs	r0, #72	; 0x48
 8000512:	f000 f8e1 	bl	80006d8 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <setRotation+0xa8>)
 8000518:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800051c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <setRotation+0xac>)
 8000520:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000524:	801a      	strh	r2, [r3, #0]
		break;
 8000526:	e023      	b.n	8000570 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8000528:	2028      	movs	r0, #40	; 0x28
 800052a:	f000 f8d5 	bl	80006d8 <writedata>
		_width = ILI9488_TFTHEIGHT;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <setRotation+0xa8>)
 8000530:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000534:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <setRotation+0xac>)
 8000538:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800053c:	801a      	strh	r2, [r3, #0]
		break;
 800053e:	e017      	b.n	8000570 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8000540:	2088      	movs	r0, #136	; 0x88
 8000542:	f000 f8c9 	bl	80006d8 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <setRotation+0xa8>)
 8000548:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800054c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <setRotation+0xac>)
 8000550:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000554:	801a      	strh	r2, [r3, #0]
		break;
 8000556:	e00b      	b.n	8000570 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000558:	20e8      	movs	r0, #232	; 0xe8
 800055a:	f000 f8bd 	bl	80006d8 <writedata>
		_width = ILI9488_TFTHEIGHT;
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <setRotation+0xa8>)
 8000560:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000564:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <setRotation+0xac>)
 8000568:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800056c:	801a      	strh	r2, [r3, #0]
		break;
 800056e:	bf00      	nop
	}

}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000034 	.word	0x20000034
 800057c:	20000038 	.word	0x20000038
 8000580:	2000003c 	.word	0x2000003c

08000584 <color565>:

	  writecommand(i ? ILI9488_INVON : ILI9488_INVOFF);

}
uint16_t color565(uint8_t r, uint8_t g, uint8_t b)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
 800058e:	460b      	mov	r3, r1
 8000590:	71bb      	strb	r3, [r7, #6]
 8000592:	4613      	mov	r3, r2
 8000594:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	b21b      	sxth	r3, r3
 800059c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80005a0:	f023 0307 	bic.w	r3, r3, #7
 80005a4:	b21a      	sxth	r2, r3
 80005a6:	79bb      	ldrb	r3, [r7, #6]
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	b21b      	sxth	r3, r3
 80005ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b21a      	sxth	r2, r3
 80005b6:	797b      	ldrb	r3, [r7, #5]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	b21b      	sxth	r3, r3
 80005be:	4313      	orrs	r3, r2
 80005c0:	b21b      	sxth	r3, r3
 80005c2:	b29b      	uxth	r3, r3
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2110      	movs	r1, #16
 80005de:	480c      	ldr	r0, [pc, #48]	; (8000610 <writecommand+0x40>)
 80005e0:	f002 ff1e 	bl	8003420 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <writecommand+0x40>)
 80005ec:	f002 ff18 	bl	8003420 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80005f0:	1df9      	adds	r1, r7, #7
 80005f2:	2301      	movs	r3, #1
 80005f4:	2201      	movs	r2, #1
 80005f6:	4807      	ldr	r0, [pc, #28]	; (8000614 <writecommand+0x44>)
 80005f8:	f004 fa93 	bl	8004b22 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	4803      	ldr	r0, [pc, #12]	; (8000610 <writecommand+0x40>)
 8000604:	f002 ff0c 	bl	8003420 <HAL_GPIO_WritePin>

}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	48000800 	.word	0x48000800
 8000614:	2000416c 	.word	0x2000416c

08000618 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	0adb      	lsrs	r3, r3, #11
 8000626:	b29b      	uxth	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	115b      	asrs	r3, r3, #5
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 031f 	and.w	r3, r3, #31
 8000642:	b2db      	uxtb	r3, r3
 8000644:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	461a      	mov	r2, r3
 800064a:	4613      	mov	r3, r2
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <write16BitColor+0xb4>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	441a      	add	r2, r3
 8000658:	1112      	asrs	r2, r2, #4
 800065a:	17db      	asrs	r3, r3, #31
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	b2db      	uxtb	r3, r3
 8000660:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	461a      	mov	r2, r3
 8000666:	4613      	mov	r3, r2
 8000668:	021b      	lsls	r3, r3, #8
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4a18      	ldr	r2, [pc, #96]	; (80006d0 <write16BitColor+0xb8>)
 800066e:	fb82 1203 	smull	r1, r2, r2, r3
 8000672:	441a      	add	r2, r3
 8000674:	1152      	asrs	r2, r2, #5
 8000676:	17db      	asrs	r3, r3, #31
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 800067e:	7b7b      	ldrb	r3, [r7, #13]
 8000680:	461a      	mov	r2, r3
 8000682:	4613      	mov	r3, r2
 8000684:	021b      	lsls	r3, r3, #8
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <write16BitColor+0xb4>)
 800068a:	fb82 1203 	smull	r1, r2, r2, r3
 800068e:	441a      	add	r2, r3
 8000690:	1112      	asrs	r2, r2, #4
 8000692:	17db      	asrs	r3, r3, #31
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 800069a:	f107 010f 	add.w	r1, r7, #15
 800069e:	2301      	movs	r3, #1
 80006a0:	2201      	movs	r2, #1
 80006a2:	480c      	ldr	r0, [pc, #48]	; (80006d4 <write16BitColor+0xbc>)
 80006a4:	f004 fa3d 	bl	8004b22 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 80006a8:	f107 010e 	add.w	r1, r7, #14
 80006ac:	2301      	movs	r3, #1
 80006ae:	2201      	movs	r2, #1
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <write16BitColor+0xbc>)
 80006b2:	f004 fa36 	bl	8004b22 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 80006b6:	f107 010d 	add.w	r1, r7, #13
 80006ba:	2301      	movs	r3, #1
 80006bc:	2201      	movs	r2, #1
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <write16BitColor+0xbc>)
 80006c0:	f004 fa2f 	bl	8004b22 <HAL_SPI_Transmit>


}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	84210843 	.word	0x84210843
 80006d0:	82082083 	.word	0x82082083
 80006d4:	2000416c 	.word	0x2000416c

080006d8 <writedata>:
void writedata(uint8_t d)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2110      	movs	r1, #16
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <writedata+0x40>)
 80006e8:	f002 fe9a 	bl	8003420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <writedata+0x40>)
 80006f4:	f002 fe94 	bl	8003420 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2301      	movs	r3, #1
 80006fc:	2201      	movs	r2, #1
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <writedata+0x44>)
 8000700:	f004 fa0f 	bl	8004b22 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <writedata+0x40>)
 800070c:	f002 fe88 	bl	8003420 <HAL_GPIO_WritePin>

}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	48000800 	.word	0x48000800
 800071c:	2000416c 	.word	0x2000416c

08000720 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	80fb      	strh	r3, [r7, #6]
 800072c:	466b      	mov	r3, sp
 800072e:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	f240 22ed 	movw	r2, #749	; 0x2ed
 800073c:	4293      	cmp	r3, r2
 800073e:	d802      	bhi.n	8000746 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
 8000744:	e002      	b.n	800074c <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8000746:	f240 23ee 	movw	r3, #750	; 0x2ee
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2110      	movs	r1, #16
 8000750:	4867      	ldr	r0, [pc, #412]	; (80008f0 <ILI9341_Draw_Colour_Burst+0x1d0>)
 8000752:	f002 fe65 	bl	8003420 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075c:	4864      	ldr	r0, [pc, #400]	; (80008f0 <ILI9341_Draw_Colour_Burst+0x1d0>)
 800075e:	f002 fe5f 	bl	8003420 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	0adb      	lsrs	r3, r3, #11
 8000766:	b29b      	uxth	r3, r3
 8000768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	115b      	asrs	r3, r3, #5
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000776:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 8000786:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800078a:	4613      	mov	r3, r2
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	1a9b      	subs	r3, r3, r2
 8000790:	4a58      	ldr	r2, [pc, #352]	; (80008f4 <ILI9341_Draw_Colour_Burst+0x1d4>)
 8000792:	fb82 1203 	smull	r1, r2, r2, r3
 8000796:	441a      	add	r2, r3
 8000798:	1112      	asrs	r2, r2, #4
 800079a:	17db      	asrs	r3, r3, #31
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 80007a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80007a6:	4613      	mov	r3, r2
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	4a52      	ldr	r2, [pc, #328]	; (80008f8 <ILI9341_Draw_Colour_Burst+0x1d8>)
 80007ae:	fb82 1203 	smull	r1, r2, r2, r3
 80007b2:	441a      	add	r2, r3
 80007b4:	1152      	asrs	r2, r2, #5
 80007b6:	17db      	asrs	r3, r3, #31
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 80007be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80007c2:	4613      	mov	r3, r2
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	4a4a      	ldr	r2, [pc, #296]	; (80008f4 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	441a      	add	r2, r3
 80007d0:	1112      	asrs	r2, r2, #4
 80007d2:	17db      	asrs	r3, r3, #31
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 80007da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007dc:	4603      	mov	r3, r0
 80007de:	3b01      	subs	r3, #1
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	4601      	mov	r1, r0
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	f04f 0400 	mov.w	r4, #0
 80007f0:	00d4      	lsls	r4, r2, #3
 80007f2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80007f6:	00cb      	lsls	r3, r1, #3
 80007f8:	4601      	mov	r1, r0
 80007fa:	f04f 0200 	mov.w	r2, #0
 80007fe:	f04f 0300 	mov.w	r3, #0
 8000802:	f04f 0400 	mov.w	r4, #0
 8000806:	00d4      	lsls	r4, r2, #3
 8000808:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800080c:	00cb      	lsls	r3, r1, #3
 800080e:	1dc3      	adds	r3, r0, #7
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	ebad 0d03 	sub.w	sp, sp, r3
 8000818:	466b      	mov	r3, sp
 800081a:	3300      	adds	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
 8000822:	e014      	b.n	800084e <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000828:	4413      	add	r3, r2
 800082a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800082e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 8000830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000832:	3301      	adds	r3, #1
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800083a:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	3302      	adds	r3, #2
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000846:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8000848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084a:	3303      	adds	r3, #3
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
 800084e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	429a      	cmp	r2, r3
 8000854:	d3e6      	bcc.n	8000824 <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	fbb2 f3f3 	udiv	r3, r2, r3
 8000868:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000874:	fb01 f202 	mul.w	r2, r1, r2
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d018      	beq.n	80008b4 <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000886:	e011      	b.n	80008ac <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <ILI9341_Draw_Colour_Burst+0x1dc>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000892:	b292      	uxth	r2, r2
 8000894:	4619      	mov	r1, r3
 8000896:	481a      	ldr	r0, [pc, #104]	; (8000900 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8000898:	f004 fab2 	bl	8004e00 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 800089c:	bf00      	nop
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <ILI9341_Draw_Colour_Burst+0x1dc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d0fb      	beq.n	800089e <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	3301      	adds	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008ae:	693b      	ldr	r3, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d3e9      	bcc.n	8000888 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00e      	beq.n	80008d8 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <ILI9341_Draw_Colour_Burst+0x1dc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	b292      	uxth	r2, r2
 80008c6:	4619      	mov	r1, r3
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <ILI9341_Draw_Colour_Burst+0x1e0>)
 80008ca:	f004 fa99 	bl	8004e00 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 80008ce:	bf00      	nop
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <ILI9341_Draw_Colour_Burst+0x1dc>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0fb      	beq.n	80008d0 <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <ILI9341_Draw_Colour_Burst+0x1d0>)
 80008e0:	f002 fd9e 	bl	8003420 <HAL_GPIO_WritePin>
 80008e4:	46ad      	mov	sp, r5
}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	; 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bdb0      	pop	{r4, r5, r7, pc}
 80008ee:	bf00      	nop
 80008f0:	48000800 	.word	0x48000800
 80008f4:	84210843 	.word	0x84210843
 80008f8:	82082083 	.word	0x82082083
 80008fc:	20000000 	.word	0x20000000
 8000900:	2000416c 	.word	0x2000416c

08000904 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800090e:	f240 133f 	movw	r3, #319	; 0x13f
 8000912:	f240 12df 	movw	r2, #479	; 0x1df
 8000916:	2100      	movs	r1, #0
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff fd37 	bl	800038c <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fefb 	bl	8000720 <ILI9341_Draw_Colour_Burst>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000958:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <MX_ADC1_Init+0xe4>)
 800095a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <MX_ADC1_Init+0xe0>)
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000968:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <MX_ADC1_Init+0xe0>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000976:	2204      	movs	r2, #4
 8000978:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_ADC1_Init+0xe0>)
 800097c:	2200      	movs	r2, #0
 800097e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000980:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000982:	2201      	movs	r2, #1
 8000984:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000988:	2201      	movs	r2, #1
 800098a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098c:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_ADC1_Init+0xe0>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_ADC1_Init+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_ADC1_Init+0xe0>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009b8:	f001 f86c 	bl	8001a94 <HAL_ADC_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009c2:	f000 fb09 	bl	8000fd8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009d2:	f001 ff87 	bl	80028e4 <HAL_ADCEx_MultiModeConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009dc:	f000 fafc 	bl	8000fd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e4:	2306      	movs	r3, #6
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ec:	237f      	movs	r3, #127	; 0x7f
 80009ee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f0:	2304      	movs	r3, #4
 80009f2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_ADC1_Init+0xe0>)
 80009fe:	f001 fa6f 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a08:	f000 fae6 	bl	8000fd8 <Error_Handler>
  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000044 	.word	0x20000044
 8000a18:	50040000 	.word	0x50040000
 8000a1c:	08600004 	.word	0x08600004

08000a20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ae8 <HAL_ADC_MspInit+0xc8>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d14e      	bne.n	8000ae0 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a29      	ldr	r2, [pc, #164]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b27      	ldr	r3, [pc, #156]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a23      	ldr	r2, [pc, #140]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b21      	ldr	r3, [pc, #132]	; (8000aec <HAL_ADC_MspInit+0xcc>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000a72:	2302      	movs	r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a76:	230b      	movs	r3, #11
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <HAL_ADC_MspInit+0xd0>)
 8000a86:	f002 fb23 	bl	80030d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	; (8000af8 <HAL_ADC_MspInit+0xd8>)
 8000a8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000ac6:	f002 f8cb 	bl	8002c60 <HAL_DMA_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000ad0:	f000 fa82 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000ad8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ada:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <HAL_ADC_MspInit+0xd4>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	; 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	50040000 	.word	0x50040000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000800 	.word	0x48000800
 8000af4:	200000a8 	.word	0x200000a8
 8000af8:	40020430 	.word	0x40020430

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6493      	str	r3, [r2, #72]	; 0x48
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_DMA_Init+0x60>)
 8000b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	200d      	movs	r0, #13
 8000b38:	f002 f85b 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000b3c:	200d      	movs	r0, #13
 8000b3e:	f002 f874 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	203a      	movs	r0, #58	; 0x3a
 8000b48:	f002 f853 	bl	8002bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000b4c:	203a      	movs	r0, #58	; 0x3a
 8000b4e:	f002 f86c 	bl	8002c2a <HAL_NVIC_EnableIRQ>

}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	4a41      	ldr	r2, [pc, #260]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b82:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <MX_GPIO_Init+0x120>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f002 fc2a 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000bd2:	482c      	ldr	r0, [pc, #176]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bd4:	f002 fc24 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bde:	482a      	ldr	r0, [pc, #168]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000be0:	f002 fc1e 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <MX_GPIO_Init+0x12c>)
 8000bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000bfa:	f002 fa69 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c18:	f002 fa5a 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8000c1c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4619      	mov	r1, r3
 8000c34:	4813      	ldr	r0, [pc, #76]	; (8000c84 <MX_GPIO_Init+0x124>)
 8000c36:	f002 fa4b 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0x128>)
 8000c54:	f002 fa3c 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8000c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f002 fa2c 	bl	80030d0 <HAL_GPIO_Init>

}
 8000c78:	bf00      	nop
 8000c7a:	3720      	adds	r7, #32
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	10210000 	.word	0x10210000

08000c90 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <HAL_SPI_TxCpltCallback+0x1c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000000 	.word	0x20000000

08000cb0 <drawGrid>:

void drawGrid(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
	// vertical lines
	for(int i = 0; i < 480; i+=60){
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e015      	b.n	8000ce8 <drawGrid+0x38>
		for(int j = 20; j < 300; j+=2)
 8000cbc:	2314      	movs	r3, #20
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	e00b      	b.n	8000cda <drawGrid+0x2a>
			drawPixel(i, j, ILI9488_DARKGREY);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	b211      	sxth	r1, r2
 8000cca:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fbb6 	bl	8000440 <drawPixel>
		for(int j = 20; j < 300; j+=2)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000ce0:	dbef      	blt.n	8000cc2 <drawGrid+0x12>
	for(int i = 0; i < 480; i+=60){
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	333c      	adds	r3, #60	; 0x3c
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000cee:	dbe5      	blt.n	8000cbc <drawGrid+0xc>
	}
	for(int j = 20; j < 300; j+=2)
 8000cf0:	2314      	movs	r3, #20
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e00b      	b.n	8000d0e <drawGrid+0x5e>
				drawPixel(479, j, ILI9488_DARKGREY);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f240 10df 	movw	r0, #479	; 0x1df
 8000d04:	f7ff fb9c 	bl	8000440 <drawPixel>
	for(int j = 20; j < 300; j+=2)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3302      	adds	r3, #2
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d14:	dbef      	blt.n	8000cf6 <drawGrid+0x46>

	// horizontal lines
	for(int i = 20; i < 320; i+=60){
 8000d16:	2314      	movs	r3, #20
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	e015      	b.n	8000d48 <drawGrid+0x98>
		for(int j = 0; j < 480; j+=2)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	e00b      	b.n	8000d3a <drawGrid+0x8a>
			drawPixel(j, i, ILI9488_DARKGREY);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	b211      	sxth	r1, r2
 8000d2a:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fb86 	bl	8000440 <drawPixel>
		for(int j = 0; j < 480; j+=2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3302      	adds	r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d40:	dbef      	blt.n	8000d22 <drawGrid+0x72>
	for(int i = 20; i < 320; i+=60){
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	333c      	adds	r3, #60	; 0x3c
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d4e:	dbe5      	blt.n	8000d1c <drawGrid+0x6c>
	}
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <draw_waveform>:

void draw_waveform(int16_t waveform[MEMORY_DEPTH], uint x){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 480; ++i){
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	e021      	b.n	8000dac <draw_waveform+0x54>
		drawPixel(i, LCD_HEIGHT/2 - x - waveform[i], GREEN);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	b218      	sxth	r0, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	425b      	negs	r3, r3
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	33a0      	adds	r3, #160	; 0xa0
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fb55 	bl	8000440 <drawPixel>
		waveform_CH1_prev[i] = waveform_CH1[i];
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <draw_waveform+0x64>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <draw_waveform+0x68>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 480; ++i){
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3301      	adds	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000db2:	dbd9      	blt.n	8000d68 <draw_waveform+0x10>
	  }
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200000f0 	.word	0x200000f0
 8000dc0:	20002108 	.word	0x20002108

08000dc4 <erase_waveform>:

void erase_waveform(int16_t waveform[MEMORY_DEPTH], uint x){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 480; ++i){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	e018      	b.n	8000e06 <erase_waveform+0x42>
		drawPixel(i, LCD_HEIGHT/2 - x - waveform[i], BLACK);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	b218      	sxth	r0, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	425b      	negs	r3, r3
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	440b      	add	r3, r1
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	33a0      	adds	r3, #160	; 0xa0
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	2200      	movs	r2, #0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f7ff fb20 	bl	8000440 <drawPixel>
	for(int i = 0; i < 480; ++i){
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e0c:	dbe2      	blt.n	8000dd4 <erase_waveform+0x10>
	  }
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fbc5 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f853 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f7ff fe9b 	bl	8000b60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e2a:	f7ff fe67 	bl	8000afc <MX_DMA_Init>
  MX_SPI1_Init();
 8000e2e:	f000 f8db 	bl	8000fe8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e32:	f000 f917 	bl	8001064 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000e36:	f000 fadd 	bl	80013f4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000e3a:	f7ff fd7b 	bl	8000934 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) waveform_CH1, MEMORY_DEPTH);
 8000e3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e42:	491d      	ldr	r1, [pc, #116]	; (8000eb8 <main+0xa0>)
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <main+0xa4>)
 8000e46:	f000 ff79 	bl	8001d3c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e4a:	210c      	movs	r1, #12
 8000e4c:	481c      	ldr	r0, [pc, #112]	; (8000ec0 <main+0xa8>)
 8000e4e:	f004 fc29 	bl	80056a4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 600); // 0-1000
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <main+0xa8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
  ILI9488_Init();
 8000e5c:	f7ff f9b4 	bl	80001c8 <ILI9488_Init>
  setRotation(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fb37 	bl	80004d4 <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fd4c 	bl	8000904 <ILI9341_Fill_Screen>

  //uint16_t touchX = 0, touchY = 0;
  for(int i = 0; i < 200; ++i){
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	e00f      	b.n	8000e92 <main+0x7a>
	  image[i] = color565(20, 50, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2132      	movs	r1, #50	; 0x32
 8000e76:	2014      	movs	r0, #20
 8000e78:	f7ff fb84 	bl	8000584 <color565>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <main+0xac>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	b2ca      	uxtb	r2, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 200; ++i){
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2bc7      	cmp	r3, #199	; 0xc7
 8000e96:	ddec      	ble.n	8000e72 <main+0x5a>
  }
  /*
  for(int i = 0; i < 480; ++i){
	waveform_CH1[i] = 40*sin(0.1*i);
  }*/
  int offset = -50;
 8000e98:	f06f 0331 	mvn.w	r3, #49	; 0x31
 8000e9c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //drawImage(image, 10, 10, 200, 1);
	  erase_waveform(waveform_CH1_prev, offset);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <main+0xb0>)
 8000ea4:	f7ff ff8e 	bl	8000dc4 <erase_waveform>
	  drawGrid();
 8000ea8:	f7ff ff02 	bl	8000cb0 <drawGrid>
	  draw_waveform(waveform_CH1, offset);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <main+0xa0>)
 8000eb2:	f7ff ff51 	bl	8000d58 <draw_waveform>
	  erase_waveform(waveform_CH1_prev, offset);
 8000eb6:	e7f2      	b.n	8000e9e <main+0x86>
 8000eb8:	200000f0 	.word	0x200000f0
 8000ebc:	20000044 	.word	0x20000044
 8000ec0:	20004218 	.word	0x20004218
 8000ec4:	200020f0 	.word	0x200020f0
 8000ec8:	20002108 	.word	0x20002108

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b0b8      	sub	sp, #224	; 0xe0
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fa3a 	bl	8006354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2288      	movs	r2, #136	; 0x88
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 fa2c 	bl	8006354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f34:	2302      	movs	r3, #2
 8000f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 faea 	bl	8003518 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f4a:	f000 f845 	bl	8000fd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f6c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f70:	2104      	movs	r1, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 feb6 	bl	8003ce4 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f7e:	f000 f82b 	bl	8000fd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f86:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f8c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000f96:	2308      	movs	r3, #8
 8000f98:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000faa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 f864 	bl	800407c <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000fba:	f000 f80d 	bl	8000fd8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc2:	f002 fa53 	bl	800346c <HAL_PWREx_ControlVoltageScaling>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000fcc:	f000 f804 	bl	8000fd8 <Error_Handler>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	37e0      	adds	r7, #224	; 0xe0
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_SPI1_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_SPI1_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_SPI1_Init+0x74>)
 8000ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_SPI1_Init+0x74>)
 8001002:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001006:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_SPI1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_SPI1_Init+0x74>)
 8001016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_SPI1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_SPI1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_SPI1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_SPI1_Init+0x74>)
 8001036:	2207      	movs	r2, #7
 8001038:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_SPI1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_SPI1_Init+0x74>)
 8001042:	2208      	movs	r2, #8
 8001044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_SPI1_Init+0x74>)
 8001048:	f003 fcc8 	bl	80049dc <HAL_SPI_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001052:	f7ff ffc1 	bl	8000fd8 <Error_Handler>
  }

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000416c 	.word	0x2000416c
 8001060:	40013000 	.word	0x40013000

08001064 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_SPI2_Init+0x74>)
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <MX_SPI2_Init+0x78>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI2_Init+0x74>)
 800107e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001082:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_SPI2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI2_Init+0x74>)
 8001092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001096:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI2_Init+0x74>)
 800109a:	2218      	movs	r2, #24
 800109c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010b2:	2207      	movs	r2, #7
 80010b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010be:	2208      	movs	r2, #8
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SPI2_Init+0x74>)
 80010c4:	f003 fc8a 	bl	80049dc <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f7ff ff83 	bl	8000fd8 <Error_Handler>
  }

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20004108 	.word	0x20004108
 80010dc:	40003800 	.word	0x40003800

080010e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	; 0x38
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a63      	ldr	r2, [pc, #396]	; (800128c <HAL_SPI_MspInit+0x1ac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d176      	bne.n	80011f0 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001106:	4a62      	ldr	r2, [pc, #392]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110c:	6613      	str	r3, [r2, #96]	; 0x60
 800110e:	4b60      	ldr	r3, [pc, #384]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001116:	623b      	str	r3, [r7, #32]
 8001118:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b5d      	ldr	r3, [pc, #372]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	4a5c      	ldr	r2, [pc, #368]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001126:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b54      	ldr	r3, [pc, #336]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	2302      	movs	r3, #2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800115a:	2305      	movs	r3, #5
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001168:	f001 ffb2 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800116c:	2308      	movs	r3, #8
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117c:	2305      	movs	r3, #5
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4843      	ldr	r0, [pc, #268]	; (8001294 <HAL_SPI_MspInit+0x1b4>)
 8001188:	f001 ffa2 	bl	80030d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800118c:	4b42      	ldr	r3, [pc, #264]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <HAL_SPI_MspInit+0x1bc>)
 8001190:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001192:	4b41      	ldr	r3, [pc, #260]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 8001194:	2201      	movs	r2, #1
 8001196:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001198:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 800119a:	2210      	movs	r2, #16
 800119c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b0:	4b39      	ldr	r3, [pc, #228]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011bc:	4b36      	ldr	r3, [pc, #216]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011c4:	f001 fd4c 	bl	8002c60 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80011ce:	f7ff ff03 	bl	8000fd8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a30      	ldr	r2, [pc, #192]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
 80011d8:	4a2f      	ldr	r2, [pc, #188]	; (8001298 <HAL_SPI_MspInit+0x1b8>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2023      	movs	r0, #35	; 0x23
 80011e4:	f001 fd05 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80011e8:	2023      	movs	r0, #35	; 0x23
 80011ea:	f001 fd1e 	bl	8002c2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011ee:	e049      	b.n	8001284 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <HAL_SPI_MspInit+0x1c0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d144      	bne.n	8001284 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fe:	4a24      	ldr	r2, [pc, #144]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6593      	str	r3, [r2, #88]	; 0x58
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_SPI_MspInit+0x1b0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001242:	230c      	movs	r3, #12
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001252:	2305      	movs	r3, #5
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <HAL_SPI_MspInit+0x1c4>)
 800125e:	f001 ff37 	bl	80030d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001274:	2305      	movs	r3, #5
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127c:	4619      	mov	r1, r3
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_SPI_MspInit+0x1b4>)
 8001280:	f001 ff26 	bl	80030d0 <HAL_GPIO_Init>
}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40013000 	.word	0x40013000
 8001290:	40021000 	.word	0x40021000
 8001294:	48000400 	.word	0x48000400
 8001298:	200041d0 	.word	0x200041d0
 800129c:	40020030 	.word	0x40020030
 80012a0:	40003800 	.word	0x40003800
 80012a4:	48000800 	.word	0x48000800

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_MspInit+0x44>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_MspInit+0x44>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <HAL_MspInit+0x44>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <HAL_MspInit+0x44>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f98e 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA1_Channel3_IRQHandler+0x10>)
 8001352:	f001 fdde 	bl	8002f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200041d0 	.word	0x200041d0

08001360 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <SPI1_IRQHandler+0x10>)
 8001366:	f003 fe3f 	bl	8004fe8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000416c 	.word	0x2000416c

08001374 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <DMA2_Channel3_IRQHandler+0x10>)
 800137a:	f001 fdca 	bl	8002f12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000a8 	.word	0x200000a8

08001388 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <SystemInit+0x64>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <SystemInit+0x64>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <SystemInit+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a13      	ldr	r2, [pc, #76]	; (80013f0 <SystemInit+0x68>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <SystemInit+0x68>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <SystemInit+0x68>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <SystemInit+0x68>)
 80013b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <SystemInit+0x68>)
 80013c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <SystemInit+0x68>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <SystemInit+0x68>)
 80013cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <SystemInit+0x68>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SystemInit+0x64>)
 80013da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013de:	609a      	str	r2, [r3, #8]
#endif
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <MX_TIM3_Init+0xac>)
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <MX_TIM3_Init+0xb0>)
 800141c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001420:	224f      	movs	r2, #79	; 0x4f
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM3_Init+0xac>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_TIM3_Init+0xac>)
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001440:	f004 f8d8 	bl	80055f4 <HAL_TIM_PWM_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800144a:	f7ff fdc5 	bl	8000fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4810      	ldr	r0, [pc, #64]	; (80014a0 <MX_TIM3_Init+0xac>)
 800145e:	f004 fecd 	bl	80061fc <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001468:	f7ff fdb6 	bl	8000fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146c:	2360      	movs	r3, #96	; 0x60
 800146e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	220c      	movs	r2, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001484:	f004 fa14 	bl	80058b0 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800148e:	f7ff fda3 	bl	8000fd8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001492:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM3_Init+0xac>)
 8001494:	f000 f828 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20004218 	.word	0x20004218
 80014a4:	40000400 	.word	0x40000400

080014a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_TIM_PWM_MspInit+0x38>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10b      	bne.n	80014d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a11      	ldr	r2, [pc, #68]	; (800154c <HAL_TIM_MspPostInit+0x64>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11c      	bne.n	8001544 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <HAL_TIM_MspPostInit+0x68>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_TIM_MspPostInit+0x68>)
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_TIM_MspPostInit+0x68>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001534:	2302      	movs	r3, #2
 8001536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_TIM_MspPostInit+0x6c>)
 8001540:	f001 fdc6 	bl	80030d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40000400 	.word	0x40000400
 8001550:	40021000 	.word	0x40021000
 8001554:	48000800 	.word	0x48000800

08001558 <Reset_Handler>:
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopForever+0x2>
 800155c:	f7ff ff14 	bl	8001388 <SystemInit>
 8001560:	2100      	movs	r1, #0
 8001562:	e003      	b.n	800156c <LoopCopyDataInit>

08001564 <CopyDataInit>:
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <LoopForever+0x6>)
 8001566:	585b      	ldr	r3, [r3, r1]
 8001568:	5043      	str	r3, [r0, r1]
 800156a:	3104      	adds	r1, #4

0800156c <LoopCopyDataInit>:
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <LoopForever+0xa>)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopForever+0xe>)
 8001570:	1842      	adds	r2, r0, r1
 8001572:	429a      	cmp	r2, r3
 8001574:	d3f6      	bcc.n	8001564 <CopyDataInit>
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <LoopForever+0x12>)
 8001578:	e002      	b.n	8001580 <LoopFillZerobss>

0800157a <FillZerobss>:
 800157a:	2300      	movs	r3, #0
 800157c:	f842 3b04 	str.w	r3, [r2], #4

08001580 <LoopFillZerobss>:
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <LoopForever+0x16>)
 8001582:	429a      	cmp	r2, r3
 8001584:	d3f9      	bcc.n	800157a <FillZerobss>
 8001586:	f004 fec1 	bl	800630c <__libc_init_array>
 800158a:	f7ff fc45 	bl	8000e18 <main>

0800158e <LoopForever>:
 800158e:	e7fe      	b.n	800158e <LoopForever>
 8001590:	20018000 	.word	0x20018000
 8001594:	080063c4 	.word	0x080063c4
 8001598:	20000000 	.word	0x20000000
 800159c:	20000010 	.word	0x20000010
 80015a0:	20000010 	.word	0x20000010
 80015a4:	20004268 	.word	0x20004268

080015a8 <ADC1_2_IRQHandler>:
 80015a8:	e7fe      	b.n	80015a8 <ADC1_2_IRQHandler>
	...

080015ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_Init+0x3c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_Init+0x3c>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c2:	2003      	movs	r0, #3
 80015c4:	f001 fb0a 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f80f 	bl	80015ec <HAL_InitTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	e001      	b.n	80015de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015da:	f7ff fe65 	bl	80012a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015de:	79fb      	ldrb	r3, [r7, #7]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d023      	beq.n	8001648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_InitTick+0x70>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_InitTick+0x6c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fb15 	bl	8002c46 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d809      	bhi.n	800163c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f001 fadf 	bl	8002bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_InitTick+0x74>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e007      	b.n	800164c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e004      	b.n	800164c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000000c 	.word	0x2000000c
 800165c:	20000004 	.word	0x20000004
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c
 8001688:	20004264 	.word	0x20004264

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20004264 	.word	0x20004264

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_Delay+0x40>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	609a      	str	r2, [r3, #8]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	3360      	adds	r3, #96	; 0x60
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <LL_ADC_SetOffset+0x44>)
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	4313      	orrs	r3, r2
 8001780:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	03fff000 	.word	0x03fff000

08001798 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3360      	adds	r3, #96	; 0x60
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3360      	adds	r3, #96	; 0x60
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ee:	bf00      	nop
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	461a      	mov	r2, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	211f      	movs	r1, #31
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	f003 011f 	and.w	r1, r3, #31
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	431a      	orrs	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3314      	adds	r3, #20
 8001888:	461a      	mov	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	0e5b      	lsrs	r3, r3, #25
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	4413      	add	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	0d1b      	lsrs	r3, r3, #20
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	2107      	movs	r1, #7
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0d1b      	lsrs	r3, r3, #20
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0318 	and.w	r3, r3, #24
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	400b      	ands	r3, r1
 80018fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	0007ffff 	.word	0x0007ffff

08001918 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 031f 	and.w	r3, r3, #31
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6093      	str	r3, [r2, #8]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800196c:	d101      	bne.n	8001972 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001994:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <LL_ADC_IsEnabled+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_ADC_IsEnabled+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e134      	b.n	8001d18 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe ffaf 	bl	8000a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff3f 	bl	8001958 <LL_ADC_IsDeepPowerDownEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff25 	bl	8001934 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff5a 	bl	80019a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d113      	bne.n	8001b22 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff3e 	bl	8001980 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b04:	4b86      	ldr	r3, [pc, #536]	; (8001d20 <HAL_ADC_Init+0x28c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	4a86      	ldr	r2, [pc, #536]	; (8001d24 <HAL_ADC_Init+0x290>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b14:	e002      	b.n	8001b1c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f9      	bne.n	8001b16 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff3e 	bl	80019a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff77 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001b58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 80cf 	bne.w	8001d06 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 80cb 	bne.w	8001d06 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b78:	f043 0202 	orr.w	r2, r3, #2
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff37 	bl	80019f8 <LL_ADC_IsEnabled>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d115      	bne.n	8001bbc <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b90:	4865      	ldr	r0, [pc, #404]	; (8001d28 <HAL_ADC_Init+0x294>)
 8001b92:	f7ff ff31 	bl	80019f8 <LL_ADC_IsEnabled>
 8001b96:	4604      	mov	r4, r0
 8001b98:	4864      	ldr	r0, [pc, #400]	; (8001d2c <HAL_ADC_Init+0x298>)
 8001b9a:	f7ff ff2d 	bl	80019f8 <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	431c      	orrs	r4, r3
 8001ba2:	4863      	ldr	r0, [pc, #396]	; (8001d30 <HAL_ADC_Init+0x29c>)
 8001ba4:	f7ff ff28 	bl	80019f8 <LL_ADC_IsEnabled>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4323      	orrs	r3, r4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	485f      	ldr	r0, [pc, #380]	; (8001d34 <HAL_ADC_Init+0x2a0>)
 8001bb8:	f7ff fd96 	bl	80016e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7e5b      	ldrb	r3, [r3, #25]
 8001bc0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001bcc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001bd2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d106      	bne.n	8001bf8 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	045b      	lsls	r3, r3, #17
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_ADC_Init+0x2a4>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	69b9      	ldr	r1, [r7, #24]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff0a 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff17 	bl	8001a6c <LL_ADC_INJ_IsConversionOngoing>
 8001c3e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13d      	bne.n	8001cc2 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d13a      	bne.n	8001cc2 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c50:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c58:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c68:	f023 0302 	bic.w	r3, r3, #2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d118      	bne.n	8001cb2 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c8a:	f023 0304 	bic.w	r3, r3, #4
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c96:	4311      	orrs	r1, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	e007      	b.n	8001cc2 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	f023 010f 	bic.w	r1, r3, #15
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce2:	e007      	b.n	8001cf4 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020f 	bic.w	r2, r2, #15
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f023 0303 	bic.w	r3, r3, #3
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	655a      	str	r2, [r3, #84]	; 0x54
 8001d04:	e007      	b.n	8001d16 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f043 0210 	orr.w	r2, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3724      	adds	r7, #36	; 0x24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd90      	pop	{r4, r7, pc}
 8001d20:	20000004 	.word	0x20000004
 8001d24:	053e2d63 	.word	0x053e2d63
 8001d28:	50040000 	.word	0x50040000
 8001d2c:	50040100 	.word	0x50040100
 8001d30:	50040200 	.word	0x50040200
 8001d34:	50040300 	.word	0x50040300
 8001d38:	fff0c007 	.word	0xfff0c007

08001d3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d48:	4850      	ldr	r0, [pc, #320]	; (8001e8c <HAL_ADC_Start_DMA+0x150>)
 8001d4a:	f7ff fde5 	bl	8001918 <LL_ADC_GetMultimode>
 8001d4e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe76 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 808e 	bne.w	8001e7e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x34>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e089      	b.n	8001e84 <HAL_ADC_Start_DMA+0x148>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d005      	beq.n	8001d8a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d002      	beq.n	8001d8a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	2b09      	cmp	r3, #9
 8001d88:	d172      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fc96 	bl	80026bc <ADC_Enable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d94:	7dfb      	ldrb	r3, [r7, #23]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d165      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a37      	ldr	r2, [pc, #220]	; (8001e90 <HAL_ADC_Start_DMA+0x154>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d002      	beq.n	8001dbe <HAL_ADC_Start_DMA+0x82>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_Start_DMA+0x84>
 8001dbe:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_ADC_Start_DMA+0x158>)
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d002      	beq.n	8001dce <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f023 0206 	bic.w	r2, r3, #6
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58
 8001df2:	e002      	b.n	8001dfa <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_ADC_Start_DMA+0x15c>)
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_ADC_Start_DMA+0x160>)
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_ADC_Start_DMA+0x164>)
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	221c      	movs	r2, #28
 8001e18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0210 	orr.w	r2, r2, #16
 8001e30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3340      	adds	r3, #64	; 0x40
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f000 ffbd 	bl	8002dd0 <HAL_DMA_Start_IT>
 8001e56:	4603      	mov	r3, r0
 8001e58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fddd 	bl	8001a1e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e64:	e00d      	b.n	8001e82 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001e6e:	e008      	b.n	8001e82 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001e7c:	e001      	b.n	8001e82 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	50040300 	.word	0x50040300
 8001e90:	50040100 	.word	0x50040100
 8001e94:	50040000 	.word	0x50040000
 8001e98:	08002771 	.word	0x08002771
 8001e9c:	08002849 	.word	0x08002849
 8001ea0:	08002865 	.word	0x08002865

08001ea4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0b6      	sub	sp, #216	; 0xd8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x22>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e3c6      	b.n	8002690 <HAL_ADC_ConfigChannel+0x7b0>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fd99 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 83a7 	bne.w	800266a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d824      	bhi.n	8001f6e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	3b02      	subs	r3, #2
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d81b      	bhi.n	8001f66 <HAL_ADC_ConfigChannel+0x86>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_ADC_ConfigChannel+0x54>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4d 	.word	0x08001f4d
 8001f3c:	08001f55 	.word	0x08001f55
 8001f40:	08001f5d 	.word	0x08001f5d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	220c      	movs	r2, #12
 8001f48:	605a      	str	r2, [r3, #4]
          break;
 8001f4a:	e011      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2212      	movs	r2, #18
 8001f50:	605a      	str	r2, [r3, #4]
          break;
 8001f52:	e00d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2218      	movs	r2, #24
 8001f58:	605a      	str	r2, [r3, #4]
          break;
 8001f5a:	e009      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	605a      	str	r2, [r3, #4]
          break;
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2206      	movs	r2, #6
 8001f6a:	605a      	str	r2, [r3, #4]
          break;
 8001f6c:	e000      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001f6e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	f7ff fc4f 	bl	8001820 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fd5d 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd69 	bl	8001a6c <LL_ADC_INJ_IsConversionOngoing>
 8001f9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f040 81a6 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 81a1 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fc5a 	bl	8001878 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00a      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6919      	ldr	r1, [r3, #16]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ff6:	f7ff fbab 	bl	8001750 <LL_ADC_SetOffset>
 8001ffa:	e17b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fbc8 	bl	8001798 <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x148>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fbbd 	bl	8001798 <LL_ADC_GetOffsetChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	f003 021f 	and.w	r2, r3, #31
 8002026:	e01e      	b.n	8002066 <HAL_ADC_ConfigChannel+0x186>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fbb2 	bl	8001798 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800204a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800204e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e004      	b.n	8002064 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800205a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x19e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e018      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800209a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80020a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d106      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb81 	bl	80017c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2101      	movs	r1, #1
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fb65 	bl	8001798 <LL_ADC_GetOffsetChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fb5a 	bl	8001798 <LL_ADC_GetOffsetChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	0e9b      	lsrs	r3, r3, #26
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	e01e      	b.n	800212c <HAL_ADC_ConfigChannel+0x24c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fb4f 	bl	8001798 <LL_ADC_GetOffsetChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800210c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002110:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002114:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800211c:	2320      	movs	r3, #32
 800211e:	e004      	b.n	800212a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_ConfigChannel+0x264>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0e9b      	lsrs	r3, r3, #26
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	e018      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002158:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800215c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002168:	2320      	movs	r3, #32
 800216a:	e004      	b.n	8002176 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800216c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002176:	429a      	cmp	r2, r3
 8002178:	d106      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fb1e 	bl	80017c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2102      	movs	r1, #2
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fb02 	bl	8001798 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x2d4>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2102      	movs	r1, #2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff faf7 	bl	8001798 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	e01e      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x312>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2102      	movs	r1, #2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff faec 	bl	8001798 <LL_ADC_GetOffsetChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80021d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80021da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e004      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_ConfigChannel+0x32a>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	e016      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800221c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800221e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800222a:	2320      	movs	r3, #32
 800222c:	e004      	b.n	8002238 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800222e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	2102      	movs	r1, #2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fabd 	bl	80017c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2103      	movs	r1, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff faa1 	bl	8001798 <LL_ADC_GetOffsetChannel>
 8002256:	4603      	mov	r3, r0
 8002258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x396>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2103      	movs	r1, #3
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fa96 	bl	8001798 <LL_ADC_GetOffsetChannel>
 800226c:	4603      	mov	r3, r0
 800226e:	0e9b      	lsrs	r3, r3, #26
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	e017      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x3c6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2103      	movs	r1, #3
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fa8b 	bl	8001798 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800228e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002290:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800229c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_ADC_ConfigChannel+0x3de>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	e011      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80022cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80022da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2200      	movs	r2, #0
 80022ec:	2103      	movs	r1, #3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fa68 	bl	80017c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fb7d 	bl	80019f8 <LL_ADC_IsEnabled>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 813f 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	461a      	mov	r2, r3
 8002314:	f7ff fadc 	bl	80018d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a8e      	ldr	r2, [pc, #568]	; (8002558 <HAL_ADC_ConfigChannel+0x678>)
 800231e:	4293      	cmp	r3, r2
 8002320:	f040 8130 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <HAL_ADC_ConfigChannel+0x46c>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	2b09      	cmp	r3, #9
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e019      	b.n	8002380 <HAL_ADC_ConfigChannel+0x4a0>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800235a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800235e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	2b09      	cmp	r3, #9
 8002378:	bf94      	ite	ls
 800237a:	2301      	movls	r3, #1
 800237c:	2300      	movhi	r3, #0
 800237e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	2b00      	cmp	r3, #0
 8002382:	d079      	beq.n	8002478 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x4c0>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x4ec>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80023b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80023bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x50c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x53c>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80023fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80023fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10a      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x562>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	051b      	lsls	r3, r3, #20
 8002440:	e018      	b.n	8002474 <HAL_ADC_ConfigChannel+0x594>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002452:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800245e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002474:	430b      	orrs	r3, r1
 8002476:	e080      	b.n	800257a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x5b4>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	069b      	lsls	r3, r3, #26
 800248e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002492:	e015      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x5e0>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e003      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3301      	adds	r3, #1
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x600>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	3301      	adds	r3, #1
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	e017      	b.n	8002510 <HAL_ADC_ConfigChannel+0x630>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	61fb      	str	r3, [r7, #28]
  return result;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80024f8:	2320      	movs	r3, #32
 80024fa:	e003      	b.n	8002504 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 031f 	and.w	r3, r3, #31
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	ea42 0103 	orr.w	r1, r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10d      	bne.n	800253c <HAL_ADC_ConfigChannel+0x65c>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0e9b      	lsrs	r3, r3, #26
 8002526:	3301      	adds	r3, #1
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	3b1e      	subs	r3, #30
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800253a:	e01d      	b.n	8002578 <HAL_ADC_ConfigChannel+0x698>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	613b      	str	r3, [r7, #16]
  return result;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e005      	b.n	8002564 <HAL_ADC_ConfigChannel+0x684>
 8002558:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	430b      	orrs	r3, r1
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	4619      	mov	r1, r3
 8002580:	f7ff f97a 	bl	8001878 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <HAL_ADC_ConfigChannel+0x7b8>)
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d079      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002590:	4842      	ldr	r0, [pc, #264]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002592:	f7ff f8cf 	bl	8001734 <LL_ADC_GetCommonPathInternalCh>
 8002596:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a40      	ldr	r2, [pc, #256]	; (80026a0 <HAL_ADC_ConfigChannel+0x7c0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d12b      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d125      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3b      	ldr	r2, [pc, #236]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x6e4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a3a      	ldr	r2, [pc, #232]	; (80026a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d15c      	bne.n	800267e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025cc:	4619      	mov	r1, r3
 80025ce:	4833      	ldr	r0, [pc, #204]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 80025d0:	f7ff f89d 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_ADC_ConfigChannel+0x7cc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099a      	lsrs	r2, r3, #6
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fa:	e040      	b.n	800267e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d118      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x758>
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800260a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d112      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x746>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12d      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002626:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	4619      	mov	r1, r3
 8002630:	481a      	ldr	r0, [pc, #104]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002632:	f7ff f86c 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002636:	e024      	b.n	8002682 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_ADC_ConfigChannel+0x7d8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d120      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11a      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d115      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002658:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800265c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002660:	4619      	mov	r1, r3
 8002662:	480e      	ldr	r0, [pc, #56]	; (800269c <HAL_ADC_ConfigChannel+0x7bc>)
 8002664:	f7ff f853 	bl	800170e <LL_ADC_SetCommonPathInternalCh>
 8002668:	e00c      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800267c:	e002      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002682:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800268c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002690:	4618      	mov	r0, r3
 8002692:	37d8      	adds	r7, #216	; 0xd8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	80080000 	.word	0x80080000
 800269c:	50040300 	.word	0x50040300
 80026a0:	c7520000 	.word	0xc7520000
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040200 	.word	0x50040200
 80026ac:	20000004 	.word	0x20000004
 80026b0:	053e2d63 	.word	0x053e2d63
 80026b4:	cb840000 	.word	0xcb840000
 80026b8:	80000001 	.word	0x80000001

080026bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f995 	bl	80019f8 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d146      	bne.n	8002762 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <ADC_Enable+0xb0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e032      	b.n	8002764 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f964 	bl	80019d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002708:	f7fe ffc0 	bl	800168c <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800270e:	e021      	b.n	8002754 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f96f 	bl	80019f8 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff f953 	bl	80019d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800272a:	f7fe ffaf 	bl	800168c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d90d      	bls.n	8002754 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1d6      	bne.n	8002710 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	8000003f 	.word	0x8000003f

08002770 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d14b      	bne.n	8002822 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f826 	bl	80017fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d032      	beq.n	800281a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d12b      	bne.n	800281a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11f      	bne.n	800281a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54
 80027e6:	e018      	b.n	800281a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d111      	bne.n	800281a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d105      	bne.n	800281a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f7ff fb42 	bl	8001ea4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002820:	e00e      	b.n	8002840 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fb4c 	bl	8001ecc <HAL_ADC_ErrorCallback>
}
 8002834:	e004      	b.n	8002840 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f7ff fb2e 	bl	8001eb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f043 0204 	orr.w	r2, r3, #4
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff fb1e 	bl	8001ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <LL_ADC_IsEnabled>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_IsEnabled+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_IsEnabled+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_IsConversionOngoing>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b09f      	sub	sp, #124	; 0x7c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e08f      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a47      	ldr	r2, [pc, #284]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d102      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e001      	b.n	800291e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e072      	b.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ffbd 	bl	80028be <LL_ADC_REG_IsConversionOngoing>
 8002944:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ffb7 	bl	80028be <LL_ADC_REG_IsConversionOngoing>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d154      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	2b00      	cmp	r3, #0
 800295a:	d151      	bne.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800295e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02c      	beq.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6859      	ldr	r1, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800297a:	035b      	lsls	r3, r3, #13
 800297c:	430b      	orrs	r3, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002982:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002984:	4829      	ldr	r0, [pc, #164]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002986:	f7ff ff87 	bl	8002898 <LL_ADC_IsEnabled>
 800298a:	4604      	mov	r4, r0
 800298c:	4828      	ldr	r0, [pc, #160]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800298e:	f7ff ff83 	bl	8002898 <LL_ADC_IsEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	431c      	orrs	r4, r3
 8002996:	4828      	ldr	r0, [pc, #160]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002998:	f7ff ff7e 	bl	8002898 <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	4323      	orrs	r3, r4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d137      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ac:	f023 030f 	bic.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	6811      	ldr	r1, [r2, #0]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	431a      	orrs	r2, r3
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029c0:	e028      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029ce:	4817      	ldr	r0, [pc, #92]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80029d0:	f7ff ff62 	bl	8002898 <LL_ADC_IsEnabled>
 80029d4:	4604      	mov	r4, r0
 80029d6:	4816      	ldr	r0, [pc, #88]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80029d8:	f7ff ff5e 	bl	8002898 <LL_ADC_IsEnabled>
 80029dc:	4603      	mov	r3, r0
 80029de:	431c      	orrs	r4, r3
 80029e0:	4815      	ldr	r0, [pc, #84]	; (8002a38 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029e2:	f7ff ff59 	bl	8002898 <LL_ADC_IsEnabled>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4323      	orrs	r3, r4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d112      	bne.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f6:	f023 030f 	bic.w	r3, r3, #15
 80029fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029fe:	e009      	b.n	8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a12:	e000      	b.n	8002a16 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	377c      	adds	r7, #124	; 0x7c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd90      	pop	{r4, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	50040000 	.word	0x50040000
 8002a30:	50040100 	.word	0x50040100
 8002a34:	50040300 	.word	0x50040300
 8002a38:	50040200 	.word	0x50040200

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	; (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	; (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	; (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff8e 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff29 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff3e 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff8e 	bl	8002b30 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5d 	bl	8002adc <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff31 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e098      	b.n	8002da4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <HAL_DMA_Init+0x150>)
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d80f      	bhi.n	8002c9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_DMA_Init+0x154>)
 8002c86:	4413      	add	r3, r2
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_DMA_Init+0x158>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a48      	ldr	r2, [pc, #288]	; (8002dbc <HAL_DMA_Init+0x15c>)
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9c:	e00e      	b.n	8002cbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b46      	ldr	r3, [pc, #280]	; (8002dc0 <HAL_DMA_Init+0x160>)
 8002ca6:	4413      	add	r3, r2
 8002ca8:	4a43      	ldr	r2, [pc, #268]	; (8002db8 <HAL_DMA_Init+0x158>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	009a      	lsls	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_DMA_Init+0x164>)
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d16:	d039      	beq.n	8002d8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4a27      	ldr	r2, [pc, #156]	; (8002dbc <HAL_DMA_Init+0x15c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11a      	bne.n	8002d58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_DMA_Init+0x168>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 031c 	and.w	r3, r3, #28
 8002d2e:	210f      	movs	r1, #15
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	4924      	ldr	r1, [pc, #144]	; (8002dc8 <HAL_DMA_Init+0x168>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d3c:	4b22      	ldr	r3, [pc, #136]	; (8002dc8 <HAL_DMA_Init+0x168>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f003 031c 	and.w	r3, r3, #28
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	491d      	ldr	r1, [pc, #116]	; (8002dc8 <HAL_DMA_Init+0x168>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
 8002d56:	e019      	b.n	8002d8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_DMA_Init+0x16c>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f003 031c 	and.w	r3, r3, #28
 8002d64:	210f      	movs	r1, #15
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	4917      	ldr	r1, [pc, #92]	; (8002dcc <HAL_DMA_Init+0x16c>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_DMA_Init+0x16c>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f003 031c 	and.w	r3, r3, #28
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	4911      	ldr	r1, [pc, #68]	; (8002dcc <HAL_DMA_Init+0x16c>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40020407 	.word	0x40020407
 8002db4:	bffdfff8 	.word	0xbffdfff8
 8002db8:	cccccccd 	.word	0xcccccccd
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	bffdfbf8 	.word	0xbffdfbf8
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	400200a8 	.word	0x400200a8
 8002dcc:	400204a8 	.word	0x400204a8

08002dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_DMA_Start_IT+0x20>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e04b      	b.n	8002e88 <HAL_DMA_Start_IT+0xb8>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d13a      	bne.n	8002e7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f921 	bl	8003070 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 020e 	orr.w	r2, r2, #14
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e00f      	b.n	8002e68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 020a 	orr.w	r2, r2, #10
 8002e66:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	e005      	b.n	8002e86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
 8002e84:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d005      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e029      	b.n	8002f08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 020e 	bic.w	r2, r2, #14
 8002ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 021c 	and.w	r2, r3, #28
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
    }
  }
  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f003 031c 	and.w	r3, r3, #28
 8002f32:	2204      	movs	r2, #4
 8002f34:	409a      	lsls	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d026      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x7a>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d107      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0204 	bic.w	r2, r2, #4
 8002f64:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	f003 021c 	and.w	r2, r3, #28
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2104      	movs	r1, #4
 8002f74:	fa01 f202 	lsl.w	r2, r1, r2
 8002f78:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d071      	beq.n	8003066 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f8a:	e06c      	b.n	8003066 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	f003 031c 	and.w	r3, r3, #28
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02e      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xec>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020a 	bic.w	r2, r2, #10
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f003 021c 	and.w	r2, r3, #28
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2102      	movs	r1, #2
 8002fde:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d038      	beq.n	8003066 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ffc:	e033      	b.n	8003066 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f003 031c 	and.w	r3, r3, #28
 8003006:	2208      	movs	r2, #8
 8003008:	409a      	lsls	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d025      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020e 	bic.w	r2, r2, #14
 800302a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f003 021c 	and.w	r2, r3, #28
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f202 	lsl.w	r2, r1, r2
 800303e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003066:	bf00      	nop
 8003068:	bf00      	nop
}
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f003 021c 	and.w	r2, r3, #28
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d108      	bne.n	80030b4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030b2:	e007      	b.n	80030c4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030de:	e17f      	b.n	80033e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8171 	beq.w	80033da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d00b      	beq.n	8003118 <HAL_GPIO_Init+0x48>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d007      	beq.n	8003118 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800310c:	2b11      	cmp	r3, #17
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b12      	cmp	r3, #18
 8003116:	d130      	bne.n	800317a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800314e:	2201      	movs	r2, #1
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	091b      	lsrs	r3, r3, #4
 8003164:	f003 0201 	and.w	r2, r3, #1
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b03      	cmp	r3, #3
 8003184:	d118      	bne.n	80031b8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800318c:	2201      	movs	r2, #1
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0201 	and.w	r2, r3, #1
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x128>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d123      	bne.n	8003240 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	08da      	lsrs	r2, r3, #3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3208      	adds	r2, #8
 8003200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	220f      	movs	r2, #15
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	6939      	ldr	r1, [r7, #16]
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0203 	and.w	r2, r3, #3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ac 	beq.w	80033da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_GPIO_Init+0x32c>)
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	4a5d      	ldr	r2, [pc, #372]	; (80033fc <HAL_GPIO_Init+0x32c>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6613      	str	r3, [r2, #96]	; 0x60
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_GPIO_Init+0x32c>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800329a:	4a59      	ldr	r2, [pc, #356]	; (8003400 <HAL_GPIO_Init+0x330>)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032c4:	d025      	beq.n	8003312 <HAL_GPIO_Init+0x242>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4e      	ldr	r2, [pc, #312]	; (8003404 <HAL_GPIO_Init+0x334>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_GPIO_Init+0x23e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4d      	ldr	r2, [pc, #308]	; (8003408 <HAL_GPIO_Init+0x338>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x23a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4c      	ldr	r2, [pc, #304]	; (800340c <HAL_GPIO_Init+0x33c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x236>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4b      	ldr	r2, [pc, #300]	; (8003410 <HAL_GPIO_Init+0x340>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x232>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	; (8003414 <HAL_GPIO_Init+0x344>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x22e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a49      	ldr	r2, [pc, #292]	; (8003418 <HAL_GPIO_Init+0x348>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x22a>
 80032f6:	2306      	movs	r3, #6
 80032f8:	e00c      	b.n	8003314 <HAL_GPIO_Init+0x244>
 80032fa:	2307      	movs	r3, #7
 80032fc:	e00a      	b.n	8003314 <HAL_GPIO_Init+0x244>
 80032fe:	2305      	movs	r3, #5
 8003300:	e008      	b.n	8003314 <HAL_GPIO_Init+0x244>
 8003302:	2304      	movs	r3, #4
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x244>
 8003306:	2303      	movs	r3, #3
 8003308:	e004      	b.n	8003314 <HAL_GPIO_Init+0x244>
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_GPIO_Init+0x244>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x244>
 8003312:	2300      	movs	r3, #0
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	f002 0203 	and.w	r2, r2, #3
 800331a:	0092      	lsls	r2, r2, #2
 800331c:	4093      	lsls	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003324:	4936      	ldr	r1, [pc, #216]	; (8003400 <HAL_GPIO_Init+0x330>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003332:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_GPIO_Init+0x34c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003356:	4a31      	ldr	r2, [pc, #196]	; (800341c <HAL_GPIO_Init+0x34c>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800335c:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_GPIO_Init+0x34c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003380:	4a26      	ldr	r2, [pc, #152]	; (800341c <HAL_GPIO_Init+0x34c>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_GPIO_Init+0x34c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_GPIO_Init+0x34c>)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_GPIO_Init+0x34c>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_GPIO_Init+0x34c>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	3301      	adds	r3, #1
 80033de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f47f ae78 	bne.w	80030e0 <HAL_GPIO_Init+0x10>
  }
}
 80033f0:	bf00      	nop
 80033f2:	371c      	adds	r7, #28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40021000 	.word	0x40021000
 8003400:	40010000 	.word	0x40010000
 8003404:	48000400 	.word	0x48000400
 8003408:	48000800 	.word	0x48000800
 800340c:	48000c00 	.word	0x48000c00
 8003410:	48001000 	.word	0x48001000
 8003414:	48001400 	.word	0x48001400
 8003418:	48001800 	.word	0x48001800
 800341c:	40010400 	.word	0x40010400

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800343c:	e002      	b.n	8003444 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343e:	887a      	ldrh	r2, [r7, #2]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <HAL_PWREx_GetVoltageRange+0x18>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800347a:	d130      	bne.n	80034de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d038      	beq.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003492:	4a1e      	ldr	r2, [pc, #120]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003498:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2232      	movs	r2, #50	; 0x32
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9b      	lsrs	r3, r3, #18
 80034ac:	3301      	adds	r3, #1
 80034ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b0:	e002      	b.n	80034b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c4:	d102      	bne.n	80034cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f2      	bne.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d110      	bne.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e00f      	b.n	80034fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ea:	d007      	beq.n	80034fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034f4:	4a05      	ldr	r2, [pc, #20]	; (800350c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40007000 	.word	0x40007000
 8003510:	20000004 	.word	0x20000004
 8003514:	431bde83 	.word	0x431bde83

08003518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e3d4      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800352a:	4ba1      	ldr	r3, [pc, #644]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003534:	4b9e      	ldr	r3, [pc, #632]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80e4 	beq.w	8003714 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_RCC_OscConfig+0x4a>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	f040 808b 	bne.w	8003670 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 8087 	bne.w	8003670 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003562:	4b93      	ldr	r3, [pc, #588]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_RCC_OscConfig+0x62>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e3ac      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1a      	ldr	r2, [r3, #32]
 800357e:	4b8c      	ldr	r3, [pc, #560]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <HAL_RCC_OscConfig+0x7c>
 800358a:	4b89      	ldr	r3, [pc, #548]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	e005      	b.n	80035a0 <HAL_RCC_OscConfig+0x88>
 8003594:	4b86      	ldr	r3, [pc, #536]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d223      	bcs.n	80035ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fd07 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e38d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b8:	4b7d      	ldr	r3, [pc, #500]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a7c      	ldr	r2, [pc, #496]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b7a      	ldr	r3, [pc, #488]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4977      	ldr	r1, [pc, #476]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d6:	4b76      	ldr	r3, [pc, #472]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	4972      	ldr	r1, [pc, #456]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
 80035ea:	e025      	b.n	8003638 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ec:	4b70      	ldr	r3, [pc, #448]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6f      	ldr	r2, [pc, #444]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	496a      	ldr	r1, [pc, #424]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800360a:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4965      	ldr	r1, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fcc7 	bl	8003fbc <RCC_SetFlashLatencyFromMSIRange>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e34d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003638:	f000 fc36 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 800363c:	4601      	mov	r1, r0
 800363e:	4b5c      	ldr	r3, [pc, #368]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	4a5a      	ldr	r2, [pc, #360]	; (80037b4 <HAL_RCC_OscConfig+0x29c>)
 800364a:	5cd3      	ldrb	r3, [r2, r3]
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	fa21 f303 	lsr.w	r3, r1, r3
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_OscConfig+0x2a0>)
 8003656:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003658:	4b58      	ldr	r3, [pc, #352]	; (80037bc <HAL_RCC_OscConfig+0x2a4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd ffc5 	bl	80015ec <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d052      	beq.n	8003712 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	e331      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d032      	beq.n	80036de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003678:	4b4d      	ldr	r3, [pc, #308]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4c      	ldr	r2, [pc, #304]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003684:	f7fe f802 	bl	800168c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800368c:	f7fd fffe 	bl	800168c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e31a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800369e:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a40      	ldr	r2, [pc, #256]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	493b      	ldr	r1, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036c8:	4b39      	ldr	r3, [pc, #228]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	4936      	ldr	r1, [pc, #216]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e01a      	b.n	8003714 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036de:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036ea:	f7fd ffcf 	bl	800168c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036f2:	f7fd ffcb 	bl	800168c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e2e7      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003704:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x1da>
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003712:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d074      	beq.n	800380a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	2b08      	cmp	r3, #8
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x21a>
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d10e      	bne.n	800374a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d10b      	bne.n	800374a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003732:	4b1f      	ldr	r3, [pc, #124]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d064      	beq.n	8003808 <HAL_RCC_OscConfig+0x2f0>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d160      	bne.n	8003808 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e2c4      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x24a>
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	e01d      	b.n	800379e <HAL_RCC_OscConfig+0x286>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376a:	d10c      	bne.n	8003786 <HAL_RCC_OscConfig+0x26e>
 800376c:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0c      	ldr	r2, [pc, #48]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800377e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e00b      	b.n	800379e <HAL_RCC_OscConfig+0x286>
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a09      	ldr	r2, [pc, #36]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <HAL_RCC_OscConfig+0x298>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fd ff71 	bl	800168c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ac:	e011      	b.n	80037d2 <HAL_RCC_OscConfig+0x2ba>
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	0800637c 	.word	0x0800637c
 80037b8:	20000004 	.word	0x20000004
 80037bc:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd ff64 	bl	800168c <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e280      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d2:	4baf      	ldr	r3, [pc, #700]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x2a8>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd ff54 	bl	800168c <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e8:	f7fd ff50 	bl	800168c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e26c      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037fa:	4ba5      	ldr	r3, [pc, #660]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x2d0>
 8003806:	e000      	b.n	800380a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d060      	beq.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d005      	beq.n	8003828 <HAL_RCC_OscConfig+0x310>
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d119      	bne.n	8003856 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d116      	bne.n	8003856 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003828:	4b99      	ldr	r3, [pc, #612]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_OscConfig+0x328>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e249      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b93      	ldr	r3, [pc, #588]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	4990      	ldr	r1, [pc, #576]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003854:	e040      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d023      	beq.n	80038a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800385e:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a8b      	ldr	r2, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386a:	f7fd ff0f 	bl	800168c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003872:	f7fd ff0b 	bl	800168c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e227      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003884:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	497c      	ldr	r1, [pc, #496]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
 80038a4:	e018      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a6:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a79      	ldr	r2, [pc, #484]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd feeb 	bl	800168c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fee7 	bl	800168c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e203      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038cc:	4b70      	ldr	r3, [pc, #448]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1f0      	bne.n	80038ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d03c      	beq.n	800395e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01c      	beq.n	8003926 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f2:	4a67      	ldr	r2, [pc, #412]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fec6 	bl	800168c <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003904:	f7fd fec2 	bl	800168c <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1de      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003916:	4b5e      	ldr	r3, [pc, #376]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ef      	beq.n	8003904 <HAL_RCC_OscConfig+0x3ec>
 8003924:	e01b      	b.n	800395e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003926:	4b5a      	ldr	r3, [pc, #360]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fd fea9 	bl	800168c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393e:	f7fd fea5 	bl	800168c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1c1      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003950:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ef      	bne.n	800393e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 80a6 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003970:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397c:	4b44      	ldr	r3, [pc, #272]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6593      	str	r3, [r2, #88]	; 0x58
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 800398a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003994:	2301      	movs	r3, #1
 8003996:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003998:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <HAL_RCC_OscConfig+0x57c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d118      	bne.n	80039d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a4:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_OscConfig+0x57c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <HAL_RCC_OscConfig+0x57c>)
 80039aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b0:	f7fd fe6c 	bl	800168c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fd fe68 	bl	800168c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e184      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ca:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCC_OscConfig+0x57c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d108      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4d8>
 80039de:	4b2c      	ldr	r3, [pc, #176]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ee:	e024      	b.n	8003a3a <HAL_RCC_OscConfig+0x522>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b05      	cmp	r3, #5
 80039f6:	d110      	bne.n	8003a1a <HAL_RCC_OscConfig+0x502>
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a18:	e00f      	b.n	8003a3a <HAL_RCC_OscConfig+0x522>
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a2a:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fd fe23 	bl	800168c <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd fe1f 	bl	800168c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e139      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x578>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0ed      	beq.n	8003a4a <HAL_RCC_OscConfig+0x532>
 8003a6e:	e01a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd fe0c 	bl	800168c <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a76:	e00f      	b.n	8003a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd fe08 	bl	800168c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d906      	bls.n	8003a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e122      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a98:	4b90      	ldr	r3, [pc, #576]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e8      	bne.n	8003a78 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa6:	7ffb      	ldrb	r3, [r7, #31]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aac:	4b8b      	ldr	r3, [pc, #556]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a8a      	ldr	r2, [pc, #552]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8108 	beq.w	8003cd2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	f040 80d0 	bne.w	8003c6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003acc:	4b83      	ldr	r3, [pc, #524]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d130      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	3b01      	subs	r3, #1
 8003aec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d127      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d11f      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b0c:	2a07      	cmp	r2, #7
 8003b0e:	bf14      	ite	ne
 8003b10:	2201      	movne	r2, #1
 8003b12:	2200      	moveq	r2, #0
 8003b14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d113      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	085b      	lsrs	r3, r3, #1
 8003b26:	3b01      	subs	r3, #1
 8003b28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d109      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d06e      	beq.n	8003c20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d069      	beq.n	8003c1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b48:	4b64      	ldr	r3, [pc, #400]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0b7      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b64:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5c      	ldr	r2, [pc, #368]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b70:	f7fd fd8c 	bl	800168c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd fd88 	bl	800168c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0a4      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8a:	4b54      	ldr	r3, [pc, #336]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b96:	4b51      	ldr	r3, [pc, #324]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <HAL_RCC_OscConfig+0x7c8>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003bb0:	0212      	lsls	r2, r2, #8
 8003bb2:	4311      	orrs	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bb8:	0852      	lsrs	r2, r2, #1
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	0552      	lsls	r2, r2, #21
 8003bbe:	4311      	orrs	r1, r2
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0652      	lsls	r2, r2, #25
 8003bca:	4311      	orrs	r1, r2
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bd0:	0912      	lsrs	r2, r2, #4
 8003bd2:	0452      	lsls	r2, r2, #17
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	4941      	ldr	r1, [pc, #260]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bdc:	4b3f      	ldr	r3, [pc, #252]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3e      	ldr	r2, [pc, #248]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003be8:	4b3c      	ldr	r3, [pc, #240]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bf4:	f7fd fd4a 	bl	800168c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd fd46 	bl	800168c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e062      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c1a:	e05a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e059      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c20:	4b2e      	ldr	r3, [pc, #184]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d152      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c44:	f7fd fd22 	bl	800168c <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fd fd1e 	bl	800168c <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e03a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x734>
 8003c6a:	e032      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d02d      	beq.n	8003cce <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c90:	f023 0303 	bic.w	r3, r3, #3
 8003c94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4a10      	ldr	r2, [pc, #64]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003c9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca6:	f7fd fcf1 	bl	800168c <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cae:	f7fd fced 	bl	800168c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e009      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_OscConfig+0x7c4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x796>
 8003ccc:	e001      	b.n	8003cd2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	f99d808c 	.word	0xf99d808c

08003ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0c8      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b66      	ldr	r3, [pc, #408]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d910      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b63      	ldr	r3, [pc, #396]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4961      	ldr	r1, [pc, #388]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b5f      	ldr	r3, [pc, #380]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b0      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d04c      	beq.n	8003dce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d107      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3c:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d121      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e09e      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d54:	4b50      	ldr	r3, [pc, #320]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e092      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6c:	4b4a      	ldr	r3, [pc, #296]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d109      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e086      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e07e      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d8c:	4b42      	ldr	r3, [pc, #264]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 0203 	bic.w	r2, r3, #3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	493f      	ldr	r1, [pc, #252]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fc75 	bl	800168c <HAL_GetTick>
 8003da2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da6:	f7fd fc71 	bl	800168c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e066      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 020c 	and.w	r2, r3, #12
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d1eb      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	492c      	ldr	r1, [pc, #176]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d210      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0207 	bic.w	r2, r3, #7
 8003e02:	4924      	ldr	r1, [pc, #144]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_RCC_ClockConfig+0x1b0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e036      	b.n	8003e8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4918      	ldr	r1, [pc, #96]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4910      	ldr	r1, [pc, #64]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e5a:	f000 f825 	bl	8003ea8 <HAL_RCC_GetSysClockFreq>
 8003e5e:	4601      	mov	r1, r0
 8003e60:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RCC_ClockConfig+0x1b4>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	fa21 f303 	lsr.w	r3, r1, r3
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fd fbb4 	bl	80015ec <HAL_InitTick>
 8003e84:	4603      	mov	r3, r0
 8003e86:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e88:	7afb      	ldrb	r3, [r7, #11]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40022000 	.word	0x40022000
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	0800637c 	.word	0x0800637c
 8003ea0:	20000004 	.word	0x20000004
 8003ea4:	20000008 	.word	0x20000008

08003ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb6:	4b3d      	ldr	r3, [pc, #244]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x34>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d121      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d11e      	bne.n	8003f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eee:	0a1b      	lsrs	r3, r3, #8
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d102      	bne.n	8003f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f20:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e004      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d133      	bne.n	8003f9e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa4>
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_GetSysClockFreq+0xaa>
 8003f4a:	e005      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f4e:	617b      	str	r3, [r7, #20]
      break;
 8003f50:	e005      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f52:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f54:	617b      	str	r3, [r7, #20]
      break;
 8003f56:	e002      	b.n	8003f5e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	617b      	str	r3, [r7, #20]
      break;
 8003f5c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f5e:	4b13      	ldr	r3, [pc, #76]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	3301      	adds	r3, #1
 8003f6a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f6c:	4b0f      	ldr	r3, [pc, #60]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	fb02 f203 	mul.w	r2, r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f84:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_GetSysClockFreq+0x104>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	0e5b      	lsrs	r3, r3, #25
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	3301      	adds	r3, #1
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3724      	adds	r7, #36	; 0x24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	0800638c 	.word	0x0800638c
 8003fb4:	00f42400 	.word	0x00f42400
 8003fb8:	007a1200 	.word	0x007a1200

08003fbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff fa3c 	bl	8003450 <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
 8003fda:	e014      	b.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a24      	ldr	r2, [pc, #144]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ff4:	f7ff fa2c 	bl	8003450 <HAL_PWREx_GetVoltageRange>
 8003ff8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d10b      	bne.n	8004026 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d919      	bls.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2ba0      	cmp	r3, #160	; 0xa0
 8004018:	d902      	bls.n	8004020 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800401a:	2302      	movs	r3, #2
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	e013      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004020:	2301      	movs	r3, #1
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	e010      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d902      	bls.n	8004032 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800402c:	2303      	movs	r3, #3
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	e00a      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d102      	bne.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004038:	2302      	movs	r3, #2
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	e004      	b.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d101      	bne.n	8004048 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004044:	2301      	movs	r3, #1
 8004046:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0207 	bic.w	r2, r3, #7
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d001      	beq.n	800406a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000
 8004078:	40022000 	.word	0x40022000

0800407c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004084:	2300      	movs	r3, #0
 8004086:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004088:	2300      	movs	r3, #0
 800408a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004094:	2b00      	cmp	r3, #0
 8004096:	d03f      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a0:	d01c      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80040a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040a6:	d802      	bhi.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80040ac:	e01f      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80040ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b2:	d003      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80040b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040b8:	d01c      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80040ba:	e018      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040bc:	4b85      	ldr	r3, [pc, #532]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a84      	ldr	r2, [pc, #528]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c8:	e015      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2100      	movs	r1, #0
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fab9 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040da:	e00c      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3320      	adds	r3, #32
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fba0 	bl	8004828 <RCCEx_PLLSAI2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	74fb      	strb	r3, [r7, #19]
      break;
 80040f2:	e000      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80040f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410a:	4972      	ldr	r1, [pc, #456]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004112:	e001      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800412c:	d01c      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800412e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004132:	d802      	bhi.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004138:	e01f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800413a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800413e:	d003      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004144:	d01c      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004146:	e018      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004148:	4b62      	ldr	r3, [pc, #392]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800414e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004152:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004154:	e015      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa73 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3320      	adds	r3, #32
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fb5a 	bl	8004828 <RCCEx_PLLSAI2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	74fb      	strb	r3, [r7, #19]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7cfb      	ldrb	r3, [r7, #19]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004188:	4b52      	ldr	r3, [pc, #328]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004196:	494f      	ldr	r1, [pc, #316]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800419e:	e001      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a0 	beq.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b6:	4b47      	ldr	r3, [pc, #284]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d0:	4a40      	ldr	r2, [pc, #256]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f4:	f7fd fa4a 	bl	800168c <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041fa:	e009      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fd fa46 	bl	800168c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	74fb      	strb	r3, [r7, #19]
        break;
 800420e:	e005      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004210:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d15c      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004222:	4b2c      	ldr	r3, [pc, #176]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d019      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800424c:	4b21      	ldr	r3, [pc, #132]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	4a20      	ldr	r2, [pc, #128]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800425c:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	4a1c      	ldr	r2, [pc, #112]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d016      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fa05 	bl	800168c <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004284:	e00b      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fa01 	bl	800168c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d902      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	74fb      	strb	r3, [r7, #19]
            break;
 800429c:	e006      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ec      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	4904      	ldr	r1, [pc, #16]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042ca:	e009      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	74bb      	strb	r3, [r7, #18]
 80042d0:	e006      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e0:	7c7b      	ldrb	r3, [r7, #17]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b9e      	ldr	r3, [pc, #632]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	4a9d      	ldr	r2, [pc, #628]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042fe:	4b98      	ldr	r3, [pc, #608]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	4994      	ldr	r1, [pc, #592]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004320:	4b8f      	ldr	r3, [pc, #572]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 020c 	bic.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	498c      	ldr	r1, [pc, #560]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004342:	4b87      	ldr	r3, [pc, #540]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	4983      	ldr	r1, [pc, #524]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004364:	4b7e      	ldr	r3, [pc, #504]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	497b      	ldr	r1, [pc, #492]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004386:	4b76      	ldr	r3, [pc, #472]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004394:	4972      	ldr	r1, [pc, #456]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a8:	4b6d      	ldr	r3, [pc, #436]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b6:	496a      	ldr	r1, [pc, #424]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	4961      	ldr	r1, [pc, #388]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043ec:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fa:	4959      	ldr	r1, [pc, #356]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800440e:	4b54      	ldr	r3, [pc, #336]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441c:	4950      	ldr	r1, [pc, #320]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800441e:	4313      	orrs	r3, r2
 8004420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004430:	4b4b      	ldr	r3, [pc, #300]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	4948      	ldr	r1, [pc, #288]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004452:	4b43      	ldr	r3, [pc, #268]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	493f      	ldr	r1, [pc, #252]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d028      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	4937      	ldr	r1, [pc, #220]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800448e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004494:	4b32      	ldr	r3, [pc, #200]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4a31      	ldr	r2, [pc, #196]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800449a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800449e:	60d3      	str	r3, [r2, #12]
 80044a0:	e011      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044aa:	d10c      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f8c8 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80044c2:	7cfb      	ldrb	r3, [r7, #19]
 80044c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d028      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	491f      	ldr	r1, [pc, #124]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044f0:	d106      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044fc:	60d3      	str	r3, [r2, #12]
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004508:	d10c      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3304      	adds	r3, #4
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 f899 	bl	8004648 <RCCEx_PLLSAI1_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004520:	7cfb      	ldrb	r3, [r7, #19]
 8004522:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02b      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004530:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454e:	d109      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800455a:	60d3      	str	r3, [r2, #12]
 800455c:	e014      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800456c:	d10c      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3304      	adds	r3, #4
 8004572:	2101      	movs	r1, #1
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f867 	bl	8004648 <RCCEx_PLLSAI1_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800457e:	7cfb      	ldrb	r3, [r7, #19]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d02f      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a2:	4928      	ldr	r1, [pc, #160]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045b2:	d10d      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f844 	bl	8004648 <RCCEx_PLLSAI1_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	74bb      	strb	r3, [r7, #18]
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3320      	adds	r3, #32
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f921 	bl	8004828 <RCCEx_PLLSAI2_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	490d      	ldr	r1, [pc, #52]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004628:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004632:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800463a:	7cbb      	ldrb	r3, [r7, #18]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000

08004648 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004656:	4b73      	ldr	r3, [pc, #460]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004662:	4b70      	ldr	r3, [pc, #448]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f003 0203 	and.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d10d      	bne.n	800468e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
       ||
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800467a:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
       ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d044      	beq.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e041      	b.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d00c      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x6e>
 800469c:	2b03      	cmp	r3, #3
 800469e:	d013      	beq.n	80046c8 <RCCEx_PLLSAI1_Config+0x80>
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d120      	bne.n	80046e6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a4:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d11d      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b4:	e01a      	b.n	80046ec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b6:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d116      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c6:	e013      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c8:	4b56      	ldr	r3, [pc, #344]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d4:	4b53      	ldr	r3, [pc, #332]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e4:	e006      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ea:	e004      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046ec:	bf00      	nop
 80046ee:	e002      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fc:	4b49      	ldr	r3, [pc, #292]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6819      	ldr	r1, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	3b01      	subs	r3, #1
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	430b      	orrs	r3, r1
 8004712:	4944      	ldr	r1, [pc, #272]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d17d      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800471e:	4b41      	ldr	r3, [pc, #260]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fc ffaf 	bl	800168c <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004730:	e009      	b.n	8004746 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004732:	f7fc ffab 	bl	800168c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d902      	bls.n	8004746 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	73fb      	strb	r3, [r7, #15]
        break;
 8004744:	e005      	b.n	8004752 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004746:	4b37      	ldr	r3, [pc, #220]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ef      	bne.n	8004732 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d160      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d111      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	0211      	lsls	r1, r2, #8
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68d2      	ldr	r2, [r2, #12]
 8004774:	0912      	lsrs	r2, r2, #4
 8004776:	0452      	lsls	r2, r2, #17
 8004778:	430a      	orrs	r2, r1
 800477a:	492a      	ldr	r1, [pc, #168]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
 8004780:	e027      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d112      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004788:	4b26      	ldr	r3, [pc, #152]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6892      	ldr	r2, [r2, #8]
 8004798:	0211      	lsls	r1, r2, #8
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6912      	ldr	r2, [r2, #16]
 800479e:	0852      	lsrs	r2, r2, #1
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0552      	lsls	r2, r2, #21
 80047a4:	430a      	orrs	r2, r1
 80047a6:	491f      	ldr	r1, [pc, #124]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
 80047ac:	e011      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	0211      	lsls	r1, r2, #8
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6952      	ldr	r2, [r2, #20]
 80047c4:	0852      	lsrs	r2, r2, #1
 80047c6:	3a01      	subs	r2, #1
 80047c8:	0652      	lsls	r2, r2, #25
 80047ca:	430a      	orrs	r2, r1
 80047cc:	4915      	ldr	r1, [pc, #84]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a13      	ldr	r2, [pc, #76]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fc ff55 	bl	800168c <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047e4:	e009      	b.n	80047fa <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e6:	f7fc ff51 	bl	800168c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d902      	bls.n	80047fa <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	73fb      	strb	r3, [r7, #15]
          break;
 80047f8:	e005      	b.n	8004806 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0ef      	beq.n	80047e6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d106      	bne.n	800481a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800481a:	7bfb      	ldrb	r3, [r7, #15]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004836:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d018      	beq.n	8004874 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f003 0203 	and.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d10d      	bne.n	800486e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
       ||
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800485a:	4b5f      	ldr	r3, [pc, #380]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
       ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d044      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e041      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d00c      	beq.n	8004896 <RCCEx_PLLSAI2_Config+0x6e>
 800487c:	2b03      	cmp	r3, #3
 800487e:	d013      	beq.n	80048a8 <RCCEx_PLLSAI2_Config+0x80>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d120      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004884:	4b54      	ldr	r3, [pc, #336]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11d      	bne.n	80048cc <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004894:	e01a      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004896:	4b50      	ldr	r3, [pc, #320]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d116      	bne.n	80048d0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a6:	e013      	b.n	80048d0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048a8:	4b4b      	ldr	r3, [pc, #300]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10f      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80048b4:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80048c4:	e006      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
      break;
 80048ca:	e004      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048d4:	bf00      	nop
    }

    if(status == HAL_OK)
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048dc:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	430b      	orrs	r3, r1
 80048f2:	4939      	ldr	r1, [pc, #228]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d167      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048fe:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a35      	ldr	r2, [pc, #212]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490a:	f7fc febf 	bl	800168c <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004910:	e009      	b.n	8004926 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004912:	f7fc febb 	bl	800168c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d902      	bls.n	8004926 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	73fb      	strb	r3, [r7, #15]
        break;
 8004924:	e005      	b.n	8004932 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ef      	bne.n	8004912 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d14a      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d111      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493e:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	0211      	lsls	r1, r2, #8
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	68d2      	ldr	r2, [r2, #12]
 8004954:	0912      	lsrs	r2, r2, #4
 8004956:	0452      	lsls	r2, r2, #17
 8004958:	430a      	orrs	r2, r1
 800495a:	491f      	ldr	r1, [pc, #124]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	614b      	str	r3, [r1, #20]
 8004960:	e011      	b.n	8004986 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	0211      	lsls	r1, r2, #8
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6912      	ldr	r2, [r2, #16]
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0652      	lsls	r2, r2, #25
 800497e:	430a      	orrs	r2, r1
 8004980:	4915      	ldr	r1, [pc, #84]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004986:	4b14      	ldr	r3, [pc, #80]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800498c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004990:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004992:	f7fc fe7b 	bl	800168c <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004998:	e009      	b.n	80049ae <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800499a:	f7fc fe77 	bl	800168c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d902      	bls.n	80049ae <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	73fb      	strb	r3, [r7, #15]
          break;
 80049ac:	e005      	b.n	80049ba <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0ef      	beq.n	800499a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4903      	ldr	r1, [pc, #12]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40021000 	.word	0x40021000

080049dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e095      	b.n	8004b1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d108      	bne.n	8004a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fe:	d009      	beq.n	8004a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	61da      	str	r2, [r3, #28]
 8004a06:	e005      	b.n	8004a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fb56 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a54:	d902      	bls.n	8004a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e002      	b.n	8004a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a6a:	d007      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	ea42 0103 	orr.w	r1, r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	0c1b      	lsrs	r3, r3, #16
 8004ad8:	f003 0204 	and.w	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004af8:	ea42 0103 	orr.w	r1, r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_SPI_Transmit+0x22>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e158      	b.n	8004df6 <HAL_SPI_Transmit+0x2d4>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b4c:	f7fc fd9e 	bl	800168c <HAL_GetTick>
 8004b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b66:	e13d      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0x52>
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b78:	e134      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d94b      	bls.n	8004ca6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_Transmit+0xfa>
 8004c16:	8afb      	ldrh	r3, [r7, #22]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d13e      	bne.n	8004c9a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c40:	e02b      	b.n	8004c9a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d112      	bne.n	8004c76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e011      	b.n	8004c9a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c76:	f7fc fd09 	bl	800168c <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d803      	bhi.n	8004c8e <HAL_SPI_Transmit+0x16c>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d102      	bne.n	8004c94 <HAL_SPI_Transmit+0x172>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c98:	e0a4      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ce      	bne.n	8004c42 <HAL_SPI_Transmit+0x120>
 8004ca4:	e07c      	b.n	8004da0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x192>
 8004cae:	8afb      	ldrh	r3, [r7, #22]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d170      	bne.n	8004d96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d912      	bls.n	8004ce4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b02      	subs	r3, #2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce2:	e058      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	7812      	ldrb	r2, [r2, #0]
 8004cf0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d0a:	e044      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d12b      	bne.n	8004d72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d912      	bls.n	8004d4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b02      	subs	r3, #2
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d48:	e025      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d70:	e011      	b.n	8004d96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d72:	f7fc fc8b 	bl	800168c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d803      	bhi.n	8004d8a <HAL_SPI_Transmit+0x268>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x26e>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d94:	e026      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1b5      	bne.n	8004d0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 fbdf 	bl	8005568 <SPI_EndRxTxTransaction>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e000      	b.n	8004de4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_SPI_Transmit_DMA+0x20>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0d8      	b.n	8004fd2 <HAL_SPI_Transmit_DMA+0x1d2>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e38:	e0c6      	b.n	8004fc8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Transmit_DMA+0x46>
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e4a:	e0bd      	b.n	8004fc8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e96:	d10f      	bne.n	8004eb8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	4a47      	ldr	r2, [pc, #284]	; (8004fdc <HAL_SPI_Transmit_DMA+0x1dc>)
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	4a46      	ldr	r2, [pc, #280]	; (8004fe0 <HAL_SPI_Transmit_DMA+0x1e0>)
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ecc:	4a45      	ldr	r2, [pc, #276]	; (8004fe4 <HAL_SPI_Transmit_DMA+0x1e4>)
 8004ece:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ee6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ef0:	d82d      	bhi.n	8004f4e <HAL_SPI_Transmit_DMA+0x14e>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004efc:	d127      	bne.n	8004f4e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10f      	bne.n	8004f2c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f1a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f2a:	e010      	b.n	8004f4e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3301      	adds	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f56:	4619      	mov	r1, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f66:	f7fd ff33 	bl	8002dd0 <HAL_DMA_Start_IT>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00c      	beq.n	8004f8a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	f043 0210 	orr.w	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004f88:	e01e      	b.n	8004fc8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d007      	beq.n	8004fa8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0220 	orr.w	r2, r2, #32
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0202 	orr.w	r2, r2, #2
 8004fc6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	080052b7 	.word	0x080052b7
 8004fe0:	08005211 	.word	0x08005211
 8004fe4:	080052d3 	.word	0x080052d3

08004fe8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	099b      	lsrs	r3, r3, #6
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	099b      	lsrs	r3, r3, #6
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	4798      	blx	r3
    return;
 800502a:	e0d8      	b.n	80051de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_SPI_IRQHandler+0x66>
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
    return;
 800504c:	e0c7      	b.n	80051de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <HAL_SPI_IRQHandler+0x8c>
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	099b      	lsrs	r3, r3, #6
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	0a1b      	lsrs	r3, r3, #8
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 80b5 	beq.w	80051de <HAL_SPI_IRQHandler+0x1f6>
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80ae 	beq.w	80051de <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d023      	beq.n	80050d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b03      	cmp	r3, #3
 8005098:	d011      	beq.n	80050be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	f043 0204 	orr.w	r2, r3, #4
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	e00b      	b.n	80050d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	693b      	ldr	r3, [r7, #16]
        return;
 80050d4:	e083      	b.n	80051de <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	095b      	lsrs	r3, r3, #5
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d014      	beq.n	800510c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00c      	beq.n	8005132 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511c:	f043 0208 	orr.w	r2, r3, #8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	2b00      	cmp	r3, #0
 8005138:	d050      	beq.n	80051dc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005148:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <HAL_SPI_IRQHandler+0x17e>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d034      	beq.n	80051d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0203 	bic.w	r2, r2, #3
 8005174:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	2b00      	cmp	r3, #0
 800517c:	d011      	beq.n	80051a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <HAL_SPI_IRQHandler+0x1fc>)
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fe80 	bl	8002e90 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <HAL_SPI_IRQHandler+0x1fc>)
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd fe6a 	bl	8002e90 <HAL_DMA_Abort_IT>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80051ce:	e003      	b.n	80051d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f813 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051d6:	e000      	b.n	80051da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051d8:	bf00      	nop
    return;
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
  }
}
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08005313 	.word	0x08005313

080051e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800521e:	f7fc fa35 	bl	800168c <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b20      	cmp	r3, #32
 8005230:	d03b      	beq.n	80052aa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0220 	bic.w	r2, r2, #32
 8005240:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0202 	bic.w	r2, r2, #2
 8005250:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	2164      	movs	r1, #100	; 0x64
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f000 f986 	bl	8005568 <SPI_EndRxTxTransaction>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80052a2:	6978      	ldr	r0, [r7, #20]
 80052a4:	f7ff ffaa 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80052a8:	e002      	b.n	80052b0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7fb fcf0 	bl	8000c90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff8f 	bl	80051e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0203 	bic.w	r2, r2, #3
 80052ee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f4:	f043 0210 	orr.w	r2, r3, #16
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff79 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ff64 	bl	80051fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800534c:	f7fc f99e 	bl	800168c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	4413      	add	r3, r2
 800535a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800535c:	f7fc f996 	bl	800168c <HAL_GetTick>
 8005360:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	015b      	lsls	r3, r3, #5
 8005368:	0d1b      	lsrs	r3, r3, #20
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005372:	e054      	b.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d050      	beq.n	800541e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800537c:	f7fc f986 	bl	800168c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	429a      	cmp	r2, r3
 800538a:	d902      	bls.n	8005392 <SPI_WaitFlagStateUntilTimeout+0x56>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d13d      	bne.n	800540e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d111      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b4:	d004      	beq.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053be:	d107      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d8:	d10f      	bne.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e017      	b.n	800543e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	3b01      	subs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4013      	ands	r3, r2
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	429a      	cmp	r2, r3
 800542c:	bf0c      	ite	eq
 800542e:	2301      	moveq	r3, #1
 8005430:	2300      	movne	r3, #0
 8005432:	b2db      	uxtb	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	79fb      	ldrb	r3, [r7, #7]
 8005438:	429a      	cmp	r2, r3
 800543a:	d19b      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3720      	adds	r7, #32
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000004 	.word	0x20000004

0800544c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800545a:	f7fc f917 	bl	800168c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	4413      	add	r3, r2
 8005468:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800546a:	f7fc f90f 	bl	800168c <HAL_GetTick>
 800546e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005470:	4b3c      	ldr	r3, [pc, #240]	; (8005564 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00da      	lsls	r2, r3, #3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	0d1b      	lsrs	r3, r3, #20
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	e05f      	b.n	800554a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005490:	d106      	bne.n	80054a0 <SPI_WaitFifoStateUntilTimeout+0x54>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d050      	beq.n	800554a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054a8:	f7fc f8f0 	bl	800168c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	69fa      	ldr	r2, [r7, #28]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d902      	bls.n	80054be <SPI_WaitFifoStateUntilTimeout+0x72>
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d13d      	bne.n	800553a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d111      	bne.n	80054fc <SPI_WaitFifoStateUntilTimeout+0xb0>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e0:	d004      	beq.n	80054ec <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ea:	d107      	bne.n	80054fc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d10f      	bne.n	8005526 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e010      	b.n	800555c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3b01      	subs	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d197      	bne.n	800548a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000004 	.word	0x20000004

08005568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff ff63 	bl	800544c <SPI_WaitFifoStateUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e027      	b.n	80055ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff fec8 	bl	800533c <SPI_WaitFlagStateUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e014      	b.n	80055ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f7ff ff3c 	bl	800544c <SPI_WaitFifoStateUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e000      	b.n	80055ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e049      	b.n	800569a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb ff44 	bl	80014a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 fa4c 	bl	8005ad0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d109      	bne.n	80056c8 <HAL_TIM_PWM_Start+0x24>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b01      	cmp	r3, #1
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	e03c      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d109      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x3e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e02f      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d109      	bne.n	80056fc <HAL_TIM_PWM_Start+0x58>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	e022      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d109      	bne.n	8005716 <HAL_TIM_PWM_Start+0x72>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	bf14      	ite	ne
 800570e:	2301      	movne	r3, #1
 8005710:	2300      	moveq	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e015      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d109      	bne.n	8005730 <HAL_TIM_PWM_Start+0x8c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e008      	b.n	8005742 <HAL_TIM_PWM_Start+0x9e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e09c      	b.n	8005884 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xb6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005758:	e023      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xc6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005768:	e01b      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xd6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005778:	e013      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d104      	bne.n	800578a <HAL_TIM_PWM_Start+0xe6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005788:	e00b      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b10      	cmp	r3, #16
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0xf6>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005798:	e003      	b.n	80057a2 <HAL_TIM_PWM_Start+0xfe>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2201      	movs	r2, #1
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fd00 	bl	80061b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a35      	ldr	r2, [pc, #212]	; (800588c <HAL_TIM_PWM_Start+0x1e8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a34      	ldr	r2, [pc, #208]	; (8005890 <HAL_TIM_PWM_Start+0x1ec>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a32      	ldr	r2, [pc, #200]	; (8005894 <HAL_TIM_PWM_Start+0x1f0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a31      	ldr	r2, [pc, #196]	; (8005898 <HAL_TIM_PWM_Start+0x1f4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIM_PWM_Start+0x13e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	; (800589c <HAL_TIM_PWM_Start+0x1f8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d101      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x142>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_TIM_PWM_Start+0x144>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <HAL_TIM_PWM_Start+0x1e8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01d      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d018      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_TIM_PWM_Start+0x1fc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a21      	ldr	r2, [pc, #132]	; (80058a4 <HAL_TIM_PWM_Start+0x200>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1f      	ldr	r2, [pc, #124]	; (80058a8 <HAL_TIM_PWM_Start+0x204>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <HAL_TIM_PWM_Start+0x1ec>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIM_PWM_Start+0x19e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <HAL_TIM_PWM_Start+0x1f0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d115      	bne.n	800586e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	4b18      	ldr	r3, [pc, #96]	; (80058ac <HAL_TIM_PWM_Start+0x208>)
 800584a:	4013      	ands	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b06      	cmp	r3, #6
 8005852:	d015      	beq.n	8005880 <HAL_TIM_PWM_Start+0x1dc>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585a:	d011      	beq.n	8005880 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586c:	e008      	b.n	8005880 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e000      	b.n	8005882 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800
 80058a8:	40000c00 	.word	0x40000c00
 80058ac:	00010007 	.word	0x00010007

080058b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0fd      	b.n	8005ac6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b14      	cmp	r3, #20
 80058d6:	f200 80f0 	bhi.w	8005aba <HAL_TIM_PWM_ConfigChannel+0x20a>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005935 	.word	0x08005935
 80058e4:	08005abb 	.word	0x08005abb
 80058e8:	08005abb 	.word	0x08005abb
 80058ec:	08005abb 	.word	0x08005abb
 80058f0:	08005975 	.word	0x08005975
 80058f4:	08005abb 	.word	0x08005abb
 80058f8:	08005abb 	.word	0x08005abb
 80058fc:	08005abb 	.word	0x08005abb
 8005900:	080059b7 	.word	0x080059b7
 8005904:	08005abb 	.word	0x08005abb
 8005908:	08005abb 	.word	0x08005abb
 800590c:	08005abb 	.word	0x08005abb
 8005910:	080059f7 	.word	0x080059f7
 8005914:	08005abb 	.word	0x08005abb
 8005918:	08005abb 	.word	0x08005abb
 800591c:	08005abb 	.word	0x08005abb
 8005920:	08005a39 	.word	0x08005a39
 8005924:	08005abb 	.word	0x08005abb
 8005928:	08005abb 	.word	0x08005abb
 800592c:	08005abb 	.word	0x08005abb
 8005930:	08005a79 	.word	0x08005a79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68b9      	ldr	r1, [r7, #8]
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f962 	bl	8005c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	699a      	ldr	r2, [r3, #24]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6999      	ldr	r1, [r3, #24]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	619a      	str	r2, [r3, #24]
      break;
 8005972:	e0a3      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f9d2 	bl	8005d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800598e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6999      	ldr	r1, [r3, #24]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	619a      	str	r2, [r3, #24]
      break;
 80059b4:	e082      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fa3b 	bl	8005e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0208 	orr.w	r2, r2, #8
 80059d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0204 	bic.w	r2, r2, #4
 80059e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69d9      	ldr	r1, [r3, #28]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	691a      	ldr	r2, [r3, #16]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	61da      	str	r2, [r3, #28]
      break;
 80059f4:	e062      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 faa3 	bl	8005f48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69d9      	ldr	r1, [r3, #28]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	021a      	lsls	r2, r3, #8
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	61da      	str	r2, [r3, #28]
      break;
 8005a36:	e041      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 faec 	bl	800601c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0208 	orr.w	r2, r2, #8
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0204 	bic.w	r2, r2, #4
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a76:	e021      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fb30 	bl	80060e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	021a      	lsls	r2, r3, #8
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ab8:	e000      	b.n	8005abc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005aba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aee:	d00f      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a3d      	ldr	r2, [pc, #244]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d00b      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a3c      	ldr	r2, [pc, #240]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d007      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a3b      	ldr	r2, [pc, #236]	; (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d003      	beq.n	8005b10 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a3a      	ldr	r2, [pc, #232]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2f      	ldr	r2, [pc, #188]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01f      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b30:	d01b      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a2c      	ldr	r2, [pc, #176]	; (8005be8 <TIM_Base_SetConfig+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d017      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <TIM_Base_SetConfig+0x11c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a2a      	ldr	r2, [pc, #168]	; (8005bf0 <TIM_Base_SetConfig+0x120>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a29      	ldr	r2, [pc, #164]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00b      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d007      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d003      	beq.n	8005b6a <TIM_Base_SetConfig+0x9a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a26      	ldr	r2, [pc, #152]	; (8005c00 <TIM_Base_SetConfig+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d108      	bne.n	8005b7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <TIM_Base_SetConfig+0x114>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00f      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <TIM_Base_SetConfig+0x124>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <TIM_Base_SetConfig+0x128>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a10      	ldr	r2, [pc, #64]	; (8005bfc <TIM_Base_SetConfig+0x12c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0xf8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a0f      	ldr	r2, [pc, #60]	; (8005c00 <TIM_Base_SetConfig+0x130>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d103      	bne.n	8005bd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	615a      	str	r2, [r3, #20]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40014000 	.word	0x40014000
 8005bfc:	40014400 	.word	0x40014400
 8005c00:	40014800 	.word	0x40014800

08005c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f023 0302 	bic.w	r3, r3, #2
 8005c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <TIM_OC1_SetConfig+0x10c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00f      	beq.n	8005c84 <TIM_OC1_SetConfig+0x80>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a2b      	ldr	r2, [pc, #172]	; (8005d14 <TIM_OC1_SetConfig+0x110>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_OC1_SetConfig+0x80>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <TIM_OC1_SetConfig+0x114>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC1_SetConfig+0x80>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <TIM_OC1_SetConfig+0x118>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC1_SetConfig+0x80>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <TIM_OC1_SetConfig+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10c      	bne.n	8005c9e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0308 	bic.w	r3, r3, #8
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 0304 	bic.w	r3, r3, #4
 8005c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <TIM_OC1_SetConfig+0x10c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_OC1_SetConfig+0xc2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <TIM_OC1_SetConfig+0x110>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_OC1_SetConfig+0xc2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <TIM_OC1_SetConfig+0x114>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_OC1_SetConfig+0xc2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	; (8005d1c <TIM_OC1_SetConfig+0x118>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_OC1_SetConfig+0xc2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <TIM_OC1_SetConfig+0x11c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d111      	bne.n	8005cea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	621a      	str	r2, [r3, #32]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40013400 	.word	0x40013400
 8005d18:	40014000 	.word	0x40014000
 8005d1c:	40014400 	.word	0x40014400
 8005d20:	40014800 	.word	0x40014800

08005d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0210 	bic.w	r2, r3, #16
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f023 0320 	bic.w	r3, r3, #32
 8005d72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a28      	ldr	r2, [pc, #160]	; (8005e24 <TIM_OC2_SetConfig+0x100>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC2_SetConfig+0x6c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <TIM_OC2_SetConfig+0x104>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10d      	bne.n	8005dac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005daa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <TIM_OC2_SetConfig+0x100>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xb0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a1c      	ldr	r2, [pc, #112]	; (8005e28 <TIM_OC2_SetConfig+0x104>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00b      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xb0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <TIM_OC2_SetConfig+0x108>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xb0>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <TIM_OC2_SetConfig+0x10c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_OC2_SetConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <TIM_OC2_SetConfig+0x110>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	621a      	str	r2, [r3, #32]
}
 8005e16:	bf00      	nop
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40014000 	.word	0x40014000
 8005e30:	40014400 	.word	0x40014400
 8005e34:	40014800 	.word	0x40014800

08005e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a27      	ldr	r2, [pc, #156]	; (8005f34 <TIM_OC3_SetConfig+0xfc>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC3_SetConfig+0x6a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <TIM_OC3_SetConfig+0x100>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10d      	bne.n	8005ebe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <TIM_OC3_SetConfig+0xfc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_OC3_SetConfig+0xae>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <TIM_OC3_SetConfig+0x100>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_OC3_SetConfig+0xae>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <TIM_OC3_SetConfig+0x104>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_OC3_SetConfig+0xae>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a19      	ldr	r2, [pc, #100]	; (8005f40 <TIM_OC3_SetConfig+0x108>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0xae>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a18      	ldr	r2, [pc, #96]	; (8005f44 <TIM_OC3_SetConfig+0x10c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d113      	bne.n	8005f0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800

08005f48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	031b      	lsls	r3, r3, #12
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <TIM_OC4_SetConfig+0xc0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d00f      	beq.n	8005fcc <TIM_OC4_SetConfig+0x84>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a17      	ldr	r2, [pc, #92]	; (800600c <TIM_OC4_SetConfig+0xc4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <TIM_OC4_SetConfig+0x84>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC4_SetConfig+0xc8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d007      	beq.n	8005fcc <TIM_OC4_SetConfig+0x84>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <TIM_OC4_SetConfig+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_OC4_SetConfig+0x84>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <TIM_OC4_SetConfig+0xd0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d109      	bne.n	8005fe0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	019b      	lsls	r3, r3, #6
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40013400 	.word	0x40013400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006060:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC5_SetConfig+0xb4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00f      	beq.n	8006096 <TIM_OC5_SetConfig+0x7a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <TIM_OC5_SetConfig+0xb8>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00b      	beq.n	8006096 <TIM_OC5_SetConfig+0x7a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <TIM_OC5_SetConfig+0xbc>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d007      	beq.n	8006096 <TIM_OC5_SetConfig+0x7a>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a14      	ldr	r2, [pc, #80]	; (80060dc <TIM_OC5_SetConfig+0xc0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d003      	beq.n	8006096 <TIM_OC5_SetConfig+0x7a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <TIM_OC5_SetConfig+0xc4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d109      	bne.n	80060aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800612a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	051b      	lsls	r3, r3, #20
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <TIM_OC6_SetConfig+0xb8>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00f      	beq.n	8006160 <TIM_OC6_SetConfig+0x7c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <TIM_OC6_SetConfig+0xbc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d00b      	beq.n	8006160 <TIM_OC6_SetConfig+0x7c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a16      	ldr	r2, [pc, #88]	; (80061a4 <TIM_OC6_SetConfig+0xc0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d007      	beq.n	8006160 <TIM_OC6_SetConfig+0x7c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <TIM_OC6_SetConfig+0xc4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d003      	beq.n	8006160 <TIM_OC6_SetConfig+0x7c>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a14      	ldr	r2, [pc, #80]	; (80061ac <TIM_OC6_SetConfig+0xc8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d109      	bne.n	8006174 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006166:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40014400 	.word	0x40014400
 80061ac:	40014800 	.word	0x40014800

080061b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2201      	movs	r2, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a1a      	ldr	r2, [r3, #32]
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1a      	ldr	r2, [r3, #32]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	fa01 f303 	lsl.w	r3, r1, r3
 80061e8:	431a      	orrs	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006210:	2302      	movs	r3, #2
 8006212:	e068      	b.n	80062e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d108      	bne.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800624e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1e      	ldr	r2, [pc, #120]	; (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d018      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a1b      	ldr	r2, [pc, #108]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1a      	ldr	r2, [pc, #104]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a18      	ldr	r2, [pc, #96]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a14      	ldr	r2, [pc, #80]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10c      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40000c00 	.word	0x40000c00
 8006308:	40014000 	.word	0x40014000

0800630c <__libc_init_array>:
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4e0d      	ldr	r6, [pc, #52]	; (8006344 <__libc_init_array+0x38>)
 8006310:	4c0d      	ldr	r4, [pc, #52]	; (8006348 <__libc_init_array+0x3c>)
 8006312:	1ba4      	subs	r4, r4, r6
 8006314:	10a4      	asrs	r4, r4, #2
 8006316:	2500      	movs	r5, #0
 8006318:	42a5      	cmp	r5, r4
 800631a:	d109      	bne.n	8006330 <__libc_init_array+0x24>
 800631c:	4e0b      	ldr	r6, [pc, #44]	; (800634c <__libc_init_array+0x40>)
 800631e:	4c0c      	ldr	r4, [pc, #48]	; (8006350 <__libc_init_array+0x44>)
 8006320:	f000 f820 	bl	8006364 <_init>
 8006324:	1ba4      	subs	r4, r4, r6
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	2500      	movs	r5, #0
 800632a:	42a5      	cmp	r5, r4
 800632c:	d105      	bne.n	800633a <__libc_init_array+0x2e>
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006334:	4798      	blx	r3
 8006336:	3501      	adds	r5, #1
 8006338:	e7ee      	b.n	8006318 <__libc_init_array+0xc>
 800633a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800633e:	4798      	blx	r3
 8006340:	3501      	adds	r5, #1
 8006342:	e7f2      	b.n	800632a <__libc_init_array+0x1e>
 8006344:	080063bc 	.word	0x080063bc
 8006348:	080063bc 	.word	0x080063bc
 800634c:	080063bc 	.word	0x080063bc
 8006350:	080063c0 	.word	0x080063c0

08006354 <memset>:
 8006354:	4402      	add	r2, r0
 8006356:	4603      	mov	r3, r0
 8006358:	4293      	cmp	r3, r2
 800635a:	d100      	bne.n	800635e <memset+0xa>
 800635c:	4770      	bx	lr
 800635e:	f803 1b01 	strb.w	r1, [r3], #1
 8006362:	e7f9      	b.n	8006358 <memset+0x4>

08006364 <_init>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr

08006370 <_fini>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	bf00      	nop
 8006374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006376:	bc08      	pop	{r3}
 8006378:	469e      	mov	lr, r3
 800637a:	4770      	bx	lr
