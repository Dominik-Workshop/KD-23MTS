
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cfc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005e88  08005e88  00015e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080060a0  080060a0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060a0  080060a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000010  080060b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080060b8  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011657  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002214  00000000  00000000  00031697  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000338b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002818d  00000000  00000000  00035588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d792  00000000  00000000  0005d715  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2810  00000000  00000000  0006aea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d6b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  0015d734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005e6c 	.word	0x08005e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005e6c 	.word	0x08005e6c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f001 fec5 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f001 f9ae 	bl	8001e38 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f001 febb 	bl	8002860 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000aea:	4b65      	ldr	r3, [pc, #404]	; (8000c80 <ILI9488_Init+0x1bc>)
 8000aec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000af0:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000af2:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <ILI9488_Init+0x1c0>)
 8000af4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000af8:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 8000afa:	20e0      	movs	r0, #224	; 0xe0
 8000afc:	f000 f9e6 	bl	8000ecc <writecommand>
	writedata(0x00);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fa67 	bl	8000fd4 <writedata>
	writedata(0x03);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 fa64 	bl	8000fd4 <writedata>
	writedata(0x09);
 8000b0c:	2009      	movs	r0, #9
 8000b0e:	f000 fa61 	bl	8000fd4 <writedata>
	writedata(0x08);
 8000b12:	2008      	movs	r0, #8
 8000b14:	f000 fa5e 	bl	8000fd4 <writedata>
	writedata(0x16);
 8000b18:	2016      	movs	r0, #22
 8000b1a:	f000 fa5b 	bl	8000fd4 <writedata>
	writedata(0x0A);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f000 fa58 	bl	8000fd4 <writedata>
	writedata(0x3F);
 8000b24:	203f      	movs	r0, #63	; 0x3f
 8000b26:	f000 fa55 	bl	8000fd4 <writedata>
	writedata(0x78);
 8000b2a:	2078      	movs	r0, #120	; 0x78
 8000b2c:	f000 fa52 	bl	8000fd4 <writedata>
	writedata(0x4C);
 8000b30:	204c      	movs	r0, #76	; 0x4c
 8000b32:	f000 fa4f 	bl	8000fd4 <writedata>
	writedata(0x09);
 8000b36:	2009      	movs	r0, #9
 8000b38:	f000 fa4c 	bl	8000fd4 <writedata>
	writedata(0x0A);
 8000b3c:	200a      	movs	r0, #10
 8000b3e:	f000 fa49 	bl	8000fd4 <writedata>
	writedata(0x08);
 8000b42:	2008      	movs	r0, #8
 8000b44:	f000 fa46 	bl	8000fd4 <writedata>
	writedata(0x16);
 8000b48:	2016      	movs	r0, #22
 8000b4a:	f000 fa43 	bl	8000fd4 <writedata>
	writedata(0x1A);
 8000b4e:	201a      	movs	r0, #26
 8000b50:	f000 fa40 	bl	8000fd4 <writedata>
	writedata(0x0F);
 8000b54:	200f      	movs	r0, #15
 8000b56:	f000 fa3d 	bl	8000fd4 <writedata>

	writecommand(0XE1);
 8000b5a:	20e1      	movs	r0, #225	; 0xe1
 8000b5c:	f000 f9b6 	bl	8000ecc <writecommand>
	writedata(0x00);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fa37 	bl	8000fd4 <writedata>
	writedata(0x16);
 8000b66:	2016      	movs	r0, #22
 8000b68:	f000 fa34 	bl	8000fd4 <writedata>
	writedata(0x19);
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f000 fa31 	bl	8000fd4 <writedata>
	writedata(0x03);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 fa2e 	bl	8000fd4 <writedata>
	writedata(0x0F);
 8000b78:	200f      	movs	r0, #15
 8000b7a:	f000 fa2b 	bl	8000fd4 <writedata>
	writedata(0x05);
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f000 fa28 	bl	8000fd4 <writedata>
	writedata(0x32);
 8000b84:	2032      	movs	r0, #50	; 0x32
 8000b86:	f000 fa25 	bl	8000fd4 <writedata>
	writedata(0x45);
 8000b8a:	2045      	movs	r0, #69	; 0x45
 8000b8c:	f000 fa22 	bl	8000fd4 <writedata>
	writedata(0x46);
 8000b90:	2046      	movs	r0, #70	; 0x46
 8000b92:	f000 fa1f 	bl	8000fd4 <writedata>
	writedata(0x04);
 8000b96:	2004      	movs	r0, #4
 8000b98:	f000 fa1c 	bl	8000fd4 <writedata>
	writedata(0x0E);
 8000b9c:	200e      	movs	r0, #14
 8000b9e:	f000 fa19 	bl	8000fd4 <writedata>
	writedata(0x0D);
 8000ba2:	200d      	movs	r0, #13
 8000ba4:	f000 fa16 	bl	8000fd4 <writedata>
	writedata(0x35);
 8000ba8:	2035      	movs	r0, #53	; 0x35
 8000baa:	f000 fa13 	bl	8000fd4 <writedata>
	writedata(0x37);
 8000bae:	2037      	movs	r0, #55	; 0x37
 8000bb0:	f000 fa10 	bl	8000fd4 <writedata>
	writedata(0x0F);
 8000bb4:	200f      	movs	r0, #15
 8000bb6:	f000 fa0d 	bl	8000fd4 <writedata>

	writecommand(0XC0);      //Power Control 1
 8000bba:	20c0      	movs	r0, #192	; 0xc0
 8000bbc:	f000 f986 	bl	8000ecc <writecommand>
	writedata(0x17);    //Vreg1out
 8000bc0:	2017      	movs	r0, #23
 8000bc2:	f000 fa07 	bl	8000fd4 <writedata>
	writedata(0x15);    //Verg2out
 8000bc6:	2015      	movs	r0, #21
 8000bc8:	f000 fa04 	bl	8000fd4 <writedata>

	writecommand(0xC1);      //Power Control 2
 8000bcc:	20c1      	movs	r0, #193	; 0xc1
 8000bce:	f000 f97d 	bl	8000ecc <writecommand>
	writedata(0x41);    //VGH,VGL
 8000bd2:	2041      	movs	r0, #65	; 0x41
 8000bd4:	f000 f9fe 	bl	8000fd4 <writedata>

	writecommand(0xC5);      //Power Control 3
 8000bd8:	20c5      	movs	r0, #197	; 0xc5
 8000bda:	f000 f977 	bl	8000ecc <writecommand>
	writedata(0x00);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 f9f8 	bl	8000fd4 <writedata>
	writedata(0x12);    //Vcom
 8000be4:	2012      	movs	r0, #18
 8000be6:	f000 f9f5 	bl	8000fd4 <writedata>
	writedata(0x80);
 8000bea:	2080      	movs	r0, #128	; 0x80
 8000bec:	f000 f9f2 	bl	8000fd4 <writedata>

	writecommand(0x36);      //Memory Access
 8000bf0:	2036      	movs	r0, #54	; 0x36
 8000bf2:	f000 f96b 	bl	8000ecc <writecommand>
	writedata(0x48);
 8000bf6:	2048      	movs	r0, #72	; 0x48
 8000bf8:	f000 f9ec 	bl	8000fd4 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 8000bfc:	2036      	movs	r0, #54	; 0x36
 8000bfe:	f000 f965 	bl	8000ecc <writecommand>
	writedata(0x66); 	  //18 bit
 8000c02:	2066      	movs	r0, #102	; 0x66
 8000c04:	f000 f9e6 	bl	8000fd4 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 8000c08:	20b0      	movs	r0, #176	; 0xb0
 8000c0a:	f000 f95f 	bl	8000ecc <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	f000 f9e0 	bl	8000fd4 <writedata>

	writecommand(0xB1);      //Frame rate
 8000c14:	20b1      	movs	r0, #177	; 0xb1
 8000c16:	f000 f959 	bl	8000ecc <writecommand>
	writedata(0xA0);    //60Hz
 8000c1a:	20a0      	movs	r0, #160	; 0xa0
 8000c1c:	f000 f9da 	bl	8000fd4 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 8000c20:	20b4      	movs	r0, #180	; 0xb4
 8000c22:	f000 f953 	bl	8000ecc <writecommand>
	writedata(0x02);    //2-dot
 8000c26:	2002      	movs	r0, #2
 8000c28:	f000 f9d4 	bl	8000fd4 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 8000c2c:	20b6      	movs	r0, #182	; 0xb6
 8000c2e:	f000 f94d 	bl	8000ecc <writecommand>

	writedata(0x02);    //MCU
 8000c32:	2002      	movs	r0, #2
 8000c34:	f000 f9ce 	bl	8000fd4 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f000 f9cb 	bl	8000fd4 <writedata>

	writecommand(0XE9);      // Set Image Functio
 8000c3e:	20e9      	movs	r0, #233	; 0xe9
 8000c40:	f000 f944 	bl	8000ecc <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f9c5 	bl	8000fd4 <writedata>

	writecommand(0xF7);      // Adjust Control
 8000c4a:	20f7      	movs	r0, #247	; 0xf7
 8000c4c:	f000 f93e 	bl	8000ecc <writecommand>
	writedata(0xA9);
 8000c50:	20a9      	movs	r0, #169	; 0xa9
 8000c52:	f000 f9bf 	bl	8000fd4 <writedata>
	writedata(0x51);
 8000c56:	2051      	movs	r0, #81	; 0x51
 8000c58:	f000 f9bc 	bl	8000fd4 <writedata>
	writedata(0x2C);
 8000c5c:	202c      	movs	r0, #44	; 0x2c
 8000c5e:	f000 f9b9 	bl	8000fd4 <writedata>
	writedata(0x82);    // D7 stream, loose
 8000c62:	2082      	movs	r0, #130	; 0x82
 8000c64:	f000 f9b6 	bl	8000fd4 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 f92f 	bl	8000ecc <writecommand>

	HAL_Delay(120);
 8000c6e:	2078      	movs	r0, #120	; 0x78
 8000c70:	f001 f8e2 	bl	8001e38 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000c74:	2029      	movs	r0, #41	; 0x29
 8000c76:	f000 f929 	bl	8000ecc <writecommand>


}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000038 	.word	0x20000038
 8000c84:	2000003c 	.word	0x2000003c

08000c88 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4608      	mov	r0, r1
 8000c92:	4611      	mov	r1, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4623      	mov	r3, r4
 8000c98:	80fb      	strh	r3, [r7, #6]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80bb      	strh	r3, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	807b      	strh	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000ca6:	202a      	movs	r0, #42	; 0x2a
 8000ca8:	f000 f910 	bl	8000ecc <writecommand>
	writedata(x0 >> 8);
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f98d 	bl	8000fd4 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f988 	bl	8000fd4 <writedata>
	writedata(x1 >> 8);
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f981 	bl	8000fd4 <writedata>
	writedata(x1 & 0xFF);     // XEND
 8000cd2:	887b      	ldrh	r3, [r7, #2]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f97c 	bl	8000fd4 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000cdc:	202b      	movs	r0, #43	; 0x2b
 8000cde:	f000 f8f5 	bl	8000ecc <writecommand>
	writedata(y0 >> 8);
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f972 	bl	8000fd4 <writedata>
	writedata(y0 & 0xff);     // YSTART
 8000cf0:	88bb      	ldrh	r3, [r7, #4]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f96d 	bl	8000fd4 <writedata>
	writedata(y1 >> 8);
 8000cfa:	883b      	ldrh	r3, [r7, #0]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f966 	bl	8000fd4 <writedata>
	writedata(y1 & 0xff);     // YEND
 8000d08:	883b      	ldrh	r3, [r7, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f961 	bl	8000fd4 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 8000d12:	202c      	movs	r0, #44	; 0x2c
 8000d14:	f000 f8da 	bl	8000ecc <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1e:	4806      	ldr	r0, [pc, #24]	; (8000d38 <setAddrWindow+0xb0>)
 8000d20:	f001 fd9e 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	2110      	movs	r1, #16
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <setAddrWindow+0xb0>)
 8000d2a:	f001 fd99 	bl	8002860 <HAL_GPIO_WritePin>
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd90      	pop	{r4, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	48000800 	.word	0x48000800

08000d3c <drawPixel>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}
void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
 8000d46:	460b      	mov	r3, r1
 8000d48:	80bb      	strh	r3, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 8000d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db31      	blt.n	8000dba <drawPixel+0x7e>
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <drawPixel+0x88>)
 8000d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	da2a      	bge.n	8000dba <drawPixel+0x7e>
 8000d64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db26      	blt.n	8000dba <drawPixel+0x7e>
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <drawPixel+0x8c>)
 8000d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d72:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	da1f      	bge.n	8000dba <drawPixel+0x7e>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000d7a:	88f8      	ldrh	r0, [r7, #6]
 8000d7c:	88b9      	ldrh	r1, [r7, #4]
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f7ff ff7d 	bl	8000c88 <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2110      	movs	r1, #16
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <drawPixel+0x90>)
 8000d94:	f001 fd64 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	480b      	ldr	r0, [pc, #44]	; (8000dcc <drawPixel+0x90>)
 8000da0:	f001 fd5e 	bl	8002860 <HAL_GPIO_WritePin>
	write16BitColor(color);
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f8b4 	bl	8000f14 <write16BitColor>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <drawPixel+0x90>)
 8000db4:	f001 fd54 	bl	8002860 <HAL_GPIO_WritePin>
 8000db8:	e000      	b.n	8000dbc <drawPixel+0x80>
		return;
 8000dba:	bf00      	nop

}
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000038 	.word	0x20000038
 8000dc8:	2000003c 	.word	0x2000003c
 8000dcc:	48000800 	.word	0x48000800

08000dd0 <setRotation>:

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
void setRotation(uint8_t r)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 8000dda:	2036      	movs	r0, #54	; 0x36
 8000ddc:	f000 f876 	bl	8000ecc <writecommand>
	rotation = r % 4; // can't be higher than 3
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <setRotation+0xa4>)
 8000dea:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <setRotation+0xa4>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d83b      	bhi.n	8000e6c <setRotation+0x9c>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <setRotation+0x2c>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e0d 	.word	0x08000e0d
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e3d 	.word	0x08000e3d
 8000e08:	08000e55 	.word	0x08000e55
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8000e0c:	2048      	movs	r0, #72	; 0x48
 8000e0e:	f000 f8e1 	bl	8000fd4 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <setRotation+0xa8>)
 8000e14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e18:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <setRotation+0xac>)
 8000e1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e20:	801a      	strh	r2, [r3, #0]
		break;
 8000e22:	e023      	b.n	8000e6c <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f000 f8d5 	bl	8000fd4 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <setRotation+0xa8>)
 8000e2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e30:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <setRotation+0xac>)
 8000e34:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e38:	801a      	strh	r2, [r3, #0]
		break;
 8000e3a:	e017      	b.n	8000e6c <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8000e3c:	2088      	movs	r0, #136	; 0x88
 8000e3e:	f000 f8c9 	bl	8000fd4 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <setRotation+0xa8>)
 8000e44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e48:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <setRotation+0xac>)
 8000e4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e50:	801a      	strh	r2, [r3, #0]
		break;
 8000e52:	e00b      	b.n	8000e6c <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000e54:	20e8      	movs	r0, #232	; 0xe8
 8000e56:	f000 f8bd 	bl	8000fd4 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <setRotation+0xa8>)
 8000e5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e60:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <setRotation+0xac>)
 8000e64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e68:	801a      	strh	r2, [r3, #0]
		break;
 8000e6a:	bf00      	nop
	}

}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000034 	.word	0x20000034
 8000e78:	20000038 	.word	0x20000038
 8000e7c:	2000003c 	.word	0x2000003c

08000e80 <color565>:

	  writecommand(i ? ILI9488_INVON : ILI9488_INVOFF);

}
uint16_t color565(uint8_t r, uint8_t g, uint8_t b)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	71bb      	strb	r3, [r7, #6]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	021b      	lsls	r3, r3, #8
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000e9c:	f023 0307 	bic.w	r3, r3, #7
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	797b      	ldrb	r3, [r7, #5]
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	b29b      	uxth	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2110      	movs	r1, #16
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <writecommand+0x40>)
 8000edc:	f001 fcc0 	bl	8002860 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee6:	4809      	ldr	r0, [pc, #36]	; (8000f0c <writecommand+0x40>)
 8000ee8:	f001 fcba 	bl	8002860 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 8000eec:	1df9      	adds	r1, r7, #7
 8000eee:	2301      	movs	r3, #1
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <writecommand+0x44>)
 8000ef4:	f002 fb85 	bl	8003602 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <writecommand+0x40>)
 8000f00:	f001 fcae 	bl	8002860 <HAL_GPIO_WritePin>

}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	200000c0 	.word	0x200000c0

08000f14 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	0adb      	lsrs	r3, r3, #11
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	115b      	asrs	r3, r3, #5
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 031f 	and.w	r3, r3, #31
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4613      	mov	r3, r2
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <write16BitColor+0xb4>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	441a      	add	r2, r3
 8000f54:	1112      	asrs	r2, r2, #4
 8000f56:	17db      	asrs	r3, r3, #31
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4613      	mov	r3, r2
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <write16BitColor+0xb8>)
 8000f6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6e:	441a      	add	r2, r3
 8000f70:	1152      	asrs	r2, r2, #5
 8000f72:	17db      	asrs	r3, r3, #31
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4613      	mov	r3, r2
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	1a9b      	subs	r3, r3, r2
 8000f84:	4a10      	ldr	r2, [pc, #64]	; (8000fc8 <write16BitColor+0xb4>)
 8000f86:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8a:	441a      	add	r2, r3
 8000f8c:	1112      	asrs	r2, r2, #4
 8000f8e:	17db      	asrs	r3, r3, #31
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 8000f96:	f107 010f 	add.w	r1, r7, #15
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <write16BitColor+0xbc>)
 8000fa0:	f002 fb2f 	bl	8003602 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 8000fa4:	f107 010e 	add.w	r1, r7, #14
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2201      	movs	r2, #1
 8000fac:	4808      	ldr	r0, [pc, #32]	; (8000fd0 <write16BitColor+0xbc>)
 8000fae:	f002 fb28 	bl	8003602 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 8000fb2:	f107 010d 	add.w	r1, r7, #13
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <write16BitColor+0xbc>)
 8000fbc:	f002 fb21 	bl	8003602 <HAL_SPI_Transmit>


}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	84210843 	.word	0x84210843
 8000fcc:	82082083 	.word	0x82082083
 8000fd0:	200000c0 	.word	0x200000c0

08000fd4 <writedata>:
void writedata(uint8_t d)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <writedata+0x40>)
 8000fe4:	f001 fc3c 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <writedata+0x40>)
 8000ff0:	f001 fc36 	bl	8002860 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 8000ff4:	1df9      	adds	r1, r7, #7
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <writedata+0x44>)
 8000ffc:	f002 fb01 	bl	8003602 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <writedata+0x40>)
 8001008:	f001 fc2a 	bl	8002860 <HAL_GPIO_WritePin>

}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	48000800 	.word	0x48000800
 8001018:	200000c0 	.word	0x200000c0

0800101c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	466b      	mov	r3, sp
 800102a:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	f240 22ed 	movw	r2, #749	; 0x2ed
 8001038:	4293      	cmp	r3, r2
 800103a:	d802      	bhi.n	8001042 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
 8001040:	e002      	b.n	8001048 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8001042:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2110      	movs	r1, #16
 800104c:	4867      	ldr	r0, [pc, #412]	; (80011ec <ILI9341_Draw_Colour_Burst+0x1d0>)
 800104e:	f001 fc07 	bl	8002860 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001058:	4864      	ldr	r0, [pc, #400]	; (80011ec <ILI9341_Draw_Colour_Burst+0x1d0>)
 800105a:	f001 fc01 	bl	8002860 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	0adb      	lsrs	r3, r3, #11
 8001062:	b29b      	uxth	r3, r3
 8001064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	115b      	asrs	r3, r3, #5
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001072:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 031f 	and.w	r3, r3, #31
 800107e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 8001082:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001086:	4613      	mov	r3, r2
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <ILI9341_Draw_Colour_Burst+0x1d4>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	441a      	add	r2, r3
 8001094:	1112      	asrs	r2, r2, #4
 8001096:	17db      	asrs	r3, r3, #31
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 800109e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80010a2:	4613      	mov	r3, r2
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <ILI9341_Draw_Colour_Burst+0x1d8>)
 80010aa:	fb82 1203 	smull	r1, r2, r2, r3
 80010ae:	441a      	add	r2, r3
 80010b0:	1152      	asrs	r2, r2, #5
 80010b2:	17db      	asrs	r3, r3, #31
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 80010ba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80010be:	4613      	mov	r3, r2
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80010c6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ca:	441a      	add	r2, r3
 80010cc:	1112      	asrs	r2, r2, #4
 80010ce:	17db      	asrs	r3, r3, #31
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 80010d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d8:	4603      	mov	r3, r0
 80010da:	3b01      	subs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
 80010de:	4601      	mov	r1, r0
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	f04f 0400 	mov.w	r4, #0
 80010ec:	00d4      	lsls	r4, r2, #3
 80010ee:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010f2:	00cb      	lsls	r3, r1, #3
 80010f4:	4601      	mov	r1, r0
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	f04f 0400 	mov.w	r4, #0
 8001102:	00d4      	lsls	r4, r2, #3
 8001104:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001108:	00cb      	lsls	r3, r1, #3
 800110a:	1dc3      	adds	r3, r0, #7
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	ebad 0d03 	sub.w	sp, sp, r3
 8001114:	466b      	mov	r3, sp
 8001116:	3300      	adds	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
 800111e:	e014      	b.n	800114a <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001124:	4413      	add	r3, r2
 8001126:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800112a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	3301      	adds	r3, #1
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001136:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 8001138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8001142:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001146:	3303      	adds	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	429a      	cmp	r2, r3
 8001150:	d3e6      	bcc.n	8001120 <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800116a:	fbb3 f2f2 	udiv	r2, r3, r2
 800116e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001170:	fb01 f202 	mul.w	r2, r1, r2
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d018      	beq.n	80011b0 <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001182:	e011      	b.n	80011a8 <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800118e:	b292      	uxth	r2, r2
 8001190:	4619      	mov	r1, r3
 8001192:	481a      	ldr	r0, [pc, #104]	; (80011fc <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001194:	f002 fba4 	bl	80038e0 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 8001198:	bf00      	nop
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0fb      	beq.n	800119a <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	3301      	adds	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3e9      	bcc.n	8001184 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00e      	beq.n	80011d4 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	b292      	uxth	r2, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <ILI9341_Draw_Colour_Burst+0x1e0>)
 80011c6:	f002 fb8b 	bl	80038e0 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 80011ca:	bf00      	nop
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0fb      	beq.n	80011cc <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <ILI9341_Draw_Colour_Burst+0x1d0>)
 80011dc:	f001 fb40 	bl	8002860 <HAL_GPIO_WritePin>
 80011e0:	46ad      	mov	sp, r5
}
 80011e2:	bf00      	nop
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000800 	.word	0x48000800
 80011f0:	84210843 	.word	0x84210843
 80011f4:	82082083 	.word	0x82082083
 80011f8:	20000000 	.word	0x20000000
 80011fc:	200000c0 	.word	0x200000c0

08001200 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 800120a:	f240 133f 	movw	r3, #319	; 0x13f
 800120e:	f240 12df 	movw	r2, #479	; 0x1df
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fd37 	bl	8000c88 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 800121a:	88fb      	ldrh	r3, [r7, #6]
 800121c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fefb 	bl	800101c <ILI9341_Draw_Colour_Burst>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_DMA_Init+0x38>)
 8001238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <MX_DMA_Init+0x38>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6493      	str	r3, [r2, #72]	; 0x48
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_DMA_Init+0x38>)
 8001244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	200d      	movs	r0, #13
 8001254:	f000 feed 	bl	8002032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001258:	200d      	movs	r0, #13
 800125a:	f000 ff06 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001282:	4b42      	ldr	r3, [pc, #264]	; (800138c <MX_GPIO_Init+0x120>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a41      	ldr	r2, [pc, #260]	; (800138c <MX_GPIO_Init+0x120>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b3f      	ldr	r3, [pc, #252]	; (800138c <MX_GPIO_Init+0x120>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b3c      	ldr	r3, [pc, #240]	; (800138c <MX_GPIO_Init+0x120>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <MX_GPIO_Init+0x120>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b39      	ldr	r3, [pc, #228]	; (800138c <MX_GPIO_Init+0x120>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <MX_GPIO_Init+0x120>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a35      	ldr	r2, [pc, #212]	; (800138c <MX_GPIO_Init+0x120>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b33      	ldr	r3, [pc, #204]	; (800138c <MX_GPIO_Init+0x120>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f001 fac4 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012de:	482c      	ldr	r0, [pc, #176]	; (8001390 <MX_GPIO_Init+0x124>)
 80012e0:	f001 fabe 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ea:	482a      	ldr	r0, [pc, #168]	; (8001394 <MX_GPIO_Init+0x128>)
 80012ec:	f001 fab8 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f6:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_GPIO_Init+0x12c>)
 80012f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4619      	mov	r1, r3
 8001304:	4822      	ldr	r0, [pc, #136]	; (8001390 <MX_GPIO_Init+0x124>)
 8001306:	f001 f903 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800130a:	2320      	movs	r3, #32
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f001 f8f4 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001328:	f44f 7388 	mov.w	r3, #272	; 0x110
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	4813      	ldr	r0, [pc, #76]	; (8001390 <MX_GPIO_Init+0x124>)
 8001342:	f001 f8e5 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2301      	movs	r3, #1
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_GPIO_Init+0x128>)
 8001360:	f001 f8d6 	bl	8002510 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 8001364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f001 f8c6 	bl	8002510 <HAL_GPIO_Init>

}
 8001384:	bf00      	nop
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400
 8001398:	10210000 	.word	0x10210000

0800139c <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_SPI_TxCpltCallback+0x1c>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	701a      	strb	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000

080013bc <drawGrid>:

void drawGrid(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
	// vertical lines
	for(int i = 0; i < 480; i+=60){
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e015      	b.n	80013f4 <drawGrid+0x38>
		for(int j = 20; j < 300; j+=2)
 80013c8:	2314      	movs	r3, #20
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	e00b      	b.n	80013e6 <drawGrid+0x2a>
			drawPixel(i, j, ILI9488_DARKGREY);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	b211      	sxth	r1, r2
 80013d6:	f647 32ef 	movw	r2, #31727	; 0x7bef
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fcae 	bl	8000d3c <drawPixel>
		for(int j = 20; j < 300; j+=2)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3302      	adds	r3, #2
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013ec:	dbef      	blt.n	80013ce <drawGrid+0x12>
	for(int i = 0; i < 480; i+=60){
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	333c      	adds	r3, #60	; 0x3c
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80013fa:	dbe5      	blt.n	80013c8 <drawGrid+0xc>
	}
	for(int j = 20; j < 300; j+=2)
 80013fc:	2314      	movs	r3, #20
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e00b      	b.n	800141a <drawGrid+0x5e>
				drawPixel(479, j, ILI9488_DARKGREY);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	b21b      	sxth	r3, r3
 8001406:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800140a:	4619      	mov	r1, r3
 800140c:	f240 10df 	movw	r0, #479	; 0x1df
 8001410:	f7ff fc94 	bl	8000d3c <drawPixel>
	for(int j = 20; j < 300; j+=2)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3302      	adds	r3, #2
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001420:	dbef      	blt.n	8001402 <drawGrid+0x46>

	// horizontal lines
	for(int i = 20; i < 320; i+=60){
 8001422:	2314      	movs	r3, #20
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	e015      	b.n	8001454 <drawGrid+0x98>
		for(int j = 0; j < 480; j+=2)
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	e00b      	b.n	8001446 <drawGrid+0x8a>
			drawPixel(j, i, ILI9488_DARKGREY);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	b21b      	sxth	r3, r3
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	b211      	sxth	r1, r2
 8001436:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fc7e 	bl	8000d3c <drawPixel>
		for(int j = 0; j < 480; j+=2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3302      	adds	r3, #2
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800144c:	dbef      	blt.n	800142e <drawGrid+0x72>
	for(int i = 20; i < 320; i+=60){
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	333c      	adds	r3, #60	; 0x3c
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800145a:	dbe5      	blt.n	8001428 <drawGrid+0x6c>
	}

}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0000      	movs	r0, r0
	...

08001468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800146e:	f000 fc67 	bl	8001d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001472:	f000 f935 	bl	80016e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001476:	f7ff fef9 	bl	800126c <MX_GPIO_Init>
  MX_DMA_Init();
 800147a:	f7ff fed9 	bl	8001230 <MX_DMA_Init>
  MX_SPI1_Init();
 800147e:	f000 f987 	bl	8001790 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001482:	f000 f9c3 	bl	800180c <MX_SPI2_Init>
  MX_TIM3_Init();
 8001486:	f000 fb7f 	bl	8001b88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800148a:	210c      	movs	r1, #12
 800148c:	4890      	ldr	r0, [pc, #576]	; (80016d0 <main+0x268>)
 800148e:	f002 fe79 	bl	8004184 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 600); // 0-1000
 8001492:	4b8f      	ldr	r3, [pc, #572]	; (80016d0 <main+0x268>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f44f 7216 	mov.w	r2, #600	; 0x258
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
  //HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
  ILI9488_Init();
 800149c:	f7ff fb12 	bl	8000ac4 <ILI9488_Init>

  //   HAL_Delay(1000);
  setRotation(1);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fc95 	bl	8000dd0 <setRotation>

  ILI9341_Fill_Screen(ILI9488_BLACK);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff feaa 	bl	8001200 <ILI9341_Fill_Screen>

  //uint16_t touchX = 0, touchY = 0;
  for(int i = 0; i < 200; ++i){
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00f      	b.n	80014d2 <main+0x6a>
	  image[i] = color565(20, 50, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2132      	movs	r1, #50	; 0x32
 80014b6:	2014      	movs	r0, #20
 80014b8:	f7ff fce2 	bl	8000e80 <color565>
 80014bc:	4603      	mov	r3, r0
 80014be:	4619      	mov	r1, r3
 80014c0:	4b84      	ldr	r3, [pc, #528]	; (80016d4 <main+0x26c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	4413      	add	r3, r2
 80014c8:	b2ca      	uxtb	r2, r1
 80014ca:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 200; ++i){
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2bc7      	cmp	r3, #199	; 0xc7
 80014d6:	ddec      	ble.n	80014b2 <main+0x4a>
  {

	  //drawImage(image, 10, 10, 200, 1);
	  	  //HAL_Delay(500);
	  	  //ILI9341_Fill_Screen(ILI9488_DARKGREY);
	  	  drawGrid();
 80014d8:	f7ff ff70 	bl	80013bc <drawGrid>

	  	  for(int i = 0; i < 480; ++i){
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	e034      	b.n	800154c <main+0xe4>
	  	  		drawPixel(i, 160+ 40*sin(0.1*i), GREEN);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	b21c      	sxth	r4, r3
 80014e6:	6938      	ldr	r0, [r7, #16]
 80014e8:	f7fe ffc0 	bl	800046c <__aeabi_i2d>
 80014ec:	a374      	add	r3, pc, #464	; (adr r3, 80016c0 <main+0x258>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f825 	bl	8000540 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	ec43 2b17 	vmov	d7, r2, r3
 80014fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001502:	eef0 0a67 	vmov.f32	s1, s15
 8001506:	f003 fc9f 	bl	8004e48 <sin>
 800150a:	ec51 0b10 	vmov	r0, r1, d0
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <main+0x270>)
 8001514:	f7ff f814 	bl	8000540 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <main+0x274>)
 8001526:	f7fe fe55 	bl	80001d4 <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fa9f 	bl	8000a74 <__aeabi_d2iz>
 8001536:	4603      	mov	r3, r0
 8001538:	b21b      	sxth	r3, r3
 800153a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800153e:	4619      	mov	r1, r3
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff fbfb 	bl	8000d3c <drawPixel>
	  	  for(int i = 0; i < 480; ++i){
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	3301      	adds	r3, #1
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001552:	dbc6      	blt.n	80014e2 <main+0x7a>
	  	  }
	  	  //HAL_Delay(500);
	  	  for(int i = 0; i < 480; ++i){
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e033      	b.n	80015c2 <main+0x15a>
	  	  	  		drawPixel(i, 160+ 40*sin(0.1*i), ILI9488_BLACK);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	b21c      	sxth	r4, r3
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7fe ff84 	bl	800046c <__aeabi_i2d>
 8001564:	a356      	add	r3, pc, #344	; (adr r3, 80016c0 <main+0x258>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe ffe9 	bl	8000540 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	ec43 2b17 	vmov	d7, r2, r3
 8001576:	eeb0 0a47 	vmov.f32	s0, s14
 800157a:	eef0 0a67 	vmov.f32	s1, s15
 800157e:	f003 fc63 	bl	8004e48 <sin>
 8001582:	ec51 0b10 	vmov	r0, r1, d0
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <main+0x270>)
 800158c:	f7fe ffd8 	bl	8000540 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <main+0x274>)
 800159e:	f7fe fe19 	bl	80001d4 <__adddf3>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa63 	bl	8000a74 <__aeabi_d2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fbc0 	bl	8000d3c <drawPixel>
	  	  for(int i = 0; i < 480; ++i){
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80015c8:	dbc7      	blt.n	800155a <main+0xf2>

	  	  }
	  	  drawGrid();
 80015ca:	f7ff fef7 	bl	80013bc <drawGrid>

	  	  for(int i = 0; i < 480; ++i){
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	e034      	b.n	800163e <main+0x1d6>
	  	  	  		drawPixel(i, 160+ 40*sin(0.05*i), YELLOW);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	b21c      	sxth	r4, r3
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f7fe ff47 	bl	800046c <__aeabi_i2d>
 80015de:	a33a      	add	r3, pc, #232	; (adr r3, 80016c8 <main+0x260>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe ffac 	bl	8000540 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b17 	vmov	d7, r2, r3
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f003 fc26 	bl	8004e48 <sin>
 80015fc:	ec51 0b10 	vmov	r0, r1, d0
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <main+0x270>)
 8001606:	f7fe ff9b 	bl	8000540 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <main+0x274>)
 8001618:	f7fe fddc 	bl	80001d4 <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa26 	bl	8000a74 <__aeabi_d2iz>
 8001628:	4603      	mov	r3, r0
 800162a:	b21b      	sxth	r3, r3
 800162c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001630:	4619      	mov	r1, r3
 8001632:	4620      	mov	r0, r4
 8001634:	f7ff fb82 	bl	8000d3c <drawPixel>
	  	  for(int i = 0; i < 480; ++i){
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3301      	adds	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001644:	dbc6      	blt.n	80015d4 <main+0x16c>
	  	  }
	  	  //HAL_Delay(500);
	  	  for(int i = 0; i < 480; ++i){
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e033      	b.n	80016b4 <main+0x24c>
	  	  	  	  		drawPixel(i, 160+ 40*sin(0.05*i), ILI9488_BLACK);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b21c      	sxth	r4, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ff0b 	bl	800046c <__aeabi_i2d>
 8001656:	a31c      	add	r3, pc, #112	; (adr r3, 80016c8 <main+0x260>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ff70 	bl	8000540 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f003 fbea 	bl	8004e48 <sin>
 8001674:	ec51 0b10 	vmov	r0, r1, d0
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <main+0x270>)
 800167e:	f7fe ff5f 	bl	8000540 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <main+0x274>)
 8001690:	f7fe fda0 	bl	80001d4 <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff f9ea 	bl	8000a74 <__aeabi_d2iz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fb47 	bl	8000d3c <drawPixel>
	  	  for(int i = 0; i < 480; ++i){
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80016ba:	dbc7      	blt.n	800164c <main+0x1e4>
	  	  drawGrid();
 80016bc:	e70c      	b.n	80014d8 <main+0x70>
 80016be:	bf00      	nop
 80016c0:	9999999a 	.word	0x9999999a
 80016c4:	3fb99999 	.word	0x3fb99999
 80016c8:	9999999a 	.word	0x9999999a
 80016cc:	3fa99999 	.word	0x3fa99999
 80016d0:	2000016c 	.word	0x2000016c
 80016d4:	20000044 	.word	0x20000044
 80016d8:	40440000 	.word	0x40440000
 80016dc:	40640000 	.word	0x40640000

080016e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2244      	movs	r2, #68	; 0x44
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f003 fba0 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001702:	2302      	movs	r3, #2
 8001704:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800170a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800170c:	2310      	movs	r3, #16
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001710:	2302      	movs	r3, #2
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001714:	2302      	movs	r3, #2
 8001716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800171c:	230a      	movs	r3, #10
 800171e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001720:	2307      	movs	r3, #7
 8001722:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001724:	2302      	movs	r3, #2
 8001726:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001728:	2302      	movs	r3, #2
 800172a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4618      	mov	r0, r3
 8001732:	f001 f911 	bl	8002958 <HAL_RCC_OscConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800173c:	f000 f821 	bl	8001782 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001740:	230f      	movs	r3, #15
 8001742:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001744:	2303      	movs	r3, #3
 8001746:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	2104      	movs	r1, #4
 8001758:	4618      	mov	r0, r3
 800175a:	f001 fce3 	bl	8003124 <HAL_RCC_ClockConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001764:	f000 f80d 	bl	8001782 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001768:	f44f 7000 	mov.w	r0, #512	; 0x200
 800176c:	f001 f89e 	bl	80028ac <HAL_PWREx_ControlVoltageScaling>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001776:	f000 f804 	bl	8001782 <Error_Handler>
  }
}
 800177a:	bf00      	nop
 800177c:	3758      	adds	r7, #88	; 0x58
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_SPI1_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <MX_SPI1_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_SPI1_Init+0x74>)
 800179c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_SPI1_Init+0x74>)
 80017aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_SPI1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_SPI1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_SPI1_Init+0x74>)
 80017be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_SPI1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_SPI1_Init+0x74>)
 80017de:	2207      	movs	r2, #7
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_SPI1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_SPI1_Init+0x74>)
 80017ea:	2208      	movs	r2, #8
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_SPI1_Init+0x74>)
 80017f0:	f001 fe64 	bl	80034bc <HAL_SPI_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f7ff ffc2 	bl	8001782 <Error_Handler>
  }

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200000c0 	.word	0x200000c0
 8001808:	40013000 	.word	0x40013000

0800180c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <MX_SPI2_Init+0x74>)
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <MX_SPI2_Init+0x78>)
 8001814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001816:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <MX_SPI2_Init+0x74>)
 8001818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800181c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_SPI2_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_SPI2_Init+0x74>)
 8001826:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800182a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_SPI2_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_SPI2_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_SPI2_Init+0x74>)
 800183a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_SPI2_Init+0x74>)
 8001842:	2218      	movs	r2, #24
 8001844:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_SPI2_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_SPI2_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_SPI2_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_SPI2_Init+0x74>)
 800185a:	2207      	movs	r2, #7
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_SPI2_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_SPI2_Init+0x74>)
 8001866:	2208      	movs	r2, #8
 8001868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_SPI2_Init+0x74>)
 800186c:	f001 fe26 	bl	80034bc <HAL_SPI_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001876:	f7ff ff84 	bl	8001782 <Error_Handler>
  }

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	2000005c 	.word	0x2000005c
 8001884:	40003800 	.word	0x40003800

08001888 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a63      	ldr	r2, [pc, #396]	; (8001a34 <HAL_SPI_MspInit+0x1ac>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d176      	bne.n	8001998 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	4a62      	ldr	r2, [pc, #392]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018b4:	6613      	str	r3, [r2, #96]	; 0x60
 80018b6:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018be:	623b      	str	r3, [r7, #32]
 80018c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a5c      	ldr	r2, [pc, #368]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001902:	2305      	movs	r3, #5
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f000 fdfe 	bl	8002510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001914:	2308      	movs	r3, #8
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001924:	2305      	movs	r3, #5
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	4843      	ldr	r0, [pc, #268]	; (8001a3c <HAL_SPI_MspInit+0x1b4>)
 8001930:	f000 fdee 	bl	8002510 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001936:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <HAL_SPI_MspInit+0x1bc>)
 8001938:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 800193c:	2201      	movs	r2, #1
 800193e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001942:	2210      	movs	r2, #16
 8001944:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001946:	4b3e      	ldr	r3, [pc, #248]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800194c:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 800194e:	2280      	movs	r2, #128	; 0x80
 8001950:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800196a:	4835      	ldr	r0, [pc, #212]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 800196c:	f000 fb98 	bl	80020a0 <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 8001976:	f7ff ff04 	bl	8001782 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 800197e:	655a      	str	r2, [r3, #84]	; 0x54
 8001980:	4a2f      	ldr	r2, [pc, #188]	; (8001a40 <HAL_SPI_MspInit+0x1b8>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2023      	movs	r0, #35	; 0x23
 800198c:	f000 fb51 	bl	8002032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001990:	2023      	movs	r0, #35	; 0x23
 8001992:	f000 fb6a 	bl	800206a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001996:	e049      	b.n	8001a2c <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_SPI_MspInit+0x1c0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d144      	bne.n	8001a2c <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019a2:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <HAL_SPI_MspInit+0x1b0>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ea:	230c      	movs	r3, #12
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019fa:	2305      	movs	r3, #5
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a02:	4619      	mov	r1, r3
 8001a04:	4811      	ldr	r0, [pc, #68]	; (8001a4c <HAL_SPI_MspInit+0x1c4>)
 8001a06:	f000 fd83 	bl	8002510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a1c:	2305      	movs	r3, #5
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_SPI_MspInit+0x1b4>)
 8001a28:	f000 fd72 	bl	8002510 <HAL_GPIO_Init>
}
 8001a2c:	bf00      	nop
 8001a2e:	3738      	adds	r7, #56	; 0x38
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013000 	.word	0x40013000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	20000124 	.word	0x20000124
 8001a44:	40020030 	.word	0x40020030
 8001a48:	40003800 	.word	0x40003800
 8001a4c:	48000800 	.word	0x48000800

08001a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x44>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x44>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6613      	str	r3, [r2, #96]	; 0x60
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x44>)
 8001a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_MspInit+0x44>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_MspInit+0x44>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000

08001a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aec:	f000 f984 	bl	8001df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Channel3_IRQHandler+0x10>)
 8001afa:	f000 fc2a 	bl	8002352 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000124 	.word	0x20000124

08001b08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <SPI1_IRQHandler+0x10>)
 8001b0e:	f001 ffdb 	bl	8003ac8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200000c0 	.word	0x200000c0

08001b1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <SystemInit+0x64>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <SystemInit+0x64>)
 8001b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <SystemInit+0x68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <SystemInit+0x68>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <SystemInit+0x68>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <SystemInit+0x68>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <SystemInit+0x68>)
 8001b48:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b4c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b50:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <SystemInit+0x68>)
 8001b54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b58:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <SystemInit+0x68>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <SystemInit+0x68>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <SystemInit+0x68>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SystemInit+0x64>)
 8001b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b72:	609a      	str	r2, [r3, #8]
#endif
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	40021000 	.word	0x40021000

08001b88 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bae:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <MX_TIM3_Init+0xb0>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bb4:	224f      	movs	r2, #79	; 0x4f
 8001bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bd2:	4818      	ldr	r0, [pc, #96]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bd4:	f002 fa7e 	bl	80040d4 <HAL_TIM_PWM_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001bde:	f7ff fdd0 	bl	8001782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4810      	ldr	r0, [pc, #64]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001bf2:	f003 f873 	bl	8004cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001bfc:	f7ff fdc1 	bl	8001782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c00:	2360      	movs	r3, #96	; 0x60
 8001c02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c10:	463b      	mov	r3, r7
 8001c12:	220c      	movs	r2, #12
 8001c14:	4619      	mov	r1, r3
 8001c16:	4807      	ldr	r0, [pc, #28]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001c18:	f002 fbba 	bl	8004390 <HAL_TIM_PWM_ConfigChannel>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001c22:	f7ff fdae 	bl	8001782 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <MX_TIM3_Init+0xac>)
 8001c28:	f000 f828 	bl	8001c7c <HAL_TIM_MspPostInit>

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000016c 	.word	0x2000016c
 8001c38:	40000400 	.word	0x40000400

08001c3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_TIM_PWM_MspInit+0x38>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10b      	bne.n	8001c66 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40021000 	.word	0x40021000

08001c7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_TIM_MspPostInit+0x64>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_TIM_MspPostInit+0x68>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_TIM_MspPostInit+0x68>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_TIM_MspPostInit+0x68>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_TIM_MspPostInit+0x6c>)
 8001cd4:	f000 fc1c 	bl	8002510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40000400 	.word	0x40000400
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	48000800 	.word	0x48000800

08001cec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf0:	f7ff ff14 	bl	8001b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cf4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cf6:	e003      	b.n	8001d00 <LoopCopyDataInit>

08001cf8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cfa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001cfc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cfe:	3104      	adds	r1, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d08:	d3f6      	bcc.n	8001cf8 <CopyDataInit>
	ldr	r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d0c:	e002      	b.n	8001d14 <LoopFillZerobss>

08001d0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d10:	f842 3b04 	str.w	r3, [r2], #4

08001d14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <LoopForever+0x16>)
	cmp	r2, r3
 8001d16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d18:	d3f9      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f003 f867 	bl	8004dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1e:	f7ff fba3 	bl	8001468 <main>

08001d22 <LoopForever>:

LoopForever:
    b LoopForever
 8001d22:	e7fe      	b.n	8001d22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d24:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001d28:	080060a8 	.word	0x080060a8
	ldr	r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d30:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001d34:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001d38:	200001bc 	.word	0x200001bc

08001d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_2_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_Init+0x3c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_Init+0x3c>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d56:	2003      	movs	r0, #3
 8001d58:	f000 f960 	bl	800201c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f80f 	bl	8001d80 <HAL_InitTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	71fb      	strb	r3, [r7, #7]
 8001d6c:	e001      	b.n	8001d72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d6e:	f7ff fe6f 	bl	8001a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d72:	79fb      	ldrb	r3, [r7, #7]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_InitTick+0x6c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d023      	beq.n	8001ddc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_InitTick+0x70>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b14      	ldr	r3, [pc, #80]	; (8001dec <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f96b 	bl	8002086 <HAL_SYSTICK_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d809      	bhi.n	8001dd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f935 	bl	8002032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_InitTick+0x74>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e004      	b.n	8001de0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	e001      	b.n	8001de0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000004 	.word	0x20000004
 8001df4:	20000008 	.word	0x20000008

08001df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x20>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x24>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_IncTick+0x24>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	200001b8 	.word	0x200001b8

08001e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTick;
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetTick+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	200001b8 	.word	0x200001b8

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffee 	bl	8001e20 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_Delay+0x40>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffde 	bl	8001e20 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <__NVIC_EnableIRQ+0x38>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe8:	d301      	bcc.n	8001fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fea:	2301      	movs	r3, #1
 8001fec:	e00f      	b.n	800200e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fee:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <SysTick_Config+0x40>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffc:	f7ff ff8e 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <SysTick_Config+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SysTick_Config+0x40>)
 8002008:	2207      	movs	r2, #7
 800200a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	e000e010 	.word	0xe000e010

0800201c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff29 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002044:	f7ff ff3e 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	6978      	ldr	r0, [r7, #20]
 8002050:	f7ff ff8e 	bl	8001f70 <NVIC_EncodePriority>
 8002054:	4602      	mov	r2, r0
 8002056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff ff31 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b082      	sub	sp, #8
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffa2 	bl	8001fd8 <SysTick_Config>
 8002094:	4603      	mov	r3, r0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e098      	b.n	80021e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b4d      	ldr	r3, [pc, #308]	; (80021f0 <HAL_DMA_Init+0x150>)
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d80f      	bhi.n	80020de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b4b      	ldr	r3, [pc, #300]	; (80021f4 <HAL_DMA_Init+0x154>)
 80020c6:	4413      	add	r3, r2
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_DMA_Init+0x158>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	009a      	lsls	r2, r3, #2
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a48      	ldr	r2, [pc, #288]	; (80021fc <HAL_DMA_Init+0x15c>)
 80020da:	641a      	str	r2, [r3, #64]	; 0x40
 80020dc:	e00e      	b.n	80020fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_DMA_Init+0x160>)
 80020e6:	4413      	add	r3, r2
 80020e8:	4a43      	ldr	r2, [pc, #268]	; (80021f8 <HAL_DMA_Init+0x158>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	009a      	lsls	r2, r3, #2
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_DMA_Init+0x164>)
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002156:	d039      	beq.n	80021cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HAL_DMA_Init+0x15c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11a      	bne.n	8002198 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_DMA_Init+0x168>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f003 031c 	and.w	r3, r3, #28
 800216e:	210f      	movs	r1, #15
 8002170:	fa01 f303 	lsl.w	r3, r1, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	4924      	ldr	r1, [pc, #144]	; (8002208 <HAL_DMA_Init+0x168>)
 8002178:	4013      	ands	r3, r2
 800217a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_DMA_Init+0x168>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	f003 031c 	and.w	r3, r3, #28
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	491d      	ldr	r1, [pc, #116]	; (8002208 <HAL_DMA_Init+0x168>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
 8002196:	e019      	b.n	80021cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002198:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_DMA_Init+0x16c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f003 031c 	and.w	r3, r3, #28
 80021a4:	210f      	movs	r1, #15
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	4917      	ldr	r1, [pc, #92]	; (800220c <HAL_DMA_Init+0x16c>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_DMA_Init+0x16c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 031c 	and.w	r3, r3, #28
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	4911      	ldr	r1, [pc, #68]	; (800220c <HAL_DMA_Init+0x16c>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40020407 	.word	0x40020407
 80021f4:	bffdfff8 	.word	0xbffdfff8
 80021f8:	cccccccd 	.word	0xcccccccd
 80021fc:	40020000 	.word	0x40020000
 8002200:	bffdfbf8 	.word	0xbffdfbf8
 8002204:	40020400 	.word	0x40020400
 8002208:	400200a8 	.word	0x400200a8
 800220c:	400204a8 	.word	0x400204a8

08002210 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_DMA_Start_IT+0x20>
 800222c:	2302      	movs	r3, #2
 800222e:	e04b      	b.n	80022c8 <HAL_DMA_Start_IT+0xb8>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d13a      	bne.n	80022ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f921 	bl	80024b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 020e 	orr.w	r2, r2, #14
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e00f      	b.n	80022a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0204 	bic.w	r2, r2, #4
 8002296:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 020a 	orr.w	r2, r2, #10
 80022a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e005      	b.n	80022c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d005      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2204      	movs	r2, #4
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e029      	b.n	8002348 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 020e 	bic.w	r2, r2, #14
 8002302:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002318:	f003 021c 	and.w	r2, r3, #28
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
    }
  }
  return status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f003 031c 	and.w	r3, r3, #28
 8002372:	2204      	movs	r2, #4
 8002374:	409a      	lsls	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d026      	beq.n	80023cc <HAL_DMA_IRQHandler+0x7a>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0204 	bic.w	r2, r2, #4
 80023a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f003 021c 	and.w	r2, r3, #28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2104      	movs	r1, #4
 80023b4:	fa01 f202 	lsl.w	r2, r1, r2
 80023b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d071      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80023ca:	e06c      	b.n	80024a6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f003 031c 	and.w	r3, r3, #28
 80023d4:	2202      	movs	r2, #2
 80023d6:	409a      	lsls	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d02e      	beq.n	800243e <HAL_DMA_IRQHandler+0xec>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d029      	beq.n	800243e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 020a 	bic.w	r2, r2, #10
 8002406:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f003 021c 	and.w	r2, r3, #28
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	2102      	movs	r1, #2
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d038      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800243c:	e033      	b.n	80024a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 031c 	and.w	r3, r3, #28
 8002446:	2208      	movs	r2, #8
 8002448:	409a      	lsls	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02a      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x156>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d025      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020e 	bic.w	r2, r2, #14
 800246a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f003 021c 	and.w	r2, r3, #28
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
}
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f003 021c 	and.w	r2, r3, #28
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f202 	lsl.w	r2, r1, r2
 80024d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d108      	bne.n	80024f4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024f2:	e007      	b.n	8002504 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	e17f      	b.n	8002820 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2101      	movs	r1, #1
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	fa01 f303 	lsl.w	r3, r1, r3
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8171 	beq.w	800281a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d00b      	beq.n	8002558 <HAL_GPIO_Init+0x48>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d007      	beq.n	8002558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254c:	2b11      	cmp	r3, #17
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b12      	cmp	r3, #18
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d118      	bne.n	80025f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	4013      	ands	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x128>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b12      	cmp	r3, #18
 8002636:	d123      	bne.n	8002680 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	08da      	lsrs	r2, r3, #3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3208      	adds	r2, #8
 8002640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220f      	movs	r2, #15
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	08da      	lsrs	r2, r3, #3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3208      	adds	r2, #8
 800267a:	6939      	ldr	r1, [r7, #16]
 800267c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4013      	ands	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0203 	and.w	r2, r3, #3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80ac 	beq.w	800281a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c2:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_GPIO_Init+0x32c>)
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_GPIO_Init+0x32c>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6613      	str	r3, [r2, #96]	; 0x60
 80026ce:	4b5b      	ldr	r3, [pc, #364]	; (800283c <HAL_GPIO_Init+0x32c>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026da:	4a59      	ldr	r2, [pc, #356]	; (8002840 <HAL_GPIO_Init+0x330>)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4013      	ands	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002704:	d025      	beq.n	8002752 <HAL_GPIO_Init+0x242>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x334>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d01f      	beq.n	800274e <HAL_GPIO_Init+0x23e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x338>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d019      	beq.n	800274a <HAL_GPIO_Init+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x33c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x236>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00d      	beq.n	8002742 <HAL_GPIO_Init+0x232>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x344>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d007      	beq.n	800273e <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_GPIO_Init+0x348>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d101      	bne.n	800273a <HAL_GPIO_Init+0x22a>
 8002736:	2306      	movs	r3, #6
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800273a:	2307      	movs	r3, #7
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x244>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x244>
 8002752:	2300      	movs	r3, #0
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002764:	4936      	ldr	r1, [pc, #216]	; (8002840 <HAL_GPIO_Init+0x330>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_GPIO_Init+0x34c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002796:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_GPIO_Init+0x34c>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800279c:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_GPIO_Init+0x34c>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <HAL_GPIO_Init+0x34c>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_GPIO_Init+0x34c>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027ea:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_GPIO_Init+0x34c>)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_GPIO_Init+0x34c>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_GPIO_Init+0x34c>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3301      	adds	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	f47f ae78 	bne.w	8002520 <HAL_GPIO_Init+0x10>
  }
}
 8002830:	bf00      	nop
 8002832:	371c      	adds	r7, #28
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40021000 	.word	0x40021000
 8002840:	40010000 	.word	0x40010000
 8002844:	48000400 	.word	0x48000400
 8002848:	48000800 	.word	0x48000800
 800284c:	48000c00 	.word	0x48000c00
 8002850:	48001000 	.word	0x48001000
 8002854:	48001400 	.word	0x48001400
 8002858:	48001800 	.word	0x48001800
 800285c:	40010400 	.word	0x40010400

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800287c:	e002      	b.n	8002884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287e:	887a      	ldrh	r2, [r7, #2]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40007000 	.word	0x40007000

080028ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ba:	d130      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c8:	d038      	beq.n	800293c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2232      	movs	r2, #50	; 0x32
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	0c9b      	lsrs	r3, r3, #18
 80028ec:	3301      	adds	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f0:	e002      	b.n	80028f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002904:	d102      	bne.n	800290c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f2      	bne.n	80028f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d110      	bne.n	800293c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e00f      	b.n	800293e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d007      	beq.n	800293c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800292c:	4b07      	ldr	r3, [pc, #28]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002934:	4a05      	ldr	r2, [pc, #20]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40007000 	.word	0x40007000
 8002950:	20000004 	.word	0x20000004
 8002954:	431bde83 	.word	0x431bde83

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e3d4      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800296a:	4ba1      	ldr	r3, [pc, #644]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002974:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80e4 	beq.w	8002b54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4a>
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b0c      	cmp	r3, #12
 8002996:	f040 808b 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b01      	cmp	r3, #1
 800299e:	f040 8087 	bne.w	8002ab0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029a2:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_RCC_OscConfig+0x62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e3ac      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	4b8c      	ldr	r3, [pc, #560]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <HAL_RCC_OscConfig+0x7c>
 80029ca:	4b89      	ldr	r3, [pc, #548]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d2:	e005      	b.n	80029e0 <HAL_RCC_OscConfig+0x88>
 80029d4:	4b86      	ldr	r3, [pc, #536]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d223      	bcs.n	8002a2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fd07 	bl	80033fc <RCC_SetFlashLatencyFromMSIRange>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e38d      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f8:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a7c      	ldr	r2, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4977      	ldr	r1, [pc, #476]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a16:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4972      	ldr	r1, [pc, #456]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
 8002a2a:	e025      	b.n	8002a78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6f      	ldr	r2, [pc, #444]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a32:	f043 0308 	orr.w	r3, r3, #8
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	496a      	ldr	r1, [pc, #424]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a4a:	4b69      	ldr	r3, [pc, #420]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4965      	ldr	r1, [pc, #404]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fcc7 	bl	80033fc <RCC_SetFlashLatencyFromMSIRange>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e34d      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a78:	f000 fc36 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	4a5a      	ldr	r2, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x29c>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa21 f303 	lsr.w	r3, r1, r3
 8002a94:	4a58      	ldr	r2, [pc, #352]	; (8002bf8 <HAL_RCC_OscConfig+0x2a0>)
 8002a96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a98:	4b58      	ldr	r3, [pc, #352]	; (8002bfc <HAL_RCC_OscConfig+0x2a4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff f96f 	bl	8001d80 <HAL_InitTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d052      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	e331      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d032      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a4c      	ldr	r2, [pc, #304]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ac4:	f7ff f9ac 	bl	8001e20 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002acc:	f7ff f9a8 	bl	8001e20 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e31a      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ade:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aea:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	493b      	ldr	r1, [pc, #236]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
 8002b1c:	e01a      	b.n	8002b54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f979 	bl	8001e20 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b32:	f7ff f975 	bl	8001e20 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e2e7      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x1da>
 8002b50:	e000      	b.n	8002b54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d074      	beq.n	8002c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x21a>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b0c      	cmp	r3, #12
 8002b6a:	d10e      	bne.n	8002b8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d064      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d160      	bne.n	8002c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e2c4      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x24a>
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	e01d      	b.n	8002bde <HAL_RCC_OscConfig+0x286>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x26e>
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0f      	ldr	r2, [pc, #60]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e00b      	b.n	8002bde <HAL_RCC_OscConfig+0x286>
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x298>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7ff f91b 	bl	8001e20 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bec:	e011      	b.n	8002c12 <HAL_RCC_OscConfig+0x2ba>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	08005e88 	.word	0x08005e88
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff f90e 	bl	8001e20 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e280      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c12:	4baf      	ldr	r3, [pc, #700]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x2a8>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f8fe 	bl	8001e20 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff f8fa 	bl	8001e20 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e26c      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3a:	4ba5      	ldr	r3, [pc, #660]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x2d0>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d060      	beq.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x310>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d119      	bne.n	8002c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d116      	bne.n	8002c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c68:	4b99      	ldr	r3, [pc, #612]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_OscConfig+0x328>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e249      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b93      	ldr	r3, [pc, #588]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	4990      	ldr	r1, [pc, #576]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c94:	e040      	b.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d023      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9e:	4b8c      	ldr	r3, [pc, #560]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a8b      	ldr	r2, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7ff f8b9 	bl	8001e20 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7ff f8b5 	bl	8001e20 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e227      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc4:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	061b      	lsls	r3, r3, #24
 8002cde:	497c      	ldr	r1, [pc, #496]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	604b      	str	r3, [r1, #4]
 8002ce4:	e018      	b.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce6:	4b7a      	ldr	r3, [pc, #488]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a79      	ldr	r2, [pc, #484]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7ff f895 	bl	8001e20 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfa:	f7ff f891 	bl	8001e20 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e203      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d0c:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d03c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d01c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d32:	4a67      	ldr	r2, [pc, #412]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7ff f870 	bl	8001e20 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d44:	f7ff f86c 	bl	8001e20 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1de      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d56:	4b5e      	ldr	r3, [pc, #376]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0ef      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3ec>
 8002d64:	e01b      	b.n	8002d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d66:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d6e:	f023 0301 	bic.w	r3, r3, #1
 8002d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7ff f853 	bl	8001e20 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7ff f84f 	bl	8001e20 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1c1      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ef      	bne.n	8002d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80a6 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002db0:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbc:	4b44      	ldr	r3, [pc, #272]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_RCC_OscConfig+0x57c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d118      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de4:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HAL_RCC_OscConfig+0x57c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <HAL_RCC_OscConfig+0x57c>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df0:	f7ff f816 	bl	8001e20 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df8:	f7ff f812 	bl	8001e20 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e184      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCC_OscConfig+0x57c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d108      	bne.n	8002e30 <HAL_RCC_OscConfig+0x4d8>
 8002e1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e2e:	e024      	b.n	8002e7a <HAL_RCC_OscConfig+0x522>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d110      	bne.n	8002e5a <HAL_RCC_OscConfig+0x502>
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	4a20      	ldr	r2, [pc, #128]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e58:	e00f      	b.n	8002e7a <HAL_RCC_OscConfig+0x522>
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002e72:	f023 0304 	bic.w	r3, r3, #4
 8002e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe ffcd 	bl	8001e20 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe ffc9 	bl	8001e20 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e139      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0ed      	beq.n	8002e8a <HAL_RCC_OscConfig+0x532>
 8002eae:	e01a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ffb6 	bl	8001e20 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb6:	e00f      	b.n	8002ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe ffb2 	bl	8001e20 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d906      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e122      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed8:	4b90      	ldr	r3, [pc, #576]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e8      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee6:	7ffb      	ldrb	r3, [r7, #31]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d105      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eec:	4b8b      	ldr	r3, [pc, #556]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	4a8a      	ldr	r2, [pc, #552]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8108 	beq.w	8003112 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	f040 80d0 	bne.w	80030ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f0c:	4b83      	ldr	r3, [pc, #524]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d130      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d127      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d11f      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f4c:	2a07      	cmp	r2, #7
 8002f4e:	bf14      	ite	ne
 8002f50:	2201      	movne	r2, #1
 8002f52:	2200      	moveq	r2, #0
 8002f54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d113      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d06e      	beq.n	8003060 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d069      	beq.n	800305c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f88:	4b64      	ldr	r3, [pc, #400]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f94:	4b61      	ldr	r3, [pc, #388]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b7      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fa4:	4b5d      	ldr	r3, [pc, #372]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a5c      	ldr	r2, [pc, #368]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fb0:	f7fe ff36 	bl	8001e20 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe ff32 	bl	8001e20 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0a4      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fca:	4b54      	ldr	r3, [pc, #336]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <HAL_RCC_OscConfig+0x7c8>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ff0:	0212      	lsls	r2, r2, #8
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	0552      	lsls	r2, r2, #21
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	3a01      	subs	r2, #1
 8003008:	0652      	lsls	r2, r2, #25
 800300a:	4311      	orrs	r1, r2
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003010:	0912      	lsrs	r2, r2, #4
 8003012:	0452      	lsls	r2, r2, #17
 8003014:	430a      	orrs	r2, r1
 8003016:	4941      	ldr	r1, [pc, #260]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800301c:	4b3f      	ldr	r3, [pc, #252]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3e      	ldr	r2, [pc, #248]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003028:	4b3c      	ldr	r3, [pc, #240]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003032:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003034:	f7fe fef4 	bl	8001e20 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fe fef0 	bl	8001e20 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e062      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b33      	ldr	r3, [pc, #204]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800305a:	e05a      	b.n	8003112 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e059      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d152      	bne.n	8003112 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003076:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a27      	ldr	r2, [pc, #156]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003082:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003084:	f7fe fecc 	bl	8001e20 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fec8 	bl	8001e20 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e03a      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	4b1f      	ldr	r3, [pc, #124]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x734>
 80030aa:	e032      	b.n	8003112 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d02d      	beq.n	800310e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a19      	ldr	r2, [pc, #100]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030d0:	f023 0303 	bic.w	r3, r3, #3
 80030d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030d6:	4b11      	ldr	r3, [pc, #68]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a10      	ldr	r2, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 80030dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fe fe9b 	bl	8001e20 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fe97 	bl	8001e20 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e009      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_OscConfig+0x7c4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x796>
 800310c:	e001      	b.n	8003112 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3720      	adds	r7, #32
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	f99d808c 	.word	0xf99d808c

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0c8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4961      	ldr	r1, [pc, #388]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b5f      	ldr	r3, [pc, #380]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b0      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d04c      	beq.n	800320e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317c:	4b56      	ldr	r3, [pc, #344]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d121      	bne.n	80031cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e09e      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e092      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ac:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e086      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e07e      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031cc:	4b42      	ldr	r3, [pc, #264]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f023 0203 	bic.w	r2, r3, #3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	493f      	ldr	r1, [pc, #252]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031de:	f7fe fe1f 	bl	8001e20 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fe fe1b 	bl	8001e20 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e066      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fc:	4b36      	ldr	r3, [pc, #216]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 020c 	and.w	r2, r3, #12
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	429a      	cmp	r2, r3
 800320c:	d1eb      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800321a:	4b2f      	ldr	r3, [pc, #188]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	492c      	ldr	r1, [pc, #176]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003228:	4313      	orrs	r3, r2
 800322a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d210      	bcs.n	800325c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f023 0207 	bic.w	r2, r3, #7
 8003242:	4924      	ldr	r1, [pc, #144]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x1b0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e036      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4918      	ldr	r1, [pc, #96]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4910      	ldr	r1, [pc, #64]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329a:	f000 f825 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 800329e:	4601      	mov	r1, r0
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	5cd3      	ldrb	r3, [r2, r3]
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	fa21 f303 	lsr.w	r3, r1, r3
 80032b6:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd5e 	bl	8001d80 <HAL_InitTick>
 80032c4:	4603      	mov	r3, r0
 80032c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80032c8:	7afb      	ldrb	r3, [r7, #11]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
 80032dc:	08005e88 	.word	0x08005e88
 80032e0:	20000004 	.word	0x20000004
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f6:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	d121      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d11e      	bne.n	800335a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800331c:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e005      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10d      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003358:	e00a      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d102      	bne.n	8003366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e004      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d101      	bne.n	8003370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800336e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b0c      	cmp	r3, #12
 8003374:	d133      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0xa4>
 8003386:	2b03      	cmp	r3, #3
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0xaa>
 800338a:	e005      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800338c:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800338e:	617b      	str	r3, [r7, #20]
      break;
 8003390:	e005      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003394:	617b      	str	r3, [r7, #20]
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	617b      	str	r3, [r7, #20]
      break;
 800339c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	3301      	adds	r3, #1
 80033aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	fb02 f203 	mul.w	r2, r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_GetSysClockFreq+0x104>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	0e5b      	lsrs	r3, r3, #25
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033de:	69bb      	ldr	r3, [r7, #24]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3724      	adds	r7, #36	; 0x24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	40021000 	.word	0x40021000
 80033f0:	08005e98 	.word	0x08005e98
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	007a1200 	.word	0x007a1200

080033fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003414:	f7ff fa3c 	bl	8002890 <HAL_PWREx_GetVoltageRange>
 8003418:	6178      	str	r0, [r7, #20]
 800341a:	e014      	b.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003426:	6593      	str	r3, [r2, #88]	; 0x58
 8003428:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003434:	f7ff fa2c 	bl	8002890 <HAL_PWREx_GetVoltageRange>
 8003438:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800343a:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003444:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344c:	d10b      	bne.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	; 0x80
 8003452:	d919      	bls.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2ba0      	cmp	r3, #160	; 0xa0
 8003458:	d902      	bls.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345a:	2302      	movs	r3, #2
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e013      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003460:	2301      	movs	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e010      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b80      	cmp	r3, #128	; 0x80
 800346a:	d902      	bls.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800346c:	2303      	movs	r3, #3
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	e00a      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d102      	bne.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003478:	2302      	movs	r3, #2
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	e004      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b70      	cmp	r3, #112	; 0x70
 8003482:	d101      	bne.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003484:	2301      	movs	r3, #1
 8003486:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0207 	bic.w	r2, r3, #7
 8003490:	4909      	ldr	r1, [pc, #36]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40022000 	.word	0x40022000

080034bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e095      	b.n	80035fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d108      	bne.n	80034e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034de:	d009      	beq.n	80034f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]
 80034e6:	e005      	b.n	80034f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe f9ba 	bl	8001888 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003534:	d902      	bls.n	800353c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e002      	b.n	8003542 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800353c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003540:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800354a:	d007      	beq.n	800355c <HAL_SPI_Init+0xa0>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003554:	d002      	beq.n	800355c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359e:	ea42 0103 	orr.w	r1, r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	f003 0204 	and.w	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035d8:	ea42 0103 	orr.w	r1, r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b088      	sub	sp, #32
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_SPI_Transmit+0x22>
 8003620:	2302      	movs	r3, #2
 8003622:	e158      	b.n	80038d6 <HAL_SPI_Transmit+0x2d4>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800362c:	f7fe fbf8 	bl	8001e20 <HAL_GetTick>
 8003630:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d002      	beq.n	8003648 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003646:	e13d      	b.n	80038c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_SPI_Transmit+0x52>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003658:	e134      	b.n	80038c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2203      	movs	r2, #3
 800365e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	88fa      	ldrh	r2, [r7, #6]
 8003672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	d10f      	bne.n	80036c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	d007      	beq.n	80036e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036ec:	d94b      	bls.n	8003786 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_SPI_Transmit+0xfa>
 80036f6:	8afb      	ldrh	r3, [r7, #22]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d13e      	bne.n	800377a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003720:	e02b      	b.n	800377a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b02      	cmp	r3, #2
 800372e:	d112      	bne.n	8003756 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	881a      	ldrh	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	1c9a      	adds	r2, r3, #2
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003754:	e011      	b.n	800377a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003756:	f7fe fb63 	bl	8001e20 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d803      	bhi.n	800376e <HAL_SPI_Transmit+0x16c>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d102      	bne.n	8003774 <HAL_SPI_Transmit+0x172>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003778:	e0a4      	b.n	80038c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ce      	bne.n	8003722 <HAL_SPI_Transmit+0x120>
 8003784:	e07c      	b.n	8003880 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_SPI_Transmit+0x192>
 800378e:	8afb      	ldrh	r3, [r7, #22]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d170      	bne.n	8003876 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d912      	bls.n	80037c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	881a      	ldrh	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	1c9a      	adds	r2, r3, #2
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b02      	subs	r3, #2
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037c2:	e058      	b.n	8003876 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	7812      	ldrb	r2, [r2, #0]
 80037d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037ea:	e044      	b.n	8003876 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d12b      	bne.n	8003852 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d912      	bls.n	800382a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b02      	subs	r3, #2
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003828:	e025      	b.n	8003876 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003850:	e011      	b.n	8003876 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003852:	f7fe fae5 	bl	8001e20 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d803      	bhi.n	800386a <HAL_SPI_Transmit+0x268>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d102      	bne.n	8003870 <HAL_SPI_Transmit+0x26e>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d102      	bne.n	8003876 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003874:	e026      	b.n	80038c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1b5      	bne.n	80037ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	6839      	ldr	r1, [r7, #0]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fbdf 	bl	8004048 <SPI_EndRxTxTransaction>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10a      	bne.n	80038b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800389e:	2300      	movs	r3, #0
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	77fb      	strb	r3, [r7, #31]
 80038c0:	e000      	b.n	80038c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_SPI_Transmit_DMA+0x20>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0d8      	b.n	8003ab2 <HAL_SPI_Transmit_DMA+0x1d2>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	d002      	beq.n	800391a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003914:	2302      	movs	r3, #2
 8003916:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003918:	e0c6      	b.n	8003aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit_DMA+0x46>
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    goto error;
 800392a:	e0bd      	b.n	8003aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2203      	movs	r2, #3
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d10f      	bne.n	8003998 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	4a47      	ldr	r2, [pc, #284]	; (8003abc <HAL_SPI_Transmit_DMA+0x1dc>)
 800399e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	4a46      	ldr	r2, [pc, #280]	; (8003ac0 <HAL_SPI_Transmit_DMA+0x1e0>)
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ac:	4a45      	ldr	r2, [pc, #276]	; (8003ac4 <HAL_SPI_Transmit_DMA+0x1e4>)
 80039ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039c6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d0:	d82d      	bhi.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d127      	bne.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	085b      	lsrs	r3, r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a0a:	e010      	b.n	8003a2e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a1a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	085b      	lsrs	r3, r3, #1
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3301      	adds	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	4619      	mov	r1, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003a46:	f7fe fbe3 	bl	8002210 <HAL_DMA_Start_IT>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00c      	beq.n	8003a6a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003a68:	e01e      	b.n	8003aa8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b40      	cmp	r3, #64	; 0x40
 8003a76:	d007      	beq.n	8003a88 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a86:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0220 	orr.w	r2, r2, #32
 8003a96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0202 	orr.w	r2, r2, #2
 8003aa6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	08003d97 	.word	0x08003d97
 8003ac0:	08003cf1 	.word	0x08003cf1
 8003ac4:	08003db3 	.word	0x08003db3

08003ac8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    return;
 8003b0a:	e0d8      	b.n	8003cbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_SPI_IRQHandler+0x66>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	09db      	lsrs	r3, r3, #7
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d004      	beq.n	8003b2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
    return;
 8003b2c:	e0c7      	b.n	8003cbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_SPI_IRQHandler+0x8c>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	099b      	lsrs	r3, r3, #6
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80b5 	beq.w	8003cbe <HAL_SPI_IRQHandler+0x1f6>
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80ae 	beq.w	8003cbe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	099b      	lsrs	r3, r3, #6
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d023      	beq.n	8003bb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d011      	beq.n	8003b9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	e00b      	b.n	8003bb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	693b      	ldr	r3, [r7, #16]
        return;
 8003bb4:	e083      	b.n	8003cbe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	0a1b      	lsrs	r3, r3, #8
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfc:	f043 0208 	orr.w	r2, r3, #8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d050      	beq.n	8003cbc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <HAL_SPI_IRQHandler+0x17e>
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d034      	beq.n	8003cb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0203 	bic.w	r2, r2, #3
 8003c54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d011      	beq.n	8003c82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe fb30 	bl	80022d0 <HAL_DMA_Abort_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	4a0d      	ldr	r2, [pc, #52]	; (8003cc4 <HAL_SPI_IRQHandler+0x1fc>)
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fb1a 	bl	80022d0 <HAL_DMA_Abort_IT>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003cae:	e003      	b.n	8003cb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f813 	bl	8003cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cb6:	e000      	b.n	8003cba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003cb8:	bf00      	nop
    return;
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
  }
}
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	08003df3 	.word	0x08003df3

08003cc8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cfe:	f7fe f88f 	bl	8001e20 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d03b      	beq.n	8003d8a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0220 	bic.w	r2, r2, #32
 8003d20:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0202 	bic.w	r2, r2, #2
 8003d30:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	2164      	movs	r1, #100	; 0x64
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f000 f986 	bl	8004048 <SPI_EndRxTxTransaction>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003d82:	6978      	ldr	r0, [r7, #20]
 8003d84:	f7ff ffaa 	bl	8003cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d88:	e002      	b.n	8003d90 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7fd fb06 	bl	800139c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7ff ff8f 	bl	8003cc8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0203 	bic.w	r2, r2, #3
 8003dce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd4:	f043 0210 	orr.w	r2, r3, #16
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7ff ff79 	bl	8003cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f7ff ff64 	bl	8003cdc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e2c:	f7fd fff8 	bl	8001e20 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	4413      	add	r3, r2
 8003e3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e3c:	f7fd fff0 	bl	8001e20 <HAL_GetTick>
 8003e40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e42:	4b39      	ldr	r3, [pc, #228]	; (8003f28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e52:	e054      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d050      	beq.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5c:	f7fd ffe0 	bl	8001e20 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d902      	bls.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13d      	bne.n	8003eee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e8a:	d111      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	d004      	beq.n	8003ea0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9e:	d107      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb8:	d10f      	bne.n	8003eda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e017      	b.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d19b      	bne.n	8003e54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000004 	.word	0x20000004

08003f2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f3a:	f7fd ff71 	bl	8001e20 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f4a:	f7fd ff69 	bl	8001e20 <HAL_GetTick>
 8003f4e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f50:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	00da      	lsls	r2, r3, #3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	0d1b      	lsrs	r3, r3, #20
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f68:	e05f      	b.n	800402a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f70:	d106      	bne.n	8003f80 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f86:	d050      	beq.n	800402a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f88:	f7fd ff4a 	bl	8001e20 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d902      	bls.n	8003f9e <SPI_WaitFifoStateUntilTimeout+0x72>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d13d      	bne.n	800401a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb6:	d111      	bne.n	8003fdc <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	d004      	beq.n	8003fcc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d107      	bne.n	8003fdc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d10f      	bne.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e010      	b.n	800403c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	3b01      	subs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	429a      	cmp	r2, r3
 8004038:	d197      	bne.n	8003f6a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000004 	.word	0x20000004

08004048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ff63 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	f043 0220 	orr.w	r2, r3, #32
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e027      	b.n	80040cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f7ff fec8 	bl	8003e1c <SPI_WaitFlagStateUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e014      	b.n	80040cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff3c 	bl	8003f2c <SPI_WaitFifoStateUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f043 0220 	orr.w	r2, r3, #32
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e000      	b.n	80040cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e049      	b.n	800417a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fd fd9e 	bl	8001c3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f000 fa4c 	bl	80045b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <HAL_TIM_PWM_Start+0x24>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e03c      	b.n	8004222 <HAL_TIM_PWM_Start+0x9e>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d109      	bne.n	80041c2 <HAL_TIM_PWM_Start+0x3e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	e02f      	b.n	8004222 <HAL_TIM_PWM_Start+0x9e>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start+0x58>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e022      	b.n	8004222 <HAL_TIM_PWM_Start+0x9e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d109      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x72>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e015      	b.n	8004222 <HAL_TIM_PWM_Start+0x9e>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start+0x8c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e008      	b.n	8004222 <HAL_TIM_PWM_Start+0x9e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	bf14      	ite	ne
 800421c:	2301      	movne	r3, #1
 800421e:	2300      	moveq	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e09c      	b.n	8004364 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xb6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004238:	e023      	b.n	8004282 <HAL_TIM_PWM_Start+0xfe>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0xc6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004248:	e01b      	b.n	8004282 <HAL_TIM_PWM_Start+0xfe>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0xd6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004258:	e013      	b.n	8004282 <HAL_TIM_PWM_Start+0xfe>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xe6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004268:	e00b      	b.n	8004282 <HAL_TIM_PWM_Start+0xfe>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d104      	bne.n	800427a <HAL_TIM_PWM_Start+0xf6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004278:	e003      	b.n	8004282 <HAL_TIM_PWM_Start+0xfe>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2201      	movs	r2, #1
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fd00 	bl	8004c90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a35      	ldr	r2, [pc, #212]	; (800436c <HAL_TIM_PWM_Start+0x1e8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x13e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_TIM_PWM_Start+0x1ec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x13e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a32      	ldr	r2, [pc, #200]	; (8004374 <HAL_TIM_PWM_Start+0x1f0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x13e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a31      	ldr	r2, [pc, #196]	; (8004378 <HAL_TIM_PWM_Start+0x1f4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIM_PWM_Start+0x13e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a2f      	ldr	r2, [pc, #188]	; (800437c <HAL_TIM_PWM_Start+0x1f8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x142>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_TIM_PWM_Start+0x144>
 80042c6:	2300      	movs	r3, #0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a22      	ldr	r2, [pc, #136]	; (800436c <HAL_TIM_PWM_Start+0x1e8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ee:	d018      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <HAL_TIM_PWM_Start+0x1fc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	; (8004384 <HAL_TIM_PWM_Start+0x200>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <HAL_TIM_PWM_Start+0x204>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	; (8004370 <HAL_TIM_PWM_Start+0x1ec>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_PWM_Start+0x19e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <HAL_TIM_PWM_Start+0x1f0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d115      	bne.n	800434e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_TIM_PWM_Start+0x208>)
 800432a:	4013      	ands	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d015      	beq.n	8004360 <HAL_TIM_PWM_Start+0x1dc>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433a:	d011      	beq.n	8004360 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	e008      	b.n	8004360 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e000      	b.n	8004362 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40013400 	.word	0x40013400
 8004374:	40014000 	.word	0x40014000
 8004378:	40014400 	.word	0x40014400
 800437c:	40014800 	.word	0x40014800
 8004380:	40000400 	.word	0x40000400
 8004384:	40000800 	.word	0x40000800
 8004388:	40000c00 	.word	0x40000c00
 800438c:	00010007 	.word	0x00010007

08004390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80043a6:	2302      	movs	r3, #2
 80043a8:	e0fd      	b.n	80045a6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b14      	cmp	r3, #20
 80043b6:	f200 80f0 	bhi.w	800459a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	08004415 	.word	0x08004415
 80043c4:	0800459b 	.word	0x0800459b
 80043c8:	0800459b 	.word	0x0800459b
 80043cc:	0800459b 	.word	0x0800459b
 80043d0:	08004455 	.word	0x08004455
 80043d4:	0800459b 	.word	0x0800459b
 80043d8:	0800459b 	.word	0x0800459b
 80043dc:	0800459b 	.word	0x0800459b
 80043e0:	08004497 	.word	0x08004497
 80043e4:	0800459b 	.word	0x0800459b
 80043e8:	0800459b 	.word	0x0800459b
 80043ec:	0800459b 	.word	0x0800459b
 80043f0:	080044d7 	.word	0x080044d7
 80043f4:	0800459b 	.word	0x0800459b
 80043f8:	0800459b 	.word	0x0800459b
 80043fc:	0800459b 	.word	0x0800459b
 8004400:	08004519 	.word	0x08004519
 8004404:	0800459b 	.word	0x0800459b
 8004408:	0800459b 	.word	0x0800459b
 800440c:	0800459b 	.word	0x0800459b
 8004410:	08004559 	.word	0x08004559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f962 	bl	80046e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0208 	orr.w	r2, r2, #8
 800442e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0204 	bic.w	r2, r2, #4
 800443e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6999      	ldr	r1, [r3, #24]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	619a      	str	r2, [r3, #24]
      break;
 8004452:	e0a3      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f9d2 	bl	8004804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	619a      	str	r2, [r3, #24]
      break;
 8004494:	e082      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fa3b 	bl	8004918 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	69da      	ldr	r2, [r3, #28]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0208 	orr.w	r2, r2, #8
 80044b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0204 	bic.w	r2, r2, #4
 80044c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	61da      	str	r2, [r3, #28]
      break;
 80044d4:	e062      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 faa3 	bl	8004a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	021a      	lsls	r2, r3, #8
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	61da      	str	r2, [r3, #28]
      break;
 8004516:	e041      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 faec 	bl	8004afc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0208 	orr.w	r2, r2, #8
 8004532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0204 	bic.w	r2, r2, #4
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004556:	e021      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fb30 	bl	8004bc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004582:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800459a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <TIM_Base_SetConfig+0x114>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d00f      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a3d      	ldr	r2, [pc, #244]	; (80046c8 <TIM_Base_SetConfig+0x118>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <TIM_Base_SetConfig+0x11c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3b      	ldr	r2, [pc, #236]	; (80046d0 <TIM_Base_SetConfig+0x120>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3a      	ldr	r2, [pc, #232]	; (80046d4 <TIM_Base_SetConfig+0x124>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d108      	bne.n	8004602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <TIM_Base_SetConfig+0x114>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d01f      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004610:	d01b      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <TIM_Base_SetConfig+0x118>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d017      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <TIM_Base_SetConfig+0x11c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <TIM_Base_SetConfig+0x120>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00f      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a29      	ldr	r2, [pc, #164]	; (80046d4 <TIM_Base_SetConfig+0x124>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00b      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <TIM_Base_SetConfig+0x128>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d007      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a27      	ldr	r2, [pc, #156]	; (80046dc <TIM_Base_SetConfig+0x12c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_Base_SetConfig+0x9a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <TIM_Base_SetConfig+0x130>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d108      	bne.n	800465c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4313      	orrs	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <TIM_Base_SetConfig+0x114>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00f      	beq.n	80046a8 <TIM_Base_SetConfig+0xf8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <TIM_Base_SetConfig+0x124>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00b      	beq.n	80046a8 <TIM_Base_SetConfig+0xf8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <TIM_Base_SetConfig+0x128>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d007      	beq.n	80046a8 <TIM_Base_SetConfig+0xf8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <TIM_Base_SetConfig+0x12c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_Base_SetConfig+0xf8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0f      	ldr	r2, [pc, #60]	; (80046e0 <TIM_Base_SetConfig+0x130>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	615a      	str	r2, [r3, #20]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40013400 	.word	0x40013400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40014400 	.word	0x40014400
 80046e0:	40014800 	.word	0x40014800

080046e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f023 0302 	bic.w	r3, r3, #2
 8004730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <TIM_OC1_SetConfig+0x10c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00f      	beq.n	8004764 <TIM_OC1_SetConfig+0x80>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <TIM_OC1_SetConfig+0x110>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_OC1_SetConfig+0x80>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <TIM_OC1_SetConfig+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_OC1_SetConfig+0x80>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a29      	ldr	r2, [pc, #164]	; (80047fc <TIM_OC1_SetConfig+0x118>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC1_SetConfig+0x80>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a28      	ldr	r2, [pc, #160]	; (8004800 <TIM_OC1_SetConfig+0x11c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10c      	bne.n	800477e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0308 	bic.w	r3, r3, #8
 800476a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <TIM_OC1_SetConfig+0x10c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_OC1_SetConfig+0xc2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <TIM_OC1_SetConfig+0x110>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_OC1_SetConfig+0xc2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <TIM_OC1_SetConfig+0x114>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_OC1_SetConfig+0xc2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <TIM_OC1_SetConfig+0x118>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC1_SetConfig+0xc2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <TIM_OC1_SetConfig+0x11c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d111      	bne.n	80047ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	621a      	str	r2, [r3, #32]
}
 80047e4:	bf00      	nop
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40014400 	.word	0x40014400
 8004800:	40014800 	.word	0x40014800

08004804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f023 0210 	bic.w	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0320 	bic.w	r3, r3, #32
 8004852:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a28      	ldr	r2, [pc, #160]	; (8004904 <TIM_OC2_SetConfig+0x100>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_OC2_SetConfig+0x6c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_OC2_SetConfig+0x104>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d10d      	bne.n	800488c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4313      	orrs	r3, r2
 8004882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <TIM_OC2_SetConfig+0x100>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00f      	beq.n	80048b4 <TIM_OC2_SetConfig+0xb0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <TIM_OC2_SetConfig+0x104>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_OC2_SetConfig+0xb0>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a1b      	ldr	r2, [pc, #108]	; (800490c <TIM_OC2_SetConfig+0x108>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_OC2_SetConfig+0xb0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <TIM_OC2_SetConfig+0x10c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_OC2_SetConfig+0xb0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a19      	ldr	r2, [pc, #100]	; (8004914 <TIM_OC2_SetConfig+0x110>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d113      	bne.n	80048dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40013400 	.word	0x40013400
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800

08004918 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004918:	b480      	push	{r7}
 800491a:	b087      	sub	sp, #28
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <TIM_OC3_SetConfig+0xfc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_OC3_SetConfig+0x6a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <TIM_OC3_SetConfig+0x100>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d10d      	bne.n	800499e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004988:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800499c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <TIM_OC3_SetConfig+0xfc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_OC3_SetConfig+0xae>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1b      	ldr	r2, [pc, #108]	; (8004a18 <TIM_OC3_SetConfig+0x100>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_OC3_SetConfig+0xae>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <TIM_OC3_SetConfig+0x104>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_OC3_SetConfig+0xae>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <TIM_OC3_SetConfig+0x108>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_OC3_SetConfig+0xae>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <TIM_OC3_SetConfig+0x10c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d113      	bne.n	80049ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	40014400 	.word	0x40014400
 8004a24:	40014800 	.word	0x40014800

08004a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <TIM_OC4_SetConfig+0xc0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00f      	beq.n	8004aac <TIM_OC4_SetConfig+0x84>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	; (8004aec <TIM_OC4_SetConfig+0xc4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00b      	beq.n	8004aac <TIM_OC4_SetConfig+0x84>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <TIM_OC4_SetConfig+0xc8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_OC4_SetConfig+0x84>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <TIM_OC4_SetConfig+0xcc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_OC4_SetConfig+0x84>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <TIM_OC4_SetConfig+0xd0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d109      	bne.n	8004ac0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	019b      	lsls	r3, r3, #6
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40013400 	.word	0x40013400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40014400 	.word	0x40014400
 8004af8:	40014800 	.word	0x40014800

08004afc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <TIM_OC5_SetConfig+0xb4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00f      	beq.n	8004b76 <TIM_OC5_SetConfig+0x7a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <TIM_OC5_SetConfig+0xb8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00b      	beq.n	8004b76 <TIM_OC5_SetConfig+0x7a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <TIM_OC5_SetConfig+0xbc>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <TIM_OC5_SetConfig+0x7a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <TIM_OC5_SetConfig+0xc0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d003      	beq.n	8004b76 <TIM_OC5_SetConfig+0x7a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <TIM_OC5_SetConfig+0xc4>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d109      	bne.n	8004b8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	621a      	str	r2, [r3, #32]
}
 8004ba4:	bf00      	nop
 8004ba6:	371c      	adds	r7, #28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40012c00 	.word	0x40012c00
 8004bb4:	40013400 	.word	0x40013400
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	051b      	lsls	r3, r3, #20
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <TIM_OC6_SetConfig+0xb8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d00f      	beq.n	8004c40 <TIM_OC6_SetConfig+0x7c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <TIM_OC6_SetConfig+0xbc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_OC6_SetConfig+0x7c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <TIM_OC6_SetConfig+0xc0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC6_SetConfig+0x7c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a15      	ldr	r2, [pc, #84]	; (8004c88 <TIM_OC6_SetConfig+0xc4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC6_SetConfig+0x7c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a14      	ldr	r2, [pc, #80]	; (8004c8c <TIM_OC6_SetConfig+0xc8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	029b      	lsls	r3, r3, #10
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400
 8004c84:	40014000 	.word	0x40014000
 8004c88:	40014400 	.word	0x40014400
 8004c8c:	40014800 	.word	0x40014800

08004c90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	401a      	ands	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6a1a      	ldr	r2, [r3, #32]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
	...

08004cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e068      	b.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d66:	d018      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a18      	ldr	r2, [pc, #96]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d10c      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40014000 	.word	0x40014000

08004dec <__libc_init_array>:
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4e0d      	ldr	r6, [pc, #52]	; (8004e24 <__libc_init_array+0x38>)
 8004df0:	4c0d      	ldr	r4, [pc, #52]	; (8004e28 <__libc_init_array+0x3c>)
 8004df2:	1ba4      	subs	r4, r4, r6
 8004df4:	10a4      	asrs	r4, r4, #2
 8004df6:	2500      	movs	r5, #0
 8004df8:	42a5      	cmp	r5, r4
 8004dfa:	d109      	bne.n	8004e10 <__libc_init_array+0x24>
 8004dfc:	4e0b      	ldr	r6, [pc, #44]	; (8004e2c <__libc_init_array+0x40>)
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <__libc_init_array+0x44>)
 8004e00:	f001 f834 	bl	8005e6c <_init>
 8004e04:	1ba4      	subs	r4, r4, r6
 8004e06:	10a4      	asrs	r4, r4, #2
 8004e08:	2500      	movs	r5, #0
 8004e0a:	42a5      	cmp	r5, r4
 8004e0c:	d105      	bne.n	8004e1a <__libc_init_array+0x2e>
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e14:	4798      	blx	r3
 8004e16:	3501      	adds	r5, #1
 8004e18:	e7ee      	b.n	8004df8 <__libc_init_array+0xc>
 8004e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e1e:	4798      	blx	r3
 8004e20:	3501      	adds	r5, #1
 8004e22:	e7f2      	b.n	8004e0a <__libc_init_array+0x1e>
 8004e24:	080060a0 	.word	0x080060a0
 8004e28:	080060a0 	.word	0x080060a0
 8004e2c:	080060a0 	.word	0x080060a0
 8004e30:	080060a4 	.word	0x080060a4

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <sin>:
 8004e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e4a:	ec51 0b10 	vmov	r0, r1, d0
 8004e4e:	4a20      	ldr	r2, [pc, #128]	; (8004ed0 <sin+0x88>)
 8004e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e54:	4293      	cmp	r3, r2
 8004e56:	dc07      	bgt.n	8004e68 <sin+0x20>
 8004e58:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004ec8 <sin+0x80>
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	f000 fe37 	bl	8005ad0 <__kernel_sin>
 8004e62:	ec51 0b10 	vmov	r0, r1, d0
 8004e66:	e007      	b.n	8004e78 <sin+0x30>
 8004e68:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <sin+0x8c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	dd09      	ble.n	8004e82 <sin+0x3a>
 8004e6e:	ee10 2a10 	vmov	r2, s0
 8004e72:	460b      	mov	r3, r1
 8004e74:	f7fb f9ac 	bl	80001d0 <__aeabi_dsub>
 8004e78:	ec41 0b10 	vmov	d0, r0, r1
 8004e7c:	b005      	add	sp, #20
 8004e7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e82:	4668      	mov	r0, sp
 8004e84:	f000 f828 	bl	8004ed8 <__ieee754_rem_pio2>
 8004e88:	f000 0003 	and.w	r0, r0, #3
 8004e8c:	2801      	cmp	r0, #1
 8004e8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e92:	ed9d 0b00 	vldr	d0, [sp]
 8004e96:	d004      	beq.n	8004ea2 <sin+0x5a>
 8004e98:	2802      	cmp	r0, #2
 8004e9a:	d005      	beq.n	8004ea8 <sin+0x60>
 8004e9c:	b970      	cbnz	r0, 8004ebc <sin+0x74>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e7dd      	b.n	8004e5e <sin+0x16>
 8004ea2:	f000 fa0d 	bl	80052c0 <__kernel_cos>
 8004ea6:	e7dc      	b.n	8004e62 <sin+0x1a>
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f000 fe11 	bl	8005ad0 <__kernel_sin>
 8004eae:	ec53 2b10 	vmov	r2, r3, d0
 8004eb2:	ee10 0a10 	vmov	r0, s0
 8004eb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eba:	e7dd      	b.n	8004e78 <sin+0x30>
 8004ebc:	f000 fa00 	bl	80052c0 <__kernel_cos>
 8004ec0:	e7f5      	b.n	8004eae <sin+0x66>
 8004ec2:	bf00      	nop
 8004ec4:	f3af 8000 	nop.w
	...
 8004ed0:	3fe921fb 	.word	0x3fe921fb
 8004ed4:	7fefffff 	.word	0x7fefffff

08004ed8 <__ieee754_rem_pio2>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	ec57 6b10 	vmov	r6, r7, d0
 8004ee0:	4bc3      	ldr	r3, [pc, #780]	; (80051f0 <__ieee754_rem_pio2+0x318>)
 8004ee2:	b08d      	sub	sp, #52	; 0x34
 8004ee4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004ee8:	4598      	cmp	r8, r3
 8004eea:	4604      	mov	r4, r0
 8004eec:	9704      	str	r7, [sp, #16]
 8004eee:	dc07      	bgt.n	8004f00 <__ieee754_rem_pio2+0x28>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	ed84 0b00 	vstr	d0, [r4]
 8004ef8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004efc:	2500      	movs	r5, #0
 8004efe:	e027      	b.n	8004f50 <__ieee754_rem_pio2+0x78>
 8004f00:	4bbc      	ldr	r3, [pc, #752]	; (80051f4 <__ieee754_rem_pio2+0x31c>)
 8004f02:	4598      	cmp	r8, r3
 8004f04:	dc75      	bgt.n	8004ff2 <__ieee754_rem_pio2+0x11a>
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	4dbb      	ldr	r5, [pc, #748]	; (80051f8 <__ieee754_rem_pio2+0x320>)
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	ee10 0a10 	vmov	r0, s0
 8004f10:	a3a9      	add	r3, pc, #676	; (adr r3, 80051b8 <__ieee754_rem_pio2+0x2e0>)
 8004f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f16:	4639      	mov	r1, r7
 8004f18:	dd36      	ble.n	8004f88 <__ieee754_rem_pio2+0xb0>
 8004f1a:	f7fb f959 	bl	80001d0 <__aeabi_dsub>
 8004f1e:	45a8      	cmp	r8, r5
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	d018      	beq.n	8004f58 <__ieee754_rem_pio2+0x80>
 8004f26:	a3a6      	add	r3, pc, #664	; (adr r3, 80051c0 <__ieee754_rem_pio2+0x2e8>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	f7fb f950 	bl	80001d0 <__aeabi_dsub>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	e9c4 2300 	strd	r2, r3, [r4]
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb f948 	bl	80001d0 <__aeabi_dsub>
 8004f40:	a39f      	add	r3, pc, #636	; (adr r3, 80051c0 <__ieee754_rem_pio2+0x2e8>)
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f7fb f943 	bl	80001d0 <__aeabi_dsub>
 8004f4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f4e:	2501      	movs	r5, #1
 8004f50:	4628      	mov	r0, r5
 8004f52:	b00d      	add	sp, #52	; 0x34
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	a39b      	add	r3, pc, #620	; (adr r3, 80051c8 <__ieee754_rem_pio2+0x2f0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb f937 	bl	80001d0 <__aeabi_dsub>
 8004f62:	a39b      	add	r3, pc, #620	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x2f8>)
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	f7fb f930 	bl	80001d0 <__aeabi_dsub>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	e9c4 2300 	strd	r2, r3, [r4]
 8004f78:	4630      	mov	r0, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	f7fb f928 	bl	80001d0 <__aeabi_dsub>
 8004f80:	a393      	add	r3, pc, #588	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x2f8>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e7de      	b.n	8004f46 <__ieee754_rem_pio2+0x6e>
 8004f88:	f7fb f924 	bl	80001d4 <__adddf3>
 8004f8c:	45a8      	cmp	r8, r5
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460f      	mov	r7, r1
 8004f92:	d016      	beq.n	8004fc2 <__ieee754_rem_pio2+0xea>
 8004f94:	a38a      	add	r3, pc, #552	; (adr r3, 80051c0 <__ieee754_rem_pio2+0x2e8>)
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f7fb f91b 	bl	80001d4 <__adddf3>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	e9c4 2300 	strd	r2, r3, [r4]
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	4639      	mov	r1, r7
 8004faa:	f7fb f911 	bl	80001d0 <__aeabi_dsub>
 8004fae:	a384      	add	r3, pc, #528	; (adr r3, 80051c0 <__ieee754_rem_pio2+0x2e8>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f7fb f90e 	bl	80001d4 <__adddf3>
 8004fb8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fc0:	e7c6      	b.n	8004f50 <__ieee754_rem_pio2+0x78>
 8004fc2:	a381      	add	r3, pc, #516	; (adr r3, 80051c8 <__ieee754_rem_pio2+0x2f0>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f7fb f904 	bl	80001d4 <__adddf3>
 8004fcc:	a380      	add	r3, pc, #512	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x2f8>)
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	f7fb f8fd 	bl	80001d4 <__adddf3>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	e9c4 2300 	strd	r2, r3, [r4]
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	f7fb f8f3 	bl	80001d0 <__aeabi_dsub>
 8004fea:	a379      	add	r3, pc, #484	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x2f8>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	e7e0      	b.n	8004fb4 <__ieee754_rem_pio2+0xdc>
 8004ff2:	4b82      	ldr	r3, [pc, #520]	; (80051fc <__ieee754_rem_pio2+0x324>)
 8004ff4:	4598      	cmp	r8, r3
 8004ff6:	f300 80d0 	bgt.w	800519a <__ieee754_rem_pio2+0x2c2>
 8004ffa:	f000 fe23 	bl	8005c44 <fabs>
 8004ffe:	ec57 6b10 	vmov	r6, r7, d0
 8005002:	ee10 0a10 	vmov	r0, s0
 8005006:	a374      	add	r3, pc, #464	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x300>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	4639      	mov	r1, r7
 800500e:	f7fb fa97 	bl	8000540 <__aeabi_dmul>
 8005012:	2200      	movs	r2, #0
 8005014:	4b7a      	ldr	r3, [pc, #488]	; (8005200 <__ieee754_rem_pio2+0x328>)
 8005016:	f7fb f8dd 	bl	80001d4 <__adddf3>
 800501a:	f7fb fd2b 	bl	8000a74 <__aeabi_d2iz>
 800501e:	4605      	mov	r5, r0
 8005020:	f7fb fa24 	bl	800046c <__aeabi_i2d>
 8005024:	a364      	add	r3, pc, #400	; (adr r3, 80051b8 <__ieee754_rem_pio2+0x2e0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502e:	f7fb fa87 	bl	8000540 <__aeabi_dmul>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4630      	mov	r0, r6
 8005038:	4639      	mov	r1, r7
 800503a:	f7fb f8c9 	bl	80001d0 <__aeabi_dsub>
 800503e:	a360      	add	r3, pc, #384	; (adr r3, 80051c0 <__ieee754_rem_pio2+0x2e8>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	4682      	mov	sl, r0
 8005046:	468b      	mov	fp, r1
 8005048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800504c:	f7fb fa78 	bl	8000540 <__aeabi_dmul>
 8005050:	2d1f      	cmp	r5, #31
 8005052:	4606      	mov	r6, r0
 8005054:	460f      	mov	r7, r1
 8005056:	dc0c      	bgt.n	8005072 <__ieee754_rem_pio2+0x19a>
 8005058:	1e6a      	subs	r2, r5, #1
 800505a:	4b6a      	ldr	r3, [pc, #424]	; (8005204 <__ieee754_rem_pio2+0x32c>)
 800505c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005060:	4543      	cmp	r3, r8
 8005062:	d006      	beq.n	8005072 <__ieee754_rem_pio2+0x19a>
 8005064:	4632      	mov	r2, r6
 8005066:	463b      	mov	r3, r7
 8005068:	4650      	mov	r0, sl
 800506a:	4659      	mov	r1, fp
 800506c:	f7fb f8b0 	bl	80001d0 <__aeabi_dsub>
 8005070:	e00e      	b.n	8005090 <__ieee754_rem_pio2+0x1b8>
 8005072:	4632      	mov	r2, r6
 8005074:	463b      	mov	r3, r7
 8005076:	4650      	mov	r0, sl
 8005078:	4659      	mov	r1, fp
 800507a:	f7fb f8a9 	bl	80001d0 <__aeabi_dsub>
 800507e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005082:	9305      	str	r3, [sp, #20]
 8005084:	9a05      	ldr	r2, [sp, #20]
 8005086:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b10      	cmp	r3, #16
 800508e:	dc02      	bgt.n	8005096 <__ieee754_rem_pio2+0x1be>
 8005090:	e9c4 0100 	strd	r0, r1, [r4]
 8005094:	e039      	b.n	800510a <__ieee754_rem_pio2+0x232>
 8005096:	a34c      	add	r3, pc, #304	; (adr r3, 80051c8 <__ieee754_rem_pio2+0x2f0>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a0:	f7fb fa4e 	bl	8000540 <__aeabi_dmul>
 80050a4:	4606      	mov	r6, r0
 80050a6:	460f      	mov	r7, r1
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4650      	mov	r0, sl
 80050ae:	4659      	mov	r1, fp
 80050b0:	f7fb f88e 	bl	80001d0 <__aeabi_dsub>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4680      	mov	r8, r0
 80050ba:	4689      	mov	r9, r1
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb f886 	bl	80001d0 <__aeabi_dsub>
 80050c4:	4632      	mov	r2, r6
 80050c6:	463b      	mov	r3, r7
 80050c8:	f7fb f882 	bl	80001d0 <__aeabi_dsub>
 80050cc:	a340      	add	r3, pc, #256	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x2f8>)
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	4606      	mov	r6, r0
 80050d4:	460f      	mov	r7, r1
 80050d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050da:	f7fb fa31 	bl	8000540 <__aeabi_dmul>
 80050de:	4632      	mov	r2, r6
 80050e0:	463b      	mov	r3, r7
 80050e2:	f7fb f875 	bl	80001d0 <__aeabi_dsub>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4606      	mov	r6, r0
 80050ec:	460f      	mov	r7, r1
 80050ee:	4640      	mov	r0, r8
 80050f0:	4649      	mov	r1, r9
 80050f2:	f7fb f86d 	bl	80001d0 <__aeabi_dsub>
 80050f6:	9a05      	ldr	r2, [sp, #20]
 80050f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b31      	cmp	r3, #49	; 0x31
 8005100:	dc20      	bgt.n	8005144 <__ieee754_rem_pio2+0x26c>
 8005102:	e9c4 0100 	strd	r0, r1, [r4]
 8005106:	46c2      	mov	sl, r8
 8005108:	46cb      	mov	fp, r9
 800510a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800510e:	4650      	mov	r0, sl
 8005110:	4642      	mov	r2, r8
 8005112:	464b      	mov	r3, r9
 8005114:	4659      	mov	r1, fp
 8005116:	f7fb f85b 	bl	80001d0 <__aeabi_dsub>
 800511a:	463b      	mov	r3, r7
 800511c:	4632      	mov	r2, r6
 800511e:	f7fb f857 	bl	80001d0 <__aeabi_dsub>
 8005122:	9b04      	ldr	r3, [sp, #16]
 8005124:	2b00      	cmp	r3, #0
 8005126:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800512a:	f6bf af11 	bge.w	8004f50 <__ieee754_rem_pio2+0x78>
 800512e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	f8c4 8000 	str.w	r8, [r4]
 8005138:	60a0      	str	r0, [r4, #8]
 800513a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800513e:	60e3      	str	r3, [r4, #12]
 8005140:	426d      	negs	r5, r5
 8005142:	e705      	b.n	8004f50 <__ieee754_rem_pio2+0x78>
 8005144:	a326      	add	r3, pc, #152	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x308>)
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800514e:	f7fb f9f7 	bl	8000540 <__aeabi_dmul>
 8005152:	4606      	mov	r6, r0
 8005154:	460f      	mov	r7, r1
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb f837 	bl	80001d0 <__aeabi_dsub>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4682      	mov	sl, r0
 8005168:	468b      	mov	fp, r1
 800516a:	4640      	mov	r0, r8
 800516c:	4649      	mov	r1, r9
 800516e:	f7fb f82f 	bl	80001d0 <__aeabi_dsub>
 8005172:	4632      	mov	r2, r6
 8005174:	463b      	mov	r3, r7
 8005176:	f7fb f82b 	bl	80001d0 <__aeabi_dsub>
 800517a:	a31b      	add	r3, pc, #108	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x310>)
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005188:	f7fb f9da 	bl	8000540 <__aeabi_dmul>
 800518c:	4632      	mov	r2, r6
 800518e:	463b      	mov	r3, r7
 8005190:	f7fb f81e 	bl	80001d0 <__aeabi_dsub>
 8005194:	4606      	mov	r6, r0
 8005196:	460f      	mov	r7, r1
 8005198:	e764      	b.n	8005064 <__ieee754_rem_pio2+0x18c>
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <__ieee754_rem_pio2+0x330>)
 800519c:	4598      	cmp	r8, r3
 800519e:	dd35      	ble.n	800520c <__ieee754_rem_pio2+0x334>
 80051a0:	ee10 2a10 	vmov	r2, s0
 80051a4:	463b      	mov	r3, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	4639      	mov	r1, r7
 80051aa:	f7fb f811 	bl	80001d0 <__aeabi_dsub>
 80051ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80051b2:	e9c4 0100 	strd	r0, r1, [r4]
 80051b6:	e6a1      	b.n	8004efc <__ieee754_rem_pio2+0x24>
 80051b8:	54400000 	.word	0x54400000
 80051bc:	3ff921fb 	.word	0x3ff921fb
 80051c0:	1a626331 	.word	0x1a626331
 80051c4:	3dd0b461 	.word	0x3dd0b461
 80051c8:	1a600000 	.word	0x1a600000
 80051cc:	3dd0b461 	.word	0x3dd0b461
 80051d0:	2e037073 	.word	0x2e037073
 80051d4:	3ba3198a 	.word	0x3ba3198a
 80051d8:	6dc9c883 	.word	0x6dc9c883
 80051dc:	3fe45f30 	.word	0x3fe45f30
 80051e0:	2e000000 	.word	0x2e000000
 80051e4:	3ba3198a 	.word	0x3ba3198a
 80051e8:	252049c1 	.word	0x252049c1
 80051ec:	397b839a 	.word	0x397b839a
 80051f0:	3fe921fb 	.word	0x3fe921fb
 80051f4:	4002d97b 	.word	0x4002d97b
 80051f8:	3ff921fb 	.word	0x3ff921fb
 80051fc:	413921fb 	.word	0x413921fb
 8005200:	3fe00000 	.word	0x3fe00000
 8005204:	08005ec8 	.word	0x08005ec8
 8005208:	7fefffff 	.word	0x7fefffff
 800520c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005210:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005214:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005218:	4630      	mov	r0, r6
 800521a:	460f      	mov	r7, r1
 800521c:	f7fb fc2a 	bl	8000a74 <__aeabi_d2iz>
 8005220:	f7fb f924 	bl	800046c <__aeabi_i2d>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005230:	f7fa ffce 	bl	80001d0 <__aeabi_dsub>
 8005234:	2200      	movs	r2, #0
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <__ieee754_rem_pio2+0x3dc>)
 8005238:	f7fb f982 	bl	8000540 <__aeabi_dmul>
 800523c:	460f      	mov	r7, r1
 800523e:	4606      	mov	r6, r0
 8005240:	f7fb fc18 	bl	8000a74 <__aeabi_d2iz>
 8005244:	f7fb f912 	bl	800046c <__aeabi_i2d>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4630      	mov	r0, r6
 800524e:	4639      	mov	r1, r7
 8005250:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005254:	f7fa ffbc 	bl	80001d0 <__aeabi_dsub>
 8005258:	2200      	movs	r2, #0
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <__ieee754_rem_pio2+0x3dc>)
 800525c:	f7fb f970 	bl	8000540 <__aeabi_dmul>
 8005260:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005264:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005268:	f04f 0803 	mov.w	r8, #3
 800526c:	2600      	movs	r6, #0
 800526e:	2700      	movs	r7, #0
 8005270:	4632      	mov	r2, r6
 8005272:	463b      	mov	r3, r7
 8005274:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005278:	f108 3aff 	add.w	sl, r8, #4294967295
 800527c:	f7fb fbc8 	bl	8000a10 <__aeabi_dcmpeq>
 8005280:	b9b0      	cbnz	r0, 80052b0 <__ieee754_rem_pio2+0x3d8>
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <__ieee754_rem_pio2+0x3e0>)
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	2302      	movs	r3, #2
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	462a      	mov	r2, r5
 800528c:	4643      	mov	r3, r8
 800528e:	4621      	mov	r1, r4
 8005290:	a806      	add	r0, sp, #24
 8005292:	f000 f8dd 	bl	8005450 <__kernel_rem_pio2>
 8005296:	9b04      	ldr	r3, [sp, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	4605      	mov	r5, r0
 800529c:	f6bf ae58 	bge.w	8004f50 <__ieee754_rem_pio2+0x78>
 80052a0:	6863      	ldr	r3, [r4, #4]
 80052a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	68e3      	ldr	r3, [r4, #12]
 80052aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	e746      	b.n	800513e <__ieee754_rem_pio2+0x266>
 80052b0:	46d0      	mov	r8, sl
 80052b2:	e7dd      	b.n	8005270 <__ieee754_rem_pio2+0x398>
 80052b4:	41700000 	.word	0x41700000
 80052b8:	08005f48 	.word	0x08005f48
 80052bc:	00000000 	.word	0x00000000

080052c0 <__kernel_cos>:
 80052c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	ec59 8b10 	vmov	r8, r9, d0
 80052c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80052cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80052d0:	ed2d 8b02 	vpush	{d8}
 80052d4:	eeb0 8a41 	vmov.f32	s16, s2
 80052d8:	eef0 8a61 	vmov.f32	s17, s3
 80052dc:	da07      	bge.n	80052ee <__kernel_cos+0x2e>
 80052de:	ee10 0a10 	vmov	r0, s0
 80052e2:	4649      	mov	r1, r9
 80052e4:	f7fb fbc6 	bl	8000a74 <__aeabi_d2iz>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f000 8089 	beq.w	8005400 <__kernel_cos+0x140>
 80052ee:	4642      	mov	r2, r8
 80052f0:	464b      	mov	r3, r9
 80052f2:	4640      	mov	r0, r8
 80052f4:	4649      	mov	r1, r9
 80052f6:	f7fb f923 	bl	8000540 <__aeabi_dmul>
 80052fa:	2200      	movs	r2, #0
 80052fc:	4b4e      	ldr	r3, [pc, #312]	; (8005438 <__kernel_cos+0x178>)
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	f7fb f91d 	bl	8000540 <__aeabi_dmul>
 8005306:	a340      	add	r3, pc, #256	; (adr r3, 8005408 <__kernel_cos+0x148>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	4682      	mov	sl, r0
 800530e:	468b      	mov	fp, r1
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb f914 	bl	8000540 <__aeabi_dmul>
 8005318:	a33d      	add	r3, pc, #244	; (adr r3, 8005410 <__kernel_cos+0x150>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ff59 	bl	80001d4 <__adddf3>
 8005322:	4622      	mov	r2, r4
 8005324:	462b      	mov	r3, r5
 8005326:	f7fb f90b 	bl	8000540 <__aeabi_dmul>
 800532a:	a33b      	add	r3, pc, #236	; (adr r3, 8005418 <__kernel_cos+0x158>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fa ff4e 	bl	80001d0 <__aeabi_dsub>
 8005334:	4622      	mov	r2, r4
 8005336:	462b      	mov	r3, r5
 8005338:	f7fb f902 	bl	8000540 <__aeabi_dmul>
 800533c:	a338      	add	r3, pc, #224	; (adr r3, 8005420 <__kernel_cos+0x160>)
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f7fa ff47 	bl	80001d4 <__adddf3>
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	f7fb f8f9 	bl	8000540 <__aeabi_dmul>
 800534e:	a336      	add	r3, pc, #216	; (adr r3, 8005428 <__kernel_cos+0x168>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff3c 	bl	80001d0 <__aeabi_dsub>
 8005358:	4622      	mov	r2, r4
 800535a:	462b      	mov	r3, r5
 800535c:	f7fb f8f0 	bl	8000540 <__aeabi_dmul>
 8005360:	a333      	add	r3, pc, #204	; (adr r3, 8005430 <__kernel_cos+0x170>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fa ff35 	bl	80001d4 <__adddf3>
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	f7fb f8e7 	bl	8000540 <__aeabi_dmul>
 8005372:	4622      	mov	r2, r4
 8005374:	462b      	mov	r3, r5
 8005376:	f7fb f8e3 	bl	8000540 <__aeabi_dmul>
 800537a:	ec53 2b18 	vmov	r2, r3, d8
 800537e:	4604      	mov	r4, r0
 8005380:	460d      	mov	r5, r1
 8005382:	4640      	mov	r0, r8
 8005384:	4649      	mov	r1, r9
 8005386:	f7fb f8db 	bl	8000540 <__aeabi_dmul>
 800538a:	460b      	mov	r3, r1
 800538c:	4602      	mov	r2, r0
 800538e:	4629      	mov	r1, r5
 8005390:	4620      	mov	r0, r4
 8005392:	f7fa ff1d 	bl	80001d0 <__aeabi_dsub>
 8005396:	4b29      	ldr	r3, [pc, #164]	; (800543c <__kernel_cos+0x17c>)
 8005398:	429e      	cmp	r6, r3
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	dc11      	bgt.n	80053c4 <__kernel_cos+0x104>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4650      	mov	r0, sl
 80053a6:	4659      	mov	r1, fp
 80053a8:	f7fa ff12 	bl	80001d0 <__aeabi_dsub>
 80053ac:	460b      	mov	r3, r1
 80053ae:	4924      	ldr	r1, [pc, #144]	; (8005440 <__kernel_cos+0x180>)
 80053b0:	4602      	mov	r2, r0
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fa ff0c 	bl	80001d0 <__aeabi_dsub>
 80053b8:	ecbd 8b02 	vpop	{d8}
 80053bc:	ec41 0b10 	vmov	d0, r0, r1
 80053c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c4:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <__kernel_cos+0x184>)
 80053c6:	491e      	ldr	r1, [pc, #120]	; (8005440 <__kernel_cos+0x180>)
 80053c8:	429e      	cmp	r6, r3
 80053ca:	bfcc      	ite	gt
 80053cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005448 <__kernel_cos+0x188>)
 80053ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80053d2:	2400      	movs	r4, #0
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	2000      	movs	r0, #0
 80053da:	f7fa fef9 	bl	80001d0 <__aeabi_dsub>
 80053de:	4622      	mov	r2, r4
 80053e0:	4606      	mov	r6, r0
 80053e2:	460f      	mov	r7, r1
 80053e4:	462b      	mov	r3, r5
 80053e6:	4650      	mov	r0, sl
 80053e8:	4659      	mov	r1, fp
 80053ea:	f7fa fef1 	bl	80001d0 <__aeabi_dsub>
 80053ee:	4642      	mov	r2, r8
 80053f0:	464b      	mov	r3, r9
 80053f2:	f7fa feed 	bl	80001d0 <__aeabi_dsub>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	e7d9      	b.n	80053b4 <__kernel_cos+0xf4>
 8005400:	2000      	movs	r0, #0
 8005402:	490f      	ldr	r1, [pc, #60]	; (8005440 <__kernel_cos+0x180>)
 8005404:	e7d8      	b.n	80053b8 <__kernel_cos+0xf8>
 8005406:	bf00      	nop
 8005408:	be8838d4 	.word	0xbe8838d4
 800540c:	bda8fae9 	.word	0xbda8fae9
 8005410:	bdb4b1c4 	.word	0xbdb4b1c4
 8005414:	3e21ee9e 	.word	0x3e21ee9e
 8005418:	809c52ad 	.word	0x809c52ad
 800541c:	3e927e4f 	.word	0x3e927e4f
 8005420:	19cb1590 	.word	0x19cb1590
 8005424:	3efa01a0 	.word	0x3efa01a0
 8005428:	16c15177 	.word	0x16c15177
 800542c:	3f56c16c 	.word	0x3f56c16c
 8005430:	5555554c 	.word	0x5555554c
 8005434:	3fa55555 	.word	0x3fa55555
 8005438:	3fe00000 	.word	0x3fe00000
 800543c:	3fd33332 	.word	0x3fd33332
 8005440:	3ff00000 	.word	0x3ff00000
 8005444:	3fe90000 	.word	0x3fe90000
 8005448:	3fd20000 	.word	0x3fd20000
 800544c:	00000000 	.word	0x00000000

08005450 <__kernel_rem_pio2>:
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	ed2d 8b02 	vpush	{d8}
 8005458:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800545c:	1ed4      	subs	r4, r2, #3
 800545e:	9308      	str	r3, [sp, #32]
 8005460:	9101      	str	r1, [sp, #4]
 8005462:	4bc5      	ldr	r3, [pc, #788]	; (8005778 <__kernel_rem_pio2+0x328>)
 8005464:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005466:	9009      	str	r0, [sp, #36]	; 0x24
 8005468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800546c:	9304      	str	r3, [sp, #16]
 800546e:	9b08      	ldr	r3, [sp, #32]
 8005470:	3b01      	subs	r3, #1
 8005472:	9307      	str	r3, [sp, #28]
 8005474:	2318      	movs	r3, #24
 8005476:	fb94 f4f3 	sdiv	r4, r4, r3
 800547a:	f06f 0317 	mvn.w	r3, #23
 800547e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005482:	fb04 3303 	mla	r3, r4, r3, r3
 8005486:	eb03 0a02 	add.w	sl, r3, r2
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	9a07      	ldr	r2, [sp, #28]
 800548e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005768 <__kernel_rem_pio2+0x318>
 8005492:	eb03 0802 	add.w	r8, r3, r2
 8005496:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005498:	1aa7      	subs	r7, r4, r2
 800549a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800549e:	ae22      	add	r6, sp, #136	; 0x88
 80054a0:	2500      	movs	r5, #0
 80054a2:	4545      	cmp	r5, r8
 80054a4:	dd13      	ble.n	80054ce <__kernel_rem_pio2+0x7e>
 80054a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005768 <__kernel_rem_pio2+0x318>
 80054aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80054ae:	2600      	movs	r6, #0
 80054b0:	9b04      	ldr	r3, [sp, #16]
 80054b2:	429e      	cmp	r6, r3
 80054b4:	dc32      	bgt.n	800551c <__kernel_rem_pio2+0xcc>
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	9302      	str	r3, [sp, #8]
 80054ba:	9b08      	ldr	r3, [sp, #32]
 80054bc:	199d      	adds	r5, r3, r6
 80054be:	ab22      	add	r3, sp, #136	; 0x88
 80054c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80054c4:	9306      	str	r3, [sp, #24]
 80054c6:	ec59 8b18 	vmov	r8, r9, d8
 80054ca:	2700      	movs	r7, #0
 80054cc:	e01f      	b.n	800550e <__kernel_rem_pio2+0xbe>
 80054ce:	42ef      	cmn	r7, r5
 80054d0:	d407      	bmi.n	80054e2 <__kernel_rem_pio2+0x92>
 80054d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80054d6:	f7fa ffc9 	bl	800046c <__aeabi_i2d>
 80054da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80054de:	3501      	adds	r5, #1
 80054e0:	e7df      	b.n	80054a2 <__kernel_rem_pio2+0x52>
 80054e2:	ec51 0b18 	vmov	r0, r1, d8
 80054e6:	e7f8      	b.n	80054da <__kernel_rem_pio2+0x8a>
 80054e8:	9906      	ldr	r1, [sp, #24]
 80054ea:	9d02      	ldr	r5, [sp, #8]
 80054ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80054f0:	9106      	str	r1, [sp, #24]
 80054f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80054f6:	9502      	str	r5, [sp, #8]
 80054f8:	f7fb f822 	bl	8000540 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4640      	mov	r0, r8
 8005502:	4649      	mov	r1, r9
 8005504:	f7fa fe66 	bl	80001d4 <__adddf3>
 8005508:	3701      	adds	r7, #1
 800550a:	4680      	mov	r8, r0
 800550c:	4689      	mov	r9, r1
 800550e:	9b07      	ldr	r3, [sp, #28]
 8005510:	429f      	cmp	r7, r3
 8005512:	dde9      	ble.n	80054e8 <__kernel_rem_pio2+0x98>
 8005514:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005518:	3601      	adds	r6, #1
 800551a:	e7c9      	b.n	80054b0 <__kernel_rem_pio2+0x60>
 800551c:	9b04      	ldr	r3, [sp, #16]
 800551e:	aa0e      	add	r2, sp, #56	; 0x38
 8005520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005524:	930c      	str	r3, [sp, #48]	; 0x30
 8005526:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005528:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800552c:	9c04      	ldr	r4, [sp, #16]
 800552e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005530:	ab9a      	add	r3, sp, #616	; 0x268
 8005532:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005536:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800553a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800553e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005542:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005546:	ab9a      	add	r3, sp, #616	; 0x268
 8005548:	445b      	add	r3, fp
 800554a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800554e:	2500      	movs	r5, #0
 8005550:	1b63      	subs	r3, r4, r5
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc78      	bgt.n	8005648 <__kernel_rem_pio2+0x1f8>
 8005556:	4650      	mov	r0, sl
 8005558:	ec49 8b10 	vmov	d0, r8, r9
 800555c:	f000 fc00 	bl	8005d60 <scalbn>
 8005560:	ec57 6b10 	vmov	r6, r7, d0
 8005564:	2200      	movs	r2, #0
 8005566:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800556a:	ee10 0a10 	vmov	r0, s0
 800556e:	4639      	mov	r1, r7
 8005570:	f7fa ffe6 	bl	8000540 <__aeabi_dmul>
 8005574:	ec41 0b10 	vmov	d0, r0, r1
 8005578:	f000 fb6e 	bl	8005c58 <floor>
 800557c:	2200      	movs	r2, #0
 800557e:	ec51 0b10 	vmov	r0, r1, d0
 8005582:	4b7e      	ldr	r3, [pc, #504]	; (800577c <__kernel_rem_pio2+0x32c>)
 8005584:	f7fa ffdc 	bl	8000540 <__aeabi_dmul>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4630      	mov	r0, r6
 800558e:	4639      	mov	r1, r7
 8005590:	f7fa fe1e 	bl	80001d0 <__aeabi_dsub>
 8005594:	460f      	mov	r7, r1
 8005596:	4606      	mov	r6, r0
 8005598:	f7fb fa6c 	bl	8000a74 <__aeabi_d2iz>
 800559c:	9006      	str	r0, [sp, #24]
 800559e:	f7fa ff65 	bl	800046c <__aeabi_i2d>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa fe11 	bl	80001d0 <__aeabi_dsub>
 80055ae:	f1ba 0f00 	cmp.w	sl, #0
 80055b2:	4606      	mov	r6, r0
 80055b4:	460f      	mov	r7, r1
 80055b6:	dd6c      	ble.n	8005692 <__kernel_rem_pio2+0x242>
 80055b8:	1e62      	subs	r2, r4, #1
 80055ba:	ab0e      	add	r3, sp, #56	; 0x38
 80055bc:	f1ca 0118 	rsb	r1, sl, #24
 80055c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80055c4:	9d06      	ldr	r5, [sp, #24]
 80055c6:	fa40 f301 	asr.w	r3, r0, r1
 80055ca:	441d      	add	r5, r3
 80055cc:	408b      	lsls	r3, r1
 80055ce:	1ac0      	subs	r0, r0, r3
 80055d0:	ab0e      	add	r3, sp, #56	; 0x38
 80055d2:	9506      	str	r5, [sp, #24]
 80055d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80055d8:	f1ca 0317 	rsb	r3, sl, #23
 80055dc:	fa40 f303 	asr.w	r3, r0, r3
 80055e0:	9302      	str	r3, [sp, #8]
 80055e2:	9b02      	ldr	r3, [sp, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dd62      	ble.n	80056ae <__kernel_rem_pio2+0x25e>
 80055e8:	9b06      	ldr	r3, [sp, #24]
 80055ea:	2200      	movs	r2, #0
 80055ec:	3301      	adds	r3, #1
 80055ee:	9306      	str	r3, [sp, #24]
 80055f0:	4615      	mov	r5, r2
 80055f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80055f6:	4294      	cmp	r4, r2
 80055f8:	f300 8095 	bgt.w	8005726 <__kernel_rem_pio2+0x2d6>
 80055fc:	f1ba 0f00 	cmp.w	sl, #0
 8005600:	dd07      	ble.n	8005612 <__kernel_rem_pio2+0x1c2>
 8005602:	f1ba 0f01 	cmp.w	sl, #1
 8005606:	f000 80a2 	beq.w	800574e <__kernel_rem_pio2+0x2fe>
 800560a:	f1ba 0f02 	cmp.w	sl, #2
 800560e:	f000 80c1 	beq.w	8005794 <__kernel_rem_pio2+0x344>
 8005612:	9b02      	ldr	r3, [sp, #8]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d14a      	bne.n	80056ae <__kernel_rem_pio2+0x25e>
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	2000      	movs	r0, #0
 800561e:	4958      	ldr	r1, [pc, #352]	; (8005780 <__kernel_rem_pio2+0x330>)
 8005620:	f7fa fdd6 	bl	80001d0 <__aeabi_dsub>
 8005624:	4606      	mov	r6, r0
 8005626:	460f      	mov	r7, r1
 8005628:	2d00      	cmp	r5, #0
 800562a:	d040      	beq.n	80056ae <__kernel_rem_pio2+0x25e>
 800562c:	4650      	mov	r0, sl
 800562e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005770 <__kernel_rem_pio2+0x320>
 8005632:	f000 fb95 	bl	8005d60 <scalbn>
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	ec53 2b10 	vmov	r2, r3, d0
 800563e:	f7fa fdc7 	bl	80001d0 <__aeabi_dsub>
 8005642:	4606      	mov	r6, r0
 8005644:	460f      	mov	r7, r1
 8005646:	e032      	b.n	80056ae <__kernel_rem_pio2+0x25e>
 8005648:	2200      	movs	r2, #0
 800564a:	4b4e      	ldr	r3, [pc, #312]	; (8005784 <__kernel_rem_pio2+0x334>)
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fa ff76 	bl	8000540 <__aeabi_dmul>
 8005654:	f7fb fa0e 	bl	8000a74 <__aeabi_d2iz>
 8005658:	f7fa ff08 	bl	800046c <__aeabi_i2d>
 800565c:	2200      	movs	r2, #0
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <__kernel_rem_pio2+0x338>)
 8005660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005664:	f7fa ff6c 	bl	8000540 <__aeabi_dmul>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fdae 	bl	80001d0 <__aeabi_dsub>
 8005674:	f7fb f9fe 	bl	8000a74 <__aeabi_d2iz>
 8005678:	ab0e      	add	r3, sp, #56	; 0x38
 800567a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800567e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005686:	f7fa fda5 	bl	80001d4 <__adddf3>
 800568a:	3501      	adds	r5, #1
 800568c:	4680      	mov	r8, r0
 800568e:	4689      	mov	r9, r1
 8005690:	e75e      	b.n	8005550 <__kernel_rem_pio2+0x100>
 8005692:	d105      	bne.n	80056a0 <__kernel_rem_pio2+0x250>
 8005694:	1e63      	subs	r3, r4, #1
 8005696:	aa0e      	add	r2, sp, #56	; 0x38
 8005698:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800569c:	15c3      	asrs	r3, r0, #23
 800569e:	e79f      	b.n	80055e0 <__kernel_rem_pio2+0x190>
 80056a0:	2200      	movs	r2, #0
 80056a2:	4b3a      	ldr	r3, [pc, #232]	; (800578c <__kernel_rem_pio2+0x33c>)
 80056a4:	f7fb f9d2 	bl	8000a4c <__aeabi_dcmpge>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d139      	bne.n	8005720 <__kernel_rem_pio2+0x2d0>
 80056ac:	9002      	str	r0, [sp, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2300      	movs	r3, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	4639      	mov	r1, r7
 80056b6:	f7fb f9ab 	bl	8000a10 <__aeabi_dcmpeq>
 80056ba:	2800      	cmp	r0, #0
 80056bc:	f000 80c7 	beq.w	800584e <__kernel_rem_pio2+0x3fe>
 80056c0:	1e65      	subs	r5, r4, #1
 80056c2:	462b      	mov	r3, r5
 80056c4:	2200      	movs	r2, #0
 80056c6:	9904      	ldr	r1, [sp, #16]
 80056c8:	428b      	cmp	r3, r1
 80056ca:	da6a      	bge.n	80057a2 <__kernel_rem_pio2+0x352>
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	f000 8088 	beq.w	80057e2 <__kernel_rem_pio2+0x392>
 80056d2:	ab0e      	add	r3, sp, #56	; 0x38
 80056d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80056d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 80b4 	beq.w	800584a <__kernel_rem_pio2+0x3fa>
 80056e2:	4650      	mov	r0, sl
 80056e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005770 <__kernel_rem_pio2+0x320>
 80056e8:	f000 fb3a 	bl	8005d60 <scalbn>
 80056ec:	00ec      	lsls	r4, r5, #3
 80056ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80056f0:	191e      	adds	r6, r3, r4
 80056f2:	ec59 8b10 	vmov	r8, r9, d0
 80056f6:	f106 0a08 	add.w	sl, r6, #8
 80056fa:	462f      	mov	r7, r5
 80056fc:	2f00      	cmp	r7, #0
 80056fe:	f280 80df 	bge.w	80058c0 <__kernel_rem_pio2+0x470>
 8005702:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005768 <__kernel_rem_pio2+0x318>
 8005706:	f04f 0a00 	mov.w	sl, #0
 800570a:	eba5 030a 	sub.w	r3, r5, sl
 800570e:	2b00      	cmp	r3, #0
 8005710:	f2c0 810a 	blt.w	8005928 <__kernel_rem_pio2+0x4d8>
 8005714:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005790 <__kernel_rem_pio2+0x340>
 8005718:	ec59 8b18 	vmov	r8, r9, d8
 800571c:	2700      	movs	r7, #0
 800571e:	e0f5      	b.n	800590c <__kernel_rem_pio2+0x4bc>
 8005720:	2302      	movs	r3, #2
 8005722:	9302      	str	r3, [sp, #8]
 8005724:	e760      	b.n	80055e8 <__kernel_rem_pio2+0x198>
 8005726:	ab0e      	add	r3, sp, #56	; 0x38
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	b94d      	cbnz	r5, 8005742 <__kernel_rem_pio2+0x2f2>
 800572e:	b12b      	cbz	r3, 800573c <__kernel_rem_pio2+0x2ec>
 8005730:	a80e      	add	r0, sp, #56	; 0x38
 8005732:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005736:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800573a:	2301      	movs	r3, #1
 800573c:	3201      	adds	r2, #1
 800573e:	461d      	mov	r5, r3
 8005740:	e759      	b.n	80055f6 <__kernel_rem_pio2+0x1a6>
 8005742:	a80e      	add	r0, sp, #56	; 0x38
 8005744:	1acb      	subs	r3, r1, r3
 8005746:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800574a:	462b      	mov	r3, r5
 800574c:	e7f6      	b.n	800573c <__kernel_rem_pio2+0x2ec>
 800574e:	1e62      	subs	r2, r4, #1
 8005750:	ab0e      	add	r3, sp, #56	; 0x38
 8005752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005756:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800575a:	a90e      	add	r1, sp, #56	; 0x38
 800575c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005760:	e757      	b.n	8005612 <__kernel_rem_pio2+0x1c2>
 8005762:	bf00      	nop
 8005764:	f3af 8000 	nop.w
	...
 8005774:	3ff00000 	.word	0x3ff00000
 8005778:	08006090 	.word	0x08006090
 800577c:	40200000 	.word	0x40200000
 8005780:	3ff00000 	.word	0x3ff00000
 8005784:	3e700000 	.word	0x3e700000
 8005788:	41700000 	.word	0x41700000
 800578c:	3fe00000 	.word	0x3fe00000
 8005790:	08006050 	.word	0x08006050
 8005794:	1e62      	subs	r2, r4, #1
 8005796:	ab0e      	add	r3, sp, #56	; 0x38
 8005798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80057a0:	e7db      	b.n	800575a <__kernel_rem_pio2+0x30a>
 80057a2:	a90e      	add	r1, sp, #56	; 0x38
 80057a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80057a8:	3b01      	subs	r3, #1
 80057aa:	430a      	orrs	r2, r1
 80057ac:	e78b      	b.n	80056c6 <__kernel_rem_pio2+0x276>
 80057ae:	3301      	adds	r3, #1
 80057b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d0fa      	beq.n	80057ae <__kernel_rem_pio2+0x35e>
 80057b8:	9a08      	ldr	r2, [sp, #32]
 80057ba:	4422      	add	r2, r4
 80057bc:	00d2      	lsls	r2, r2, #3
 80057be:	a922      	add	r1, sp, #136	; 0x88
 80057c0:	18e3      	adds	r3, r4, r3
 80057c2:	9206      	str	r2, [sp, #24]
 80057c4:	440a      	add	r2, r1
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	f10b 0108 	add.w	r1, fp, #8
 80057cc:	f102 0308 	add.w	r3, r2, #8
 80057d0:	1c66      	adds	r6, r4, #1
 80057d2:	910a      	str	r1, [sp, #40]	; 0x28
 80057d4:	2500      	movs	r5, #0
 80057d6:	930d      	str	r3, [sp, #52]	; 0x34
 80057d8:	9b02      	ldr	r3, [sp, #8]
 80057da:	42b3      	cmp	r3, r6
 80057dc:	da04      	bge.n	80057e8 <__kernel_rem_pio2+0x398>
 80057de:	461c      	mov	r4, r3
 80057e0:	e6a6      	b.n	8005530 <__kernel_rem_pio2+0xe0>
 80057e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057e4:	2301      	movs	r3, #1
 80057e6:	e7e3      	b.n	80057b0 <__kernel_rem_pio2+0x360>
 80057e8:	9b06      	ldr	r3, [sp, #24]
 80057ea:	18ef      	adds	r7, r5, r3
 80057ec:	ab22      	add	r3, sp, #136	; 0x88
 80057ee:	441f      	add	r7, r3
 80057f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80057f6:	f7fa fe39 	bl	800046c <__aeabi_i2d>
 80057fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fc:	461c      	mov	r4, r3
 80057fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005800:	e9c7 0100 	strd	r0, r1, [r7]
 8005804:	eb03 0b05 	add.w	fp, r3, r5
 8005808:	2700      	movs	r7, #0
 800580a:	f04f 0800 	mov.w	r8, #0
 800580e:	f04f 0900 	mov.w	r9, #0
 8005812:	9b07      	ldr	r3, [sp, #28]
 8005814:	429f      	cmp	r7, r3
 8005816:	dd08      	ble.n	800582a <__kernel_rem_pio2+0x3da>
 8005818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581a:	aa72      	add	r2, sp, #456	; 0x1c8
 800581c:	18eb      	adds	r3, r5, r3
 800581e:	4413      	add	r3, r2
 8005820:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005824:	3601      	adds	r6, #1
 8005826:	3508      	adds	r5, #8
 8005828:	e7d6      	b.n	80057d8 <__kernel_rem_pio2+0x388>
 800582a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800582e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005832:	f7fa fe85 	bl	8000540 <__aeabi_dmul>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4640      	mov	r0, r8
 800583c:	4649      	mov	r1, r9
 800583e:	f7fa fcc9 	bl	80001d4 <__adddf3>
 8005842:	3701      	adds	r7, #1
 8005844:	4680      	mov	r8, r0
 8005846:	4689      	mov	r9, r1
 8005848:	e7e3      	b.n	8005812 <__kernel_rem_pio2+0x3c2>
 800584a:	3d01      	subs	r5, #1
 800584c:	e741      	b.n	80056d2 <__kernel_rem_pio2+0x282>
 800584e:	f1ca 0000 	rsb	r0, sl, #0
 8005852:	ec47 6b10 	vmov	d0, r6, r7
 8005856:	f000 fa83 	bl	8005d60 <scalbn>
 800585a:	ec57 6b10 	vmov	r6, r7, d0
 800585e:	2200      	movs	r2, #0
 8005860:	4b99      	ldr	r3, [pc, #612]	; (8005ac8 <__kernel_rem_pio2+0x678>)
 8005862:	ee10 0a10 	vmov	r0, s0
 8005866:	4639      	mov	r1, r7
 8005868:	f7fb f8f0 	bl	8000a4c <__aeabi_dcmpge>
 800586c:	b1f8      	cbz	r0, 80058ae <__kernel_rem_pio2+0x45e>
 800586e:	2200      	movs	r2, #0
 8005870:	4b96      	ldr	r3, [pc, #600]	; (8005acc <__kernel_rem_pio2+0x67c>)
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fa fe63 	bl	8000540 <__aeabi_dmul>
 800587a:	f7fb f8fb 	bl	8000a74 <__aeabi_d2iz>
 800587e:	4680      	mov	r8, r0
 8005880:	f7fa fdf4 	bl	800046c <__aeabi_i2d>
 8005884:	2200      	movs	r2, #0
 8005886:	4b90      	ldr	r3, [pc, #576]	; (8005ac8 <__kernel_rem_pio2+0x678>)
 8005888:	f7fa fe5a 	bl	8000540 <__aeabi_dmul>
 800588c:	460b      	mov	r3, r1
 800588e:	4602      	mov	r2, r0
 8005890:	4639      	mov	r1, r7
 8005892:	4630      	mov	r0, r6
 8005894:	f7fa fc9c 	bl	80001d0 <__aeabi_dsub>
 8005898:	f7fb f8ec 	bl	8000a74 <__aeabi_d2iz>
 800589c:	1c65      	adds	r5, r4, #1
 800589e:	ab0e      	add	r3, sp, #56	; 0x38
 80058a0:	f10a 0a18 	add.w	sl, sl, #24
 80058a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80058ac:	e719      	b.n	80056e2 <__kernel_rem_pio2+0x292>
 80058ae:	4630      	mov	r0, r6
 80058b0:	4639      	mov	r1, r7
 80058b2:	f7fb f8df 	bl	8000a74 <__aeabi_d2iz>
 80058b6:	ab0e      	add	r3, sp, #56	; 0x38
 80058b8:	4625      	mov	r5, r4
 80058ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058be:	e710      	b.n	80056e2 <__kernel_rem_pio2+0x292>
 80058c0:	ab0e      	add	r3, sp, #56	; 0x38
 80058c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80058c6:	f7fa fdd1 	bl	800046c <__aeabi_i2d>
 80058ca:	4642      	mov	r2, r8
 80058cc:	464b      	mov	r3, r9
 80058ce:	f7fa fe37 	bl	8000540 <__aeabi_dmul>
 80058d2:	2200      	movs	r2, #0
 80058d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80058d8:	4b7c      	ldr	r3, [pc, #496]	; (8005acc <__kernel_rem_pio2+0x67c>)
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fe2f 	bl	8000540 <__aeabi_dmul>
 80058e2:	3f01      	subs	r7, #1
 80058e4:	4680      	mov	r8, r0
 80058e6:	4689      	mov	r9, r1
 80058e8:	e708      	b.n	80056fc <__kernel_rem_pio2+0x2ac>
 80058ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80058f6:	f7fa fe23 	bl	8000540 <__aeabi_dmul>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fa fc67 	bl	80001d4 <__adddf3>
 8005906:	3701      	adds	r7, #1
 8005908:	4680      	mov	r8, r0
 800590a:	4689      	mov	r9, r1
 800590c:	9b04      	ldr	r3, [sp, #16]
 800590e:	429f      	cmp	r7, r3
 8005910:	dc01      	bgt.n	8005916 <__kernel_rem_pio2+0x4c6>
 8005912:	45ba      	cmp	sl, r7
 8005914:	dae9      	bge.n	80058ea <__kernel_rem_pio2+0x49a>
 8005916:	ab4a      	add	r3, sp, #296	; 0x128
 8005918:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800591c:	e9c3 8900 	strd	r8, r9, [r3]
 8005920:	f10a 0a01 	add.w	sl, sl, #1
 8005924:	3e08      	subs	r6, #8
 8005926:	e6f0      	b.n	800570a <__kernel_rem_pio2+0x2ba>
 8005928:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800592a:	2b03      	cmp	r3, #3
 800592c:	d85b      	bhi.n	80059e6 <__kernel_rem_pio2+0x596>
 800592e:	e8df f003 	tbb	[pc, r3]
 8005932:	264a      	.short	0x264a
 8005934:	0226      	.short	0x0226
 8005936:	ab9a      	add	r3, sp, #616	; 0x268
 8005938:	441c      	add	r4, r3
 800593a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800593e:	46a2      	mov	sl, r4
 8005940:	46ab      	mov	fp, r5
 8005942:	f1bb 0f00 	cmp.w	fp, #0
 8005946:	dc6c      	bgt.n	8005a22 <__kernel_rem_pio2+0x5d2>
 8005948:	46a2      	mov	sl, r4
 800594a:	46ab      	mov	fp, r5
 800594c:	f1bb 0f01 	cmp.w	fp, #1
 8005950:	f300 8086 	bgt.w	8005a60 <__kernel_rem_pio2+0x610>
 8005954:	2000      	movs	r0, #0
 8005956:	2100      	movs	r1, #0
 8005958:	2d01      	cmp	r5, #1
 800595a:	f300 80a0 	bgt.w	8005a9e <__kernel_rem_pio2+0x64e>
 800595e:	9b02      	ldr	r3, [sp, #8]
 8005960:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005964:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 809e 	bne.w	8005aaa <__kernel_rem_pio2+0x65a>
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	e9c3 7800 	strd	r7, r8, [r3]
 8005974:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005978:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800597c:	e033      	b.n	80059e6 <__kernel_rem_pio2+0x596>
 800597e:	3408      	adds	r4, #8
 8005980:	ab4a      	add	r3, sp, #296	; 0x128
 8005982:	441c      	add	r4, r3
 8005984:	462e      	mov	r6, r5
 8005986:	2000      	movs	r0, #0
 8005988:	2100      	movs	r1, #0
 800598a:	2e00      	cmp	r6, #0
 800598c:	da3a      	bge.n	8005a04 <__kernel_rem_pio2+0x5b4>
 800598e:	9b02      	ldr	r3, [sp, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d03d      	beq.n	8005a10 <__kernel_rem_pio2+0x5c0>
 8005994:	4602      	mov	r2, r0
 8005996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800599a:	9c01      	ldr	r4, [sp, #4]
 800599c:	e9c4 2300 	strd	r2, r3, [r4]
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80059a8:	f7fa fc12 	bl	80001d0 <__aeabi_dsub>
 80059ac:	ae4c      	add	r6, sp, #304	; 0x130
 80059ae:	2401      	movs	r4, #1
 80059b0:	42a5      	cmp	r5, r4
 80059b2:	da30      	bge.n	8005a16 <__kernel_rem_pio2+0x5c6>
 80059b4:	9b02      	ldr	r3, [sp, #8]
 80059b6:	b113      	cbz	r3, 80059be <__kernel_rem_pio2+0x56e>
 80059b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059bc:	4619      	mov	r1, r3
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80059c4:	e00f      	b.n	80059e6 <__kernel_rem_pio2+0x596>
 80059c6:	ab9a      	add	r3, sp, #616	; 0x268
 80059c8:	441c      	add	r4, r3
 80059ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80059ce:	2000      	movs	r0, #0
 80059d0:	2100      	movs	r1, #0
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	da10      	bge.n	80059f8 <__kernel_rem_pio2+0x5a8>
 80059d6:	9b02      	ldr	r3, [sp, #8]
 80059d8:	b113      	cbz	r3, 80059e0 <__kernel_rem_pio2+0x590>
 80059da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059de:	4619      	mov	r1, r3
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	e9c3 0100 	strd	r0, r1, [r3]
 80059e6:	9b06      	ldr	r3, [sp, #24]
 80059e8:	f003 0007 	and.w	r0, r3, #7
 80059ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80059f0:	ecbd 8b02 	vpop	{d8}
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80059fc:	f7fa fbea 	bl	80001d4 <__adddf3>
 8005a00:	3d01      	subs	r5, #1
 8005a02:	e7e6      	b.n	80059d2 <__kernel_rem_pio2+0x582>
 8005a04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a08:	f7fa fbe4 	bl	80001d4 <__adddf3>
 8005a0c:	3e01      	subs	r6, #1
 8005a0e:	e7bc      	b.n	800598a <__kernel_rem_pio2+0x53a>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	e7c1      	b.n	800599a <__kernel_rem_pio2+0x54a>
 8005a16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005a1a:	f7fa fbdb 	bl	80001d4 <__adddf3>
 8005a1e:	3401      	adds	r4, #1
 8005a20:	e7c6      	b.n	80059b0 <__kernel_rem_pio2+0x560>
 8005a22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005a26:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	ec53 2b17 	vmov	r2, r3, d7
 8005a30:	4649      	mov	r1, r9
 8005a32:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a36:	f7fa fbcd 	bl	80001d4 <__adddf3>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	4640      	mov	r0, r8
 8005a44:	4649      	mov	r1, r9
 8005a46:	f7fa fbc3 	bl	80001d0 <__aeabi_dsub>
 8005a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a4e:	f7fa fbc1 	bl	80001d4 <__adddf3>
 8005a52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a56:	e9ca 0100 	strd	r0, r1, [sl]
 8005a5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005a5e:	e770      	b.n	8005942 <__kernel_rem_pio2+0x4f2>
 8005a60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005a64:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005a68:	4630      	mov	r0, r6
 8005a6a:	ec53 2b17 	vmov	r2, r3, d7
 8005a6e:	4639      	mov	r1, r7
 8005a70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a74:	f7fa fbae 	bl	80001d4 <__adddf3>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4689      	mov	r9, r1
 8005a80:	4630      	mov	r0, r6
 8005a82:	4639      	mov	r1, r7
 8005a84:	f7fa fba4 	bl	80001d0 <__aeabi_dsub>
 8005a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a8c:	f7fa fba2 	bl	80001d4 <__adddf3>
 8005a90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a94:	e9ca 0100 	strd	r0, r1, [sl]
 8005a98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005a9c:	e756      	b.n	800594c <__kernel_rem_pio2+0x4fc>
 8005a9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005aa2:	f7fa fb97 	bl	80001d4 <__adddf3>
 8005aa6:	3d01      	subs	r5, #1
 8005aa8:	e756      	b.n	8005958 <__kernel_rem_pio2+0x508>
 8005aaa:	9b01      	ldr	r3, [sp, #4]
 8005aac:	9a01      	ldr	r2, [sp, #4]
 8005aae:	601f      	str	r7, [r3, #0]
 8005ab0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005ab4:	605c      	str	r4, [r3, #4]
 8005ab6:	609d      	str	r5, [r3, #8]
 8005ab8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005abc:	60d3      	str	r3, [r2, #12]
 8005abe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ac2:	6110      	str	r0, [r2, #16]
 8005ac4:	6153      	str	r3, [r2, #20]
 8005ac6:	e78e      	b.n	80059e6 <__kernel_rem_pio2+0x596>
 8005ac8:	41700000 	.word	0x41700000
 8005acc:	3e700000 	.word	0x3e700000

08005ad0 <__kernel_sin>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	ec55 4b10 	vmov	r4, r5, d0
 8005ad8:	b085      	sub	sp, #20
 8005ada:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005ade:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ae2:	ed8d 1b00 	vstr	d1, [sp]
 8005ae6:	9002      	str	r0, [sp, #8]
 8005ae8:	da06      	bge.n	8005af8 <__kernel_sin+0x28>
 8005aea:	ee10 0a10 	vmov	r0, s0
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa ffc0 	bl	8000a74 <__aeabi_d2iz>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d051      	beq.n	8005b9c <__kernel_sin+0xcc>
 8005af8:	4622      	mov	r2, r4
 8005afa:	462b      	mov	r3, r5
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	f7fa fd1e 	bl	8000540 <__aeabi_dmul>
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f7fa fd16 	bl	8000540 <__aeabi_dmul>
 8005b14:	a341      	add	r3, pc, #260	; (adr r3, 8005c1c <__kernel_sin+0x14c>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	4689      	mov	r9, r1
 8005b1e:	4650      	mov	r0, sl
 8005b20:	4659      	mov	r1, fp
 8005b22:	f7fa fd0d 	bl	8000540 <__aeabi_dmul>
 8005b26:	a33f      	add	r3, pc, #252	; (adr r3, 8005c24 <__kernel_sin+0x154>)
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f7fa fb50 	bl	80001d0 <__aeabi_dsub>
 8005b30:	4652      	mov	r2, sl
 8005b32:	465b      	mov	r3, fp
 8005b34:	f7fa fd04 	bl	8000540 <__aeabi_dmul>
 8005b38:	a33c      	add	r3, pc, #240	; (adr r3, 8005c2c <__kernel_sin+0x15c>)
 8005b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3e:	f7fa fb49 	bl	80001d4 <__adddf3>
 8005b42:	4652      	mov	r2, sl
 8005b44:	465b      	mov	r3, fp
 8005b46:	f7fa fcfb 	bl	8000540 <__aeabi_dmul>
 8005b4a:	a33a      	add	r3, pc, #232	; (adr r3, 8005c34 <__kernel_sin+0x164>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fb3e 	bl	80001d0 <__aeabi_dsub>
 8005b54:	4652      	mov	r2, sl
 8005b56:	465b      	mov	r3, fp
 8005b58:	f7fa fcf2 	bl	8000540 <__aeabi_dmul>
 8005b5c:	a337      	add	r3, pc, #220	; (adr r3, 8005c3c <__kernel_sin+0x16c>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fb37 	bl	80001d4 <__adddf3>
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460f      	mov	r7, r1
 8005b6c:	b9db      	cbnz	r3, 8005ba6 <__kernel_sin+0xd6>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	f7fa fce3 	bl	8000540 <__aeabi_dmul>
 8005b7a:	a325      	add	r3, pc, #148	; (adr r3, 8005c10 <__kernel_sin+0x140>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fb26 	bl	80001d0 <__aeabi_dsub>
 8005b84:	4642      	mov	r2, r8
 8005b86:	464b      	mov	r3, r9
 8005b88:	f7fa fcda 	bl	8000540 <__aeabi_dmul>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4620      	mov	r0, r4
 8005b92:	4629      	mov	r1, r5
 8005b94:	f7fa fb1e 	bl	80001d4 <__adddf3>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	460d      	mov	r5, r1
 8005b9c:	ec45 4b10 	vmov	d0, r4, r5
 8005ba0:	b005      	add	sp, #20
 8005ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <__kernel_sin+0x148>)
 8005baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bae:	f7fa fcc7 	bl	8000540 <__aeabi_dmul>
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb8:	463b      	mov	r3, r7
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fcbf 	bl	8000540 <__aeabi_dmul>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bca:	f7fa fb01 	bl	80001d0 <__aeabi_dsub>
 8005bce:	4652      	mov	r2, sl
 8005bd0:	465b      	mov	r3, fp
 8005bd2:	f7fa fcb5 	bl	8000540 <__aeabi_dmul>
 8005bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bda:	f7fa faf9 	bl	80001d0 <__aeabi_dsub>
 8005bde:	a30c      	add	r3, pc, #48	; (adr r3, 8005c10 <__kernel_sin+0x140>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	4606      	mov	r6, r0
 8005be6:	460f      	mov	r7, r1
 8005be8:	4640      	mov	r0, r8
 8005bea:	4649      	mov	r1, r9
 8005bec:	f7fa fca8 	bl	8000540 <__aeabi_dmul>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa faec 	bl	80001d4 <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4620      	mov	r0, r4
 8005c02:	4629      	mov	r1, r5
 8005c04:	f7fa fae4 	bl	80001d0 <__aeabi_dsub>
 8005c08:	e7c6      	b.n	8005b98 <__kernel_sin+0xc8>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	55555549 	.word	0x55555549
 8005c14:	3fc55555 	.word	0x3fc55555
 8005c18:	3fe00000 	.word	0x3fe00000
 8005c1c:	5acfd57c 	.word	0x5acfd57c
 8005c20:	3de5d93a 	.word	0x3de5d93a
 8005c24:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c28:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c2c:	57b1fe7d 	.word	0x57b1fe7d
 8005c30:	3ec71de3 	.word	0x3ec71de3
 8005c34:	19c161d5 	.word	0x19c161d5
 8005c38:	3f2a01a0 	.word	0x3f2a01a0
 8005c3c:	1110f8a6 	.word	0x1110f8a6
 8005c40:	3f811111 	.word	0x3f811111

08005c44 <fabs>:
 8005c44:	ec51 0b10 	vmov	r0, r1, d0
 8005c48:	ee10 2a10 	vmov	r2, s0
 8005c4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c50:	ec43 2b10 	vmov	d0, r2, r3
 8005c54:	4770      	bx	lr
	...

08005c58 <floor>:
 8005c58:	ec51 0b10 	vmov	r0, r1, d0
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005c64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005c68:	2e13      	cmp	r6, #19
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	ee10 5a10 	vmov	r5, s0
 8005c70:	4680      	mov	r8, r0
 8005c72:	dc34      	bgt.n	8005cde <floor+0x86>
 8005c74:	2e00      	cmp	r6, #0
 8005c76:	da16      	bge.n	8005ca6 <floor+0x4e>
 8005c78:	a335      	add	r3, pc, #212	; (adr r3, 8005d50 <floor+0xf8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa faa9 	bl	80001d4 <__adddf3>
 8005c82:	2200      	movs	r2, #0
 8005c84:	2300      	movs	r3, #0
 8005c86:	f7fa feeb 	bl	8000a60 <__aeabi_dcmpgt>
 8005c8a:	b148      	cbz	r0, 8005ca0 <floor+0x48>
 8005c8c:	2c00      	cmp	r4, #0
 8005c8e:	da59      	bge.n	8005d44 <floor+0xec>
 8005c90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005c94:	4a30      	ldr	r2, [pc, #192]	; (8005d58 <floor+0x100>)
 8005c96:	432b      	orrs	r3, r5
 8005c98:	2500      	movs	r5, #0
 8005c9a:	42ab      	cmp	r3, r5
 8005c9c:	bf18      	it	ne
 8005c9e:	4614      	movne	r4, r2
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	e025      	b.n	8005cf2 <floor+0x9a>
 8005ca6:	4f2d      	ldr	r7, [pc, #180]	; (8005d5c <floor+0x104>)
 8005ca8:	4137      	asrs	r7, r6
 8005caa:	ea01 0307 	and.w	r3, r1, r7
 8005cae:	4303      	orrs	r3, r0
 8005cb0:	d01f      	beq.n	8005cf2 <floor+0x9a>
 8005cb2:	a327      	add	r3, pc, #156	; (adr r3, 8005d50 <floor+0xf8>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fa8c 	bl	80001d4 <__adddf3>
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f7fa fece 	bl	8000a60 <__aeabi_dcmpgt>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	d0eb      	beq.n	8005ca0 <floor+0x48>
 8005cc8:	2c00      	cmp	r4, #0
 8005cca:	bfbe      	ittt	lt
 8005ccc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005cd0:	fa43 f606 	asrlt.w	r6, r3, r6
 8005cd4:	19a4      	addlt	r4, r4, r6
 8005cd6:	ea24 0407 	bic.w	r4, r4, r7
 8005cda:	2500      	movs	r5, #0
 8005cdc:	e7e0      	b.n	8005ca0 <floor+0x48>
 8005cde:	2e33      	cmp	r6, #51	; 0x33
 8005ce0:	dd0b      	ble.n	8005cfa <floor+0xa2>
 8005ce2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ce6:	d104      	bne.n	8005cf2 <floor+0x9a>
 8005ce8:	ee10 2a10 	vmov	r2, s0
 8005cec:	460b      	mov	r3, r1
 8005cee:	f7fa fa71 	bl	80001d4 <__adddf3>
 8005cf2:	ec41 0b10 	vmov	d0, r0, r1
 8005cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005d02:	fa23 f707 	lsr.w	r7, r3, r7
 8005d06:	4207      	tst	r7, r0
 8005d08:	d0f3      	beq.n	8005cf2 <floor+0x9a>
 8005d0a:	a311      	add	r3, pc, #68	; (adr r3, 8005d50 <floor+0xf8>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fa60 	bl	80001d4 <__adddf3>
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f7fa fea2 	bl	8000a60 <__aeabi_dcmpgt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0bf      	beq.n	8005ca0 <floor+0x48>
 8005d20:	2c00      	cmp	r4, #0
 8005d22:	da02      	bge.n	8005d2a <floor+0xd2>
 8005d24:	2e14      	cmp	r6, #20
 8005d26:	d103      	bne.n	8005d30 <floor+0xd8>
 8005d28:	3401      	adds	r4, #1
 8005d2a:	ea25 0507 	bic.w	r5, r5, r7
 8005d2e:	e7b7      	b.n	8005ca0 <floor+0x48>
 8005d30:	2301      	movs	r3, #1
 8005d32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005d36:	fa03 f606 	lsl.w	r6, r3, r6
 8005d3a:	4435      	add	r5, r6
 8005d3c:	4545      	cmp	r5, r8
 8005d3e:	bf38      	it	cc
 8005d40:	18e4      	addcc	r4, r4, r3
 8005d42:	e7f2      	b.n	8005d2a <floor+0xd2>
 8005d44:	2500      	movs	r5, #0
 8005d46:	462c      	mov	r4, r5
 8005d48:	e7aa      	b.n	8005ca0 <floor+0x48>
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w
 8005d50:	8800759c 	.word	0x8800759c
 8005d54:	7e37e43c 	.word	0x7e37e43c
 8005d58:	bff00000 	.word	0xbff00000
 8005d5c:	000fffff 	.word	0x000fffff

08005d60 <scalbn>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	ec55 4b10 	vmov	r4, r5, d0
 8005d66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	b9aa      	cbnz	r2, 8005d9c <scalbn+0x3c>
 8005d70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d74:	4323      	orrs	r3, r4
 8005d76:	d03b      	beq.n	8005df0 <scalbn+0x90>
 8005d78:	4b31      	ldr	r3, [pc, #196]	; (8005e40 <scalbn+0xe0>)
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	ee10 0a10 	vmov	r0, s0
 8005d82:	f7fa fbdd 	bl	8000540 <__aeabi_dmul>
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <scalbn+0xe4>)
 8005d88:	429e      	cmp	r6, r3
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	460d      	mov	r5, r1
 8005d8e:	da12      	bge.n	8005db6 <scalbn+0x56>
 8005d90:	a327      	add	r3, pc, #156	; (adr r3, 8005e30 <scalbn+0xd0>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fbd3 	bl	8000540 <__aeabi_dmul>
 8005d9a:	e009      	b.n	8005db0 <scalbn+0x50>
 8005d9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005da0:	428a      	cmp	r2, r1
 8005da2:	d10c      	bne.n	8005dbe <scalbn+0x5e>
 8005da4:	ee10 2a10 	vmov	r2, s0
 8005da8:	4620      	mov	r0, r4
 8005daa:	4629      	mov	r1, r5
 8005dac:	f7fa fa12 	bl	80001d4 <__adddf3>
 8005db0:	4604      	mov	r4, r0
 8005db2:	460d      	mov	r5, r1
 8005db4:	e01c      	b.n	8005df0 <scalbn+0x90>
 8005db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dba:	460b      	mov	r3, r1
 8005dbc:	3a36      	subs	r2, #54	; 0x36
 8005dbe:	4432      	add	r2, r6
 8005dc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005dc4:	428a      	cmp	r2, r1
 8005dc6:	dd0b      	ble.n	8005de0 <scalbn+0x80>
 8005dc8:	ec45 4b11 	vmov	d1, r4, r5
 8005dcc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005e38 <scalbn+0xd8>
 8005dd0:	f000 f83c 	bl	8005e4c <copysign>
 8005dd4:	a318      	add	r3, pc, #96	; (adr r3, 8005e38 <scalbn+0xd8>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	ec51 0b10 	vmov	r0, r1, d0
 8005dde:	e7da      	b.n	8005d96 <scalbn+0x36>
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	dd08      	ble.n	8005df6 <scalbn+0x96>
 8005de4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005de8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005dec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005df0:	ec45 4b10 	vmov	d0, r4, r5
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005dfa:	da0d      	bge.n	8005e18 <scalbn+0xb8>
 8005dfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e00:	429e      	cmp	r6, r3
 8005e02:	ec45 4b11 	vmov	d1, r4, r5
 8005e06:	dce1      	bgt.n	8005dcc <scalbn+0x6c>
 8005e08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005e30 <scalbn+0xd0>
 8005e0c:	f000 f81e 	bl	8005e4c <copysign>
 8005e10:	a307      	add	r3, pc, #28	; (adr r3, 8005e30 <scalbn+0xd0>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	e7e0      	b.n	8005dda <scalbn+0x7a>
 8005e18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e1c:	3236      	adds	r2, #54	; 0x36
 8005e1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <scalbn+0xe8>)
 8005e2e:	e7b2      	b.n	8005d96 <scalbn+0x36>
 8005e30:	c2f8f359 	.word	0xc2f8f359
 8005e34:	01a56e1f 	.word	0x01a56e1f
 8005e38:	8800759c 	.word	0x8800759c
 8005e3c:	7e37e43c 	.word	0x7e37e43c
 8005e40:	43500000 	.word	0x43500000
 8005e44:	ffff3cb0 	.word	0xffff3cb0
 8005e48:	3c900000 	.word	0x3c900000

08005e4c <copysign>:
 8005e4c:	ec51 0b10 	vmov	r0, r1, d0
 8005e50:	ee11 0a90 	vmov	r0, s3
 8005e54:	ee10 2a10 	vmov	r2, s0
 8005e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005e60:	ea41 0300 	orr.w	r3, r1, r0
 8005e64:	ec43 2b10 	vmov	d0, r2, r3
 8005e68:	4770      	bx	lr
	...

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
