
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e5c  08007e5c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007e5c  08007e5c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e5c  08007e5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000074  08007ed8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae0  08007ed8  00020ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ee1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce4  00000000  00000000  00037f85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001400  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  0003c070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a8a5  00000000  00000000  0003d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e7a  00000000  00000000  00067b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001067b3  00000000  00000000  00079a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001801ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00180248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007824 	.word	0x08007824

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007824 	.word	0x08007824

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f003 ff19 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000292:	200a      	movs	r0, #10
 8000294:	f001 fe68 	bl	8001f68 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f003 ff0f 	bl	80040c4 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 80002a6:	4b65      	ldr	r3, [pc, #404]	; (800043c <ILI9488_Init+0x1bc>)
 80002a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80002ac:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 80002ae:	4b64      	ldr	r3, [pc, #400]	; (8000440 <ILI9488_Init+0x1c0>)
 80002b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80002b4:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 80002b6:	20e0      	movs	r0, #224	; 0xe0
 80002b8:	f000 fa80 	bl	80007bc <writecommand>
	writedata(0x00);
 80002bc:	2000      	movs	r0, #0
 80002be:	f000 fb01 	bl	80008c4 <writedata>
	writedata(0x03);
 80002c2:	2003      	movs	r0, #3
 80002c4:	f000 fafe 	bl	80008c4 <writedata>
	writedata(0x09);
 80002c8:	2009      	movs	r0, #9
 80002ca:	f000 fafb 	bl	80008c4 <writedata>
	writedata(0x08);
 80002ce:	2008      	movs	r0, #8
 80002d0:	f000 faf8 	bl	80008c4 <writedata>
	writedata(0x16);
 80002d4:	2016      	movs	r0, #22
 80002d6:	f000 faf5 	bl	80008c4 <writedata>
	writedata(0x0A);
 80002da:	200a      	movs	r0, #10
 80002dc:	f000 faf2 	bl	80008c4 <writedata>
	writedata(0x3F);
 80002e0:	203f      	movs	r0, #63	; 0x3f
 80002e2:	f000 faef 	bl	80008c4 <writedata>
	writedata(0x78);
 80002e6:	2078      	movs	r0, #120	; 0x78
 80002e8:	f000 faec 	bl	80008c4 <writedata>
	writedata(0x4C);
 80002ec:	204c      	movs	r0, #76	; 0x4c
 80002ee:	f000 fae9 	bl	80008c4 <writedata>
	writedata(0x09);
 80002f2:	2009      	movs	r0, #9
 80002f4:	f000 fae6 	bl	80008c4 <writedata>
	writedata(0x0A);
 80002f8:	200a      	movs	r0, #10
 80002fa:	f000 fae3 	bl	80008c4 <writedata>
	writedata(0x08);
 80002fe:	2008      	movs	r0, #8
 8000300:	f000 fae0 	bl	80008c4 <writedata>
	writedata(0x16);
 8000304:	2016      	movs	r0, #22
 8000306:	f000 fadd 	bl	80008c4 <writedata>
	writedata(0x1A);
 800030a:	201a      	movs	r0, #26
 800030c:	f000 fada 	bl	80008c4 <writedata>
	writedata(0x0F);
 8000310:	200f      	movs	r0, #15
 8000312:	f000 fad7 	bl	80008c4 <writedata>

	writecommand(0XE1);
 8000316:	20e1      	movs	r0, #225	; 0xe1
 8000318:	f000 fa50 	bl	80007bc <writecommand>
	writedata(0x00);
 800031c:	2000      	movs	r0, #0
 800031e:	f000 fad1 	bl	80008c4 <writedata>
	writedata(0x16);
 8000322:	2016      	movs	r0, #22
 8000324:	f000 face 	bl	80008c4 <writedata>
	writedata(0x19);
 8000328:	2019      	movs	r0, #25
 800032a:	f000 facb 	bl	80008c4 <writedata>
	writedata(0x03);
 800032e:	2003      	movs	r0, #3
 8000330:	f000 fac8 	bl	80008c4 <writedata>
	writedata(0x0F);
 8000334:	200f      	movs	r0, #15
 8000336:	f000 fac5 	bl	80008c4 <writedata>
	writedata(0x05);
 800033a:	2005      	movs	r0, #5
 800033c:	f000 fac2 	bl	80008c4 <writedata>
	writedata(0x32);
 8000340:	2032      	movs	r0, #50	; 0x32
 8000342:	f000 fabf 	bl	80008c4 <writedata>
	writedata(0x45);
 8000346:	2045      	movs	r0, #69	; 0x45
 8000348:	f000 fabc 	bl	80008c4 <writedata>
	writedata(0x46);
 800034c:	2046      	movs	r0, #70	; 0x46
 800034e:	f000 fab9 	bl	80008c4 <writedata>
	writedata(0x04);
 8000352:	2004      	movs	r0, #4
 8000354:	f000 fab6 	bl	80008c4 <writedata>
	writedata(0x0E);
 8000358:	200e      	movs	r0, #14
 800035a:	f000 fab3 	bl	80008c4 <writedata>
	writedata(0x0D);
 800035e:	200d      	movs	r0, #13
 8000360:	f000 fab0 	bl	80008c4 <writedata>
	writedata(0x35);
 8000364:	2035      	movs	r0, #53	; 0x35
 8000366:	f000 faad 	bl	80008c4 <writedata>
	writedata(0x37);
 800036a:	2037      	movs	r0, #55	; 0x37
 800036c:	f000 faaa 	bl	80008c4 <writedata>
	writedata(0x0F);
 8000370:	200f      	movs	r0, #15
 8000372:	f000 faa7 	bl	80008c4 <writedata>

	writecommand(0XC0);      //Power Control 1
 8000376:	20c0      	movs	r0, #192	; 0xc0
 8000378:	f000 fa20 	bl	80007bc <writecommand>
	writedata(0x17);    //Vreg1out
 800037c:	2017      	movs	r0, #23
 800037e:	f000 faa1 	bl	80008c4 <writedata>
	writedata(0x15);    //Verg2out
 8000382:	2015      	movs	r0, #21
 8000384:	f000 fa9e 	bl	80008c4 <writedata>

	writecommand(0xC1);      //Power Control 2
 8000388:	20c1      	movs	r0, #193	; 0xc1
 800038a:	f000 fa17 	bl	80007bc <writecommand>
	writedata(0x41);    //VGH,VGL
 800038e:	2041      	movs	r0, #65	; 0x41
 8000390:	f000 fa98 	bl	80008c4 <writedata>

	writecommand(0xC5);      //Power Control 3
 8000394:	20c5      	movs	r0, #197	; 0xc5
 8000396:	f000 fa11 	bl	80007bc <writecommand>
	writedata(0x00);
 800039a:	2000      	movs	r0, #0
 800039c:	f000 fa92 	bl	80008c4 <writedata>
	writedata(0x12);    //Vcom
 80003a0:	2012      	movs	r0, #18
 80003a2:	f000 fa8f 	bl	80008c4 <writedata>
	writedata(0x80);
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	f000 fa8c 	bl	80008c4 <writedata>

	writecommand(0x36);      //Memory Access
 80003ac:	2036      	movs	r0, #54	; 0x36
 80003ae:	f000 fa05 	bl	80007bc <writecommand>
	writedata(0x48);
 80003b2:	2048      	movs	r0, #72	; 0x48
 80003b4:	f000 fa86 	bl	80008c4 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 80003b8:	2036      	movs	r0, #54	; 0x36
 80003ba:	f000 f9ff 	bl	80007bc <writecommand>
	writedata(0x66); 	  //18 bit
 80003be:	2066      	movs	r0, #102	; 0x66
 80003c0:	f000 fa80 	bl	80008c4 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 80003c4:	20b0      	movs	r0, #176	; 0xb0
 80003c6:	f000 f9f9 	bl	80007bc <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 80003ca:	2080      	movs	r0, #128	; 0x80
 80003cc:	f000 fa7a 	bl	80008c4 <writedata>

	writecommand(0xB1);      //Frame rate
 80003d0:	20b1      	movs	r0, #177	; 0xb1
 80003d2:	f000 f9f3 	bl	80007bc <writecommand>
	writedata(0xA0);    //60Hz
 80003d6:	20a0      	movs	r0, #160	; 0xa0
 80003d8:	f000 fa74 	bl	80008c4 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 80003dc:	20b4      	movs	r0, #180	; 0xb4
 80003de:	f000 f9ed 	bl	80007bc <writecommand>
	writedata(0x02);    //2-dot
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 fa6e 	bl	80008c4 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 80003e8:	20b6      	movs	r0, #182	; 0xb6
 80003ea:	f000 f9e7 	bl	80007bc <writecommand>

	writedata(0x02);    //MCU
 80003ee:	2002      	movs	r0, #2
 80003f0:	f000 fa68 	bl	80008c4 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 80003f4:	2002      	movs	r0, #2
 80003f6:	f000 fa65 	bl	80008c4 <writedata>

	writecommand(0XE9);      // Set Image Functio
 80003fa:	20e9      	movs	r0, #233	; 0xe9
 80003fc:	f000 f9de 	bl	80007bc <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000400:	2000      	movs	r0, #0
 8000402:	f000 fa5f 	bl	80008c4 <writedata>

	writecommand(0xF7);      // Adjust Control
 8000406:	20f7      	movs	r0, #247	; 0xf7
 8000408:	f000 f9d8 	bl	80007bc <writecommand>
	writedata(0xA9);
 800040c:	20a9      	movs	r0, #169	; 0xa9
 800040e:	f000 fa59 	bl	80008c4 <writedata>
	writedata(0x51);
 8000412:	2051      	movs	r0, #81	; 0x51
 8000414:	f000 fa56 	bl	80008c4 <writedata>
	writedata(0x2C);
 8000418:	202c      	movs	r0, #44	; 0x2c
 800041a:	f000 fa53 	bl	80008c4 <writedata>
	writedata(0x82);    // D7 stream, loose
 800041e:	2082      	movs	r0, #130	; 0x82
 8000420:	f000 fa50 	bl	80008c4 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 8000424:	2011      	movs	r0, #17
 8000426:	f000 f9c9 	bl	80007bc <writecommand>

	HAL_Delay(120);
 800042a:	2078      	movs	r0, #120	; 0x78
 800042c:	f001 fd9c 	bl	8001f68 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 8000430:	2029      	movs	r0, #41	; 0x29
 8000432:	f000 f9c3 	bl	80007bc <writecommand>


}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000ac 	.word	0x200000ac
 8000440:	200000b0 	.word	0x200000b0

08000444 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4604      	mov	r4, r0
 800044c:	4608      	mov	r0, r1
 800044e:	4611      	mov	r1, r2
 8000450:	461a      	mov	r2, r3
 8000452:	4623      	mov	r3, r4
 8000454:	80fb      	strh	r3, [r7, #6]
 8000456:	4603      	mov	r3, r0
 8000458:	80bb      	strh	r3, [r7, #4]
 800045a:	460b      	mov	r3, r1
 800045c:	807b      	strh	r3, [r7, #2]
 800045e:	4613      	mov	r3, r2
 8000460:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8000462:	202a      	movs	r0, #42	; 0x2a
 8000464:	f000 f9aa 	bl	80007bc <writecommand>
	writedata(x0 >> 8);
 8000468:	88fb      	ldrh	r3, [r7, #6]
 800046a:	0a1b      	lsrs	r3, r3, #8
 800046c:	b29b      	uxth	r3, r3
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fa27 	bl	80008c4 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8000476:	88fb      	ldrh	r3, [r7, #6]
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fa22 	bl	80008c4 <writedata>
	writedata(x1 >> 8);
 8000480:	887b      	ldrh	r3, [r7, #2]
 8000482:	0a1b      	lsrs	r3, r3, #8
 8000484:	b29b      	uxth	r3, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f000 fa1b 	bl	80008c4 <writedata>
	writedata(x1 & 0xFF);     // XEND
 800048e:	887b      	ldrh	r3, [r7, #2]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	f000 fa16 	bl	80008c4 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8000498:	202b      	movs	r0, #43	; 0x2b
 800049a:	f000 f98f 	bl	80007bc <writecommand>
	writedata(y0 >> 8);
 800049e:	88bb      	ldrh	r3, [r7, #4]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 fa0c 	bl	80008c4 <writedata>
	writedata(y0 & 0xff);     // YSTART
 80004ac:	88bb      	ldrh	r3, [r7, #4]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fa07 	bl	80008c4 <writedata>
	writedata(y1 >> 8);
 80004b6:	883b      	ldrh	r3, [r7, #0]
 80004b8:	0a1b      	lsrs	r3, r3, #8
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fa00 	bl	80008c4 <writedata>
	writedata(y1 & 0xff);     // YEND
 80004c4:	883b      	ldrh	r3, [r7, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 f9fb 	bl	80008c4 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 80004ce:	202c      	movs	r0, #44	; 0x2c
 80004d0:	f000 f974 	bl	80007bc <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <setAddrWindow+0xb0>)
 80004dc:	f003 fdf2 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <setAddrWindow+0xb0>)
 80004e6:	f003 fded 	bl	80040c4 <HAL_GPIO_WritePin>
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd90      	pop	{r4, r7, pc}
 80004f2:	bf00      	nop
 80004f4:	48000800 	.word	0x48000800

080004f8 <drawPixel>:
void fillScreen(uint16_t color)
{
	fillRect(0, 0,  _width, _height, color);
}
void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
 8000502:	460b      	mov	r3, r1
 8000504:	80bb      	strh	r3, [r7, #4]
 8000506:	4613      	mov	r3, r2
 8000508:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db31      	blt.n	8000576 <drawPixel+0x7e>
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <drawPixel+0x88>)
 8000514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000518:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800051c:	429a      	cmp	r2, r3
 800051e:	da2a      	bge.n	8000576 <drawPixel+0x7e>
 8000520:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db26      	blt.n	8000576 <drawPixel+0x7e>
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <drawPixel+0x8c>)
 800052a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800052e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	da1f      	bge.n	8000576 <drawPixel+0x7e>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 8000536:	88f8      	ldrh	r0, [r7, #6]
 8000538:	88b9      	ldrh	r1, [r7, #4]
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	3301      	adds	r3, #1
 800053e:	b29a      	uxth	r2, r3
 8000540:	88bb      	ldrh	r3, [r7, #4]
 8000542:	3301      	adds	r3, #1
 8000544:	b29b      	uxth	r3, r3
 8000546:	f7ff ff7d 	bl	8000444 <setAddrWindow>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2110      	movs	r1, #16
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <drawPixel+0x90>)
 8000550:	f003 fdb8 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	480b      	ldr	r0, [pc, #44]	; (8000588 <drawPixel+0x90>)
 800055c:	f003 fdb2 	bl	80040c4 <HAL_GPIO_WritePin>
	write16BitColor(color);
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f94e 	bl	8000804 <write16BitColor>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <drawPixel+0x90>)
 8000570:	f003 fda8 	bl	80040c4 <HAL_GPIO_WritePin>
 8000574:	e000      	b.n	8000578 <drawPixel+0x80>
		return;
 8000576:	bf00      	nop

}
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000ac 	.word	0x200000ac
 8000584:	200000b0 	.word	0x200000b0
 8000588:	48000800 	.word	0x48000800

0800058c <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4604      	mov	r4, r0
 8000594:	4608      	mov	r0, r1
 8000596:	4611      	mov	r1, r2
 8000598:	461a      	mov	r2, r3
 800059a:	4623      	mov	r3, r4
 800059c:	80fb      	strh	r3, [r7, #6]
 800059e:	4603      	mov	r3, r0
 80005a0:	80bb      	strh	r3, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	807b      	strh	r3, [r7, #2]
 80005a6:	4613      	mov	r3, r2
 80005a8:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 80005aa:	4b42      	ldr	r3, [pc, #264]	; (80006b4 <fillRect+0x128>)
 80005ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	da78      	bge.n	80006aa <fillRect+0x11e>
 80005b8:	4b3f      	ldr	r3, [pc, #252]	; (80006b8 <fillRect+0x12c>)
 80005ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da71      	bge.n	80006aa <fillRect+0x11e>
		return;
	if ((x + w - 1) >= _width)
 80005c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005ce:	4413      	add	r3, r2
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a38      	ldr	r2, [pc, #224]	; (80006b4 <fillRect+0x128>)
 80005d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005d8:	4293      	cmp	r3, r2
 80005da:	db07      	blt.n	80005ec <fillRect+0x60>
		w = _width - x;
 80005dc:	4b35      	ldr	r3, [pc, #212]	; (80006b4 <fillRect+0x128>)
 80005de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 80005ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80005f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005f4:	4413      	add	r3, r2
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a2f      	ldr	r2, [pc, #188]	; (80006b8 <fillRect+0x12c>)
 80005fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005fe:	4293      	cmp	r3, r2
 8000600:	db07      	blt.n	8000612 <fillRect+0x86>
		h = _height - y;
 8000602:	4b2d      	ldr	r3, [pc, #180]	; (80006b8 <fillRect+0x12c>)
 8000604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000608:	b29a      	uxth	r2, r3
 800060a:	88bb      	ldrh	r3, [r7, #4]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000612:	88f8      	ldrh	r0, [r7, #6]
 8000614:	88b9      	ldrh	r1, [r7, #4]
 8000616:	88fa      	ldrh	r2, [r7, #6]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	4413      	add	r3, r2
 800061c:	b29b      	uxth	r3, r3
 800061e:	3b01      	subs	r3, #1
 8000620:	b29c      	uxth	r4, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	883b      	ldrh	r3, [r7, #0]
 8000626:	4413      	add	r3, r2
 8000628:	b29b      	uxth	r3, r3
 800062a:	3b01      	subs	r3, #1
 800062c:	b29b      	uxth	r3, r3
 800062e:	4622      	mov	r2, r4
 8000630:	f7ff ff08 	bl	8000444 <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <fillRect+0x130>)
 800063a:	f003 fd43 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000644:	481d      	ldr	r0, [pc, #116]	; (80006bc <fillRect+0x130>)
 8000646:	f003 fd3d 	bl	80040c4 <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 800064a:	883b      	ldrh	r3, [r7, #0]
 800064c:	80bb      	strh	r3, [r7, #4]
 800064e:	e016      	b.n	800067e <fillRect+0xf2>
		for (x = w; x > 0; x--) {
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	80fb      	strh	r3, [r7, #6]
 8000654:	e009      	b.n	800066a <fillRect+0xde>

			write16BitColor(color);
 8000656:	8b3b      	ldrh	r3, [r7, #24]
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f8d3 	bl	8000804 <write16BitColor>
		for (x = w; x > 0; x--) {
 800065e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000662:	b29b      	uxth	r3, r3
 8000664:	3b01      	subs	r3, #1
 8000666:	b29b      	uxth	r3, r3
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	dcf1      	bgt.n	8000656 <fillRect+0xca>
	for (y = h; y > 0; y--) {
 8000672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000676:	b29b      	uxth	r3, r3
 8000678:	3b01      	subs	r3, #1
 800067a:	b29b      	uxth	r3, r3
 800067c:	80bb      	strh	r3, [r7, #4]
 800067e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	dce4      	bgt.n	8000650 <fillRect+0xc4>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <fillRect+0x130>)
 800068e:	f003 fd19 	bl	80040c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2110      	movs	r1, #16
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <fillRect+0x130>)
 8000698:	f003 fd14 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <fillRect+0x130>)
 80006a4:	f003 fd0e 	bl	80040c4 <HAL_GPIO_WritePin>
 80006a8:	e000      	b.n	80006ac <fillRect+0x120>
		return;
 80006aa:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000ac 	.word	0x200000ac
 80006b8:	200000b0 	.word	0x200000b0
 80006bc:	48000800 	.word	0x48000800

080006c0 <setRotation>:
void setRotation(uint8_t r)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 80006ca:	2036      	movs	r0, #54	; 0x36
 80006cc:	f000 f876 	bl	80007bc <writecommand>
	rotation = r % 4; // can't be higher than 3
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <setRotation+0xa4>)
 80006da:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <setRotation+0xa4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d83b      	bhi.n	800075c <setRotation+0x9c>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <setRotation+0x2c>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	08000715 	.word	0x08000715
 80006f4:	0800072d 	.word	0x0800072d
 80006f8:	08000745 	.word	0x08000745
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 80006fc:	2048      	movs	r0, #72	; 0x48
 80006fe:	f000 f8e1 	bl	80008c4 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <setRotation+0xa8>)
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <setRotation+0xac>)
 800070c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000710:	801a      	strh	r2, [r3, #0]
		break;
 8000712:	e023      	b.n	800075c <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8000714:	2028      	movs	r0, #40	; 0x28
 8000716:	f000 f8d5 	bl	80008c4 <writedata>
		_width = ILI9488_TFTHEIGHT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <setRotation+0xa8>)
 800071c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000720:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <setRotation+0xac>)
 8000724:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000728:	801a      	strh	r2, [r3, #0]
		break;
 800072a:	e017      	b.n	800075c <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 800072c:	2088      	movs	r0, #136	; 0x88
 800072e:	f000 f8c9 	bl	80008c4 <writedata>
		_width = ILI9488_TFTWIDTH;
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <setRotation+0xa8>)
 8000734:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000738:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <setRotation+0xac>)
 800073c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000740:	801a      	strh	r2, [r3, #0]
		break;
 8000742:	e00b      	b.n	800075c <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8000744:	20e8      	movs	r0, #232	; 0xe8
 8000746:	f000 f8bd 	bl	80008c4 <writedata>
		_width = ILI9488_TFTHEIGHT;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <setRotation+0xa8>)
 800074c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000750:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <setRotation+0xac>)
 8000754:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000758:	801a      	strh	r2, [r3, #0]
		break;
 800075a:	bf00      	nop
	}

}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200000a8 	.word	0x200000a8
 8000768:	200000ac 	.word	0x200000ac
 800076c:	200000b0 	.word	0x200000b0

08000770 <color565>:

	  writecommand(i ? ILI9488_INVON : ILI9488_INVOFF);

}
uint16_t color565(uint8_t r, uint8_t g, uint8_t b)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
 800077a:	460b      	mov	r3, r1
 800077c:	71bb      	strb	r3, [r7, #6]
 800077e:	4613      	mov	r3, r2
 8000780:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	b21b      	sxth	r3, r3
 8000788:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800078c:	f023 0307 	bic.w	r3, r3, #7
 8000790:	b21a      	sxth	r2, r3
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b21b      	sxth	r3, r3
 8000798:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	797b      	ldrb	r3, [r7, #5]
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29b      	uxth	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <writecommand+0x40>)
 80007cc:	f003 fc7a 	bl	80040c4 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <writecommand+0x40>)
 80007d8:	f003 fc74 	bl	80040c4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80007dc:	1df9      	adds	r1, r7, #7
 80007de:	2301      	movs	r3, #1
 80007e0:	2201      	movs	r2, #1
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <writecommand+0x44>)
 80007e4:	f004 ffef 	bl	80057c6 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ee:	4803      	ldr	r0, [pc, #12]	; (80007fc <writecommand+0x40>)
 80007f0:	f003 fc68 	bl	80040c4 <HAL_GPIO_WritePin>

}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	48000800 	.word	0x48000800
 8000800:	200009e0 	.word	0x200009e0

08000804 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 800080e:	88fb      	ldrh	r3, [r7, #6]
 8000810:	0adb      	lsrs	r3, r3, #11
 8000812:	b29b      	uxth	r3, r3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	115b      	asrs	r3, r3, #5
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000822:	b2db      	uxtb	r3, r3
 8000824:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 031f 	and.w	r3, r3, #31
 800082e:	b2db      	uxtb	r3, r3
 8000830:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	461a      	mov	r2, r3
 8000836:	4613      	mov	r3, r2
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	1a9b      	subs	r3, r3, r2
 800083c:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <write16BitColor+0xb4>)
 800083e:	fb82 1203 	smull	r1, r2, r2, r3
 8000842:	441a      	add	r2, r3
 8000844:	1112      	asrs	r2, r2, #4
 8000846:	17db      	asrs	r3, r3, #31
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800084e:	7bbb      	ldrb	r3, [r7, #14]
 8000850:	461a      	mov	r2, r3
 8000852:	4613      	mov	r3, r2
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	4a18      	ldr	r2, [pc, #96]	; (80008bc <write16BitColor+0xb8>)
 800085a:	fb82 1203 	smull	r1, r2, r2, r3
 800085e:	441a      	add	r2, r3
 8000860:	1152      	asrs	r2, r2, #5
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	461a      	mov	r2, r3
 800086e:	4613      	mov	r3, r2
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	1a9b      	subs	r3, r3, r2
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <write16BitColor+0xb4>)
 8000876:	fb82 1203 	smull	r1, r2, r2, r3
 800087a:	441a      	add	r2, r3
 800087c:	1112      	asrs	r2, r2, #4
 800087e:	17db      	asrs	r3, r3, #31
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 8000886:	f107 010f 	add.w	r1, r7, #15
 800088a:	2301      	movs	r3, #1
 800088c:	2201      	movs	r2, #1
 800088e:	480c      	ldr	r0, [pc, #48]	; (80008c0 <write16BitColor+0xbc>)
 8000890:	f004 ff99 	bl	80057c6 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 8000894:	f107 010e 	add.w	r1, r7, #14
 8000898:	2301      	movs	r3, #1
 800089a:	2201      	movs	r2, #1
 800089c:	4808      	ldr	r0, [pc, #32]	; (80008c0 <write16BitColor+0xbc>)
 800089e:	f004 ff92 	bl	80057c6 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 80008a2:	f107 010d 	add.w	r1, r7, #13
 80008a6:	2301      	movs	r3, #1
 80008a8:	2201      	movs	r2, #1
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <write16BitColor+0xbc>)
 80008ac:	f004 ff8b 	bl	80057c6 <HAL_SPI_Transmit>


}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	84210843 	.word	0x84210843
 80008bc:	82082083 	.word	0x82082083
 80008c0:	200009e0 	.word	0x200009e0

080008c4 <writedata>:
void writedata(uint8_t d)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2110      	movs	r1, #16
 80008d2:	480c      	ldr	r0, [pc, #48]	; (8000904 <writedata+0x40>)
 80008d4:	f003 fbf6 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <writedata+0x40>)
 80008e0:	f003 fbf0 	bl	80040c4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 80008e4:	1df9      	adds	r1, r7, #7
 80008e6:	2301      	movs	r3, #1
 80008e8:	2201      	movs	r2, #1
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <writedata+0x44>)
 80008ec:	f004 ff6b 	bl	80057c6 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <writedata+0x40>)
 80008f8:	f003 fbe4 	bl	80040c4 <HAL_GPIO_WritePin>

}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	48000800 	.word	0x48000800
 8000908:	200009e0 	.word	0x200009e0

0800090c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800090c:	b5b0      	push	{r4, r5, r7, lr}
 800090e:	b08c      	sub	sp, #48	; 0x30
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	80fb      	strh	r3, [r7, #6]
 8000918:	466b      	mov	r3, sp
 800091a:	461d      	mov	r5, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
	if ((Size * 2) < BURST_MAX_SIZE)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	f240 22ed 	movw	r2, #749	; 0x2ed
 8000928:	4293      	cmp	r3, r2
 800092a:	d802      	bhi.n	8000932 <ILI9341_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
 8000930:	e002      	b.n	8000938 <ILI9341_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8000932:	f240 23ee 	movw	r3, #750	; 0x2ee
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	4867      	ldr	r0, [pc, #412]	; (8000adc <ILI9341_Draw_Colour_Burst+0x1d0>)
 800093e:	f003 fbc1 	bl	80040c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000948:	4864      	ldr	r0, [pc, #400]	; (8000adc <ILI9341_Draw_Colour_Burst+0x1d0>)
 800094a:	f003 fbbb 	bl	80040c4 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	0adb      	lsrs	r3, r3, #11
 8000952:	b29b      	uxth	r3, r3
 8000954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	115b      	asrs	r3, r3, #5
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000962:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f003 031f 	and.w	r3, r3, #31
 800096e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 8000972:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000976:	4613      	mov	r3, r2
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	1a9b      	subs	r3, r3, r2
 800097c:	4a58      	ldr	r2, [pc, #352]	; (8000ae0 <ILI9341_Draw_Colour_Burst+0x1d4>)
 800097e:	fb82 1203 	smull	r1, r2, r2, r3
 8000982:	441a      	add	r2, r3
 8000984:	1112      	asrs	r2, r2, #4
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 800098e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000992:	4613      	mov	r3, r2
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <ILI9341_Draw_Colour_Burst+0x1d8>)
 800099a:	fb82 1203 	smull	r1, r2, r2, r3
 800099e:	441a      	add	r2, r3
 80009a0:	1152      	asrs	r2, r2, #5
 80009a2:	17db      	asrs	r3, r3, #31
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 80009aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80009ae:	4613      	mov	r3, r2
 80009b0:	021b      	lsls	r3, r3, #8
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	4a4a      	ldr	r2, [pc, #296]	; (8000ae0 <ILI9341_Draw_Colour_Burst+0x1d4>)
 80009b6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ba:	441a      	add	r2, r3
 80009bc:	1112      	asrs	r2, r2, #4
 80009be:	17db      	asrs	r3, r3, #31
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 80009c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009c8:	4603      	mov	r3, r0
 80009ca:	3b01      	subs	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
 80009ce:	4601      	mov	r1, r0
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	f04f 0400 	mov.w	r4, #0
 80009dc:	00d4      	lsls	r4, r2, #3
 80009de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80009e2:	00cb      	lsls	r3, r1, #3
 80009e4:	4601      	mov	r1, r0
 80009e6:	f04f 0200 	mov.w	r2, #0
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	f04f 0400 	mov.w	r4, #0
 80009f2:	00d4      	lsls	r4, r2, #3
 80009f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80009f8:	00cb      	lsls	r3, r1, #3
 80009fa:	1dc3      	adds	r3, r0, #7
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	ebad 0d03 	sub.w	sp, sp, r3
 8000a04:	466b      	mov	r3, sp
 8000a06:	3300      	adds	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a0e:	e014      	b.n	8000a3a <ILI9341_Draw_Colour_Burst+0x12e>
	{
		burst_buffer[j] = r;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	4413      	add	r3, r2
 8000a16:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000a1a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 8000a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1e:	3301      	adds	r3, #1
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8000a26:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000a32:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8000a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a36:	3303      	adds	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d3e6      	bcc.n	8000a10 <ILI9341_Draw_Colour_Burst+0x104>
	}

	uint32_t Sending_Size = Size * 3;
 8000a42:	683a      	ldr	r2, [r7, #0]
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a54:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a60:	fb01 f202 	mul.w	r2, r1, r2
 8000a64:	1a9b      	subs	r3, r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d018      	beq.n	8000aa0 <ILI9341_Draw_Colour_Burst+0x194>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a72:	e011      	b.n	8000a98 <ILI9341_Draw_Colour_Burst+0x18c>
		{
			SPI1_TX_completed_flag = 0;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	4619      	mov	r1, r3
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <ILI9341_Draw_Colour_Burst+0x1e0>)
 8000a84:	f005 f80e 	bl	8005aa4 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 8000a88:	bf00      	nop
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0fb      	beq.n	8000a8a <ILI9341_Draw_Colour_Burst+0x17e>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	3301      	adds	r3, #1
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3e9      	bcc.n	8000a74 <ILI9341_Draw_Colour_Burst+0x168>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00e      	beq.n	8000ac4 <ILI9341_Draw_Colour_Burst+0x1b8>
	{
		SPI1_TX_completed_flag = 0;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	b292      	uxth	r2, r2
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <ILI9341_Draw_Colour_Burst+0x1e0>)
 8000ab6:	f004 fff5 	bl	8005aa4 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 8000aba:	bf00      	nop
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0fb      	beq.n	8000abc <ILI9341_Draw_Colour_Burst+0x1b0>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <ILI9341_Draw_Colour_Burst+0x1d0>)
 8000acc:	f003 fafa 	bl	80040c4 <HAL_GPIO_WritePin>
 8000ad0:	46ad      	mov	sp, r5
}
 8000ad2:	bf00      	nop
 8000ad4:	3730      	adds	r7, #48	; 0x30
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	48000800 	.word	0x48000800
 8000ae0:	84210843 	.word	0x84210843
 8000ae4:	82082083 	.word	0x82082083
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	200009e0 	.word	0x200009e0

08000af0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 8000afa:	f240 133f 	movw	r3, #319	; 0x13f
 8000afe:	f240 12df 	movw	r2, #479	; 0x1df
 8000b02:	2100      	movs	r1, #0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fc9d 	bl	8000444 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fefb 	bl	800090c <ILI9341_Draw_Colour_Burst>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8000b1e:	b590      	push	{r4, r7, lr}
 8000b20:	b08b      	sub	sp, #44	; 0x2c
 8000b22:	af02      	add	r7, sp, #8
 8000b24:	60ba      	str	r2, [r7, #8]
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	4603      	mov	r3, r0
 8000b2a:	81fb      	strh	r3, [r7, #14]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	777b      	strb	r3, [r7, #29]
 8000b40:	2300      	movs	r3, #0
 8000b42:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	763b      	strb	r3, [r7, #24]
 8000b4c:	e09b      	b.n	8000c86 <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	767b      	strb	r3, [r7, #25]
 8000b52:	e056      	b.n	8000c02 <LCD_Char+0xe4>
		{
			if (bit == 0)
 8000b54:	7f3b      	ldrb	r3, [r7, #28]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d109      	bne.n	8000b6e <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8000b5a:	8bfb      	ldrh	r3, [r7, #30]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	83fa      	strh	r2, [r7, #30]
 8000b60:	461a      	mov	r2, r3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8000b6e:	7f7a      	ldrb	r2, [r7, #29]
 8000b70:	7f3b      	ldrb	r3, [r7, #28]
 8000b72:	4013      	ands	r3, r2
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <LCD_Char+0x64>
 8000b7a:	8b7b      	ldrh	r3, [r7, #26]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	837b      	strh	r3, [r7, #26]
 8000b80:	e039      	b.n	8000bf6 <LCD_Char+0xd8>
			else if (set_pixels > 0)
 8000b82:	8b7b      	ldrh	r3, [r7, #26]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d036      	beq.n	8000bf6 <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	7e7b      	ldrb	r3, [r7, #25]
 8000b92:	441a      	add	r2, r3
 8000b94:	8b7b      	ldrh	r3, [r7, #26]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	fb12 f303 	smulbb	r3, r2, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	89fb      	ldrh	r3, [r7, #14]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b218      	sxth	r0, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	7e3b      	ldrb	r3, [r7, #24]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	fb12 f303 	smulbb	r3, r2, r3
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	89bb      	ldrh	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b219      	sxth	r1, r3
 8000bd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	8b7a      	ldrh	r2, [r7, #26]
 8000bd8:	fb12 f303 	smulbb	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000be4:	b21c      	sxth	r4, r3
 8000be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	4623      	mov	r3, r4
 8000bee:	f7ff fccd 	bl	800058c <fillRect>
				set_pixels = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8000bf6:	7f3b      	ldrb	r3, [r7, #28]
 8000bf8:	085b      	lsrs	r3, r3, #1
 8000bfa:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8000bfc:	7e7b      	ldrb	r3, [r7, #25]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	767b      	strb	r3, [r7, #25]
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	7e7a      	ldrb	r2, [r7, #25]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3a3      	bcc.n	8000b54 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8000c0c:	8b7b      	ldrh	r3, [r7, #26]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d036      	beq.n	8000c80 <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	7e7b      	ldrb	r3, [r7, #25]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	8b7b      	ldrh	r3, [r7, #26]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	fb12 f303 	smulbb	r3, r2, r3
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	4413      	add	r3, r2
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b218      	sxth	r0, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	7e3b      	ldrb	r3, [r7, #24]
 8000c42:	4413      	add	r3, r2
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	fb12 f303 	smulbb	r3, r2, r3
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	89bb      	ldrh	r3, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b219      	sxth	r1, r3
 8000c5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	8b7a      	ldrh	r2, [r7, #26]
 8000c62:	fb12 f303 	smulbb	r3, r2, r3
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c6e:	b21c      	sxth	r4, r3
 8000c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	4623      	mov	r3, r4
 8000c78:	f7ff fc88 	bl	800058c <fillRect>
			set_pixels = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8000c80:	7e3b      	ldrb	r3, [r7, #24]
 8000c82:	3301      	adds	r3, #1
 8000c84:	763b      	strb	r3, [r7, #24]
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	7e3a      	ldrb	r2, [r7, #24]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	f4ff af5e 	bcc.w	8000b4e <LCD_Char+0x30>
		}
	}
}
 8000c92:	bf00      	nop
 8000c94:	3724      	adds	r7, #36	; 0x24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}

08000c9a <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8000c9a:	b590      	push	{r4, r7, lr}
 8000c9c:	b08f      	sub	sp, #60	; 0x3c
 8000c9e:	af02      	add	r7, sp, #8
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	81fb      	strh	r3, [r7, #14]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	220c      	movs	r2, #12
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 f9a1 	bl	8007004 <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cc6:	e056      	b.n	8000d76 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8000cc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 8000cd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000cd8:	2b0a      	cmp	r3, #10
 8000cda:	d10f      	bne.n	8000cfc <LCD_Font+0x62>
		{
			cursor_x = x;
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8000ce0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	fb12 f303 	smulbb	r3, r2, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000cfa:	e039      	b.n	8000d70 <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8000cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d00:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d333      	bcc.n	8000d70 <LCD_Font+0xd6>
 8000d08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d0c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d82d      	bhi.n	8000d70 <LCD_Font+0xd6>
 8000d14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d18:	2b0d      	cmp	r3, #13
 8000d1a:	d029      	beq.n	8000d70 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8000d1c:	6a3a      	ldr	r2, [r7, #32]
 8000d1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d22:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000d26:	1a5b      	subs	r3, r3, r1
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	18d1      	adds	r1, r2, r3
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2208      	movs	r2, #8
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 f966 	bl	8007004 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8000d38:	f107 041c 	add.w	r4, r7, #28
 8000d3c:	f107 0214 	add.w	r2, r7, #20
 8000d40:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8000d44:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8000d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4623      	mov	r3, r4
 8000d54:	f7ff fee3 	bl	8000b1e <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8000d58:	7e3b      	ldrb	r3, [r7, #24]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	fb12 f303 	smulbb	r3, r2, r3
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8000d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d72:	3301      	adds	r3, #1
 8000d74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000d76:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f7ff fa29 	bl	80001d0 <strlen>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d3a1      	bcc.n	8000cc8 <LCD_Font+0x2e>
		}
	}
}
 8000d84:	bf00      	nop
 8000d86:	3734      	adds	r7, #52	; 0x34
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000db0:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <MX_ADC1_Init+0xe4>)
 8000db2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc6:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dce:	2204      	movs	r2, #4
 8000dd0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000df8:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e0e:	4817      	ldr	r0, [pc, #92]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000e10:	f001 faf0 	bl	80023f4 <HAL_ADC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e1a:	f000 fcdf 	bl	80017dc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000e2a:	f002 fb6f 	bl	800350c <HAL_ADCEx_MultiModeConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e34:	f000 fcd2 	bl	80017dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_ADC1_Init+0xe8>)
 8000e3a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e3c:	2306      	movs	r3, #6
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e44:	237f      	movs	r3, #127	; 0x7f
 8000e46:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_ADC1_Init+0xe0>)
 8000e56:	f001 fd4b 	bl	80028f0 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e60:	f000 fcbc 	bl	80017dc <Error_Handler>
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200000b8 	.word	0x200000b8
 8000e70:	50040000 	.word	0x50040000
 8000e74:	08600004 	.word	0x08600004

08000e78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a2a      	ldr	r2, [pc, #168]	; (8000f40 <HAL_ADC_MspInit+0xc8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d14e      	bne.n	8000f38 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	4a23      	ldr	r2, [pc, #140]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_ADC_MspInit+0xcc>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CH1_Pin;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ece:	230b      	movs	r3, #11
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <HAL_ADC_MspInit+0xd0>)
 8000ede:	f002 ff49 	bl	8003d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel3;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_ADC_MspInit+0xd8>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f12:	2220      	movs	r2, #32
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f1e:	f002 fcb3 	bl	8003888 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000f28:	f000 fc58 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f30:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f32:	4a06      	ldr	r2, [pc, #24]	; (8000f4c <HAL_ADC_MspInit+0xd4>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	50040000 	.word	0x50040000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	2000011c 	.word	0x2000011c
 8000f50:	40020430 	.word	0x40020430

08000f54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5e:	4a15      	ldr	r2, [pc, #84]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6493      	str	r3, [r2, #72]	; 0x48
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_DMA_Init+0x60>)
 8000f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	200d      	movs	r0, #13
 8000f90:	f002 fc43 	bl	800381a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f94:	200d      	movs	r0, #13
 8000f96:	f002 fc5c 	bl	8003852 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	203a      	movs	r0, #58	; 0x3a
 8000fa0:	f002 fc3b 	bl	800381a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000fa4:	203a      	movs	r0, #58	; 0x3a
 8000fa6:	f002 fc54 	bl	8003852 <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a41      	ldr	r2, [pc, #260]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <MX_GPIO_Init+0x120>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_GPIO_Init+0x120>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a35      	ldr	r2, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x120>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <MX_GPIO_Init+0x120>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TFT_RST_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f003 f850 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_CS_Pin, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 7188 	mov.w	r1, #272	; 0x110
 800102a:	482c      	ldr	r0, [pc, #176]	; (80010dc <MX_GPIO_Init+0x124>)
 800102c:	f003 f84a 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001036:	482a      	ldr	r0, [pc, #168]	; (80010e0 <MX_GPIO_Init+0x128>)
 8001038:	f003 f844 	bl	80040c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800103c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001040:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_GPIO_Init+0x12c>)
 8001044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	4822      	ldr	r0, [pc, #136]	; (80010dc <MX_GPIO_Init+0x124>)
 8001052:	f002 fe8f 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001056:	2320      	movs	r3, #32
 8001058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f002 fe80 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_CS_Pin;
 8001074:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4619      	mov	r1, r3
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_GPIO_Init+0x124>)
 800108e:	f002 fe71 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_GPIO_Init+0x128>)
 80010ac:	f002 fe62 	bl	8003d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RST_Pin;
 80010b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TFT_RST_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f002 fe52 	bl	8003d74 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800
 80010e0:	48000400 	.word	0x48000400
 80010e4:	10210000 	.word	0x10210000

080010e8 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_SPI_TxCpltCallback+0x1c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <drawGrid>:

void drawGrid(){
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
	// vertical lines
	for(int i = 0; i < 480; i+=60){
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e015      	b.n	8001140 <drawGrid+0x38>
		for(int j = 20; j < 320; j+=2)
 8001114:	2314      	movs	r3, #20
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e00b      	b.n	8001132 <drawGrid+0x2a>
			drawPixel(i, j, ILI9488_DARKGREY);
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	b21b      	sxth	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	b211      	sxth	r1, r2
 8001122:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9e6 	bl	80004f8 <drawPixel>
		for(int j = 20; j < 320; j+=2)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	3302      	adds	r3, #2
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001138:	dbef      	blt.n	800111a <drawGrid+0x12>
	for(int i = 0; i < 480; i+=60){
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	333c      	adds	r3, #60	; 0x3c
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001146:	dbe5      	blt.n	8001114 <drawGrid+0xc>
	}
	for(int j = 20; j < 320; j+=2)
 8001148:	2314      	movs	r3, #20
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e00b      	b.n	8001166 <drawGrid+0x5e>
				drawPixel(479, j, ILI9488_DARKGREY);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	b21b      	sxth	r3, r3
 8001152:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001156:	4619      	mov	r1, r3
 8001158:	f240 10df 	movw	r0, #479	; 0x1df
 800115c:	f7ff f9cc 	bl	80004f8 <drawPixel>
	for(int j = 20; j < 320; j+=2)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3302      	adds	r3, #2
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800116c:	dbef      	blt.n	800114e <drawGrid+0x46>

	// horizontal lines
	for(int i = 20; i < 320; i+=60){
 800116e:	2314      	movs	r3, #20
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	e015      	b.n	80011a0 <drawGrid+0x98>
		for(int j = 0; j < 480; j+=2)
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e00b      	b.n	8001192 <drawGrid+0x8a>
			drawPixel(j, i, ILI9488_DARKGREY);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	b21b      	sxth	r3, r3
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	b211      	sxth	r1, r2
 8001182:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9b6 	bl	80004f8 <drawPixel>
		for(int j = 0; j < 480; j+=2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001198:	dbef      	blt.n	800117a <drawGrid+0x72>
	for(int i = 20; i < 320; i+=60){
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	333c      	adds	r3, #60	; 0x3c
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011a6:	dbe5      	blt.n	8001174 <drawGrid+0x6c>
	}
	for(int j = 0; j < 480; j+=2)
 80011a8:	2300      	movs	r3, #0
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	e00b      	b.n	80011c6 <drawGrid+0xbe>
				drawPixel(j, 319, ILI9488_DARKGREY);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	f647 32ef 	movw	r2, #31727	; 0x7bef
 80011b6:	f240 113f 	movw	r1, #319	; 0x13f
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f99c 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 480; j+=2)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3302      	adds	r3, #2
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80011cc:	dbef      	blt.n	80011ae <drawGrid+0xa6>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <erase_waveform>:

void erase_waveform(uint16_t waveform[MEMORY_DEPTH], uint x){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 480; ++i){
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e0db      	b.n	80013a0 <erase_waveform+0x1c8>
			drawPixel(i, LCD_HEIGHT/2 - x - waveform[i]/40, BLACK);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	b218      	sxth	r0, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	425b      	negs	r3, r3
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	6879      	ldr	r1, [r7, #4]
 80011fa:	440b      	add	r3, r1
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	496d      	ldr	r1, [pc, #436]	; (80013b4 <erase_waveform+0x1dc>)
 8001200:	fba1 1303 	umull	r1, r3, r1, r3
 8001204:	095b      	lsrs	r3, r3, #5
 8001206:	b29b      	uxth	r3, r3
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	33a0      	adds	r3, #160	; 0xa0
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21b      	sxth	r3, r3
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff f96f 	bl	80004f8 <drawPixel>
		if((i%2==0) || (i ==479)){
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <erase_waveform+0x56>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f240 12df 	movw	r2, #479	; 0x1df
 800122a:	4293      	cmp	r3, r2
 800122c:	d176      	bne.n	800131c <erase_waveform+0x144>
			if(((LCD_HEIGHT/2 - x - waveform[i]/40) == 20) ||
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	425b      	negs	r3, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	0052      	lsls	r2, r2, #1
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	440a      	add	r2, r1
 800123a:	8812      	ldrh	r2, [r2, #0]
 800123c:	495d      	ldr	r1, [pc, #372]	; (80013b4 <erase_waveform+0x1dc>)
 800123e:	fba1 1202 	umull	r1, r2, r1, r2
 8001242:	0952      	lsrs	r2, r2, #5
 8001244:	b292      	uxth	r2, r2
 8001246:	1a9b      	subs	r3, r3, r2
 8001248:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
 800124c:	d04c      	beq.n	80012e8 <erase_waveform+0x110>
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 80) ||
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	425b      	negs	r3, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	440a      	add	r2, r1
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	4955      	ldr	r1, [pc, #340]	; (80013b4 <erase_waveform+0x1dc>)
 800125e:	fba1 1202 	umull	r1, r2, r1, r2
 8001262:	0952      	lsrs	r2, r2, #5
 8001264:	b292      	uxth	r2, r2
 8001266:	1a9b      	subs	r3, r3, r2
			if(((LCD_HEIGHT/2 - x - waveform[i]/40) == 20) ||
 8001268:	f113 0f50 	cmn.w	r3, #80	; 0x50
 800126c:	d03c      	beq.n	80012e8 <erase_waveform+0x110>
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 140) ||
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	425b      	negs	r3, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	440a      	add	r2, r1
 800127a:	8812      	ldrh	r2, [r2, #0]
 800127c:	494d      	ldr	r1, [pc, #308]	; (80013b4 <erase_waveform+0x1dc>)
 800127e:	fba1 1202 	umull	r1, r2, r1, r2
 8001282:	0952      	lsrs	r2, r2, #5
 8001284:	b292      	uxth	r2, r2
 8001286:	1a9b      	subs	r3, r3, r2
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 80) ||
 8001288:	f113 0f14 	cmn.w	r3, #20
 800128c:	d02c      	beq.n	80012e8 <erase_waveform+0x110>
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 200) ||
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	425b      	negs	r3, r3
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	0052      	lsls	r2, r2, #1
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	440a      	add	r2, r1
 800129a:	8812      	ldrh	r2, [r2, #0]
 800129c:	4945      	ldr	r1, [pc, #276]	; (80013b4 <erase_waveform+0x1dc>)
 800129e:	fba1 1202 	umull	r1, r2, r1, r2
 80012a2:	0952      	lsrs	r2, r2, #5
 80012a4:	b292      	uxth	r2, r2
 80012a6:	1a9b      	subs	r3, r3, r2
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 140) ||
 80012a8:	2b28      	cmp	r3, #40	; 0x28
 80012aa:	d01d      	beq.n	80012e8 <erase_waveform+0x110>
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 260) ||
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	425b      	negs	r3, r3
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	0052      	lsls	r2, r2, #1
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	440a      	add	r2, r1
 80012b8:	8812      	ldrh	r2, [r2, #0]
 80012ba:	493e      	ldr	r1, [pc, #248]	; (80013b4 <erase_waveform+0x1dc>)
 80012bc:	fba1 1202 	umull	r1, r2, r1, r2
 80012c0:	0952      	lsrs	r2, r2, #5
 80012c2:	b292      	uxth	r2, r2
 80012c4:	1a9b      	subs	r3, r3, r2
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 200) ||
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d00e      	beq.n	80012e8 <erase_waveform+0x110>
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 319)){
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	425b      	negs	r3, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	0052      	lsls	r2, r2, #1
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	440a      	add	r2, r1
 80012d6:	8812      	ldrh	r2, [r2, #0]
 80012d8:	4936      	ldr	r1, [pc, #216]	; (80013b4 <erase_waveform+0x1dc>)
 80012da:	fba1 1202 	umull	r1, r2, r1, r2
 80012de:	0952      	lsrs	r2, r2, #5
 80012e0:	b292      	uxth	r2, r2
 80012e2:	1a9b      	subs	r3, r3, r2
			   ((LCD_HEIGHT/2 - x - waveform[i]/40) == 260) ||
 80012e4:	2b9f      	cmp	r3, #159	; 0x9f
 80012e6:	d119      	bne.n	800131c <erase_waveform+0x144>
				drawPixel(i, LCD_HEIGHT/2 - x - waveform[i]/40, ILI9488_DARKGREY);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	b218      	sxth	r0, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	425b      	negs	r3, r3
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	440b      	add	r3, r1
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	492d      	ldr	r1, [pc, #180]	; (80013b4 <erase_waveform+0x1dc>)
 8001300:	fba1 1303 	umull	r1, r3, r1, r3
 8001304:	095b      	lsrs	r3, r3, #5
 8001306:	b29b      	uxth	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29b      	uxth	r3, r3
 800130c:	33a0      	adds	r3, #160	; 0xa0
 800130e:	b29b      	uxth	r3, r3
 8001310:	b21b      	sxth	r3, r3
 8001312:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff f8ee 	bl	80004f8 <drawPixel>
			}
		}
		if((i%60==0) || (i ==479)){
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <erase_waveform+0x1e0>)
 8001320:	fb83 1302 	smull	r1, r3, r3, r2
 8001324:	4413      	add	r3, r2
 8001326:	1159      	asrs	r1, r3, #5
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1ac9      	subs	r1, r1, r3
 800132c:	460b      	mov	r3, r1
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	1a5b      	subs	r3, r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	1ad1      	subs	r1, r2, r3
 8001336:	2900      	cmp	r1, #0
 8001338:	d004      	beq.n	8001344 <erase_waveform+0x16c>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f240 12df 	movw	r2, #479	; 0x1df
 8001340:	4293      	cmp	r3, r2
 8001342:	d12a      	bne.n	800139a <erase_waveform+0x1c2>
			if(((LCD_HEIGHT/2 - x - waveform[i]/40) % 2) == 0){
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	425b      	negs	r3, r3
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	0052      	lsls	r2, r2, #1
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	440a      	add	r2, r1
 8001350:	8812      	ldrh	r2, [r2, #0]
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <erase_waveform+0x1dc>)
 8001354:	fba1 1202 	umull	r1, r2, r1, r2
 8001358:	0952      	lsrs	r2, r2, #5
 800135a:	b292      	uxth	r2, r2
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <erase_waveform+0x1c2>
				drawPixel(i, LCD_HEIGHT/2 - x - waveform[i]/40, ILI9488_DARKGREY);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	b218      	sxth	r0, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	425b      	negs	r3, r3
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	440b      	add	r3, r1
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	490d      	ldr	r1, [pc, #52]	; (80013b4 <erase_waveform+0x1dc>)
 800137e:	fba1 1303 	umull	r1, r3, r1, r3
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	b29b      	uxth	r3, r3
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	33a0      	adds	r3, #160	; 0xa0
 800138c:	b29b      	uxth	r3, r3
 800138e:	b21b      	sxth	r3, r3
 8001390:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff f8af 	bl	80004f8 <drawPixel>
	for(int i = 0; i < 480; ++i){
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80013a6:	f6ff af1f 	blt.w	80011e8 <erase_waveform+0x10>
			}
		}
	  }
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	cccccccd 	.word	0xcccccccd
 80013b8:	88888889 	.word	0x88888889

080013bc <draw_waveform>:

void draw_waveform(uint16_t waveform[MEMORY_DEPTH], uint x){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	//for(int i = 0; i < 480; ++i){
		//	drawPixel(i, LCD_HEIGHT/2 - x - waveform_CH1_prev[i]/40, BLACK);
	//}
	//drawGrid();
	erase_waveform(waveform_CH1_prev, x);
 80013c6:	6839      	ldr	r1, [r7, #0]
 80013c8:	4850      	ldr	r0, [pc, #320]	; (800150c <draw_waveform+0x150>)
 80013ca:	f7ff ff05 	bl	80011d8 <erase_waveform>
	//drawGrid();
	for(int i = 0; i < 480; ++i){
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e024      	b.n	800141e <draw_waveform+0x62>
		drawPixel(i, LCD_HEIGHT/2 - x - waveform[i]/40, GREEN);
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	b218      	sxth	r0, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	425b      	negs	r3, r3
 80013de:	b29a      	uxth	r2, r3
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	440b      	add	r3, r1
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4949      	ldr	r1, [pc, #292]	; (8001510 <draw_waveform+0x154>)
 80013ec:	fba1 1303 	umull	r1, r3, r1, r3
 80013f0:	095b      	lsrs	r3, r3, #5
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	33a0      	adds	r3, #160	; 0xa0
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff f878 	bl	80004f8 <drawPixel>
		waveform_CH1_prev[i] = waveform_CH1[i];
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <draw_waveform+0x158>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <draw_waveform+0x150>)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 480; ++i){
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001424:	dbd6      	blt.n	80013d4 <draw_waveform+0x18>
	  }

	// draw marker 0
	for(int j = 0; j < 5; ++j){
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	e00f      	b.n	800144c <draw_waveform+0x90>
			drawPixel(j, LCD_HEIGHT/2 - x - 2, GREEN);
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	b218      	sxth	r0, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 8001438:	b29b      	uxth	r3, r3
 800143a:	b21b      	sxth	r3, r3
 800143c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff f859 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 5; ++j){
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	3301      	adds	r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b04      	cmp	r3, #4
 8001450:	ddec      	ble.n	800142c <draw_waveform+0x70>
		}
	for(int j = 0; j < 6; ++j){
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	e00f      	b.n	8001478 <draw_waveform+0xbc>
		drawPixel(j, LCD_HEIGHT/2 - x - 1, GREEN);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	b218      	sxth	r0, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f1c3 039f 	rsb	r3, r3, #159	; 0x9f
 8001464:	b29b      	uxth	r3, r3
 8001466:	b21b      	sxth	r3, r3
 8001468:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff f843 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 6; ++j){
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b05      	cmp	r3, #5
 800147c:	ddec      	ble.n	8001458 <draw_waveform+0x9c>
	}
	for(int j = 0; j < 7; ++j){
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	e00f      	b.n	80014a4 <draw_waveform+0xe8>
		drawPixel(j, LCD_HEIGHT/2 - x, GREEN);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	b218      	sxth	r0, r3
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001490:	b29b      	uxth	r3, r3
 8001492:	b21b      	sxth	r3, r3
 8001494:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff f82d 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 7; ++j){
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	3301      	adds	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	ddec      	ble.n	8001484 <draw_waveform+0xc8>
	}
	for(int j = 0; j < 6; ++j){
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	e00f      	b.n	80014d0 <draw_waveform+0x114>
		drawPixel(j, LCD_HEIGHT/2 - x + 1, GREEN);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	b218      	sxth	r0, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 80014bc:	b29b      	uxth	r3, r3
 80014be:	b21b      	sxth	r3, r3
 80014c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff f817 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 6; ++j){
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	ddec      	ble.n	80014b0 <draw_waveform+0xf4>
	}
	for(int j = 0; j < 5; ++j){
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	e00f      	b.n	80014fc <draw_waveform+0x140>
			drawPixel(j, LCD_HEIGHT/2 - x + 2, GREEN);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	b218      	sxth	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f1c3 03a2 	rsb	r3, r3, #162	; 0xa2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff f801 	bl	80004f8 <drawPixel>
	for(int j = 0; j < 5; ++j){
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	3301      	adds	r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	ddec      	ble.n	80014dc <draw_waveform+0x120>
		}

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000057c 	.word	0x2000057c
 8001510:	cccccccd 	.word	0xcccccccd
 8001514:	20000164 	.word	0x20000164

08001518 <calculate_peak_to_peak>:


int calculate_peak_to_peak(int16_t waveform[MEMORY_DEPTH]){
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint32_t max=0, min=4096;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e024      	b.n	800157a <calculate_peak_to_peak+0x62>
		if(waveform[i]<min)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	461a      	mov	r2, r3
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4293      	cmp	r3, r2
 8001542:	d906      	bls.n	8001552 <calculate_peak_to_peak+0x3a>
			min=waveform[i];
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	613b      	str	r3, [r7, #16]
		if(waveform[i]>max)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	461a      	mov	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4293      	cmp	r3, r2
 8001564:	d206      	bcs.n	8001574 <calculate_peak_to_peak+0x5c>
			max=waveform[i];
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < MEMORY_DEPTH; ++i){
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001580:	dbd6      	blt.n	8001530 <calculate_peak_to_peak+0x18>
	}
	return max-min;
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
}
 8001588:	4618      	mov	r0, r3
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f000 fc69 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f887 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f7ff fd09 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a6:	f7ff fcd5 	bl	8000f54 <MX_DMA_Init>
  MX_SPI1_Init();
 80015aa:	f000 f91f 	bl	80017ec <MX_SPI1_Init>
  MX_SPI2_Init();
 80015ae:	f000 f95b 	bl	8001868 <MX_SPI2_Init>
  MX_TIM3_Init();
 80015b2:	f000 fb57 	bl	8001c64 <MX_TIM3_Init>
  MX_ADC1_Init();
 80015b6:	f7ff fbe9 	bl	8000d8c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) waveform_CH1, MEMORY_DEPTH);
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	4934      	ldr	r1, [pc, #208]	; (8001690 <main+0xfc>)
 80015c0:	4834      	ldr	r0, [pc, #208]	; (8001694 <main+0x100>)
 80015c2:	f001 f86b 	bl	800269c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015c6:	210c      	movs	r1, #12
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <main+0x104>)
 80015ca:	f004 febd 	bl	8006348 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80015ce:	2108      	movs	r1, #8
 80015d0:	4831      	ldr	r0, [pc, #196]	; (8001698 <main+0x104>)
 80015d2:	f004 feb9 	bl	8006348 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, LCD_BRIGHTNESS); // 0-1000
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <main+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 200); // 0-1000
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <main+0x104>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	22c8      	movs	r2, #200	; 0xc8
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c
  ILI9488_Init();
 80015e8:	f7fe fe4a 	bl	8000280 <ILI9488_Init>
  setRotation(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff f867 	bl	80006c0 <setRotation>
  ILI9341_Fill_Screen(ILI9488_BLACK);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff fa7c 	bl	8000af0 <ILI9341_Fill_Screen>

  //uint16_t touchX = 0, touchY = 0;
  for(int i = 0; i < 200; ++i){
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	e00f      	b.n	800161e <main+0x8a>
	  image[i] = color565(20, 50, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2132      	movs	r1, #50	; 0x32
 8001602:	2014      	movs	r0, #20
 8001604:	f7ff f8b4 	bl	8000770 <color565>
 8001608:	4603      	mov	r3, r0
 800160a:	4619      	mov	r1, r3
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <main+0x108>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	b2ca      	uxtb	r2, r1
 8001616:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 200; ++i){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3301      	adds	r3, #1
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2bc7      	cmp	r3, #199	; 0xc7
 8001622:	ddec      	ble.n	80015fe <main+0x6a>
  }
  /*
  for(int i = 0; i < 480; ++i){
	waveform_CH1[i] = 40*sin(0.1*i);
  }*/
  int offset = -40;
 8001624:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8001628:	603b      	str	r3, [r7, #0]
  drawGrid();
 800162a:	f7ff fd6d 	bl	8001108 <drawGrid>
  while (1)
  {

	  //ILI9341_Fill_Screen(ILI9488_BLACK);
	  //drawImage(image, 10, 10, 200, 1);
	  if(conv_done){
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <main+0x10c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0fb      	beq.n	800162e <main+0x9a>
		  conv_done = 0;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <main+0x10c>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
		  draw_waveform(waveform_CH1, offset);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <main+0xfc>)
 8001642:	f7ff febb 	bl	80013bc <draw_waveform>
		  //HAL_Delay(500);
		  sprintf(buf1,"Vpp=%d", calculate_peak_to_peak(waveform_CH1));
 8001646:	4812      	ldr	r0, [pc, #72]	; (8001690 <main+0xfc>)
 8001648:	f7ff ff66 	bl	8001518 <calculate_peak_to_peak>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	4914      	ldr	r1, [pc, #80]	; (80016a4 <main+0x110>)
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <main+0x114>)
 8001654:	f005 fcea 	bl	800702c <siprintf>
		  fillRect(39, 1, 35, 18, RED);
 8001658:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2312      	movs	r3, #18
 8001660:	2223      	movs	r2, #35	; 0x23
 8001662:	2101      	movs	r1, #1
 8001664:	2027      	movs	r0, #39	; 0x27
 8001666:	f7fe ff91 	bl	800058c <fillRect>
		  LCD_Font(5, 15, buf1, _Open_Sans_Bold_12  , 1, WHITE);
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2301      	movs	r3, #1
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <main+0x118>)
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <main+0x114>)
 8001678:	210f      	movs	r1, #15
 800167a:	2005      	movs	r0, #5
 800167c:	f7ff fb0d 	bl	8000c9a <LCD_Font>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) waveform_CH1, MEMORY_DEPTH);
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	4902      	ldr	r1, [pc, #8]	; (8001690 <main+0xfc>)
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <main+0x100>)
 8001688:	f001 f808 	bl	800269c <HAL_ADC_Start_DMA>
	  if(conv_done){
 800168c:	e7cf      	b.n	800162e <main+0x9a>
 800168e:	bf00      	nop
 8001690:	20000164 	.word	0x20000164
 8001694:	200000b8 	.word	0x200000b8
 8001698:	20000a8c 	.word	0x20000a8c
 800169c:	20000564 	.word	0x20000564
 80016a0:	20000090 	.word	0x20000090
 80016a4:	0800783c 	.word	0x0800783c
 80016a8:	20000568 	.word	0x20000568
 80016ac:	08007ddc 	.word	0x08007ddc

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b0b8      	sub	sp, #224	; 0xe0
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ba:	2244      	movs	r2, #68	; 0x44
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f005 fcab 	bl	800701a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2288      	movs	r2, #136	; 0x88
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fc9d 	bl	800701a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e0:	2302      	movs	r3, #2
 80016e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ee:	2310      	movs	r3, #16
 80016f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	2302      	movs	r3, #2
 80016f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016fa:	2302      	movs	r3, #2
 80016fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001706:	230a      	movs	r3, #10
 8001708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800170c:	2307      	movs	r3, #7
 800170e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fd4a 	bl	80041bc <HAL_RCC_OscConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800172e:	f000 f855 	bl	80017dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001738:	2303      	movs	r3, #3
 800173a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001750:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001754:	2104      	movs	r1, #4
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f916 	bl	8004988 <HAL_RCC_ClockConfig>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001762:	f000 f83b 	bl	80017dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800176a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800176c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001770:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001772:	2302      	movs	r3, #2
 8001774:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001776:	2301      	movs	r3, #1
 8001778:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800177a:	2308      	movs	r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800177e:	2307      	movs	r3, #7
 8001780:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800178a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fac4 	bl	8004d20 <HAL_RCCEx_PeriphCLKConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800179e:	f000 f81d 	bl	80017dc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a6:	f002 fcb3 	bl	8004110 <HAL_PWREx_ControlVoltageScaling>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80017b0:	f000 f814 	bl	80017dc <Error_Handler>
  }
}
 80017b4:	bf00      	nop
 80017b6:	37e0      	adds	r7, #224	; 0xe0
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	conv_done = 1;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f001 f81a 	bl	8002804 <HAL_ADC_Stop_DMA>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000090 	.word	0x20000090

080017dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <MX_SPI1_Init+0x74>)
 80017f2:	4a1c      	ldr	r2, [pc, #112]	; (8001864 <MX_SPI1_Init+0x78>)
 80017f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <MX_SPI1_Init+0x74>)
 80017f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <MX_SPI1_Init+0x74>)
 8001806:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800180a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_SPI1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <MX_SPI1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_SPI1_Init+0x74>)
 800181a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001820:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_SPI1_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_SPI1_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_SPI1_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_SPI1_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_SPI1_Init+0x74>)
 800183a:	2207      	movs	r2, #7
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_SPI1_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_SPI1_Init+0x74>)
 8001846:	2208      	movs	r2, #8
 8001848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_SPI1_Init+0x74>)
 800184c:	f003 ff18 	bl	8005680 <HAL_SPI_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001856:	f7ff ffc1 	bl	80017dc <Error_Handler>
  }

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200009e0 	.word	0x200009e0
 8001864:	40013000 	.word	0x40013000

08001868 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_SPI2_Init+0x74>)
 800186e:	4a1c      	ldr	r2, [pc, #112]	; (80018e0 <MX_SPI2_Init+0x78>)
 8001870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <MX_SPI2_Init+0x74>)
 8001874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_SPI2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_SPI2_Init+0x74>)
 8001882:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001886:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_SPI2_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_SPI2_Init+0x74>)
 8001896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_SPI2_Init+0x74>)
 800189e:	2218      	movs	r2, #24
 80018a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_SPI2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_SPI2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_SPI2_Init+0x74>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_SPI2_Init+0x74>)
 80018b6:	2207      	movs	r2, #7
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_SPI2_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_SPI2_Init+0x74>)
 80018c2:	2208      	movs	r2, #8
 80018c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_SPI2_Init+0x74>)
 80018c8:	f003 feda 	bl	8005680 <HAL_SPI_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018d2:	f7ff ff83 	bl	80017dc <Error_Handler>
  }

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2000097c 	.word	0x2000097c
 80018e0:	40003800 	.word	0x40003800

080018e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08e      	sub	sp, #56	; 0x38
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a63      	ldr	r2, [pc, #396]	; (8001a90 <HAL_SPI_MspInit+0x1ac>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d176      	bne.n	80019f4 <HAL_SPI_MspInit+0x110>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a62      	ldr	r2, [pc, #392]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b60      	ldr	r3, [pc, #384]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800195e:	2305      	movs	r3, #5
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f002 fa02 	bl	8003d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001970:	2308      	movs	r3, #8
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197c:	2303      	movs	r3, #3
 800197e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001980:	2305      	movs	r3, #5
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001988:	4619      	mov	r1, r3
 800198a:	4843      	ldr	r0, [pc, #268]	; (8001a98 <HAL_SPI_MspInit+0x1b4>)
 800198c:	f002 f9f2 	bl	8003d74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 8001992:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <HAL_SPI_MspInit+0x1bc>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 8001998:	2201      	movs	r2, #1
 800199a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 800199e:	2210      	movs	r2, #16
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a2:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019c6:	4835      	ldr	r0, [pc, #212]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019c8:	f001 ff5e 	bl	8003888 <HAL_DMA_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 80019d2:	f7ff ff03 	bl	80017dc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019da:	655a      	str	r2, [r3, #84]	; 0x54
 80019dc:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <HAL_SPI_MspInit+0x1b8>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	2023      	movs	r0, #35	; 0x23
 80019e8:	f001 ff17 	bl	800381a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019ec:	2023      	movs	r0, #35	; 0x23
 80019ee:	f001 ff30 	bl	8003852 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019f2:	e049      	b.n	8001a88 <HAL_SPI_MspInit+0x1a4>
  else if(spiHandle->Instance==SPI2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_SPI_MspInit+0x1c0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d144      	bne.n	8001a88 <HAL_SPI_MspInit+0x1a4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_SPI_MspInit+0x1b0>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a46:	230c      	movs	r3, #12
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a56:	2305      	movs	r3, #5
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <HAL_SPI_MspInit+0x1c4>)
 8001a62:	f002 f987 	bl	8003d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a78:	2305      	movs	r3, #5
 8001a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a80:	4619      	mov	r1, r3
 8001a82:	4805      	ldr	r0, [pc, #20]	; (8001a98 <HAL_SPI_MspInit+0x1b4>)
 8001a84:	f002 f976 	bl	8003d74 <HAL_GPIO_Init>
}
 8001a88:	bf00      	nop
 8001a8a:	3738      	adds	r7, #56	; 0x38
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	20000a44 	.word	0x20000a44
 8001aa0:	40020030 	.word	0x40020030
 8001aa4:	40003800 	.word	0x40003800
 8001aa8:	48000800 	.word	0x48000800

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b48:	f000 f9ee 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA1_Channel3_IRQHandler+0x10>)
 8001b56:	f002 f82e 	bl	8003bb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000a44 	.word	0x20000a44

08001b64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <SPI1_IRQHandler+0x10>)
 8001b6a:	f004 f88f 	bl	8005c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200009e0 	.word	0x200009e0

08001b78 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <DMA2_Channel3_IRQHandler+0x10>)
 8001b7e:	f002 f81a 	bl	8003bb6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000011c 	.word	0x2000011c

08001b8c <_sbrk>:
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	; (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
 8001bbc:	f005 f9f8 	bl	8006fb0 <__errno>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20018000 	.word	0x20018000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	20000094 	.word	0x20000094
 8001bf4:	20000ae0 	.word	0x20000ae0

08001bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <SystemInit+0x64>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <SystemInit+0x64>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <SystemInit+0x68>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <SystemInit+0x68>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <SystemInit+0x68>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <SystemInit+0x68>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <SystemInit+0x68>)
 8001c24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <SystemInit+0x68>)
 8001c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <SystemInit+0x68>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <SystemInit+0x68>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <SystemInit+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <SystemInit+0x64>)
 8001c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00
 8001c60:	40021000 	.word	0x40021000

08001c64 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6a:	f107 031c 	add.w	r3, r7, #28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c76:	463b      	mov	r3, r7
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001c8a:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <MX_TIM3_Init+0xc8>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001c90:	224f      	movs	r2, #79	; 0x4f
 8001c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cae:	481e      	ldr	r0, [pc, #120]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001cb0:	f004 faf2 	bl	8006298 <HAL_TIM_PWM_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001cba:	f7ff fd8f 	bl	80017dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001cce:	f005 f8e7 	bl	8006ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001cd8:	f7ff fd80 	bl	80017dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	2208      	movs	r2, #8
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001cf4:	f004 fc2e 	bl	8006554 <HAL_TIM_PWM_ConfigChannel>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001cfe:	f7ff fd6d 	bl	80017dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	220c      	movs	r2, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001d0a:	f004 fc23 	bl	8006554 <HAL_TIM_PWM_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001d14:	f7ff fd62 	bl	80017dc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <MX_TIM3_Init+0xc4>)
 8001d1a:	f000 f829 	bl	8001d70 <HAL_TIM_MspPostInit>

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000a8c 	.word	0x20000a8c
 8001d2c:	40000400 	.word	0x40000400

08001d30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_TIM_PWM_MspInit+0x38>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10b      	bne.n	8001d5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_TIM_PWM_MspInit+0x3c>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400
 8001d6c:	40021000 	.word	0x40021000

08001d70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_TIM_MspPostInit+0x9c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d138      	bne.n	8001e04 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <HAL_TIM_MspPostInit+0xa0>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GEN_OUT_Pin;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GEN_OUT_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <HAL_TIM_MspPostInit+0xa4>)
 8001dde:	f001 ffc9 	bl	8003d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TFT_LED_Pin;
 8001de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df4:	2302      	movs	r3, #2
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TFT_LED_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <HAL_TIM_MspPostInit+0xa8>)
 8001e00:	f001 ffb8 	bl	8003d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3728      	adds	r7, #40	; 0x28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	48000800 	.word	0x48000800

08001e1c <Reset_Handler>:
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopForever+0x2>
 8001e20:	f7ff feea 	bl	8001bf8 <SystemInit>
 8001e24:	2100      	movs	r1, #0
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <LoopForever+0x6>)
 8001e2a:	585b      	ldr	r3, [r3, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:
 8001e30:	480a      	ldr	r0, [pc, #40]	; (8001e5c <LoopForever+0xa>)
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <LoopForever+0xe>)
 8001e34:	1842      	adds	r2, r0, r1
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	; (8001e64 <LoopForever+0x12>)
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <LoopForever+0x16>)
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>
 8001e4a:	f005 f8b7 	bl	8006fbc <__libc_init_array>
 8001e4e:	f7ff fba1 	bl	8001594 <main>

08001e52 <LoopForever>:
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
 8001e54:	20018000 	.word	0x20018000
 8001e58:	08007e64 	.word	0x08007e64
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000074 	.word	0x20000074
 8001e64:	20000074 	.word	0x20000074
 8001e68:	20000ae0 	.word	0x20000ae0

08001e6c <ADC1_2_IRQHandler>:
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <HAL_Init+0x3c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_Init+0x3c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f001 fcbc 	bl	8003804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f80f 	bl	8001eb0 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	e001      	b.n	8001ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9e:	f7ff fe05 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_InitTick+0x6c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_InitTick+0x70>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_InitTick+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f001 fcc7 	bl	800386e <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d809      	bhi.n	8001f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f001 fc91 	bl	800381a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_InitTick+0x74>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e004      	b.n	8001f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e001      	b.n	8001f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	20000004 	.word	0x20000004
 8001f24:	20000008 	.word	0x20000008

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000000c 	.word	0x2000000c
 8001f4c:	20000ad8 	.word	0x20000ad8

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000ad8 	.word	0x20000ad8

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_Delay+0x40>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	2000000c 	.word	0x2000000c

08001fac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3360      	adds	r3, #96	; 0x60
 8002026:	461a      	mov	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <LL_ADC_SetOffset+0x44>)
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	4313      	orrs	r3, r2
 8002044:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	03fff000 	.word	0x03fff000

0800205c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3360      	adds	r3, #96	; 0x60
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3330      	adds	r3, #48	; 0x30
 80020f4:	461a      	mov	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	4413      	add	r3, r2
 8002102:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	211f      	movs	r1, #31
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 011f 	and.w	r1, r3, #31
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	431a      	orrs	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3314      	adds	r3, #20
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	0e5b      	lsrs	r3, r3, #25
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0d1b      	lsrs	r3, r3, #20
 8002164:	f003 031f 	and.w	r3, r3, #31
 8002168:	2107      	movs	r1, #7
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	401a      	ands	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	0d1b      	lsrs	r3, r3, #20
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f003 0318 	and.w	r3, r3, #24
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021b8:	40d9      	lsrs	r1, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	400b      	ands	r3, r1
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	431a      	orrs	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	0007ffff 	.word	0x0007ffff

080021dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 031f 	and.w	r3, r3, #31
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002208:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6093      	str	r3, [r2, #8]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800222c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002230:	d101      	bne.n	8002236 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f043 0201 	orr.w	r2, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <LL_ADC_IsEnabled+0x18>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <LL_ADC_IsEnabled+0x1a>
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b02      	cmp	r3, #2
 800231c:	d101      	bne.n	8002322 <LL_ADC_IsDisableOngoing+0x18>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_IsDisableOngoing+0x1a>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800236c:	f043 0210 	orr.w	r2, r3, #16
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d101      	bne.n	8002398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d101      	bne.n	80023e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e134      	b.n	8002678 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe fd2b 	bl	8000e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fef1 	bl	800221c <LL_ADC_IsDeepPowerDownEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fed7 	bl	80021f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff0c 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fef0 	bl	8002244 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002464:	4b86      	ldr	r3, [pc, #536]	; (8002680 <HAL_ADC_Init+0x28c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	4a86      	ldr	r2, [pc, #536]	; (8002684 <HAL_ADC_Init+0x290>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002474:	e002      	b.n	800247c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fef0 	bl	800226c <LL_ADC_IsInternalRegulatorEnabled>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff64 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80024b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80cf 	bne.w	8002666 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 80cb 	bne.w	8002666 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024d8:	f043 0202 	orr.w	r2, r3, #2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fefd 	bl	80022e4 <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d115      	bne.n	800251c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024f0:	4865      	ldr	r0, [pc, #404]	; (8002688 <HAL_ADC_Init+0x294>)
 80024f2:	f7ff fef7 	bl	80022e4 <LL_ADC_IsEnabled>
 80024f6:	4604      	mov	r4, r0
 80024f8:	4864      	ldr	r0, [pc, #400]	; (800268c <HAL_ADC_Init+0x298>)
 80024fa:	f7ff fef3 	bl	80022e4 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	431c      	orrs	r4, r3
 8002502:	4863      	ldr	r0, [pc, #396]	; (8002690 <HAL_ADC_Init+0x29c>)
 8002504:	f7ff feee 	bl	80022e4 <LL_ADC_IsEnabled>
 8002508:	4603      	mov	r3, r0
 800250a:	4323      	orrs	r3, r4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4619      	mov	r1, r3
 8002516:	485f      	ldr	r0, [pc, #380]	; (8002694 <HAL_ADC_Init+0x2a0>)
 8002518:	f7ff fd48 	bl	8001fac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7e5b      	ldrb	r3, [r3, #25]
 8002520:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002526:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800252c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002532:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	3b01      	subs	r3, #1
 8002550:	045b      	lsls	r3, r3, #17
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_ADC_Init+0x2a4>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fef7 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002592:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff18 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 800259e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d13d      	bne.n	8002622 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d13a      	bne.n	8002622 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025c8:	f023 0302 	bic.w	r3, r3, #2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	69b9      	ldr	r1, [r7, #24]
 80025d2:	430b      	orrs	r3, r1
 80025d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d118      	bne.n	8002612 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002602:	430a      	orrs	r2, r1
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	e007      	b.n	8002622 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10c      	bne.n	8002644 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f023 010f 	bic.w	r1, r3, #15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	1e5a      	subs	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 020f 	bic.w	r2, r2, #15
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	; 0x54
 8002664:	e007      	b.n	8002676 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002676:	7ffb      	ldrb	r3, [r7, #31]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3724      	adds	r7, #36	; 0x24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}
 8002680:	20000004 	.word	0x20000004
 8002684:	053e2d63 	.word	0x053e2d63
 8002688:	50040000 	.word	0x50040000
 800268c:	50040100 	.word	0x50040100
 8002690:	50040200 	.word	0x50040200
 8002694:	50040300 	.word	0x50040300
 8002698:	fff0c007 	.word	0xfff0c007

0800269c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a8:	4850      	ldr	r0, [pc, #320]	; (80027ec <HAL_ADC_Start_DMA+0x150>)
 80026aa:	f7ff fd97 	bl	80021dc <LL_ADC_GetMultimode>
 80026ae:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fe63 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 808e 	bne.w	80027de <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_Start_DMA+0x34>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e089      	b.n	80027e4 <HAL_ADC_Start_DMA+0x148>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d002      	beq.n	80026ea <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	d172      	bne.n	80027d0 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fda2 	bl	8003234 <ADC_Enable>
 80026f0:	4603      	mov	r3, r0
 80026f2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d165      	bne.n	80027c6 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a37      	ldr	r2, [pc, #220]	; (80027f0 <HAL_ADC_Start_DMA+0x154>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d002      	beq.n	800271e <HAL_ADC_Start_DMA+0x82>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e000      	b.n	8002720 <HAL_ADC_Start_DMA+0x84>
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_ADC_Start_DMA+0x158>)
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4293      	cmp	r3, r2
 8002726:	d002      	beq.n	800272e <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	f023 0206 	bic.w	r2, r3, #6
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	659a      	str	r2, [r3, #88]	; 0x58
 8002752:	e002      	b.n	800275a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_ADC_Start_DMA+0x15c>)
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	4a25      	ldr	r2, [pc, #148]	; (80027fc <HAL_ADC_Start_DMA+0x160>)
 8002768:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <HAL_ADC_Start_DMA+0x164>)
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	221c      	movs	r2, #28
 8002778:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0210 	orr.w	r2, r2, #16
 8002790:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3340      	adds	r3, #64	; 0x40
 80027ac:	4619      	mov	r1, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f001 f921 	bl	80039f8 <HAL_DMA_Start_IT>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fdb6 	bl	8002330 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80027c4:	e00d      	b.n	80027e2 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80027ce:	e008      	b.n	80027e2 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027dc:	e001      	b.n	80027e2 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	50040300 	.word	0x50040300
 80027f0:	50040100 	.word	0x50040100
 80027f4:	50040000 	.word	0x50040000
 80027f8:	08003399 	.word	0x08003399
 80027fc:	08003471 	.word	0x08003471
 8002800:	0800348d 	.word	0x0800348d

08002804 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_ADC_Stop_DMA+0x16>
 8002816:	2302      	movs	r3, #2
 8002818:	e051      	b.n	80028be <HAL_ADC_Stop_DMA+0xba>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002822:	2103      	movs	r1, #3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fc51 	bl	80030cc <ADC_ConversionStop>
 800282a:	4603      	mov	r3, r0
 800282c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d13f      	bne.n	80028b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0201 	bic.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d10f      	bne.n	8002872 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f92e 	bl	8003ab8 <HAL_DMA_Abort>
 800285c:	4603      	mov	r3, r0
 800285e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0210 	bic.w	r2, r2, #16
 8002880:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d105      	bne.n	8002894 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fd2d 	bl	80032e8 <ADC_Disable>
 800288e:	4603      	mov	r3, r0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e002      	b.n	800289a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fd27 	bl	80032e8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0b6      	sub	sp, #216	; 0xd8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x22>
 800290e:	2302      	movs	r3, #2
 8002910:	e3c6      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x7b0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fd2e 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f040 83a7 	bne.w	800307a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b05      	cmp	r3, #5
 8002932:	d824      	bhi.n	800297e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	3b02      	subs	r3, #2
 800293a:	2b03      	cmp	r3, #3
 800293c:	d81b      	bhi.n	8002976 <HAL_ADC_ConfigChannel+0x86>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <HAL_ADC_ConfigChannel+0x54>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002955 	.word	0x08002955
 8002948:	0800295d 	.word	0x0800295d
 800294c:	08002965 	.word	0x08002965
 8002950:	0800296d 	.word	0x0800296d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	220c      	movs	r2, #12
 8002958:	605a      	str	r2, [r3, #4]
          break;
 800295a:	e011      	b.n	8002980 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2212      	movs	r2, #18
 8002960:	605a      	str	r2, [r3, #4]
          break;
 8002962:	e00d      	b.n	8002980 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2218      	movs	r2, #24
 8002968:	605a      	str	r2, [r3, #4]
          break;
 800296a:	e009      	b.n	8002980 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	605a      	str	r2, [r3, #4]
          break;
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2206      	movs	r2, #6
 800297a:	605a      	str	r2, [r3, #4]
          break;
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800297e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	f7ff fba9 	bl	80020e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fcf2 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 800299c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fd12 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 80029aa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f040 81a6 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 81a1 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	461a      	mov	r2, r3
 80029d0:	f7ff fbb4 	bl	800213c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	08db      	lsrs	r3, r3, #3
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00a      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6919      	ldr	r1, [r3, #16]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a06:	f7ff fb05 	bl	8002014 <LL_ADC_SetOffset>
 8002a0a:	e17b      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb22 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x148>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fb17 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	e01e      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x186>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fb0c 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e004      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x19e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0e9b      	lsrs	r3, r3, #26
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	e018      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e004      	b.n	8002ac0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d106      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fadb 	bl	8002088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fabf 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x20e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fab4 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	f003 021f 	and.w	r2, r3, #31
 8002afc:	e01e      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x24c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff faa9 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b2c:	2320      	movs	r3, #32
 8002b2e:	e004      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b34:	fab3 f383 	clz	r3, r3
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x264>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	0e9b      	lsrs	r3, r3, #26
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	e018      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x296>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e004      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d106      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fa78 	bl	8002088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fa5c 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x2d4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fa51 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 021f 	and.w	r2, r3, #31
 8002bc2:	e01e      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x312>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fa46 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x32a>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e9b      	lsrs	r3, r3, #26
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	e016      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x358>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e004      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d106      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2200      	movs	r2, #0
 8002c52:	2102      	movs	r1, #2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fa17 	bl	8002088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f9fb 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x396>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2103      	movs	r1, #3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f9f0 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	e017      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x3c6>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f9e5 	bl	800205c <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ca8:	2320      	movs	r3, #32
 8002caa:	e003      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002cac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_ConfigChannel+0x3de>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	e011      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x402>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	e003      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d106      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2103      	movs	r1, #3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff f9c2 	bl	8002088 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff faeb 	bl	80022e4 <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f040 813f 	bne.w	8002f94 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f7ff fa36 	bl	8002194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4a8e      	ldr	r2, [pc, #568]	; (8002f68 <HAL_ADC_ConfigChannel+0x678>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	f040 8130 	bne.w	8002f94 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10b      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x46c>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e019      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x4a0>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e003      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	bf94      	ite	ls
 8002d8a:	2301      	movls	r3, #1
 8002d8c:	2300      	movhi	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d079      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x4c0>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	3301      	adds	r3, #1
 8002da8:	069b      	lsls	r3, r3, #26
 8002daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dae:	e015      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x4ec>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002dcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	069b      	lsls	r3, r3, #26
 8002dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x50c>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	e017      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x53c>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	2101      	movs	r1, #1
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	ea42 0103 	orr.w	r1, r2, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x562>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	051b      	lsls	r3, r3, #20
 8002e50:	e018      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x594>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e003      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	430b      	orrs	r3, r1
 8002e86:	e080      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x5b4>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	069b      	lsls	r3, r3, #26
 8002e9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea2:	e015      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x5e0>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x600>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	e017      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x630>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	fa93 f3a3 	rbit	r3, r3
 8002efc:	61fb      	str	r3, [r7, #28]
  return result;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e003      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	ea42 0103 	orr.w	r1, r2, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10d      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x65c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	3b1e      	subs	r3, #30
 8002f44:	051b      	lsls	r3, r3, #20
 8002f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	e01d      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x698>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	613b      	str	r3, [r7, #16]
  return result;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e005      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x684>
 8002f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 021f 	and.w	r2, r3, #31
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	051b      	lsls	r3, r3, #20
 8002f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6892      	ldr	r2, [r2, #8]
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff f8d4 	bl	800213c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <HAL_ADC_ConfigChannel+0x7b8>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d079      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa0:	4842      	ldr	r0, [pc, #264]	; (80030ac <HAL_ADC_ConfigChannel+0x7bc>)
 8002fa2:	f7ff f829 	bl	8001ff8 <LL_ADC_GetCommonPathInternalCh>
 8002fa6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a40      	ldr	r2, [pc, #256]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d12b      	bne.n	800300c <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d125      	bne.n	800300c <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x6e4>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3a      	ldr	r2, [pc, #232]	; (80030b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d15c      	bne.n	800308e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4833      	ldr	r0, [pc, #204]	; (80030ac <HAL_ADC_ConfigChannel+0x7bc>)
 8002fe0:	f7fe fff7 	bl	8001fd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_ADC_ConfigChannel+0x7cc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099a      	lsrs	r2, r3, #6
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3b01      	subs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300a:	e040      	b.n	800308e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2c      	ldr	r2, [pc, #176]	; (80030c4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d118      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x758>
 8003016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d112      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a23      	ldr	r2, [pc, #140]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x746>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d12d      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	4619      	mov	r1, r3
 8003040:	481a      	ldr	r0, [pc, #104]	; (80030ac <HAL_ADC_ConfigChannel+0x7bc>)
 8003042:	f7fe ffc6 	bl	8001fd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003046:	e024      	b.n	8003092 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_ADC_ConfigChannel+0x7d8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d120      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d115      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800306c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003070:	4619      	mov	r1, r3
 8003072:	480e      	ldr	r0, [pc, #56]	; (80030ac <HAL_ADC_ConfigChannel+0x7bc>)
 8003074:	f7fe ffad 	bl	8001fd2 <LL_ADC_SetCommonPathInternalCh>
 8003078:	e00c      	b.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800308c:	e002      	b.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800308e:	bf00      	nop
 8003090:	e000      	b.n	8003094 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003092:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800309c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	37d8      	adds	r7, #216	; 0xd8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	80080000 	.word	0x80080000
 80030ac:	50040300 	.word	0x50040300
 80030b0:	c7520000 	.word	0xc7520000
 80030b4:	50040000 	.word	0x50040000
 80030b8:	50040200 	.word	0x50040200
 80030bc:	20000004 	.word	0x20000004
 80030c0:	053e2d63 	.word	0x053e2d63
 80030c4:	cb840000 	.word	0xcb840000
 80030c8:	80000001 	.word	0x80000001

080030cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f94c 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 80030e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff f96d 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 80030f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d103      	bne.n	8003104 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8090 	beq.w	8003224 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02a      	beq.n	8003168 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7e5b      	ldrb	r3, [r3, #25]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d126      	bne.n	8003168 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7e1b      	ldrb	r3, [r3, #24]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d122      	bne.n	8003168 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003126:	e014      	b.n	8003152 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4a41      	ldr	r2, [pc, #260]	; (8003230 <ADC_ConversionStop+0x164>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d90d      	bls.n	800314c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	f043 0210 	orr.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e06c      	b.n	8003226 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3301      	adds	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315c:	2b40      	cmp	r3, #64	; 0x40
 800315e:	d1e3      	bne.n	8003128 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d014      	beq.n	8003198 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff f904 	bl	8002380 <LL_ADC_REG_IsConversionOngoing>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f8c1 	bl	800230a <LL_ADC_IsDisableOngoing>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff f8e0 	bl	8002358 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d014      	beq.n	80031c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f913 	bl	80023ce <LL_ADC_INJ_IsConversionOngoing>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff f8a9 	bl	800230a <LL_ADC_IsDisableOngoing>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f8ef 	bl	80023a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d004      	beq.n	80031d8 <ADC_ConversionStop+0x10c>
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d105      	bne.n	80031de <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031d2:	230c      	movs	r3, #12
 80031d4:	617b      	str	r3, [r7, #20]
        break;
 80031d6:	e005      	b.n	80031e4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031d8:	2308      	movs	r3, #8
 80031da:	617b      	str	r3, [r7, #20]
        break;
 80031dc:	e002      	b.n	80031e4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031de:	2304      	movs	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]
        break;
 80031e2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031e4:	f7fe feb4 	bl	8001f50 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031ea:	e014      	b.n	8003216 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031ec:	f7fe feb0 	bl	8001f50 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d90d      	bls.n	8003216 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f043 0210 	orr.w	r2, r3, #16
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e3      	bne.n	80031ec <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	a33fffff 	.word	0xa33fffff

08003234 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff f84f 	bl	80022e4 <LL_ADC_IsEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d146      	bne.n	80032da <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <ADC_Enable+0xb0>)
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e032      	b.n	80032dc <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff f80a 	bl	8002294 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003280:	f7fe fe66 	bl	8001f50 <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003286:	e021      	b.n	80032cc <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff f829 	bl	80022e4 <LL_ADC_IsEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fff9 	bl	8002294 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032a2:	f7fe fe55 	bl	8001f50 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d90d      	bls.n	80032cc <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0210 	orr.w	r2, r3, #16
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	f043 0201 	orr.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e007      	b.n	80032dc <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d1d6      	bne.n	8003288 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	8000003f 	.word	0x8000003f

080032e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f808 	bl	800230a <LL_ADC_IsDisableOngoing>
 80032fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe ffef 	bl	80022e4 <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d040      	beq.n	800338e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d13d      	bne.n	800338e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030d 	and.w	r3, r3, #13
 800331c:	2b01      	cmp	r3, #1
 800331e:	d10c      	bne.n	800333a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe ffc9 	bl	80022bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2203      	movs	r2, #3
 8003330:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003332:	f7fe fe0d 	bl	8001f50 <HAL_GetTick>
 8003336:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003338:	e022      	b.n	8003380 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f043 0210 	orr.w	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334a:	f043 0201 	orr.w	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01c      	b.n	8003390 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003356:	f7fe fdfb 	bl	8001f50 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d90d      	bls.n	8003380 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e3      	bne.n	8003356 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d14b      	bne.n	800344a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d021      	beq.n	8003410 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fe74 	bl	80020be <LL_ADC_REG_IsTriggerSourceSWStart>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d032      	beq.n	8003442 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d12b      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d11f      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
 800340e:	e018      	b.n	8003442 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d111      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7fe f9ba 	bl	80017bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003448:	e00e      	b.n	8003468 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fa3f 	bl	80028da <HAL_ADC_ErrorCallback>
}
 800345c:	e004      	b.n	8003468 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4798      	blx	r3
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fa21 	bl	80028c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff fa11 	bl	80028da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <LL_ADC_IsEnabled>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <LL_ADC_IsEnabled+0x18>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <LL_ADC_IsEnabled+0x1a>
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d101      	bne.n	80034fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b09f      	sub	sp, #124	; 0x7c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003526:	2302      	movs	r3, #2
 8003528:	e08f      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a47      	ldr	r2, [pc, #284]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d102      	bne.n	8003542 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800353c:	4b46      	ldr	r3, [pc, #280]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	e001      	b.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e072      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ffbd 	bl	80034e6 <LL_ADC_REG_IsConversionOngoing>
 800356c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff ffb7 	bl	80034e6 <LL_ADC_REG_IsConversionOngoing>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d154      	bne.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800357e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003580:	2b00      	cmp	r3, #0
 8003582:	d151      	bne.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003586:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02c      	beq.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	430b      	orrs	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	4829      	ldr	r0, [pc, #164]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80035ae:	f7ff ff87 	bl	80034c0 <LL_ADC_IsEnabled>
 80035b2:	4604      	mov	r4, r0
 80035b4:	4828      	ldr	r0, [pc, #160]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80035b6:	f7ff ff83 	bl	80034c0 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	431c      	orrs	r4, r3
 80035be:	4828      	ldr	r0, [pc, #160]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035c0:	f7ff ff7e 	bl	80034c0 <LL_ADC_IsEnabled>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4323      	orrs	r3, r4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d137      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035d4:	f023 030f 	bic.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	6811      	ldr	r1, [r2, #0]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	431a      	orrs	r2, r3
 80035e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e8:	e028      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035f6:	4817      	ldr	r0, [pc, #92]	; (8003654 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80035f8:	f7ff ff62 	bl	80034c0 <LL_ADC_IsEnabled>
 80035fc:	4604      	mov	r4, r0
 80035fe:	4816      	ldr	r0, [pc, #88]	; (8003658 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003600:	f7ff ff5e 	bl	80034c0 <LL_ADC_IsEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	431c      	orrs	r4, r3
 8003608:	4815      	ldr	r0, [pc, #84]	; (8003660 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800360a:	f7ff ff59 	bl	80034c0 <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	4323      	orrs	r3, r4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d112      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800361e:	f023 030f 	bic.w	r3, r3, #15
 8003622:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003624:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003626:	e009      	b.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800363a:	e000      	b.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800363c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003646:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800364a:	4618      	mov	r0, r3
 800364c:	377c      	adds	r7, #124	; 0x7c
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}
 8003652:	bf00      	nop
 8003654:	50040000 	.word	0x50040000
 8003658:	50040100 	.word	0x50040100
 800365c:	50040300 	.word	0x50040300
 8003660:	50040200 	.word	0x50040200

08003664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003674:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003680:	4013      	ands	r3, r2
 8003682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800368c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	60d3      	str	r3, [r2, #12]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <__NVIC_GetPriorityGrouping+0x18>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	f003 0307 	and.w	r3, r3, #7
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db0b      	blt.n	80036f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	f003 021f 	and.w	r2, r3, #31
 80036e0:	4907      	ldr	r1, [pc, #28]	; (8003700 <__NVIC_EnableIRQ+0x38>)
 80036e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	2001      	movs	r0, #1
 80036ea:	fa00 f202 	lsl.w	r2, r0, r2
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e100 	.word	0xe000e100

08003704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	6039      	str	r1, [r7, #0]
 800370e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db0a      	blt.n	800372e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <__NVIC_SetPriority+0x4c>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	440b      	add	r3, r1
 8003728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800372c:	e00a      	b.n	8003744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4908      	ldr	r1, [pc, #32]	; (8003754 <__NVIC_SetPriority+0x50>)
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	3b04      	subs	r3, #4
 800373c:	0112      	lsls	r2, r2, #4
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	440b      	add	r3, r1
 8003742:	761a      	strb	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000e100 	.word	0xe000e100
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f1c3 0307 	rsb	r3, r3, #7
 8003772:	2b04      	cmp	r3, #4
 8003774:	bf28      	it	cs
 8003776:	2304      	movcs	r3, #4
 8003778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	3304      	adds	r3, #4
 800377e:	2b06      	cmp	r3, #6
 8003780:	d902      	bls.n	8003788 <NVIC_EncodePriority+0x30>
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3b03      	subs	r3, #3
 8003786:	e000      	b.n	800378a <NVIC_EncodePriority+0x32>
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378c:	f04f 32ff 	mov.w	r2, #4294967295
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	401a      	ands	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43d9      	mvns	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	4313      	orrs	r3, r2
         );
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3724      	adds	r7, #36	; 0x24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d0:	d301      	bcc.n	80037d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d2:	2301      	movs	r3, #1
 80037d4:	e00f      	b.n	80037f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <SysTick_Config+0x40>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3b01      	subs	r3, #1
 80037dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037de:	210f      	movs	r1, #15
 80037e0:	f04f 30ff 	mov.w	r0, #4294967295
 80037e4:	f7ff ff8e 	bl	8003704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <SysTick_Config+0x40>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <SysTick_Config+0x40>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010

08003804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff29 	bl	8003664 <__NVIC_SetPriorityGrouping>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800382c:	f7ff ff3e 	bl	80036ac <__NVIC_GetPriorityGrouping>
 8003830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68b9      	ldr	r1, [r7, #8]
 8003836:	6978      	ldr	r0, [r7, #20]
 8003838:	f7ff ff8e 	bl	8003758 <NVIC_EncodePriority>
 800383c:	4602      	mov	r2, r0
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff5d 	bl	8003704 <__NVIC_SetPriority>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ff31 	bl	80036c8 <__NVIC_EnableIRQ>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b082      	sub	sp, #8
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ffa2 	bl	80037c0 <SysTick_Config>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e098      	b.n	80039cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <HAL_DMA_Init+0x150>)
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d80f      	bhi.n	80038c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <HAL_DMA_Init+0x154>)
 80038ae:	4413      	add	r3, r2
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_DMA_Init+0x158>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	009a      	lsls	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a48      	ldr	r2, [pc, #288]	; (80039e4 <HAL_DMA_Init+0x15c>)
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
 80038c4:	e00e      	b.n	80038e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <HAL_DMA_Init+0x160>)
 80038ce:	4413      	add	r3, r2
 80038d0:	4a43      	ldr	r2, [pc, #268]	; (80039e0 <HAL_DMA_Init+0x158>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	009a      	lsls	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a42      	ldr	r2, [pc, #264]	; (80039ec <HAL_DMA_Init+0x164>)
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800393e:	d039      	beq.n	80039b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_DMA_Init+0x15c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d11a      	bne.n	8003980 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_DMA_Init+0x168>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	f003 031c 	and.w	r3, r3, #28
 8003956:	210f      	movs	r1, #15
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	4924      	ldr	r1, [pc, #144]	; (80039f0 <HAL_DMA_Init+0x168>)
 8003960:	4013      	ands	r3, r2
 8003962:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003964:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_DMA_Init+0x168>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f003 031c 	and.w	r3, r3, #28
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	491d      	ldr	r1, [pc, #116]	; (80039f0 <HAL_DMA_Init+0x168>)
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]
 800397e:	e019      	b.n	80039b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_DMA_Init+0x16c>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f003 031c 	and.w	r3, r3, #28
 800398c:	210f      	movs	r1, #15
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	4917      	ldr	r1, [pc, #92]	; (80039f4 <HAL_DMA_Init+0x16c>)
 8003996:	4013      	ands	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <HAL_DMA_Init+0x16c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 031c 	and.w	r3, r3, #28
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	4911      	ldr	r1, [pc, #68]	; (80039f4 <HAL_DMA_Init+0x16c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40020407 	.word	0x40020407
 80039dc:	bffdfff8 	.word	0xbffdfff8
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	40020000 	.word	0x40020000
 80039e8:	bffdfbf8 	.word	0xbffdfbf8
 80039ec:	40020400 	.word	0x40020400
 80039f0:	400200a8 	.word	0x400200a8
 80039f4:	400204a8 	.word	0x400204a8

080039f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_DMA_Start_IT+0x20>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e04b      	b.n	8003ab0 <HAL_DMA_Start_IT+0xb8>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d13a      	bne.n	8003aa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f95f 	bl	8003d14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d008      	beq.n	8003a70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 020e 	orr.w	r2, r2, #14
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00f      	b.n	8003a90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0204 	bic.w	r2, r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020a 	orr.w	r2, r2, #10
 8003a8e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	e005      	b.n	8003aae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d008      	beq.n	8003ae2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e022      	b.n	8003b28 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 020e 	bic.w	r2, r2, #14
 8003af0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f003 021c 	and.w	r2, r3, #28
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d005      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	e029      	b.n	8003bac <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 020e 	bic.w	r2, r2, #14
 8003b66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0201 	bic.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f003 021c 	and.w	r2, r3, #28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
    }
  }
  return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f003 031c 	and.w	r3, r3, #28
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d026      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x7a>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d021      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0204 	bic.w	r2, r2, #4
 8003c08:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2104      	movs	r1, #4
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d071      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c2e:	e06c      	b.n	8003d0a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f003 031c 	and.w	r3, r3, #28
 8003c38:	2202      	movs	r2, #2
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02e      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0xec>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d029      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10b      	bne.n	8003c74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 020a 	bic.w	r2, r2, #10
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f003 021c 	and.w	r2, r3, #28
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2102      	movs	r1, #2
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d038      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ca0:	e033      	b.n	8003d0a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f003 031c 	and.w	r3, r3, #28
 8003caa:	2208      	movs	r2, #8
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02a      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x156>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d025      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 020e 	bic.w	r2, r2, #14
 8003cce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f003 021c 	and.w	r2, r3, #28
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d0a:	bf00      	nop
 8003d0c:	bf00      	nop
}
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 021c 	and.w	r2, r3, #28
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d108      	bne.n	8003d58 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d56:	e007      	b.n	8003d68 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d82:	e17f      	b.n	8004084 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	2101      	movs	r1, #1
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	4013      	ands	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 8171 	beq.w	800407e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d00b      	beq.n	8003dbc <HAL_GPIO_Init+0x48>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d007      	beq.n	8003dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003db0:	2b11      	cmp	r3, #17
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d130      	bne.n	8003e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003df2:	2201      	movs	r2, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0201 	and.w	r2, r3, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d118      	bne.n	8003e5c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003e30:	2201      	movs	r2, #1
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f003 0201 	and.w	r2, r3, #1
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x128>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b12      	cmp	r3, #18
 8003e9a:	d123      	bne.n	8003ee4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	08da      	lsrs	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	08da      	lsrs	r2, r3, #3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3208      	adds	r2, #8
 8003ede:	6939      	ldr	r1, [r7, #16]
 8003ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 80ac 	beq.w	800407e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f26:	4b5e      	ldr	r3, [pc, #376]	; (80040a0 <HAL_GPIO_Init+0x32c>)
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	4a5d      	ldr	r2, [pc, #372]	; (80040a0 <HAL_GPIO_Init+0x32c>)
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	6613      	str	r3, [r2, #96]	; 0x60
 8003f32:	4b5b      	ldr	r3, [pc, #364]	; (80040a0 <HAL_GPIO_Init+0x32c>)
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f3e:	4a59      	ldr	r2, [pc, #356]	; (80040a4 <HAL_GPIO_Init+0x330>)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f68:	d025      	beq.n	8003fb6 <HAL_GPIO_Init+0x242>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a4e      	ldr	r2, [pc, #312]	; (80040a8 <HAL_GPIO_Init+0x334>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01f      	beq.n	8003fb2 <HAL_GPIO_Init+0x23e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a4d      	ldr	r2, [pc, #308]	; (80040ac <HAL_GPIO_Init+0x338>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d019      	beq.n	8003fae <HAL_GPIO_Init+0x23a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4c      	ldr	r2, [pc, #304]	; (80040b0 <HAL_GPIO_Init+0x33c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_GPIO_Init+0x236>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4b      	ldr	r2, [pc, #300]	; (80040b4 <HAL_GPIO_Init+0x340>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00d      	beq.n	8003fa6 <HAL_GPIO_Init+0x232>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	; (80040b8 <HAL_GPIO_Init+0x344>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d007      	beq.n	8003fa2 <HAL_GPIO_Init+0x22e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a49      	ldr	r2, [pc, #292]	; (80040bc <HAL_GPIO_Init+0x348>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d101      	bne.n	8003f9e <HAL_GPIO_Init+0x22a>
 8003f9a:	2306      	movs	r3, #6
 8003f9c:	e00c      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e00a      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003fa2:	2305      	movs	r3, #5
 8003fa4:	e008      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	e006      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e004      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_Init+0x244>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	f002 0203 	and.w	r2, r2, #3
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	4093      	lsls	r3, r2
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fc8:	4936      	ldr	r1, [pc, #216]	; (80040a4 <HAL_GPIO_Init+0x330>)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ffa:	4a31      	ldr	r2, [pc, #196]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004000:	4b2f      	ldr	r3, [pc, #188]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800402a:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800404e:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43db      	mvns	r3, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4013      	ands	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004078:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <HAL_GPIO_Init+0x34c>)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	3301      	adds	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fa22 f303 	lsr.w	r3, r2, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	f47f ae78 	bne.w	8003d84 <HAL_GPIO_Init+0x10>
  }
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40010000 	.word	0x40010000
 80040a8:	48000400 	.word	0x48000400
 80040ac:	48000800 	.word	0x48000800
 80040b0:	48000c00 	.word	0x48000c00
 80040b4:	48001000 	.word	0x48001000
 80040b8:	48001400 	.word	0x48001400
 80040bc:	48001800 	.word	0x48001800
 80040c0:	40010400 	.word	0x40010400

080040c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
 80040d0:	4613      	mov	r3, r2
 80040d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d4:	787b      	ldrb	r3, [r7, #1]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040da:	887a      	ldrh	r2, [r7, #2]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e0:	e002      	b.n	80040e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_PWREx_GetVoltageRange+0x18>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411e:	d130      	bne.n	8004182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004120:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d038      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800413c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800413e:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2232      	movs	r2, #50	; 0x32
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	0c9b      	lsrs	r3, r3, #18
 8004150:	3301      	adds	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004154:	e002      	b.n	800415c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004168:	d102      	bne.n	8004170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f2      	bne.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d110      	bne.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e00f      	b.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d007      	beq.n	80041a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800419a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800419e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40007000 	.word	0x40007000
 80041b4:	20000004 	.word	0x20000004
 80041b8:	431bde83 	.word	0x431bde83

080041bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e3d4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4ba1      	ldr	r3, [pc, #644]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041d8:	4b9e      	ldr	r3, [pc, #632]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80e4 	beq.w	80043b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_RCC_OscConfig+0x4a>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	f040 808b 	bne.w	8004314 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 8087 	bne.w	8004314 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004206:	4b93      	ldr	r3, [pc, #588]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x62>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e3ac      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d004      	beq.n	8004238 <HAL_RCC_OscConfig+0x7c>
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004236:	e005      	b.n	8004244 <HAL_RCC_OscConfig+0x88>
 8004238:	4b86      	ldr	r3, [pc, #536]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	091b      	lsrs	r3, r3, #4
 8004240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004244:	4293      	cmp	r3, r2
 8004246:	d223      	bcs.n	8004290 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fd07 	bl	8004c60 <RCC_SetFlashLatencyFromMSIRange>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e38d      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800425c:	4b7d      	ldr	r3, [pc, #500]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7c      	ldr	r2, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4977      	ldr	r1, [pc, #476]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	4972      	ldr	r1, [pc, #456]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
 800428e:	e025      	b.n	80042dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004290:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6f      	ldr	r2, [pc, #444]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004296:	f043 0308 	orr.w	r3, r3, #8
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	496a      	ldr	r1, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ae:	4b69      	ldr	r3, [pc, #420]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	4965      	ldr	r1, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fcc7 	bl	8004c60 <RCC_SetFlashLatencyFromMSIRange>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e34d      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042dc:	f000 fc36 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	4a5a      	ldr	r2, [pc, #360]	; (8004458 <HAL_RCC_OscConfig+0x29c>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa21 f303 	lsr.w	r3, r1, r3
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_OscConfig+0x2a0>)
 80042fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042fc:	4b58      	ldr	r3, [pc, #352]	; (8004460 <HAL_RCC_OscConfig+0x2a4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd fdd5 	bl	8001eb0 <HAL_InitTick>
 8004306:	4603      	mov	r3, r0
 8004308:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d052      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
 8004312:	e331      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d032      	beq.n	8004382 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004328:	f7fd fe12 	bl	8001f50 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004330:	f7fd fe0e 	bl	8001f50 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e31a      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004342:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800434e:	4b41      	ldr	r3, [pc, #260]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a40      	ldr	r2, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004354:	f043 0308 	orr.w	r3, r3, #8
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	493b      	ldr	r1, [pc, #236]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	4936      	ldr	r1, [pc, #216]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	e01a      	b.n	80043b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a33      	ldr	r2, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800438e:	f7fd fddf 	bl	8001f50 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004396:	f7fd fddb 	bl	8001f50 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e2e7      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a8:	4b2a      	ldr	r3, [pc, #168]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f0      	bne.n	8004396 <HAL_RCC_OscConfig+0x1da>
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d074      	beq.n	80044ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x21a>
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d10e      	bne.n	80043ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d10b      	bne.n	80043ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d064      	beq.n	80044ac <HAL_RCC_OscConfig+0x2f0>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d160      	bne.n	80044ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e2c4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x24a>
 80043f8:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e01d      	b.n	8004442 <HAL_RCC_OscConfig+0x286>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x26e>
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x286>
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_RCC_OscConfig+0x298>)
 800443c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01c      	beq.n	8004484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fd fd81 	bl	8001f50 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004450:	e011      	b.n	8004476 <HAL_RCC_OscConfig+0x2ba>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	08007de8 	.word	0x08007de8
 800445c:	20000004 	.word	0x20000004
 8004460:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fd fd74 	bl	8001f50 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	; 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e280      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004476:	4baf      	ldr	r3, [pc, #700]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x2a8>
 8004482:	e014      	b.n	80044ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd fd64 	bl	8001f50 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd fd60 	bl	8001f50 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e26c      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449e:	4ba5      	ldr	r3, [pc, #660]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1f0      	bne.n	800448c <HAL_RCC_OscConfig+0x2d0>
 80044aa:	e000      	b.n	80044ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d060      	beq.n	800457c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x310>
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b0c      	cmp	r3, #12
 80044c4:	d119      	bne.n	80044fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d116      	bne.n	80044fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044cc:	4b99      	ldr	r3, [pc, #612]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_OscConfig+0x328>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e249      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b93      	ldr	r3, [pc, #588]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	061b      	lsls	r3, r3, #24
 80044f2:	4990      	ldr	r1, [pc, #576]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f8:	e040      	b.n	800457c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d023      	beq.n	800454a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004502:	4b8c      	ldr	r3, [pc, #560]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a8b      	ldr	r2, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd fd1f 	bl	8001f50 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004516:	f7fd fd1b 	bl	8001f50 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e227      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004528:	4b82      	ldr	r3, [pc, #520]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b7f      	ldr	r3, [pc, #508]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	497c      	ldr	r1, [pc, #496]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
 8004548:	e018      	b.n	800457c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b7a      	ldr	r3, [pc, #488]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a79      	ldr	r2, [pc, #484]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fcfb 	bl	8001f50 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fd fcf7 	bl	8001f50 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e203      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004570:	4b70      	ldr	r3, [pc, #448]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1f0      	bne.n	800455e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d03c      	beq.n	8004602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01c      	beq.n	80045ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004590:	4b68      	ldr	r3, [pc, #416]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004596:	4a67      	ldr	r2, [pc, #412]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fcd6 	bl	8001f50 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd fcd2 	bl	8001f50 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1de      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ba:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ef      	beq.n	80045a8 <HAL_RCC_OscConfig+0x3ec>
 80045c8:	e01b      	b.n	8004602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	4b5a      	ldr	r3, [pc, #360]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d0:	4a58      	ldr	r2, [pc, #352]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fd fcb9 	bl	8001f50 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e2:	f7fd fcb5 	bl	8001f50 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e1c1      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f4:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ef      	bne.n	80045e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80a6 	beq.w	800475c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10d      	bne.n	800463c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004620:	4b44      	ldr	r3, [pc, #272]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	4a43      	ldr	r2, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462a:	6593      	str	r3, [r2, #88]	; 0x58
 800462c:	4b41      	ldr	r3, [pc, #260]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	60bb      	str	r3, [r7, #8]
 8004636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004638:	2301      	movs	r3, #1
 800463a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d118      	bne.n	800467a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004654:	f7fd fc7c 	bl	8001f50 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fd fc78 	bl	8001f50 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e184      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCC_OscConfig+0x57c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d108      	bne.n	8004694 <HAL_RCC_OscConfig+0x4d8>
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	4a2a      	ldr	r2, [pc, #168]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004692:	e024      	b.n	80046de <HAL_RCC_OscConfig+0x522>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b05      	cmp	r3, #5
 800469a:	d110      	bne.n	80046be <HAL_RCC_OscConfig+0x502>
 800469c:	4b25      	ldr	r3, [pc, #148]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	4a24      	ldr	r2, [pc, #144]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a20      	ldr	r2, [pc, #128]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046bc:	e00f      	b.n	80046de <HAL_RCC_OscConfig+0x522>
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c4:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 80046d6:	f023 0304 	bic.w	r3, r3, #4
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d016      	beq.n	8004714 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fd fc33 	bl	8001f50 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ec:	e00a      	b.n	8004704 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ee:	f7fd fc2f 	bl	8001f50 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e139      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ed      	beq.n	80046ee <HAL_RCC_OscConfig+0x532>
 8004712:	e01a      	b.n	800474a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fd fc1c 	bl	8001f50 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800471a:	e00f      	b.n	800473c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7fd fc18 	bl	8001f50 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d906      	bls.n	800473c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e122      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800473c:	4b90      	ldr	r3, [pc, #576]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800473e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e8      	bne.n	800471c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800474a:	7ffb      	ldrb	r3, [r7, #31]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d105      	bne.n	800475c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004750:	4b8b      	ldr	r3, [pc, #556]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004754:	4a8a      	ldr	r2, [pc, #552]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8108 	beq.w	8004976 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b02      	cmp	r3, #2
 800476c:	f040 80d0 	bne.w	8004910 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004770:	4b83      	ldr	r3, [pc, #524]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f003 0203 	and.w	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	429a      	cmp	r2, r3
 8004782:	d130      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	3b01      	subs	r3, #1
 8004790:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	429a      	cmp	r2, r3
 8004794:	d127      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11f      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047b0:	2a07      	cmp	r2, #7
 80047b2:	bf14      	ite	ne
 80047b4:	2201      	movne	r2, #1
 80047b6:	2200      	moveq	r2, #0
 80047b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d113      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c8:	085b      	lsrs	r3, r3, #1
 80047ca:	3b01      	subs	r3, #1
 80047cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d06e      	beq.n	80048c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d069      	beq.n	80048c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047ec:	4b64      	ldr	r3, [pc, #400]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d105      	bne.n	8004804 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047f8:	4b61      	ldr	r3, [pc, #388]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0b7      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004808:	4b5d      	ldr	r3, [pc, #372]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5c      	ldr	r2, [pc, #368]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004814:	f7fd fb9c 	bl	8001f50 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481c:	f7fd fb98 	bl	8001f50 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e0a4      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800482e:	4b54      	ldr	r3, [pc, #336]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800483c:	68da      	ldr	r2, [r3, #12]
 800483e:	4b51      	ldr	r3, [pc, #324]	; (8004984 <HAL_RCC_OscConfig+0x7c8>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800484a:	3a01      	subs	r2, #1
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	4311      	orrs	r1, r2
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004854:	0212      	lsls	r2, r2, #8
 8004856:	4311      	orrs	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800485c:	0852      	lsrs	r2, r2, #1
 800485e:	3a01      	subs	r2, #1
 8004860:	0552      	lsls	r2, r2, #21
 8004862:	4311      	orrs	r1, r2
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004868:	0852      	lsrs	r2, r2, #1
 800486a:	3a01      	subs	r2, #1
 800486c:	0652      	lsls	r2, r2, #25
 800486e:	4311      	orrs	r1, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004874:	0912      	lsrs	r2, r2, #4
 8004876:	0452      	lsls	r2, r2, #17
 8004878:	430a      	orrs	r2, r1
 800487a:	4941      	ldr	r1, [pc, #260]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800487c:	4313      	orrs	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004880:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3e      	ldr	r2, [pc, #248]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a3b      	ldr	r2, [pc, #236]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004898:	f7fd fb5a 	bl	8001f50 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd fb56 	bl	8001f50 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e062      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b2:	4b33      	ldr	r3, [pc, #204]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0f0      	beq.n	80048a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048be:	e05a      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e059      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048c4:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d152      	bne.n	8004976 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2a      	ldr	r2, [pc, #168]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 80048e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048e8:	f7fd fb32 	bl	8001f50 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f0:	f7fd fb2e 	bl	8001f50 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e03a      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0f0      	beq.n	80048f0 <HAL_RCC_OscConfig+0x734>
 800490e:	e032      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d02d      	beq.n	8004972 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a19      	ldr	r2, [pc, #100]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800491c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004920:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800492e:	4b14      	ldr	r3, [pc, #80]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	4a13      	ldr	r2, [pc, #76]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004934:	f023 0303 	bic.w	r3, r3, #3
 8004938:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004940:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004948:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494a:	f7fd fb01 	bl	8001f50 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fd fafd 	bl	8001f50 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e009      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_OscConfig+0x7c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f0      	bne.n	8004952 <HAL_RCC_OscConfig+0x796>
 8004970:	e001      	b.n	8004976 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004976:	2300      	movs	r3, #0
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	f99d808c 	.word	0xf99d808c

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0c8      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b66      	ldr	r3, [pc, #408]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b63      	ldr	r3, [pc, #396]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 0207 	bic.w	r2, r3, #7
 80049b2:	4961      	ldr	r1, [pc, #388]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b5f      	ldr	r3, [pc, #380]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b0      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d04c      	beq.n	8004a72 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e0:	4b56      	ldr	r3, [pc, #344]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e09e      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f8:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d115      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e092      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a10:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e086      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a20:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e07e      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 0203 	bic.w	r2, r3, #3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	493f      	ldr	r1, [pc, #252]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a42:	f7fd fa85 	bl	8001f50 <HAL_GetTick>
 8004a46:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4a:	f7fd fa81 	bl	8001f50 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e066      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a60:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 020c 	and.w	r2, r3, #12
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d1eb      	bne.n	8004a4a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7e:	4b2f      	ldr	r3, [pc, #188]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	492c      	ldr	r1, [pc, #176]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d210      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b26      	ldr	r3, [pc, #152]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4924      	ldr	r1, [pc, #144]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <HAL_RCC_ClockConfig+0x1b0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e036      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4918      	ldr	r1, [pc, #96]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4910      	ldr	r1, [pc, #64]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004afe:	f000 f825 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b02:	4601      	mov	r1, r0
 8004b04:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_ClockConfig+0x1b4>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	5cd3      	ldrb	r3, [r2, r3]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	fa21 f303 	lsr.w	r3, r1, r3
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b1e:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fd f9c4 	bl	8001eb0 <HAL_InitTick>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	08007de8 	.word	0x08007de8
 8004b44:	20000004 	.word	0x20000004
 8004b48:	20000008 	.word	0x20000008

08004b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	; 0x24
 8004b50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
 8004b62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b64:	4b3a      	ldr	r3, [pc, #232]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x34>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d121      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d11e      	bne.n	8004bbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b80:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d107      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b8c:	4b30      	ldr	r3, [pc, #192]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e005      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b9c:	4b2c      	ldr	r3, [pc, #176]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_RCC_GetSysClockFreq+0x108>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10d      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d102      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b0c      	cmp	r3, #12
 8004bd8:	d133      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bda:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0xa4>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0xaa>
 8004bee:	e005      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bf0:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bf2:	617b      	str	r3, [r7, #20]
      break;
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bf6:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bf8:	617b      	str	r3, [r7, #20]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	617b      	str	r3, [r7, #20]
      break;
 8004c00:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c02:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	091b      	lsrs	r3, r3, #4
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	fb02 f203 	mul.w	r2, r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	0e5b      	lsrs	r3, r3, #25
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c42:	69bb      	ldr	r3, [r7, #24]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3724      	adds	r7, #36	; 0x24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40021000 	.word	0x40021000
 8004c54:	08007df8 	.word	0x08007df8
 8004c58:	00f42400 	.word	0x00f42400
 8004c5c:	007a1200 	.word	0x007a1200

08004c60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c78:	f7ff fa3c 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004c7c:	6178      	str	r0, [r7, #20]
 8004c7e:	e014      	b.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	4a24      	ldr	r2, [pc, #144]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c8c:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c98:	f7ff fa2c 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004c9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cb0:	d10b      	bne.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b80      	cmp	r3, #128	; 0x80
 8004cb6:	d919      	bls.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2ba0      	cmp	r3, #160	; 0xa0
 8004cbc:	d902      	bls.n	8004cc4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e013      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	e010      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d902      	bls.n	8004cd6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	e00a      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d102      	bne.n	8004ce2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cdc:	2302      	movs	r3, #2
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	e004      	b.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b70      	cmp	r3, #112	; 0x70
 8004ce6:	d101      	bne.n	8004cec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce8:	2301      	movs	r3, #1
 8004cea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 0207 	bic.w	r2, r3, #7
 8004cf4:	4909      	ldr	r1, [pc, #36]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d001      	beq.n	8004d0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e000      	b.n	8004d10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40022000 	.word	0x40022000

08004d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d28:	2300      	movs	r3, #0
 8004d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03f      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d44:	d01c      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4a:	d802      	bhi.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00e      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004d50:	e01f      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004d52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d56:	d003      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004d58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d5c:	d01c      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004d5e:	e018      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d60:	4b85      	ldr	r3, [pc, #532]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4a84      	ldr	r2, [pc, #528]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d6c:	e015      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fab9 	bl	80052ec <RCCEx_PLLSAI1_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d7e:	e00c      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3320      	adds	r3, #32
 8004d84:	2100      	movs	r1, #0
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fba0 	bl	80054cc <RCCEx_PLLSAI2_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d90:	e003      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	74fb      	strb	r3, [r7, #19]
      break;
 8004d96:	e000      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d9a:	7cfb      	ldrb	r3, [r7, #19]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10b      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da0:	4b75      	ldr	r3, [pc, #468]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dae:	4972      	ldr	r1, [pc, #456]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004db6:	e001      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d03f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd0:	d01c      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dd6:	d802      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004ddc:	e01f      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004dde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004de2:	d003      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004de4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de8:	d01c      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004dea:	e018      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dec:	4b62      	ldr	r3, [pc, #392]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4a61      	ldr	r2, [pc, #388]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df8:	e015      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fa73 	bl	80052ec <RCCEx_PLLSAI1_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e0a:	e00c      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3320      	adds	r3, #32
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fb5a 	bl	80054cc <RCCEx_PLLSAI2_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e1c:	e003      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	74fb      	strb	r3, [r7, #19]
      break;
 8004e22:	e000      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e26:	7cfb      	ldrb	r3, [r7, #19]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e2c:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e3a:	494f      	ldr	r1, [pc, #316]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e42:	e001      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7cfb      	ldrb	r3, [r7, #19]
 8004e46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80a0 	beq.w	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e56:	2300      	movs	r3, #0
 8004e58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	4a40      	ldr	r2, [pc, #256]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e8c:	4b3b      	ldr	r3, [pc, #236]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a3a      	ldr	r2, [pc, #232]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e98:	f7fd f85a 	bl	8001f50 <HAL_GetTick>
 8004e9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e9e:	e009      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fd f856 	bl	8001f50 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d902      	bls.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	74fb      	strb	r3, [r7, #19]
        break;
 8004eb2:	e005      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004eb4:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ef      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d15c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ec6:	4b2c      	ldr	r3, [pc, #176]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01f      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d019      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ee4:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef0:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	4a20      	ldr	r2, [pc, #128]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	4a1c      	ldr	r2, [pc, #112]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d016      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fd f815 	bl	8001f50 <HAL_GetTick>
 8004f26:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f28:	e00b      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fd f811 	bl	8001f50 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d902      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	74fb      	strb	r3, [r7, #19]
            break;
 8004f40:	e006      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0ec      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f66:	4904      	ldr	r1, [pc, #16]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f6e:	e009      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f70:	7cfb      	ldrb	r3, [r7, #19]
 8004f72:	74bb      	strb	r3, [r7, #18]
 8004f74:	e006      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f84:	7c7b      	ldrb	r3, [r7, #17]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d105      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8a:	4b9e      	ldr	r3, [pc, #632]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8e:	4a9d      	ldr	r2, [pc, #628]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa2:	4b98      	ldr	r3, [pc, #608]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa8:	f023 0203 	bic.w	r2, r3, #3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	4994      	ldr	r1, [pc, #592]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc4:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f023 020c 	bic.w	r2, r3, #12
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	498c      	ldr	r1, [pc, #560]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fe6:	4b87      	ldr	r3, [pc, #540]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	4983      	ldr	r1, [pc, #524]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005008:	4b7e      	ldr	r3, [pc, #504]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	497b      	ldr	r1, [pc, #492]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800502a:	4b76      	ldr	r3, [pc, #472]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800502c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005038:	4972      	ldr	r1, [pc, #456]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800504c:	4b6d      	ldr	r3, [pc, #436]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	496a      	ldr	r1, [pc, #424]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506e:	4b65      	ldr	r3, [pc, #404]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005074:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	4961      	ldr	r1, [pc, #388]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005090:	4b5c      	ldr	r3, [pc, #368]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	4959      	ldr	r1, [pc, #356]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b2:	4b54      	ldr	r3, [pc, #336]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c0:	4950      	ldr	r1, [pc, #320]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	4948      	ldr	r1, [pc, #288]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	493f      	ldr	r1, [pc, #252]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d028      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005118:	4b3a      	ldr	r3, [pc, #232]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005126:	4937      	ldr	r1, [pc, #220]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005136:	d106      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005138:	4b32      	ldr	r3, [pc, #200]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4a31      	ldr	r2, [pc, #196]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800513e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005142:	60d3      	str	r3, [r2, #12]
 8005144:	e011      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800514e:	d10c      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	2101      	movs	r1, #1
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f8c8 	bl	80052ec <RCCEx_PLLSAI1_Config>
 800515c:	4603      	mov	r3, r0
 800515e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005160:	7cfb      	ldrb	r3, [r7, #19]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005166:	7cfb      	ldrb	r3, [r7, #19]
 8005168:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d028      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005176:	4b23      	ldr	r3, [pc, #140]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	491f      	ldr	r1, [pc, #124]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005194:	d106      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800519c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051a0:	60d3      	str	r3, [r2, #12]
 80051a2:	e011      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2101      	movs	r1, #1
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f899 	bl	80052ec <RCCEx_PLLSAI1_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02b      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e2:	4908      	ldr	r1, [pc, #32]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051f2:	d109      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4a02      	ldr	r2, [pc, #8]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80051fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051fe:	60d3      	str	r3, [r2, #12]
 8005200:	e014      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005210:	d10c      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f867 	bl	80052ec <RCCEx_PLLSAI1_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005222:	7cfb      	ldrb	r3, [r7, #19]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02f      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005246:	4928      	ldr	r1, [pc, #160]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005256:	d10d      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	2102      	movs	r1, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f844 	bl	80052ec <RCCEx_PLLSAI1_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005268:	7cfb      	ldrb	r3, [r7, #19]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d014      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800526e:	7cfb      	ldrb	r3, [r7, #19]
 8005270:	74bb      	strb	r3, [r7, #18]
 8005272:	e011      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800527c:	d10c      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3320      	adds	r3, #32
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 f921 	bl	80054cc <RCCEx_PLLSAI2_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005294:	7cfb      	ldrb	r3, [r7, #19]
 8005296:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052b2:	490d      	ldr	r1, [pc, #52]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052d6:	4904      	ldr	r1, [pc, #16]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052de:	7cbb      	ldrb	r3, [r7, #18]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000

080052ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052fa:	4b73      	ldr	r3, [pc, #460]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005306:	4b70      	ldr	r3, [pc, #448]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0203 	and.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d10d      	bne.n	8005332 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
       ||
 800531a:	2b00      	cmp	r3, #0
 800531c:	d009      	beq.n	8005332 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800531e:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
       ||
 800532e:	429a      	cmp	r2, r3
 8005330:	d044      	beq.n	80053bc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	e041      	b.n	80053bc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b02      	cmp	r3, #2
 800533e:	d00c      	beq.n	800535a <RCCEx_PLLSAI1_Config+0x6e>
 8005340:	2b03      	cmp	r3, #3
 8005342:	d013      	beq.n	800536c <RCCEx_PLLSAI1_Config+0x80>
 8005344:	2b01      	cmp	r3, #1
 8005346:	d120      	bne.n	800538a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005348:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d11d      	bne.n	8005390 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005358:	e01a      	b.n	8005390 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800535a:	4b5b      	ldr	r3, [pc, #364]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005362:	2b00      	cmp	r3, #0
 8005364:	d116      	bne.n	8005394 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800536a:	e013      	b.n	8005394 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800536c:	4b56      	ldr	r3, [pc, #344]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10f      	bne.n	8005398 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005378:	4b53      	ldr	r3, [pc, #332]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d109      	bne.n	8005398 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005388:	e006      	b.n	8005398 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	73fb      	strb	r3, [r7, #15]
      break;
 800538e:	e004      	b.n	800539a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005398:	bf00      	nop
    }

    if(status == HAL_OK)
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10d      	bne.n	80053bc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053a0:	4b49      	ldr	r3, [pc, #292]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6819      	ldr	r1, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	430b      	orrs	r3, r1
 80053b6:	4944      	ldr	r1, [pc, #272]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d17d      	bne.n	80054be <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053c2:	4b41      	ldr	r3, [pc, #260]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a40      	ldr	r2, [pc, #256]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ce:	f7fc fdbf 	bl	8001f50 <HAL_GetTick>
 80053d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053d4:	e009      	b.n	80053ea <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d6:	f7fc fdbb 	bl	8001f50 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d902      	bls.n	80053ea <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	73fb      	strb	r3, [r7, #15]
        break;
 80053e8:	e005      	b.n	80053f6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053ea:	4b37      	ldr	r3, [pc, #220]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1ef      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d160      	bne.n	80054be <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d111      	bne.n	8005426 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005402:	4b31      	ldr	r3, [pc, #196]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6892      	ldr	r2, [r2, #8]
 8005412:	0211      	lsls	r1, r2, #8
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68d2      	ldr	r2, [r2, #12]
 8005418:	0912      	lsrs	r2, r2, #4
 800541a:	0452      	lsls	r2, r2, #17
 800541c:	430a      	orrs	r2, r1
 800541e:	492a      	ldr	r1, [pc, #168]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	610b      	str	r3, [r1, #16]
 8005424:	e027      	b.n	8005476 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d112      	bne.n	8005452 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800542c:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005434:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6892      	ldr	r2, [r2, #8]
 800543c:	0211      	lsls	r1, r2, #8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6912      	ldr	r2, [r2, #16]
 8005442:	0852      	lsrs	r2, r2, #1
 8005444:	3a01      	subs	r2, #1
 8005446:	0552      	lsls	r2, r2, #21
 8005448:	430a      	orrs	r2, r1
 800544a:	491f      	ldr	r1, [pc, #124]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800544c:	4313      	orrs	r3, r2
 800544e:	610b      	str	r3, [r1, #16]
 8005450:	e011      	b.n	8005476 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800545a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6892      	ldr	r2, [r2, #8]
 8005462:	0211      	lsls	r1, r2, #8
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6952      	ldr	r2, [r2, #20]
 8005468:	0852      	lsrs	r2, r2, #1
 800546a:	3a01      	subs	r2, #1
 800546c:	0652      	lsls	r2, r2, #25
 800546e:	430a      	orrs	r2, r1
 8005470:	4915      	ldr	r1, [pc, #84]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005476:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800547c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005480:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005482:	f7fc fd65 	bl	8001f50 <HAL_GetTick>
 8005486:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005488:	e009      	b.n	800549e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800548a:	f7fc fd61 	bl	8001f50 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d902      	bls.n	800549e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	73fb      	strb	r3, [r7, #15]
          break;
 800549c:	e005      	b.n	80054aa <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ef      	beq.n	800548a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	4903      	ldr	r1, [pc, #12]	; (80054c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000

080054cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054da:	4b68      	ldr	r3, [pc, #416]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054e6:	4b65      	ldr	r3, [pc, #404]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0203 	and.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d10d      	bne.n	8005512 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
       ||
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054fe:	4b5f      	ldr	r3, [pc, #380]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
       ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d044      	beq.n	800559c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	e041      	b.n	800559c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d00c      	beq.n	800553a <RCCEx_PLLSAI2_Config+0x6e>
 8005520:	2b03      	cmp	r3, #3
 8005522:	d013      	beq.n	800554c <RCCEx_PLLSAI2_Config+0x80>
 8005524:	2b01      	cmp	r3, #1
 8005526:	d120      	bne.n	800556a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005528:	4b54      	ldr	r3, [pc, #336]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d11d      	bne.n	8005570 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005538:	e01a      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800553a:	4b50      	ldr	r3, [pc, #320]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005542:	2b00      	cmp	r3, #0
 8005544:	d116      	bne.n	8005574 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554a:	e013      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10f      	bne.n	8005578 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005558:	4b48      	ldr	r3, [pc, #288]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005568:	e006      	b.n	8005578 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
      break;
 800556e:	e004      	b.n	800557a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8005578:	bf00      	nop
    }

    if(status == HAL_OK)
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10d      	bne.n	800559c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6819      	ldr	r1, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	3b01      	subs	r3, #1
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	430b      	orrs	r3, r1
 8005596:	4939      	ldr	r1, [pc, #228]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005598:	4313      	orrs	r3, r2
 800559a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d167      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055a2:	4b36      	ldr	r3, [pc, #216]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a35      	ldr	r2, [pc, #212]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ae:	f7fc fccf 	bl	8001f50 <HAL_GetTick>
 80055b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055b4:	e009      	b.n	80055ca <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055b6:	f7fc fccb 	bl	8001f50 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d902      	bls.n	80055ca <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	73fb      	strb	r3, [r7, #15]
        break;
 80055c8:	e005      	b.n	80055d6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1ef      	bne.n	80055b6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d14a      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d111      	bne.n	8005606 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055e2:	4b26      	ldr	r3, [pc, #152]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6892      	ldr	r2, [r2, #8]
 80055f2:	0211      	lsls	r1, r2, #8
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68d2      	ldr	r2, [r2, #12]
 80055f8:	0912      	lsrs	r2, r2, #4
 80055fa:	0452      	lsls	r2, r2, #17
 80055fc:	430a      	orrs	r2, r1
 80055fe:	491f      	ldr	r1, [pc, #124]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005600:	4313      	orrs	r3, r2
 8005602:	614b      	str	r3, [r1, #20]
 8005604:	e011      	b.n	800562a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005606:	4b1d      	ldr	r3, [pc, #116]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800560e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	0211      	lsls	r1, r2, #8
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6912      	ldr	r2, [r2, #16]
 800561c:	0852      	lsrs	r2, r2, #1
 800561e:	3a01      	subs	r2, #1
 8005620:	0652      	lsls	r2, r2, #25
 8005622:	430a      	orrs	r2, r1
 8005624:	4915      	ldr	r1, [pc, #84]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005636:	f7fc fc8b 	bl	8001f50 <HAL_GetTick>
 800563a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800563c:	e009      	b.n	8005652 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800563e:	f7fc fc87 	bl	8001f50 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d902      	bls.n	8005652 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	73fb      	strb	r3, [r7, #15]
          break;
 8005650:	e005      	b.n	800565e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0ef      	beq.n	800563e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005664:	4b05      	ldr	r3, [pc, #20]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 8005666:	695a      	ldr	r2, [r3, #20]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4903      	ldr	r1, [pc, #12]	; (800567c <RCCEx_PLLSAI2_Config+0x1b0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40021000 	.word	0x40021000

08005680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e095      	b.n	80057be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a2:	d009      	beq.n	80056b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
 80056aa:	e005      	b.n	80056b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc f906 	bl	80018e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f8:	d902      	bls.n	8005700 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e002      	b.n	8005706 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005704:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800570e:	d007      	beq.n	8005720 <HAL_SPI_Init+0xa0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005718:	d002      	beq.n	8005720 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005762:	ea42 0103 	orr.w	r1, r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	0c1b      	lsrs	r3, r3, #16
 800577c:	f003 0204 	and.w	r2, r3, #4
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800579c:	ea42 0103 	orr.w	r1, r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b088      	sub	sp, #32
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_SPI_Transmit+0x22>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e158      	b.n	8005a9a <HAL_SPI_Transmit+0x2d4>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057f0:	f7fc fbae 	bl	8001f50 <HAL_GetTick>
 80057f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b01      	cmp	r3, #1
 8005804:	d002      	beq.n	800580c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800580a:	e13d      	b.n	8005a88 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_SPI_Transmit+0x52>
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d102      	bne.n	800581e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800581c:	e134      	b.n	8005a88 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2203      	movs	r2, #3
 8005822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	88fa      	ldrh	r2, [r7, #6]
 8005836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	d10f      	bne.n	800588a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005878:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005888:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d007      	beq.n	80058a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b0:	d94b      	bls.n	800594a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_SPI_Transmit+0xfa>
 80058ba:	8afb      	ldrh	r3, [r7, #22]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d13e      	bne.n	800593e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	881a      	ldrh	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b01      	subs	r3, #1
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80058e4:	e02b      	b.n	800593e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d112      	bne.n	800591a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	881a      	ldrh	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005918:	e011      	b.n	800593e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591a:	f7fc fb19 	bl	8001f50 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d803      	bhi.n	8005932 <HAL_SPI_Transmit+0x16c>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Transmit+0x172>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800593c:	e0a4      	b.n	8005a88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ce      	bne.n	80058e6 <HAL_SPI_Transmit+0x120>
 8005948:	e07c      	b.n	8005a44 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0x192>
 8005952:	8afb      	ldrh	r3, [r7, #22]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d170      	bne.n	8005a3a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d912      	bls.n	8005988 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	881a      	ldrh	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	1c9a      	adds	r2, r3, #2
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b02      	subs	r3, #2
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005986:	e058      	b.n	8005a3a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	7812      	ldrb	r2, [r2, #0]
 8005994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80059ae:	e044      	b.n	8005a3a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d12b      	bne.n	8005a16 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d912      	bls.n	80059ee <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	881a      	ldrh	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	1c9a      	adds	r2, r3, #2
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b02      	subs	r3, #2
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059ec:	e025      	b.n	8005a3a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	7812      	ldrb	r2, [r2, #0]
 80059fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a14:	e011      	b.n	8005a3a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a16:	f7fc fa9b 	bl	8001f50 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d803      	bhi.n	8005a2e <HAL_SPI_Transmit+0x268>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_Transmit+0x26e>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a38:	e026      	b.n	8005a88 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1b5      	bne.n	80059b0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fbdf 	bl	800620c <SPI_EndRxTxTransaction>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e000      	b.n	8005a88 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_SPI_Transmit_DMA+0x20>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e0d8      	b.n	8005c76 <HAL_SPI_Transmit_DMA+0x1d2>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d002      	beq.n	8005ade <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005adc:	e0c6      	b.n	8005c6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_SPI_Transmit_DMA+0x46>
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aee:	e0bd      	b.n	8005c6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2203      	movs	r2, #3
 8005af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3a:	d10f      	bne.n	8005b5c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b60:	4a47      	ldr	r2, [pc, #284]	; (8005c80 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b68:	4a46      	ldr	r2, [pc, #280]	; (8005c84 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	4a45      	ldr	r2, [pc, #276]	; (8005c88 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	2200      	movs	r2, #0
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b8a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b94:	d82d      	bhi.n	8005bf2 <HAL_SPI_Transmit_DMA+0x14e>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d127      	bne.n	8005bf2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10f      	bne.n	8005bd0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005bbe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bce:	e010      	b.n	8005bf2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bde:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3301      	adds	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c0a:	f7fd fef5 	bl	80039f8 <HAL_DMA_Start_IT>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005c2c:	e01e      	b.n	8005c6c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b40      	cmp	r3, #64	; 0x40
 8005c3a:	d007      	beq.n	8005c4c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0220 	orr.w	r2, r2, #32
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0202 	orr.w	r2, r2, #2
 8005c6a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	08005f5b 	.word	0x08005f5b
 8005c84:	08005eb5 	.word	0x08005eb5
 8005c88:	08005f77 	.word	0x08005f77

08005c8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10f      	bne.n	8005cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	099b      	lsrs	r3, r3, #6
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
    return;
 8005cce:	e0d8      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <HAL_SPI_IRQHandler+0x66>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	09db      	lsrs	r3, r3, #7
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	4798      	blx	r3
    return;
 8005cf0:	e0c7      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10c      	bne.n	8005d18 <HAL_SPI_IRQHandler+0x8c>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	099b      	lsrs	r3, r3, #6
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	0a1b      	lsrs	r3, r3, #8
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80b5 	beq.w	8005e82 <HAL_SPI_IRQHandler+0x1f6>
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80ae 	beq.w	8005e82 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	099b      	lsrs	r3, r3, #6
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d023      	beq.n	8005d7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d011      	beq.n	8005d62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	f043 0204 	orr.w	r2, r3, #4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	e00b      	b.n	8005d7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	693b      	ldr	r3, [r7, #16]
        return;
 8005d78:	e083      	b.n	8005e82 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d014      	beq.n	8005db0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d8a:	f043 0201 	orr.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f043 0208 	orr.w	r2, r3, #8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	60bb      	str	r3, [r7, #8]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d050      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0302 	and.w	r3, r3, #2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d104      	bne.n	8005e0a <HAL_SPI_IRQHandler+0x17e>
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d034      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0203 	bic.w	r2, r2, #3
 8005e18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_SPI_IRQHandler+0x1fc>)
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fd fe80 	bl	8003b34 <HAL_DMA_Abort_IT>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d016      	beq.n	8005e7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	4a0d      	ldr	r2, [pc, #52]	; (8005e88 <HAL_SPI_IRQHandler+0x1fc>)
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd fe6a 	bl	8003b34 <HAL_DMA_Abort_IT>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005e72:	e003      	b.n	8005e7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f813 	bl	8005ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e7a:	e000      	b.n	8005e7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e7c:	bf00      	nop
    return;
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
  }
}
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08005fb7 	.word	0x08005fb7

08005e8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ec2:	f7fc f845 	bl	8001f50 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	d03b      	beq.n	8005f4e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0220 	bic.w	r2, r2, #32
 8005ee4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0202 	bic.w	r2, r2, #2
 8005ef4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	2164      	movs	r1, #100	; 0x64
 8005efa:	6978      	ldr	r0, [r7, #20]
 8005efc:	f000 f986 	bl	800620c <SPI_EndRxTxTransaction>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2200      	movs	r2, #0
 8005f34:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f46:	6978      	ldr	r0, [r7, #20]
 8005f48:	f7ff ffaa 	bl	8005ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f4c:	e002      	b.n	8005f54 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f4e:	6978      	ldr	r0, [r7, #20]
 8005f50:	f7fb f8ca 	bl	80010e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f7ff ff8f 	bl	8005e8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0203 	bic.w	r2, r2, #3
 8005f92:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff ff79 	bl	8005ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff ff64 	bl	8005ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	603b      	str	r3, [r7, #0]
 8005fec:	4613      	mov	r3, r2
 8005fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ff0:	f7fb ffae 	bl	8001f50 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff8:	1a9b      	subs	r3, r3, r2
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006000:	f7fb ffa6 	bl	8001f50 <HAL_GetTick>
 8006004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006006:	4b39      	ldr	r3, [pc, #228]	; (80060ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	015b      	lsls	r3, r3, #5
 800600c:	0d1b      	lsrs	r3, r3, #20
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006016:	e054      	b.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d050      	beq.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006020:	f7fb ff96 	bl	8001f50 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	429a      	cmp	r2, r3
 800602e:	d902      	bls.n	8006036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d13d      	bne.n	80060b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604e:	d111      	bne.n	8006074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006058:	d004      	beq.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006062:	d107      	bne.n	8006074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607c:	d10f      	bne.n	800609e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800609c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e017      	b.n	80060e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d101      	bne.n	80060bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	3b01      	subs	r3, #1
 80060c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4013      	ands	r3, r2
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d19b      	bne.n	8006018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000004 	.word	0x20000004

080060f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060fe:	f7fb ff27 	bl	8001f50 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	4413      	add	r3, r2
 800610c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800610e:	f7fb ff1f 	bl	8001f50 <HAL_GetTick>
 8006112:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	00da      	lsls	r2, r3, #3
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	0d1b      	lsrs	r3, r3, #20
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	fb02 f303 	mul.w	r3, r2, r3
 800612a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800612c:	e05f      	b.n	80061ee <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006134:	d106      	bne.n	8006144 <SPI_WaitFifoStateUntilTimeout+0x54>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d103      	bne.n	8006144 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d050      	beq.n	80061ee <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800614c:	f7fb ff00 	bl	8001f50 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	429a      	cmp	r2, r3
 800615a:	d902      	bls.n	8006162 <SPI_WaitFifoStateUntilTimeout+0x72>
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d13d      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800617a:	d111      	bne.n	80061a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006184:	d004      	beq.n	8006190 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618e:	d107      	bne.n	80061a0 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061a8:	d10f      	bne.n	80061ca <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e010      	b.n	8006200 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4013      	ands	r3, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d197      	bne.n	800612e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000004 	.word	0x20000004

0800620c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2200      	movs	r2, #0
 8006220:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff ff63 	bl	80060f0 <SPI_WaitFifoStateUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006234:	f043 0220 	orr.w	r2, r3, #32
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e027      	b.n	8006290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2200      	movs	r2, #0
 8006248:	2180      	movs	r1, #128	; 0x80
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fec8 	bl	8005fe0 <SPI_WaitFlagStateUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625a:	f043 0220 	orr.w	r2, r3, #32
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e014      	b.n	8006290 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff ff3c 	bl	80060f0 <SPI_WaitFifoStateUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d007      	beq.n	800628e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006282:	f043 0220 	orr.w	r2, r3, #32
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e000      	b.n	8006290 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e049      	b.n	800633e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fb fd36 	bl	8001d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 fa4c 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <HAL_TIM_PWM_Start+0x24>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b01      	cmp	r3, #1
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	e03c      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d109      	bne.n	8006386 <HAL_TIM_PWM_Start+0x3e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b01      	cmp	r3, #1
 800637c:	bf14      	ite	ne
 800637e:	2301      	movne	r3, #1
 8006380:	2300      	moveq	r3, #0
 8006382:	b2db      	uxtb	r3, r3
 8006384:	e02f      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d109      	bne.n	80063a0 <HAL_TIM_PWM_Start+0x58>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e022      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b0c      	cmp	r3, #12
 80063a4:	d109      	bne.n	80063ba <HAL_TIM_PWM_Start+0x72>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e015      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b10      	cmp	r3, #16
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_PWM_Start+0x8c>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	bf14      	ite	ne
 80063cc:	2301      	movne	r3, #1
 80063ce:	2300      	moveq	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e008      	b.n	80063e6 <HAL_TIM_PWM_Start+0x9e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b01      	cmp	r3, #1
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e09c      	b.n	8006528 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xb6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	e023      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b04      	cmp	r3, #4
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xc6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800640c:	e01b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xd6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800641c:	e013      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b0c      	cmp	r3, #12
 8006422:	d104      	bne.n	800642e <HAL_TIM_PWM_Start+0xe6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800642c:	e00b      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b10      	cmp	r3, #16
 8006432:	d104      	bne.n	800643e <HAL_TIM_PWM_Start+0xf6>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800643c:	e003      	b.n	8006446 <HAL_TIM_PWM_Start+0xfe>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2202      	movs	r2, #2
 8006442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2201      	movs	r2, #1
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fd00 	bl	8006e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a35      	ldr	r2, [pc, #212]	; (8006530 <HAL_TIM_PWM_Start+0x1e8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a34      	ldr	r2, [pc, #208]	; (8006534 <HAL_TIM_PWM_Start+0x1ec>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a32      	ldr	r2, [pc, #200]	; (8006538 <HAL_TIM_PWM_Start+0x1f0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a31      	ldr	r2, [pc, #196]	; (800653c <HAL_TIM_PWM_Start+0x1f4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_TIM_PWM_Start+0x13e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2f      	ldr	r2, [pc, #188]	; (8006540 <HAL_TIM_PWM_Start+0x1f8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_TIM_PWM_Start+0x142>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <HAL_TIM_PWM_Start+0x144>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a22      	ldr	r2, [pc, #136]	; (8006530 <HAL_TIM_PWM_Start+0x1e8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d01d      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b2:	d018      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a22      	ldr	r2, [pc, #136]	; (8006544 <HAL_TIM_PWM_Start+0x1fc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a21      	ldr	r2, [pc, #132]	; (8006548 <HAL_TIM_PWM_Start+0x200>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00e      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1f      	ldr	r2, [pc, #124]	; (800654c <HAL_TIM_PWM_Start+0x204>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a17      	ldr	r2, [pc, #92]	; (8006534 <HAL_TIM_PWM_Start+0x1ec>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <HAL_TIM_PWM_Start+0x19e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <HAL_TIM_PWM_Start+0x1f0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d115      	bne.n	8006512 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <HAL_TIM_PWM_Start+0x208>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d015      	beq.n	8006524 <HAL_TIM_PWM_Start+0x1dc>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d011      	beq.n	8006524 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 0201 	orr.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006510:	e008      	b.n	8006524 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	e000      	b.n	8006526 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40013400 	.word	0x40013400
 8006538:	40014000 	.word	0x40014000
 800653c:	40014400 	.word	0x40014400
 8006540:	40014800 	.word	0x40014800
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	00010007 	.word	0x00010007

08006554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800656a:	2302      	movs	r3, #2
 800656c:	e0fd      	b.n	800676a <HAL_TIM_PWM_ConfigChannel+0x216>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b14      	cmp	r3, #20
 800657a:	f200 80f0 	bhi.w	800675e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	080065d9 	.word	0x080065d9
 8006588:	0800675f 	.word	0x0800675f
 800658c:	0800675f 	.word	0x0800675f
 8006590:	0800675f 	.word	0x0800675f
 8006594:	08006619 	.word	0x08006619
 8006598:	0800675f 	.word	0x0800675f
 800659c:	0800675f 	.word	0x0800675f
 80065a0:	0800675f 	.word	0x0800675f
 80065a4:	0800665b 	.word	0x0800665b
 80065a8:	0800675f 	.word	0x0800675f
 80065ac:	0800675f 	.word	0x0800675f
 80065b0:	0800675f 	.word	0x0800675f
 80065b4:	0800669b 	.word	0x0800669b
 80065b8:	0800675f 	.word	0x0800675f
 80065bc:	0800675f 	.word	0x0800675f
 80065c0:	0800675f 	.word	0x0800675f
 80065c4:	080066dd 	.word	0x080066dd
 80065c8:	0800675f 	.word	0x0800675f
 80065cc:	0800675f 	.word	0x0800675f
 80065d0:	0800675f 	.word	0x0800675f
 80065d4:	0800671d 	.word	0x0800671d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f962 	bl	80068a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0208 	orr.w	r2, r2, #8
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	619a      	str	r2, [r3, #24]
      break;
 8006616:	e0a3      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f9d2 	bl	80069c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]
      break;
 8006658:	e082      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fa3b 	bl	8006adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0208 	orr.w	r2, r2, #8
 8006674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0204 	bic.w	r2, r2, #4
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]
      break;
 8006698:	e062      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 faa3 	bl	8006bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69d9      	ldr	r1, [r3, #28]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	021a      	lsls	r2, r3, #8
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	61da      	str	r2, [r3, #28]
      break;
 80066da:	e041      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68b9      	ldr	r1, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 faec 	bl	8006cc0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0208 	orr.w	r2, r2, #8
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f022 0204 	bic.w	r2, r2, #4
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800671a:	e021      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fb30 	bl	8006d88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	021a      	lsls	r2, r3, #8
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800675c:	e000      	b.n	8006760 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800675e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a40      	ldr	r2, [pc, #256]	; (8006888 <TIM_Base_SetConfig+0x114>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a3d      	ldr	r2, [pc, #244]	; (800688c <TIM_Base_SetConfig+0x118>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a3c      	ldr	r2, [pc, #240]	; (8006890 <TIM_Base_SetConfig+0x11c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a3b      	ldr	r2, [pc, #236]	; (8006894 <TIM_Base_SetConfig+0x120>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3a      	ldr	r2, [pc, #232]	; (8006898 <TIM_Base_SetConfig+0x124>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a2f      	ldr	r2, [pc, #188]	; (8006888 <TIM_Base_SetConfig+0x114>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01f      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d01b      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2c      	ldr	r2, [pc, #176]	; (800688c <TIM_Base_SetConfig+0x118>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d017      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2b      	ldr	r2, [pc, #172]	; (8006890 <TIM_Base_SetConfig+0x11c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <TIM_Base_SetConfig+0x120>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00f      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a29      	ldr	r2, [pc, #164]	; (8006898 <TIM_Base_SetConfig+0x124>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00b      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a28      	ldr	r2, [pc, #160]	; (800689c <TIM_Base_SetConfig+0x128>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a27      	ldr	r2, [pc, #156]	; (80068a0 <TIM_Base_SetConfig+0x12c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a26      	ldr	r2, [pc, #152]	; (80068a4 <TIM_Base_SetConfig+0x130>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d108      	bne.n	8006820 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a10      	ldr	r2, [pc, #64]	; (8006888 <TIM_Base_SetConfig+0x114>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00f      	beq.n	800686c <TIM_Base_SetConfig+0xf8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <TIM_Base_SetConfig+0x124>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00b      	beq.n	800686c <TIM_Base_SetConfig+0xf8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <TIM_Base_SetConfig+0x128>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <TIM_Base_SetConfig+0xf8>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <TIM_Base_SetConfig+0x12c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_Base_SetConfig+0xf8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <TIM_Base_SetConfig+0x130>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d103      	bne.n	8006874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	615a      	str	r2, [r3, #20]
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40012c00 	.word	0x40012c00
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40013400 	.word	0x40013400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800

080068a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f023 0201 	bic.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f023 0302 	bic.w	r3, r3, #2
 80068f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a2c      	ldr	r2, [pc, #176]	; (80069b4 <TIM_OC1_SetConfig+0x10c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00f      	beq.n	8006928 <TIM_OC1_SetConfig+0x80>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <TIM_OC1_SetConfig+0x110>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00b      	beq.n	8006928 <TIM_OC1_SetConfig+0x80>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a2a      	ldr	r2, [pc, #168]	; (80069bc <TIM_OC1_SetConfig+0x114>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d007      	beq.n	8006928 <TIM_OC1_SetConfig+0x80>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a29      	ldr	r2, [pc, #164]	; (80069c0 <TIM_OC1_SetConfig+0x118>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC1_SetConfig+0x80>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a28      	ldr	r2, [pc, #160]	; (80069c4 <TIM_OC1_SetConfig+0x11c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d10c      	bne.n	8006942 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f023 0308 	bic.w	r3, r3, #8
 800692e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 0304 	bic.w	r3, r3, #4
 8006940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a1b      	ldr	r2, [pc, #108]	; (80069b4 <TIM_OC1_SetConfig+0x10c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00f      	beq.n	800696a <TIM_OC1_SetConfig+0xc2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <TIM_OC1_SetConfig+0x110>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00b      	beq.n	800696a <TIM_OC1_SetConfig+0xc2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a19      	ldr	r2, [pc, #100]	; (80069bc <TIM_OC1_SetConfig+0x114>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d007      	beq.n	800696a <TIM_OC1_SetConfig+0xc2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a18      	ldr	r2, [pc, #96]	; (80069c0 <TIM_OC1_SetConfig+0x118>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d003      	beq.n	800696a <TIM_OC1_SetConfig+0xc2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <TIM_OC1_SetConfig+0x11c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40012c00 	.word	0x40012c00
 80069b8:	40013400 	.word	0x40013400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800

080069c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	f023 0210 	bic.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0320 	bic.w	r3, r3, #32
 8006a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	011b      	lsls	r3, r3, #4
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <TIM_OC2_SetConfig+0x100>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC2_SetConfig+0x6c>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a27      	ldr	r2, [pc, #156]	; (8006acc <TIM_OC2_SetConfig+0x104>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d10d      	bne.n	8006a50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <TIM_OC2_SetConfig+0x100>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00f      	beq.n	8006a78 <TIM_OC2_SetConfig+0xb0>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <TIM_OC2_SetConfig+0x104>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_OC2_SetConfig+0xb0>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <TIM_OC2_SetConfig+0x108>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC2_SetConfig+0xb0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ad4 <TIM_OC2_SetConfig+0x10c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC2_SetConfig+0xb0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a19      	ldr	r2, [pc, #100]	; (8006ad8 <TIM_OC2_SetConfig+0x110>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d113      	bne.n	8006aa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40013400 	.word	0x40013400
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800

08006adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <TIM_OC3_SetConfig+0xfc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC3_SetConfig+0x6a>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a26      	ldr	r2, [pc, #152]	; (8006bdc <TIM_OC3_SetConfig+0x100>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10d      	bne.n	8006b62 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <TIM_OC3_SetConfig+0xfc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00f      	beq.n	8006b8a <TIM_OC3_SetConfig+0xae>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <TIM_OC3_SetConfig+0x100>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <TIM_OC3_SetConfig+0xae>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <TIM_OC3_SetConfig+0x104>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_OC3_SetConfig+0xae>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <TIM_OC3_SetConfig+0x108>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC3_SetConfig+0xae>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <TIM_OC3_SetConfig+0x10c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d113      	bne.n	8006bb2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	621a      	str	r2, [r3, #32]
}
 8006bcc:	bf00      	nop
 8006bce:	371c      	adds	r7, #28
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a18      	ldr	r2, [pc, #96]	; (8006cac <TIM_OC4_SetConfig+0xc0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00f      	beq.n	8006c70 <TIM_OC4_SetConfig+0x84>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a17      	ldr	r2, [pc, #92]	; (8006cb0 <TIM_OC4_SetConfig+0xc4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_OC4_SetConfig+0x84>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <TIM_OC4_SetConfig+0xc8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_OC4_SetConfig+0x84>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <TIM_OC4_SetConfig+0xcc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_OC4_SetConfig+0x84>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <TIM_OC4_SetConfig+0xd0>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d109      	bne.n	8006c84 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	019b      	lsls	r3, r3, #6
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40014400 	.word	0x40014400
 8006cbc:	40014800 	.word	0x40014800

08006cc0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a17      	ldr	r2, [pc, #92]	; (8006d74 <TIM_OC5_SetConfig+0xb4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00f      	beq.n	8006d3a <TIM_OC5_SetConfig+0x7a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a16      	ldr	r2, [pc, #88]	; (8006d78 <TIM_OC5_SetConfig+0xb8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <TIM_OC5_SetConfig+0x7a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <TIM_OC5_SetConfig+0xbc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d007      	beq.n	8006d3a <TIM_OC5_SetConfig+0x7a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a14      	ldr	r2, [pc, #80]	; (8006d80 <TIM_OC5_SetConfig+0xc0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_OC5_SetConfig+0x7a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <TIM_OC5_SetConfig+0xc4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d109      	bne.n	8006d4e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	621a      	str	r2, [r3, #32]
}
 8006d68:	bf00      	nop
 8006d6a:	371c      	adds	r7, #28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40013400 	.word	0x40013400
 8006d7c:	40014000 	.word	0x40014000
 8006d80:	40014400 	.word	0x40014400
 8006d84:	40014800 	.word	0x40014800

08006d88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	051b      	lsls	r3, r3, #20
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a18      	ldr	r2, [pc, #96]	; (8006e40 <TIM_OC6_SetConfig+0xb8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d00f      	beq.n	8006e04 <TIM_OC6_SetConfig+0x7c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a17      	ldr	r2, [pc, #92]	; (8006e44 <TIM_OC6_SetConfig+0xbc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC6_SetConfig+0x7c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a16      	ldr	r2, [pc, #88]	; (8006e48 <TIM_OC6_SetConfig+0xc0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC6_SetConfig+0x7c>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <TIM_OC6_SetConfig+0xc4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC6_SetConfig+0x7c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a14      	ldr	r2, [pc, #80]	; (8006e50 <TIM_OC6_SetConfig+0xc8>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d109      	bne.n	8006e18 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40013400 	.word	0x40013400
 8006e48:	40014000 	.word	0x40014000
 8006e4c:	40014400 	.word	0x40014400
 8006e50:	40014800 	.word	0x40014800

08006e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2201      	movs	r2, #1
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	43db      	mvns	r3, r3
 8006e76:	401a      	ands	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a1a      	ldr	r2, [r3, #32]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 031f 	and.w	r3, r3, #31
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e068      	b.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a2e      	ldr	r2, [pc, #184]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2d      	ldr	r2, [pc, #180]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d108      	bne.n	8006efe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ef2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d018      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1a      	ldr	r2, [pc, #104]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a18      	ldr	r2, [pc, #96]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a14      	ldr	r2, [pc, #80]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d10c      	bne.n	8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40013400 	.word	0x40013400
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40014000 	.word	0x40014000

08006fb0 <__errno>:
 8006fb0:	4b01      	ldr	r3, [pc, #4]	; (8006fb8 <__errno+0x8>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000010 	.word	0x20000010

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0d      	ldr	r6, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1ba4      	subs	r4, r4, r6
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4e0b      	ldr	r6, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 fc28 	bl	8007824 <_init>
 8006fd4:	1ba4      	subs	r4, r4, r6
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2500      	movs	r5, #0
 8006fda:	42a5      	cmp	r5, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fe4:	4798      	blx	r3
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fee:	4798      	blx	r3
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	08007e5c 	.word	0x08007e5c
 8006ff8:	08007e5c 	.word	0x08007e5c
 8006ffc:	08007e5c 	.word	0x08007e5c
 8007000:	08007e60 	.word	0x08007e60

08007004 <memcpy>:
 8007004:	b510      	push	{r4, lr}
 8007006:	1e43      	subs	r3, r0, #1
 8007008:	440a      	add	r2, r1
 800700a:	4291      	cmp	r1, r2
 800700c:	d100      	bne.n	8007010 <memcpy+0xc>
 800700e:	bd10      	pop	{r4, pc}
 8007010:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007014:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007018:	e7f7      	b.n	800700a <memcpy+0x6>

0800701a <memset>:
 800701a:	4402      	add	r2, r0
 800701c:	4603      	mov	r3, r0
 800701e:	4293      	cmp	r3, r2
 8007020:	d100      	bne.n	8007024 <memset+0xa>
 8007022:	4770      	bx	lr
 8007024:	f803 1b01 	strb.w	r1, [r3], #1
 8007028:	e7f9      	b.n	800701e <memset+0x4>
	...

0800702c <siprintf>:
 800702c:	b40e      	push	{r1, r2, r3}
 800702e:	b500      	push	{lr}
 8007030:	b09c      	sub	sp, #112	; 0x70
 8007032:	ab1d      	add	r3, sp, #116	; 0x74
 8007034:	9002      	str	r0, [sp, #8]
 8007036:	9006      	str	r0, [sp, #24]
 8007038:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800703c:	4809      	ldr	r0, [pc, #36]	; (8007064 <siprintf+0x38>)
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	9104      	str	r1, [sp, #16]
 8007042:	4909      	ldr	r1, [pc, #36]	; (8007068 <siprintf+0x3c>)
 8007044:	f853 2b04 	ldr.w	r2, [r3], #4
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	a902      	add	r1, sp, #8
 8007050:	f000 f866 	bl	8007120 <_svfiprintf_r>
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	b01c      	add	sp, #112	; 0x70
 800705c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007060:	b003      	add	sp, #12
 8007062:	4770      	bx	lr
 8007064:	20000010 	.word	0x20000010
 8007068:	ffff0208 	.word	0xffff0208

0800706c <__ssputs_r>:
 800706c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007070:	688e      	ldr	r6, [r1, #8]
 8007072:	429e      	cmp	r6, r3
 8007074:	4682      	mov	sl, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4690      	mov	r8, r2
 800707a:	4699      	mov	r9, r3
 800707c:	d837      	bhi.n	80070ee <__ssputs_r+0x82>
 800707e:	898a      	ldrh	r2, [r1, #12]
 8007080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007084:	d031      	beq.n	80070ea <__ssputs_r+0x7e>
 8007086:	6825      	ldr	r5, [r4, #0]
 8007088:	6909      	ldr	r1, [r1, #16]
 800708a:	1a6f      	subs	r7, r5, r1
 800708c:	6965      	ldr	r5, [r4, #20]
 800708e:	2302      	movs	r3, #2
 8007090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007094:	fb95 f5f3 	sdiv	r5, r5, r3
 8007098:	f109 0301 	add.w	r3, r9, #1
 800709c:	443b      	add	r3, r7
 800709e:	429d      	cmp	r5, r3
 80070a0:	bf38      	it	cc
 80070a2:	461d      	movcc	r5, r3
 80070a4:	0553      	lsls	r3, r2, #21
 80070a6:	d530      	bpl.n	800710a <__ssputs_r+0x9e>
 80070a8:	4629      	mov	r1, r5
 80070aa:	f000 fb21 	bl	80076f0 <_malloc_r>
 80070ae:	4606      	mov	r6, r0
 80070b0:	b950      	cbnz	r0, 80070c8 <__ssputs_r+0x5c>
 80070b2:	230c      	movs	r3, #12
 80070b4:	f8ca 3000 	str.w	r3, [sl]
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	f04f 30ff 	mov.w	r0, #4294967295
 80070c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c8:	463a      	mov	r2, r7
 80070ca:	6921      	ldr	r1, [r4, #16]
 80070cc:	f7ff ff9a 	bl	8007004 <memcpy>
 80070d0:	89a3      	ldrh	r3, [r4, #12]
 80070d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	6126      	str	r6, [r4, #16]
 80070de:	6165      	str	r5, [r4, #20]
 80070e0:	443e      	add	r6, r7
 80070e2:	1bed      	subs	r5, r5, r7
 80070e4:	6026      	str	r6, [r4, #0]
 80070e6:	60a5      	str	r5, [r4, #8]
 80070e8:	464e      	mov	r6, r9
 80070ea:	454e      	cmp	r6, r9
 80070ec:	d900      	bls.n	80070f0 <__ssputs_r+0x84>
 80070ee:	464e      	mov	r6, r9
 80070f0:	4632      	mov	r2, r6
 80070f2:	4641      	mov	r1, r8
 80070f4:	6820      	ldr	r0, [r4, #0]
 80070f6:	f000 fa93 	bl	8007620 <memmove>
 80070fa:	68a3      	ldr	r3, [r4, #8]
 80070fc:	1b9b      	subs	r3, r3, r6
 80070fe:	60a3      	str	r3, [r4, #8]
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	441e      	add	r6, r3
 8007104:	6026      	str	r6, [r4, #0]
 8007106:	2000      	movs	r0, #0
 8007108:	e7dc      	b.n	80070c4 <__ssputs_r+0x58>
 800710a:	462a      	mov	r2, r5
 800710c:	f000 fb4a 	bl	80077a4 <_realloc_r>
 8007110:	4606      	mov	r6, r0
 8007112:	2800      	cmp	r0, #0
 8007114:	d1e2      	bne.n	80070dc <__ssputs_r+0x70>
 8007116:	6921      	ldr	r1, [r4, #16]
 8007118:	4650      	mov	r0, sl
 800711a:	f000 fa9b 	bl	8007654 <_free_r>
 800711e:	e7c8      	b.n	80070b2 <__ssputs_r+0x46>

08007120 <_svfiprintf_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	461d      	mov	r5, r3
 8007126:	898b      	ldrh	r3, [r1, #12]
 8007128:	061f      	lsls	r7, r3, #24
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	4680      	mov	r8, r0
 800712e:	460c      	mov	r4, r1
 8007130:	4616      	mov	r6, r2
 8007132:	d50f      	bpl.n	8007154 <_svfiprintf_r+0x34>
 8007134:	690b      	ldr	r3, [r1, #16]
 8007136:	b96b      	cbnz	r3, 8007154 <_svfiprintf_r+0x34>
 8007138:	2140      	movs	r1, #64	; 0x40
 800713a:	f000 fad9 	bl	80076f0 <_malloc_r>
 800713e:	6020      	str	r0, [r4, #0]
 8007140:	6120      	str	r0, [r4, #16]
 8007142:	b928      	cbnz	r0, 8007150 <_svfiprintf_r+0x30>
 8007144:	230c      	movs	r3, #12
 8007146:	f8c8 3000 	str.w	r3, [r8]
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	e0c8      	b.n	80072e2 <_svfiprintf_r+0x1c2>
 8007150:	2340      	movs	r3, #64	; 0x40
 8007152:	6163      	str	r3, [r4, #20]
 8007154:	2300      	movs	r3, #0
 8007156:	9309      	str	r3, [sp, #36]	; 0x24
 8007158:	2320      	movs	r3, #32
 800715a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715e:	2330      	movs	r3, #48	; 0x30
 8007160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007164:	9503      	str	r5, [sp, #12]
 8007166:	f04f 0b01 	mov.w	fp, #1
 800716a:	4637      	mov	r7, r6
 800716c:	463d      	mov	r5, r7
 800716e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007172:	b10b      	cbz	r3, 8007178 <_svfiprintf_r+0x58>
 8007174:	2b25      	cmp	r3, #37	; 0x25
 8007176:	d13e      	bne.n	80071f6 <_svfiprintf_r+0xd6>
 8007178:	ebb7 0a06 	subs.w	sl, r7, r6
 800717c:	d00b      	beq.n	8007196 <_svfiprintf_r+0x76>
 800717e:	4653      	mov	r3, sl
 8007180:	4632      	mov	r2, r6
 8007182:	4621      	mov	r1, r4
 8007184:	4640      	mov	r0, r8
 8007186:	f7ff ff71 	bl	800706c <__ssputs_r>
 800718a:	3001      	adds	r0, #1
 800718c:	f000 80a4 	beq.w	80072d8 <_svfiprintf_r+0x1b8>
 8007190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007192:	4453      	add	r3, sl
 8007194:	9309      	str	r3, [sp, #36]	; 0x24
 8007196:	783b      	ldrb	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 809d 	beq.w	80072d8 <_svfiprintf_r+0x1b8>
 800719e:	2300      	movs	r3, #0
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	9307      	str	r3, [sp, #28]
 80071ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071b0:	931a      	str	r3, [sp, #104]	; 0x68
 80071b2:	462f      	mov	r7, r5
 80071b4:	2205      	movs	r2, #5
 80071b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80071ba:	4850      	ldr	r0, [pc, #320]	; (80072fc <_svfiprintf_r+0x1dc>)
 80071bc:	f7f9 f810 	bl	80001e0 <memchr>
 80071c0:	9b04      	ldr	r3, [sp, #16]
 80071c2:	b9d0      	cbnz	r0, 80071fa <_svfiprintf_r+0xda>
 80071c4:	06d9      	lsls	r1, r3, #27
 80071c6:	bf44      	itt	mi
 80071c8:	2220      	movmi	r2, #32
 80071ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071ce:	071a      	lsls	r2, r3, #28
 80071d0:	bf44      	itt	mi
 80071d2:	222b      	movmi	r2, #43	; 0x2b
 80071d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071d8:	782a      	ldrb	r2, [r5, #0]
 80071da:	2a2a      	cmp	r2, #42	; 0x2a
 80071dc:	d015      	beq.n	800720a <_svfiprintf_r+0xea>
 80071de:	9a07      	ldr	r2, [sp, #28]
 80071e0:	462f      	mov	r7, r5
 80071e2:	2000      	movs	r0, #0
 80071e4:	250a      	movs	r5, #10
 80071e6:	4639      	mov	r1, r7
 80071e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ec:	3b30      	subs	r3, #48	; 0x30
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d94d      	bls.n	800728e <_svfiprintf_r+0x16e>
 80071f2:	b1b8      	cbz	r0, 8007224 <_svfiprintf_r+0x104>
 80071f4:	e00f      	b.n	8007216 <_svfiprintf_r+0xf6>
 80071f6:	462f      	mov	r7, r5
 80071f8:	e7b8      	b.n	800716c <_svfiprintf_r+0x4c>
 80071fa:	4a40      	ldr	r2, [pc, #256]	; (80072fc <_svfiprintf_r+0x1dc>)
 80071fc:	1a80      	subs	r0, r0, r2
 80071fe:	fa0b f000 	lsl.w	r0, fp, r0
 8007202:	4318      	orrs	r0, r3
 8007204:	9004      	str	r0, [sp, #16]
 8007206:	463d      	mov	r5, r7
 8007208:	e7d3      	b.n	80071b2 <_svfiprintf_r+0x92>
 800720a:	9a03      	ldr	r2, [sp, #12]
 800720c:	1d11      	adds	r1, r2, #4
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	9103      	str	r1, [sp, #12]
 8007212:	2a00      	cmp	r2, #0
 8007214:	db01      	blt.n	800721a <_svfiprintf_r+0xfa>
 8007216:	9207      	str	r2, [sp, #28]
 8007218:	e004      	b.n	8007224 <_svfiprintf_r+0x104>
 800721a:	4252      	negs	r2, r2
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	9207      	str	r2, [sp, #28]
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	783b      	ldrb	r3, [r7, #0]
 8007226:	2b2e      	cmp	r3, #46	; 0x2e
 8007228:	d10c      	bne.n	8007244 <_svfiprintf_r+0x124>
 800722a:	787b      	ldrb	r3, [r7, #1]
 800722c:	2b2a      	cmp	r3, #42	; 0x2a
 800722e:	d133      	bne.n	8007298 <_svfiprintf_r+0x178>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	1d1a      	adds	r2, r3, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	9203      	str	r2, [sp, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	bfb8      	it	lt
 800723c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007240:	3702      	adds	r7, #2
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	4d2e      	ldr	r5, [pc, #184]	; (8007300 <_svfiprintf_r+0x1e0>)
 8007246:	7839      	ldrb	r1, [r7, #0]
 8007248:	2203      	movs	r2, #3
 800724a:	4628      	mov	r0, r5
 800724c:	f7f8 ffc8 	bl	80001e0 <memchr>
 8007250:	b138      	cbz	r0, 8007262 <_svfiprintf_r+0x142>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	1b40      	subs	r0, r0, r5
 8007256:	fa03 f000 	lsl.w	r0, r3, r0
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	4303      	orrs	r3, r0
 800725e:	3701      	adds	r7, #1
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	7839      	ldrb	r1, [r7, #0]
 8007264:	4827      	ldr	r0, [pc, #156]	; (8007304 <_svfiprintf_r+0x1e4>)
 8007266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726a:	2206      	movs	r2, #6
 800726c:	1c7e      	adds	r6, r7, #1
 800726e:	f7f8 ffb7 	bl	80001e0 <memchr>
 8007272:	2800      	cmp	r0, #0
 8007274:	d038      	beq.n	80072e8 <_svfiprintf_r+0x1c8>
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <_svfiprintf_r+0x1e8>)
 8007278:	bb13      	cbnz	r3, 80072c0 <_svfiprintf_r+0x1a0>
 800727a:	9b03      	ldr	r3, [sp, #12]
 800727c:	3307      	adds	r3, #7
 800727e:	f023 0307 	bic.w	r3, r3, #7
 8007282:	3308      	adds	r3, #8
 8007284:	9303      	str	r3, [sp, #12]
 8007286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007288:	444b      	add	r3, r9
 800728a:	9309      	str	r3, [sp, #36]	; 0x24
 800728c:	e76d      	b.n	800716a <_svfiprintf_r+0x4a>
 800728e:	fb05 3202 	mla	r2, r5, r2, r3
 8007292:	2001      	movs	r0, #1
 8007294:	460f      	mov	r7, r1
 8007296:	e7a6      	b.n	80071e6 <_svfiprintf_r+0xc6>
 8007298:	2300      	movs	r3, #0
 800729a:	3701      	adds	r7, #1
 800729c:	9305      	str	r3, [sp, #20]
 800729e:	4619      	mov	r1, r3
 80072a0:	250a      	movs	r5, #10
 80072a2:	4638      	mov	r0, r7
 80072a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a8:	3a30      	subs	r2, #48	; 0x30
 80072aa:	2a09      	cmp	r2, #9
 80072ac:	d903      	bls.n	80072b6 <_svfiprintf_r+0x196>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0c8      	beq.n	8007244 <_svfiprintf_r+0x124>
 80072b2:	9105      	str	r1, [sp, #20]
 80072b4:	e7c6      	b.n	8007244 <_svfiprintf_r+0x124>
 80072b6:	fb05 2101 	mla	r1, r5, r1, r2
 80072ba:	2301      	movs	r3, #1
 80072bc:	4607      	mov	r7, r0
 80072be:	e7f0      	b.n	80072a2 <_svfiprintf_r+0x182>
 80072c0:	ab03      	add	r3, sp, #12
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	4622      	mov	r2, r4
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <_svfiprintf_r+0x1ec>)
 80072c8:	a904      	add	r1, sp, #16
 80072ca:	4640      	mov	r0, r8
 80072cc:	f3af 8000 	nop.w
 80072d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072d4:	4681      	mov	r9, r0
 80072d6:	d1d6      	bne.n	8007286 <_svfiprintf_r+0x166>
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	065b      	lsls	r3, r3, #25
 80072dc:	f53f af35 	bmi.w	800714a <_svfiprintf_r+0x2a>
 80072e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072e2:	b01d      	add	sp, #116	; 0x74
 80072e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e8:	ab03      	add	r3, sp, #12
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	4622      	mov	r2, r4
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <_svfiprintf_r+0x1ec>)
 80072f0:	a904      	add	r1, sp, #16
 80072f2:	4640      	mov	r0, r8
 80072f4:	f000 f882 	bl	80073fc <_printf_i>
 80072f8:	e7ea      	b.n	80072d0 <_svfiprintf_r+0x1b0>
 80072fa:	bf00      	nop
 80072fc:	08007e28 	.word	0x08007e28
 8007300:	08007e2e 	.word	0x08007e2e
 8007304:	08007e32 	.word	0x08007e32
 8007308:	00000000 	.word	0x00000000
 800730c:	0800706d 	.word	0x0800706d

08007310 <_printf_common>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	4691      	mov	r9, r2
 8007316:	461f      	mov	r7, r3
 8007318:	688a      	ldr	r2, [r1, #8]
 800731a:	690b      	ldr	r3, [r1, #16]
 800731c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007320:	4293      	cmp	r3, r2
 8007322:	bfb8      	it	lt
 8007324:	4613      	movlt	r3, r2
 8007326:	f8c9 3000 	str.w	r3, [r9]
 800732a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800732e:	4606      	mov	r6, r0
 8007330:	460c      	mov	r4, r1
 8007332:	b112      	cbz	r2, 800733a <_printf_common+0x2a>
 8007334:	3301      	adds	r3, #1
 8007336:	f8c9 3000 	str.w	r3, [r9]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	0699      	lsls	r1, r3, #26
 800733e:	bf42      	ittt	mi
 8007340:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007344:	3302      	addmi	r3, #2
 8007346:	f8c9 3000 	strmi.w	r3, [r9]
 800734a:	6825      	ldr	r5, [r4, #0]
 800734c:	f015 0506 	ands.w	r5, r5, #6
 8007350:	d107      	bne.n	8007362 <_printf_common+0x52>
 8007352:	f104 0a19 	add.w	sl, r4, #25
 8007356:	68e3      	ldr	r3, [r4, #12]
 8007358:	f8d9 2000 	ldr.w	r2, [r9]
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	42ab      	cmp	r3, r5
 8007360:	dc28      	bgt.n	80073b4 <_printf_common+0xa4>
 8007362:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	3300      	adds	r3, #0
 800736a:	bf18      	it	ne
 800736c:	2301      	movne	r3, #1
 800736e:	0692      	lsls	r2, r2, #26
 8007370:	d42d      	bmi.n	80073ce <_printf_common+0xbe>
 8007372:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007376:	4639      	mov	r1, r7
 8007378:	4630      	mov	r0, r6
 800737a:	47c0      	blx	r8
 800737c:	3001      	adds	r0, #1
 800737e:	d020      	beq.n	80073c2 <_printf_common+0xb2>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	68e5      	ldr	r5, [r4, #12]
 8007384:	f8d9 2000 	ldr.w	r2, [r9]
 8007388:	f003 0306 	and.w	r3, r3, #6
 800738c:	2b04      	cmp	r3, #4
 800738e:	bf08      	it	eq
 8007390:	1aad      	subeq	r5, r5, r2
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	6922      	ldr	r2, [r4, #16]
 8007396:	bf0c      	ite	eq
 8007398:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800739c:	2500      	movne	r5, #0
 800739e:	4293      	cmp	r3, r2
 80073a0:	bfc4      	itt	gt
 80073a2:	1a9b      	subgt	r3, r3, r2
 80073a4:	18ed      	addgt	r5, r5, r3
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	341a      	adds	r4, #26
 80073ac:	454d      	cmp	r5, r9
 80073ae:	d11a      	bne.n	80073e6 <_printf_common+0xd6>
 80073b0:	2000      	movs	r0, #0
 80073b2:	e008      	b.n	80073c6 <_printf_common+0xb6>
 80073b4:	2301      	movs	r3, #1
 80073b6:	4652      	mov	r2, sl
 80073b8:	4639      	mov	r1, r7
 80073ba:	4630      	mov	r0, r6
 80073bc:	47c0      	blx	r8
 80073be:	3001      	adds	r0, #1
 80073c0:	d103      	bne.n	80073ca <_printf_common+0xba>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ca:	3501      	adds	r5, #1
 80073cc:	e7c3      	b.n	8007356 <_printf_common+0x46>
 80073ce:	18e1      	adds	r1, r4, r3
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	2030      	movs	r0, #48	; 0x30
 80073d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073d8:	4422      	add	r2, r4
 80073da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e2:	3302      	adds	r3, #2
 80073e4:	e7c5      	b.n	8007372 <_printf_common+0x62>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4622      	mov	r2, r4
 80073ea:	4639      	mov	r1, r7
 80073ec:	4630      	mov	r0, r6
 80073ee:	47c0      	blx	r8
 80073f0:	3001      	adds	r0, #1
 80073f2:	d0e6      	beq.n	80073c2 <_printf_common+0xb2>
 80073f4:	f109 0901 	add.w	r9, r9, #1
 80073f8:	e7d8      	b.n	80073ac <_printf_common+0x9c>
	...

080073fc <_printf_i>:
 80073fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007400:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007404:	460c      	mov	r4, r1
 8007406:	7e09      	ldrb	r1, [r1, #24]
 8007408:	b085      	sub	sp, #20
 800740a:	296e      	cmp	r1, #110	; 0x6e
 800740c:	4617      	mov	r7, r2
 800740e:	4606      	mov	r6, r0
 8007410:	4698      	mov	r8, r3
 8007412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007414:	f000 80b3 	beq.w	800757e <_printf_i+0x182>
 8007418:	d822      	bhi.n	8007460 <_printf_i+0x64>
 800741a:	2963      	cmp	r1, #99	; 0x63
 800741c:	d036      	beq.n	800748c <_printf_i+0x90>
 800741e:	d80a      	bhi.n	8007436 <_printf_i+0x3a>
 8007420:	2900      	cmp	r1, #0
 8007422:	f000 80b9 	beq.w	8007598 <_printf_i+0x19c>
 8007426:	2958      	cmp	r1, #88	; 0x58
 8007428:	f000 8083 	beq.w	8007532 <_printf_i+0x136>
 800742c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007430:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007434:	e032      	b.n	800749c <_printf_i+0xa0>
 8007436:	2964      	cmp	r1, #100	; 0x64
 8007438:	d001      	beq.n	800743e <_printf_i+0x42>
 800743a:	2969      	cmp	r1, #105	; 0x69
 800743c:	d1f6      	bne.n	800742c <_printf_i+0x30>
 800743e:	6820      	ldr	r0, [r4, #0]
 8007440:	6813      	ldr	r3, [r2, #0]
 8007442:	0605      	lsls	r5, r0, #24
 8007444:	f103 0104 	add.w	r1, r3, #4
 8007448:	d52a      	bpl.n	80074a0 <_printf_i+0xa4>
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da03      	bge.n	800745a <_printf_i+0x5e>
 8007452:	222d      	movs	r2, #45	; 0x2d
 8007454:	425b      	negs	r3, r3
 8007456:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800745a:	486f      	ldr	r0, [pc, #444]	; (8007618 <_printf_i+0x21c>)
 800745c:	220a      	movs	r2, #10
 800745e:	e039      	b.n	80074d4 <_printf_i+0xd8>
 8007460:	2973      	cmp	r1, #115	; 0x73
 8007462:	f000 809d 	beq.w	80075a0 <_printf_i+0x1a4>
 8007466:	d808      	bhi.n	800747a <_printf_i+0x7e>
 8007468:	296f      	cmp	r1, #111	; 0x6f
 800746a:	d020      	beq.n	80074ae <_printf_i+0xb2>
 800746c:	2970      	cmp	r1, #112	; 0x70
 800746e:	d1dd      	bne.n	800742c <_printf_i+0x30>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	f043 0320 	orr.w	r3, r3, #32
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	e003      	b.n	8007482 <_printf_i+0x86>
 800747a:	2975      	cmp	r1, #117	; 0x75
 800747c:	d017      	beq.n	80074ae <_printf_i+0xb2>
 800747e:	2978      	cmp	r1, #120	; 0x78
 8007480:	d1d4      	bne.n	800742c <_printf_i+0x30>
 8007482:	2378      	movs	r3, #120	; 0x78
 8007484:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007488:	4864      	ldr	r0, [pc, #400]	; (800761c <_printf_i+0x220>)
 800748a:	e055      	b.n	8007538 <_printf_i+0x13c>
 800748c:	6813      	ldr	r3, [r2, #0]
 800748e:	1d19      	adds	r1, r3, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6011      	str	r1, [r2, #0]
 8007494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800749c:	2301      	movs	r3, #1
 800749e:	e08c      	b.n	80075ba <_printf_i+0x1be>
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6011      	str	r1, [r2, #0]
 80074a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074a8:	bf18      	it	ne
 80074aa:	b21b      	sxthne	r3, r3
 80074ac:	e7cf      	b.n	800744e <_printf_i+0x52>
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	6825      	ldr	r5, [r4, #0]
 80074b2:	1d18      	adds	r0, r3, #4
 80074b4:	6010      	str	r0, [r2, #0]
 80074b6:	0628      	lsls	r0, r5, #24
 80074b8:	d501      	bpl.n	80074be <_printf_i+0xc2>
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	e002      	b.n	80074c4 <_printf_i+0xc8>
 80074be:	0668      	lsls	r0, r5, #25
 80074c0:	d5fb      	bpl.n	80074ba <_printf_i+0xbe>
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	4854      	ldr	r0, [pc, #336]	; (8007618 <_printf_i+0x21c>)
 80074c6:	296f      	cmp	r1, #111	; 0x6f
 80074c8:	bf14      	ite	ne
 80074ca:	220a      	movne	r2, #10
 80074cc:	2208      	moveq	r2, #8
 80074ce:	2100      	movs	r1, #0
 80074d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d4:	6865      	ldr	r5, [r4, #4]
 80074d6:	60a5      	str	r5, [r4, #8]
 80074d8:	2d00      	cmp	r5, #0
 80074da:	f2c0 8095 	blt.w	8007608 <_printf_i+0x20c>
 80074de:	6821      	ldr	r1, [r4, #0]
 80074e0:	f021 0104 	bic.w	r1, r1, #4
 80074e4:	6021      	str	r1, [r4, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d13d      	bne.n	8007566 <_printf_i+0x16a>
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	f040 808e 	bne.w	800760c <_printf_i+0x210>
 80074f0:	4665      	mov	r5, ip
 80074f2:	2a08      	cmp	r2, #8
 80074f4:	d10b      	bne.n	800750e <_printf_i+0x112>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	07db      	lsls	r3, r3, #31
 80074fa:	d508      	bpl.n	800750e <_printf_i+0x112>
 80074fc:	6923      	ldr	r3, [r4, #16]
 80074fe:	6862      	ldr	r2, [r4, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	bfde      	ittt	le
 8007504:	2330      	movle	r3, #48	; 0x30
 8007506:	f805 3c01 	strble.w	r3, [r5, #-1]
 800750a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800750e:	ebac 0305 	sub.w	r3, ip, r5
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	f8cd 8000 	str.w	r8, [sp]
 8007518:	463b      	mov	r3, r7
 800751a:	aa03      	add	r2, sp, #12
 800751c:	4621      	mov	r1, r4
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff fef6 	bl	8007310 <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	d14d      	bne.n	80075c4 <_printf_i+0x1c8>
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	b005      	add	sp, #20
 800752e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007532:	4839      	ldr	r0, [pc, #228]	; (8007618 <_printf_i+0x21c>)
 8007534:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	6821      	ldr	r1, [r4, #0]
 800753c:	1d1d      	adds	r5, r3, #4
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6015      	str	r5, [r2, #0]
 8007542:	060a      	lsls	r2, r1, #24
 8007544:	d50b      	bpl.n	800755e <_printf_i+0x162>
 8007546:	07ca      	lsls	r2, r1, #31
 8007548:	bf44      	itt	mi
 800754a:	f041 0120 	orrmi.w	r1, r1, #32
 800754e:	6021      	strmi	r1, [r4, #0]
 8007550:	b91b      	cbnz	r3, 800755a <_printf_i+0x15e>
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	f022 0220 	bic.w	r2, r2, #32
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	2210      	movs	r2, #16
 800755c:	e7b7      	b.n	80074ce <_printf_i+0xd2>
 800755e:	064d      	lsls	r5, r1, #25
 8007560:	bf48      	it	mi
 8007562:	b29b      	uxthmi	r3, r3
 8007564:	e7ef      	b.n	8007546 <_printf_i+0x14a>
 8007566:	4665      	mov	r5, ip
 8007568:	fbb3 f1f2 	udiv	r1, r3, r2
 800756c:	fb02 3311 	mls	r3, r2, r1, r3
 8007570:	5cc3      	ldrb	r3, [r0, r3]
 8007572:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007576:	460b      	mov	r3, r1
 8007578:	2900      	cmp	r1, #0
 800757a:	d1f5      	bne.n	8007568 <_printf_i+0x16c>
 800757c:	e7b9      	b.n	80074f2 <_printf_i+0xf6>
 800757e:	6813      	ldr	r3, [r2, #0]
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	6961      	ldr	r1, [r4, #20]
 8007584:	1d18      	adds	r0, r3, #4
 8007586:	6010      	str	r0, [r2, #0]
 8007588:	0628      	lsls	r0, r5, #24
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	d501      	bpl.n	8007592 <_printf_i+0x196>
 800758e:	6019      	str	r1, [r3, #0]
 8007590:	e002      	b.n	8007598 <_printf_i+0x19c>
 8007592:	066a      	lsls	r2, r5, #25
 8007594:	d5fb      	bpl.n	800758e <_printf_i+0x192>
 8007596:	8019      	strh	r1, [r3, #0]
 8007598:	2300      	movs	r3, #0
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	4665      	mov	r5, ip
 800759e:	e7b9      	b.n	8007514 <_printf_i+0x118>
 80075a0:	6813      	ldr	r3, [r2, #0]
 80075a2:	1d19      	adds	r1, r3, #4
 80075a4:	6011      	str	r1, [r2, #0]
 80075a6:	681d      	ldr	r5, [r3, #0]
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	2100      	movs	r1, #0
 80075ac:	4628      	mov	r0, r5
 80075ae:	f7f8 fe17 	bl	80001e0 <memchr>
 80075b2:	b108      	cbz	r0, 80075b8 <_printf_i+0x1bc>
 80075b4:	1b40      	subs	r0, r0, r5
 80075b6:	6060      	str	r0, [r4, #4]
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	2300      	movs	r3, #0
 80075be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c2:	e7a7      	b.n	8007514 <_printf_i+0x118>
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	462a      	mov	r2, r5
 80075c8:	4639      	mov	r1, r7
 80075ca:	4630      	mov	r0, r6
 80075cc:	47c0      	blx	r8
 80075ce:	3001      	adds	r0, #1
 80075d0:	d0aa      	beq.n	8007528 <_printf_i+0x12c>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	079b      	lsls	r3, r3, #30
 80075d6:	d413      	bmi.n	8007600 <_printf_i+0x204>
 80075d8:	68e0      	ldr	r0, [r4, #12]
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	4298      	cmp	r0, r3
 80075de:	bfb8      	it	lt
 80075e0:	4618      	movlt	r0, r3
 80075e2:	e7a3      	b.n	800752c <_printf_i+0x130>
 80075e4:	2301      	movs	r3, #1
 80075e6:	464a      	mov	r2, r9
 80075e8:	4639      	mov	r1, r7
 80075ea:	4630      	mov	r0, r6
 80075ec:	47c0      	blx	r8
 80075ee:	3001      	adds	r0, #1
 80075f0:	d09a      	beq.n	8007528 <_printf_i+0x12c>
 80075f2:	3501      	adds	r5, #1
 80075f4:	68e3      	ldr	r3, [r4, #12]
 80075f6:	9a03      	ldr	r2, [sp, #12]
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	42ab      	cmp	r3, r5
 80075fc:	dcf2      	bgt.n	80075e4 <_printf_i+0x1e8>
 80075fe:	e7eb      	b.n	80075d8 <_printf_i+0x1dc>
 8007600:	2500      	movs	r5, #0
 8007602:	f104 0919 	add.w	r9, r4, #25
 8007606:	e7f5      	b.n	80075f4 <_printf_i+0x1f8>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1ac      	bne.n	8007566 <_printf_i+0x16a>
 800760c:	7803      	ldrb	r3, [r0, #0]
 800760e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007612:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007616:	e76c      	b.n	80074f2 <_printf_i+0xf6>
 8007618:	08007e39 	.word	0x08007e39
 800761c:	08007e4a 	.word	0x08007e4a

08007620 <memmove>:
 8007620:	4288      	cmp	r0, r1
 8007622:	b510      	push	{r4, lr}
 8007624:	eb01 0302 	add.w	r3, r1, r2
 8007628:	d807      	bhi.n	800763a <memmove+0x1a>
 800762a:	1e42      	subs	r2, r0, #1
 800762c:	4299      	cmp	r1, r3
 800762e:	d00a      	beq.n	8007646 <memmove+0x26>
 8007630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007634:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007638:	e7f8      	b.n	800762c <memmove+0xc>
 800763a:	4283      	cmp	r3, r0
 800763c:	d9f5      	bls.n	800762a <memmove+0xa>
 800763e:	1881      	adds	r1, r0, r2
 8007640:	1ad2      	subs	r2, r2, r3
 8007642:	42d3      	cmn	r3, r2
 8007644:	d100      	bne.n	8007648 <memmove+0x28>
 8007646:	bd10      	pop	{r4, pc}
 8007648:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800764c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007650:	e7f7      	b.n	8007642 <memmove+0x22>
	...

08007654 <_free_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4605      	mov	r5, r0
 8007658:	2900      	cmp	r1, #0
 800765a:	d045      	beq.n	80076e8 <_free_r+0x94>
 800765c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007660:	1f0c      	subs	r4, r1, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	bfb8      	it	lt
 8007666:	18e4      	addlt	r4, r4, r3
 8007668:	f000 f8d2 	bl	8007810 <__malloc_lock>
 800766c:	4a1f      	ldr	r2, [pc, #124]	; (80076ec <_free_r+0x98>)
 800766e:	6813      	ldr	r3, [r2, #0]
 8007670:	4610      	mov	r0, r2
 8007672:	b933      	cbnz	r3, 8007682 <_free_r+0x2e>
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6014      	str	r4, [r2, #0]
 8007678:	4628      	mov	r0, r5
 800767a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800767e:	f000 b8c8 	b.w	8007812 <__malloc_unlock>
 8007682:	42a3      	cmp	r3, r4
 8007684:	d90c      	bls.n	80076a0 <_free_r+0x4c>
 8007686:	6821      	ldr	r1, [r4, #0]
 8007688:	1862      	adds	r2, r4, r1
 800768a:	4293      	cmp	r3, r2
 800768c:	bf04      	itt	eq
 800768e:	681a      	ldreq	r2, [r3, #0]
 8007690:	685b      	ldreq	r3, [r3, #4]
 8007692:	6063      	str	r3, [r4, #4]
 8007694:	bf04      	itt	eq
 8007696:	1852      	addeq	r2, r2, r1
 8007698:	6022      	streq	r2, [r4, #0]
 800769a:	6004      	str	r4, [r0, #0]
 800769c:	e7ec      	b.n	8007678 <_free_r+0x24>
 800769e:	4613      	mov	r3, r2
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	b10a      	cbz	r2, 80076a8 <_free_r+0x54>
 80076a4:	42a2      	cmp	r2, r4
 80076a6:	d9fa      	bls.n	800769e <_free_r+0x4a>
 80076a8:	6819      	ldr	r1, [r3, #0]
 80076aa:	1858      	adds	r0, r3, r1
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d10b      	bne.n	80076c8 <_free_r+0x74>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	4401      	add	r1, r0
 80076b4:	1858      	adds	r0, r3, r1
 80076b6:	4282      	cmp	r2, r0
 80076b8:	6019      	str	r1, [r3, #0]
 80076ba:	d1dd      	bne.n	8007678 <_free_r+0x24>
 80076bc:	6810      	ldr	r0, [r2, #0]
 80076be:	6852      	ldr	r2, [r2, #4]
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	4401      	add	r1, r0
 80076c4:	6019      	str	r1, [r3, #0]
 80076c6:	e7d7      	b.n	8007678 <_free_r+0x24>
 80076c8:	d902      	bls.n	80076d0 <_free_r+0x7c>
 80076ca:	230c      	movs	r3, #12
 80076cc:	602b      	str	r3, [r5, #0]
 80076ce:	e7d3      	b.n	8007678 <_free_r+0x24>
 80076d0:	6820      	ldr	r0, [r4, #0]
 80076d2:	1821      	adds	r1, r4, r0
 80076d4:	428a      	cmp	r2, r1
 80076d6:	bf04      	itt	eq
 80076d8:	6811      	ldreq	r1, [r2, #0]
 80076da:	6852      	ldreq	r2, [r2, #4]
 80076dc:	6062      	str	r2, [r4, #4]
 80076de:	bf04      	itt	eq
 80076e0:	1809      	addeq	r1, r1, r0
 80076e2:	6021      	streq	r1, [r4, #0]
 80076e4:	605c      	str	r4, [r3, #4]
 80076e6:	e7c7      	b.n	8007678 <_free_r+0x24>
 80076e8:	bd38      	pop	{r3, r4, r5, pc}
 80076ea:	bf00      	nop
 80076ec:	20000098 	.word	0x20000098

080076f0 <_malloc_r>:
 80076f0:	b570      	push	{r4, r5, r6, lr}
 80076f2:	1ccd      	adds	r5, r1, #3
 80076f4:	f025 0503 	bic.w	r5, r5, #3
 80076f8:	3508      	adds	r5, #8
 80076fa:	2d0c      	cmp	r5, #12
 80076fc:	bf38      	it	cc
 80076fe:	250c      	movcc	r5, #12
 8007700:	2d00      	cmp	r5, #0
 8007702:	4606      	mov	r6, r0
 8007704:	db01      	blt.n	800770a <_malloc_r+0x1a>
 8007706:	42a9      	cmp	r1, r5
 8007708:	d903      	bls.n	8007712 <_malloc_r+0x22>
 800770a:	230c      	movs	r3, #12
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	2000      	movs	r0, #0
 8007710:	bd70      	pop	{r4, r5, r6, pc}
 8007712:	f000 f87d 	bl	8007810 <__malloc_lock>
 8007716:	4a21      	ldr	r2, [pc, #132]	; (800779c <_malloc_r+0xac>)
 8007718:	6814      	ldr	r4, [r2, #0]
 800771a:	4621      	mov	r1, r4
 800771c:	b991      	cbnz	r1, 8007744 <_malloc_r+0x54>
 800771e:	4c20      	ldr	r4, [pc, #128]	; (80077a0 <_malloc_r+0xb0>)
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	b91b      	cbnz	r3, 800772c <_malloc_r+0x3c>
 8007724:	4630      	mov	r0, r6
 8007726:	f000 f863 	bl	80077f0 <_sbrk_r>
 800772a:	6020      	str	r0, [r4, #0]
 800772c:	4629      	mov	r1, r5
 800772e:	4630      	mov	r0, r6
 8007730:	f000 f85e 	bl	80077f0 <_sbrk_r>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d124      	bne.n	8007782 <_malloc_r+0x92>
 8007738:	230c      	movs	r3, #12
 800773a:	6033      	str	r3, [r6, #0]
 800773c:	4630      	mov	r0, r6
 800773e:	f000 f868 	bl	8007812 <__malloc_unlock>
 8007742:	e7e4      	b.n	800770e <_malloc_r+0x1e>
 8007744:	680b      	ldr	r3, [r1, #0]
 8007746:	1b5b      	subs	r3, r3, r5
 8007748:	d418      	bmi.n	800777c <_malloc_r+0x8c>
 800774a:	2b0b      	cmp	r3, #11
 800774c:	d90f      	bls.n	800776e <_malloc_r+0x7e>
 800774e:	600b      	str	r3, [r1, #0]
 8007750:	50cd      	str	r5, [r1, r3]
 8007752:	18cc      	adds	r4, r1, r3
 8007754:	4630      	mov	r0, r6
 8007756:	f000 f85c 	bl	8007812 <__malloc_unlock>
 800775a:	f104 000b 	add.w	r0, r4, #11
 800775e:	1d23      	adds	r3, r4, #4
 8007760:	f020 0007 	bic.w	r0, r0, #7
 8007764:	1ac3      	subs	r3, r0, r3
 8007766:	d0d3      	beq.n	8007710 <_malloc_r+0x20>
 8007768:	425a      	negs	r2, r3
 800776a:	50e2      	str	r2, [r4, r3]
 800776c:	e7d0      	b.n	8007710 <_malloc_r+0x20>
 800776e:	428c      	cmp	r4, r1
 8007770:	684b      	ldr	r3, [r1, #4]
 8007772:	bf16      	itet	ne
 8007774:	6063      	strne	r3, [r4, #4]
 8007776:	6013      	streq	r3, [r2, #0]
 8007778:	460c      	movne	r4, r1
 800777a:	e7eb      	b.n	8007754 <_malloc_r+0x64>
 800777c:	460c      	mov	r4, r1
 800777e:	6849      	ldr	r1, [r1, #4]
 8007780:	e7cc      	b.n	800771c <_malloc_r+0x2c>
 8007782:	1cc4      	adds	r4, r0, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	42a0      	cmp	r0, r4
 800778a:	d005      	beq.n	8007798 <_malloc_r+0xa8>
 800778c:	1a21      	subs	r1, r4, r0
 800778e:	4630      	mov	r0, r6
 8007790:	f000 f82e 	bl	80077f0 <_sbrk_r>
 8007794:	3001      	adds	r0, #1
 8007796:	d0cf      	beq.n	8007738 <_malloc_r+0x48>
 8007798:	6025      	str	r5, [r4, #0]
 800779a:	e7db      	b.n	8007754 <_malloc_r+0x64>
 800779c:	20000098 	.word	0x20000098
 80077a0:	2000009c 	.word	0x2000009c

080077a4 <_realloc_r>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	4607      	mov	r7, r0
 80077a8:	4614      	mov	r4, r2
 80077aa:	460e      	mov	r6, r1
 80077ac:	b921      	cbnz	r1, 80077b8 <_realloc_r+0x14>
 80077ae:	4611      	mov	r1, r2
 80077b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077b4:	f7ff bf9c 	b.w	80076f0 <_malloc_r>
 80077b8:	b922      	cbnz	r2, 80077c4 <_realloc_r+0x20>
 80077ba:	f7ff ff4b 	bl	8007654 <_free_r>
 80077be:	4625      	mov	r5, r4
 80077c0:	4628      	mov	r0, r5
 80077c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c4:	f000 f826 	bl	8007814 <_malloc_usable_size_r>
 80077c8:	42a0      	cmp	r0, r4
 80077ca:	d20f      	bcs.n	80077ec <_realloc_r+0x48>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4638      	mov	r0, r7
 80077d0:	f7ff ff8e 	bl	80076f0 <_malloc_r>
 80077d4:	4605      	mov	r5, r0
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d0f2      	beq.n	80077c0 <_realloc_r+0x1c>
 80077da:	4631      	mov	r1, r6
 80077dc:	4622      	mov	r2, r4
 80077de:	f7ff fc11 	bl	8007004 <memcpy>
 80077e2:	4631      	mov	r1, r6
 80077e4:	4638      	mov	r0, r7
 80077e6:	f7ff ff35 	bl	8007654 <_free_r>
 80077ea:	e7e9      	b.n	80077c0 <_realloc_r+0x1c>
 80077ec:	4635      	mov	r5, r6
 80077ee:	e7e7      	b.n	80077c0 <_realloc_r+0x1c>

080077f0 <_sbrk_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4c06      	ldr	r4, [pc, #24]	; (800780c <_sbrk_r+0x1c>)
 80077f4:	2300      	movs	r3, #0
 80077f6:	4605      	mov	r5, r0
 80077f8:	4608      	mov	r0, r1
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	f7fa f9c6 	bl	8001b8c <_sbrk>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	d102      	bne.n	800780a <_sbrk_r+0x1a>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	b103      	cbz	r3, 800780a <_sbrk_r+0x1a>
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	bd38      	pop	{r3, r4, r5, pc}
 800780c:	20000adc 	.word	0x20000adc

08007810 <__malloc_lock>:
 8007810:	4770      	bx	lr

08007812 <__malloc_unlock>:
 8007812:	4770      	bx	lr

08007814 <_malloc_usable_size_r>:
 8007814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007818:	1f18      	subs	r0, r3, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfbc      	itt	lt
 800781e:	580b      	ldrlt	r3, [r1, r0]
 8007820:	18c0      	addlt	r0, r0, r3
 8007822:	4770      	bx	lr

08007824 <_init>:
 8007824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007826:	bf00      	nop
 8007828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800782a:	bc08      	pop	{r3}
 800782c:	469e      	mov	lr, r3
 800782e:	4770      	bx	lr

08007830 <_fini>:
 8007830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007832:	bf00      	nop
 8007834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007836:	bc08      	pop	{r3}
 8007838:	469e      	mov	lr, r3
 800783a:	4770      	bx	lr
